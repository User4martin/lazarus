#
# Don't edit, this file is generated by FPCMake Version 2.0.0 [2007/11/12]
#
default: all
MAKEFILETARGETS=i386-linux i386-go32v2 i386-win32 i386-os2 i386-freebsd i386-beos i386-netbsd i386-solaris i386-qnx i386-netware i386-openbsd i386-wdosx i386-darwin i386-emx i386-watcom i386-netwlibc i386-wince i386-embedded i386-symbian m68k-linux m68k-freebsd m68k-netbsd m68k-amiga m68k-atari m68k-openbsd m68k-palmos m68k-embedded powerpc-linux powerpc-netbsd powerpc-amiga powerpc-macos powerpc-darwin powerpc-morphos powerpc-embedded sparc-linux sparc-netbsd sparc-solaris sparc-embedded x86_64-linux x86_64-freebsd x86_64-darwin x86_64-win64 x86_64-embedded arm-linux arm-palmos arm-wince arm-gba arm-nds arm-embedded arm-symbian powerpc64-linux powerpc64-darwin powerpc64-embedded
BSDs = freebsd netbsd openbsd darwin
UNIXs = linux $(BSDs) solaris qnx
LIMIT83fs = go32v2 os2 emx watcom
OSNeedsComspecToRunBatch = go32v2 watcom
FORCE:
.PHONY: FORCE
override PATH:=$(patsubst %/,%,$(subst \,/,$(PATH)))
ifneq ($(findstring darwin,$(OSTYPE)),)
inUnix=1 #darwin
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
ifeq ($(findstring ;,$(PATH)),)
inUnix=1
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
SEARCHPATH:=$(subst ;, ,$(PATH))
endif
endif
SEARCHPATH+=$(patsubst %/,%,$(subst \,/,$(dir $(MAKE))))
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(SEARCHPATH))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(SEARCHPATH))))
ifeq ($(PWD),)
$(error You need the GNU utils package to use this Makefile)
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=
endif
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=.exe
endif
ifndef inUnix
ifeq ($(OS),Windows_NT)
inWinNT=1
else
ifdef OS2_SHELL
inOS2=1
endif
endif
else
ifneq ($(findstring cygdrive,$(PATH)),)
inCygWin=1
endif
endif
ifdef inUnix
SRCBATCHEXT=.sh
else
ifdef inOS2
SRCBATCHEXT=.cmd
else
SRCBATCHEXT=.bat
endif
endif
ifdef COMSPEC
ifneq ($(findstring $(OS_SOURCE),$(OSNeedsComspecToRunBatch)),)
RUNBATCH=$(COMSPEC) /C
endif
endif
ifdef inUnix
PATHSEP=/
else
PATHSEP:=$(subst /,\,/)
ifdef inCygWin
PATHSEP=/
endif
endif
ifdef PWD
BASEDIR:=$(subst \,/,$(shell $(PWD)))
ifdef inCygWin
ifneq ($(findstring /cygdrive/,$(BASEDIR)),)
BASENODIR:=$(patsubst /cygdrive%,%,$(BASEDIR))
BASEDRIVE:=$(firstword $(subst /, ,$(BASENODIR)))
BASEDIR:=$(subst /cygdrive/$(BASEDRIVE)/,$(BASEDRIVE):/,$(BASEDIR))
endif
endif
else
BASEDIR=.
endif
ifdef inOS2
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO=echo
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
endif
ifndef FPC
ifdef PP
FPC=$(PP)
endif
endif
ifndef FPC
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
ifneq ($(CPU_TARGET),)
FPC:=$(shell $(FPCPROG) -P$(CPU_TARGET) -PB)
else
FPC:=$(shell $(FPCPROG) -PB)
endif
ifneq ($(findstring Error,$(FPC)),)
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
else
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
endif
override FPC:=$(subst $(SRCEXEEXT),,$(FPC))
override FPC:=$(subst \,/,$(FPC))$(SRCEXEEXT)
FOUNDFPC:=$(strip $(wildcard $(FPC)))
ifeq ($(FOUNDFPC),)
FOUNDFPC=$(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))
ifeq ($(FOUNDFPC),)
$(error Compiler $(FPC) not found)
endif
endif
ifndef FPC_COMPILERINFO
FPC_COMPILERINFO:=$(shell $(FPC) -iVSPTPSOTO)
endif
ifndef FPC_VERSION
FPC_VERSION:=$(word 1,$(FPC_COMPILERINFO))
endif
export FPC FPC_VERSION FPC_COMPILERINFO
unexport CHECKDEPEND ALLDEPENDENCIES
ifndef CPU_TARGET
ifdef CPU_TARGET_DEFAULT
CPU_TARGET=$(CPU_TARGET_DEFAULT)
endif
endif
ifndef OS_TARGET
ifdef OS_TARGET_DEFAULT
OS_TARGET=$(OS_TARGET_DEFAULT)
endif
endif
ifneq ($(words $(FPC_COMPILERINFO)),5)
FPC_COMPILERINFO+=$(shell $(FPC) -iSP)
FPC_COMPILERINFO+=$(shell $(FPC) -iTP)
FPC_COMPILERINFO+=$(shell $(FPC) -iSO)
FPC_COMPILERINFO+=$(shell $(FPC) -iTO)
endif
ifndef CPU_SOURCE
CPU_SOURCE:=$(word 2,$(FPC_COMPILERINFO))
endif
ifndef CPU_TARGET
CPU_TARGET:=$(word 3,$(FPC_COMPILERINFO))
endif
ifndef OS_SOURCE
OS_SOURCE:=$(word 4,$(FPC_COMPILERINFO))
endif
ifndef OS_TARGET
OS_TARGET:=$(word 5,$(FPC_COMPILERINFO))
endif
FULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
FULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
SOURCESUFFIX=$(OS_SOURCE)
else
TARGETSUFFIX=$(FULL_TARGET)
SOURCESUFFIX=$(FULL_SOURCE)
endif
ifneq ($(FULL_TARGET),$(FULL_SOURCE))
CROSSCOMPILE=1
endif
ifeq ($(findstring makefile,$(MAKECMDGOALS)),)
ifeq ($(findstring $(FULL_TARGET),$(MAKEFILETARGETS)),)
$(error The Makefile doesn't support target $(FULL_TARGET), please run fpcmake first)
endif
endif
ifneq ($(findstring $(OS_TARGET),$(BSDs)),)
BSDhier=1
endif
ifeq ($(OS_TARGET),linux)
linuxHier=1
endif
export OS_TARGET OS_SOURCE CPU_TARGET CPU_SOURCE FULL_TARGET FULL_SOURCE TARGETSUFFIX SOURCESUFFIX CROSSCOMPILE
ifdef FPCDIR
override FPCDIR:=$(subst \,/,$(FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
else
override FPCDIR=wrong
endif
ifdef DEFAULT_FPCDIR
ifeq ($(FPCDIR),wrong)
override FPCDIR:=$(subst \,/,$(DEFAULT_FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
endif
endif
ifeq ($(FPCDIR),wrong)
ifdef inUnix
override FPCDIR=/usr/local/lib/fpc/$(FPC_VERSION)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
endif
else
override FPCDIR:=$(subst /$(FPC),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))))
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(BASEDIR)
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=c:/pp
endif
endif
endif
endif
endif
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(FPCDIR)/bin/$(TARGETSUFFIX))
endif
ifndef BINUTILSPREFIX
ifndef CROSSBINDIR
ifdef CROSSCOMPILE
BINUTILSPREFIX=$(CPU_TARGET)-$(OS_TARGET)-
endif
endif
endif
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(TARGETSUFFIX))
ifeq ($(UNITSDIR),)
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(OS_TARGET))
endif
PACKAGESDIR:=$(wildcard $(FPCDIR) $(FPCDIR)/packages $(FPCDIR)/packages/base $(FPCDIR)/packages/extra)
override PACKAGE_NAME=lazarus
override PACKAGE_VERSION=0.9b
RCPP?=$(strip $(firstword cpp$(SRCEXEEXT)))
LAZARUS_INSTALL_DIR=$(INSTALL_PREFIX)/share/lazarus
INSTALL_MAN_DIR=$(INSTALL_PREFIX)/share/man
ifneq ($(findstring $(OS_TARGET),win32 win64),)
LAZARUS_INSTALL_DIR=C:\lazarus
endif
ifneq ($(findstring $(OS_TARGET),freebsd),)
LAZARUS_INSTALL_DIR=/usr/local/lazarus
endif
ifeq ($(FULL_TARGET),i386-linux)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-win32)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-os2)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-beos)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-solaris)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-qnx)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-netware)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-darwin)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-emx)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-watcom)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-wince)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-embedded)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-symbian)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),m68k-linux)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),m68k-atari)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),powerpc-macos)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),sparc-linux)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),arm-linux)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),arm-palmos)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),arm-wince)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),arm-gba)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),arm-nds)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),arm-embedded)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),arm-symbian)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override TARGET_DIRS+=lcl components packager/registration ideintf designer packager
endif
ifeq ($(FULL_TARGET),i386-linux)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-win32)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-os2)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-beos)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-solaris)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-qnx)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-netware)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-darwin)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-emx)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-watcom)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-wince)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-embedded)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-symbian)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),m68k-linux)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),m68k-atari)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),powerpc-macos)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),sparc-linux)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),arm-linux)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),arm-palmos)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),arm-wince)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),arm-gba)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),arm-nds)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),arm-embedded)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),arm-symbian)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override TARGET_PROGRAMS+=lazarus startlazarus
endif
ifeq ($(FULL_TARGET),i386-linux)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-win32)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-os2)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-beos)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-solaris)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-qnx)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-netware)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-darwin)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-emx)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-watcom)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-wince)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-embedded)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-symbian)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),m68k-linux)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),m68k-atari)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),powerpc-macos)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),sparc-linux)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),arm-linux)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),arm-palmos)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),arm-wince)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),arm-gba)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),arm-nds)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),arm-embedded)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),arm-symbian)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override TARGET_EXAMPLEDIRS+=examples
endif
ifeq ($(FULL_TARGET),i386-linux)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-win32)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-os2)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-beos)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-solaris)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-qnx)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-netware)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-darwin)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-emx)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-watcom)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-wince)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-embedded)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),i386-symbian)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),m68k-linux)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),m68k-atari)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),powerpc-macos)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),sparc-linux)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),arm-linux)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),arm-palmos)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),arm-wince)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),arm-gba)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),arm-nds)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),arm-embedded)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),arm-symbian)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override CLEAN_FILES+=$(wildcard *$(OEXT)) $(wildcard *$(PPUEXT)) $(wildcard *$(RSTEXT))
endif
override INSTALL_BASEDIR=share/lazarus
override INSTALL_FPCPACKAGE=n
override DIST_DESTDIR=$(BASEDIR)/dist
ifdef REQUIRE_UNITSDIR
override UNITSDIR+=$(REQUIRE_UNITSDIR)
endif
ifdef REQUIRE_PACKAGESDIR
override PACKAGESDIR+=$(REQUIRE_PACKAGESDIR)
endif
ifdef ZIPINSTALL
ifneq ($(findstring $(OS_TARGET),$(UNIXs)),)
UNIXHier=1
endif
else
ifneq ($(findstring $(OS_SOURCE),$(UNIXs)),)
UNIXHier=1
endif
endif
ifndef INSTALL_PREFIX
ifdef PREFIX
INSTALL_PREFIX=$(PREFIX)
endif
endif
ifndef INSTALL_PREFIX
ifdef UNIXHier
INSTALL_PREFIX=/usr/local
else
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=/pp
else
INSTALL_BASEDIR:=/$(PACKAGE_NAME)
endif
endif
endif
export INSTALL_PREFIX
ifdef INSTALL_FPCSUBDIR
export INSTALL_FPCSUBDIR
endif
ifndef DIST_DESTDIR
DIST_DESTDIR:=$(BASEDIR)
endif
export DIST_DESTDIR
ifndef COMPILER_UNITTARGETDIR
ifdef PACKAGEDIR_MAIN
COMPILER_UNITTARGETDIR=$(PACKAGEDIR_MAIN)/units/$(TARGETSUFFIX)
else
COMPILER_UNITTARGETDIR=units/$(TARGETSUFFIX)
endif
endif
ifndef COMPILER_TARGETDIR
COMPILER_TARGETDIR=.
endif
ifndef INSTALL_BASEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/fpc/$(FPC_VERSION)
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/$(PACKAGE_NAME)
endif
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)
endif
endif
ifndef INSTALL_BINDIR
ifdef UNIXHier
INSTALL_BINDIR:=$(INSTALL_PREFIX)/bin
else
INSTALL_BINDIR:=$(INSTALL_BASEDIR)/bin
ifdef INSTALL_FPCPACKAGE
ifdef CROSSCOMPILE
ifdef CROSSINSTALL
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(SOURCESUFFIX)
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
endif
endif
endif
ifndef INSTALL_UNITDIR
INSTALL_UNITDIR:=$(INSTALL_BASEDIR)/units/$(TARGETSUFFIX)
ifdef INSTALL_FPCPACKAGE
ifdef PACKAGE_NAME
INSTALL_UNITDIR:=$(INSTALL_UNITDIR)/$(PACKAGE_NAME)
endif
endif
endif
ifndef INSTALL_LIBDIR
ifdef UNIXHier
INSTALL_LIBDIR:=$(INSTALL_PREFIX)/lib
else
INSTALL_LIBDIR:=$(INSTALL_UNITDIR)
endif
endif
ifndef INSTALL_SOURCEDIR
ifdef UNIXHier
ifdef BSDhier
SRCPREFIXDIR=share/src
else
ifdef linuxHier
SRCPREFIXDIR=share/src
else
SRCPREFIXDIR=src
endif
endif
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source
endif
endif
endif
ifndef INSTALL_DOCDIR
ifdef UNIXHier
ifdef BSDhier
DOCPREFIXDIR=share/doc
else
ifdef linuxHier
DOCPREFIXDIR=share/doc
else
DOCPREFIXDIR=doc
endif
endif
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc
endif
endif
endif
ifndef INSTALL_EXAMPLEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/fpc-$(FPC_VERSION)/examples/$(PACKAGE_NAME)
endif
endif
else
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
endif
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples/$(PACKAGE_NAME)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples
endif
endif
endif
ifndef INSTALL_DATADIR
INSTALL_DATADIR=$(INSTALL_BASEDIR)
endif
ifndef INSTALL_SHAREDDIR
INSTALL_SHAREDDIR=$(INSTALL_PREFIX)/lib
endif
ifdef CROSSCOMPILE
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(CROSSTARGETDIR)/bin/$(SOURCESUFFIX))
ifeq ($(CROSSBINDIR),)
CROSSBINDIR:=$(wildcard $(INSTALL_BASEDIR)/cross/$(TARGETSUFFIX)/bin/$(FULL_SOURCE))
endif
endif
else
CROSSBINDIR=
endif
BATCHEXT=.bat
LOADEREXT=.as
EXEEXT=.exe
PPLEXT=.ppl
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.so
SHAREDLIBPREFIX=libfp
STATICLIBPREFIX=libp
IMPORTLIBPREFIX=libimp
RSTEXT=.rst
ifeq ($(findstring 1.0.,$(FPC_VERSION)),)
ifeq ($(OS_TARGET),go32v1)
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
OEXT=.obj
ASMEXT=.asm
SHAREDLIBEXT=.dll
SHORTSUFFIX=wat
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
endif
ifeq ($(OS_TARGET),emx)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=emx
ECHO=echo
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),morphos)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=mos
endif
ifeq ($(OS_TARGET),atari)
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nw
endif
ifeq ($(OS_TARGET),netwlibc)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nwl
endif
ifeq ($(OS_TARGET),macos)
BATCHEXT=
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
endif
ifeq ($(OS_TARGET),darwin)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=dwn
endif
ifeq ($(OS_TARGET),gba)
EXEEXT=.gba
SHAREDLIBEXT=.so
SHORTSUFFIX=gba
endif
ifeq ($(OS_TARGET),symbian)
SHAREDLIBEXT=.dll
SHORTSUFFIX=symbian
endif
else
ifeq ($(OS_TARGET),go32v1)
PPUEXT=.pp1
OEXT=.o1
ASMEXT=.s1
SMARTEXT=.sl1
STATICLIBEXT=.a1
SHAREDLIBEXT=.so1
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
SHORTSUFFIX=wat
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
PPUEXT=.ppw
OEXT=.ow
ASMEXT=.sw
SMARTEXT=.slw
STATICLIBEXT=.aw
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
PPUEXT=.ppo
ASMEXT=.so2
OEXT=.oo2
AOUTEXT=.out
SMARTEXT=.sl2
STATICLIBPREFIX=
STATICLIBEXT=.ao2
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),atari)
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
STATICLIBPREFIX=
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.nlm
EXEEXT=.nlm
SHORTSUFFIX=nw
endif
ifeq ($(OS_TARGET),netwlibc)
STATICLIBPREFIX=
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.nlm
EXEEXT=.nlm
SHORTSUFFIX=nwl
endif
ifeq ($(OS_TARGET),macos)
BATCHEXT=
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
endif
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
FPCMADE=fpcmade.$(SHORTSUFFIX)
ZIPSUFFIX=$(SHORTSUFFIX)
ZIPCROSSPREFIX=
ZIPSOURCESUFFIX=src
ZIPEXAMPLESUFFIX=exm
else
FPCMADE=fpcmade.$(TARGETSUFFIX)
ZIPSOURCESUFFIX=.source
ZIPEXAMPLESUFFIX=.examples
ifdef CROSSCOMPILE
ZIPSUFFIX=.$(SOURCESUFFIX)
ZIPCROSSPREFIX=$(TARGETSUFFIX)-
else
ZIPSUFFIX=.$(TARGETSUFFIX)
ZIPCROSSPREFIX=
endif
endif
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO= __missing_command_ECHO
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
ifndef DATE
DATE:=$(strip $(wildcard $(addsuffix /gdate$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE:=$(strip $(wildcard $(addsuffix /date$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE= __missing_command_DATE
else
DATE:=$(firstword $(DATE))
endif
else
DATE:=$(firstword $(DATE))
endif
endif
export DATE
ifndef GINSTALL
GINSTALL:=$(strip $(wildcard $(addsuffix /ginstall$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL:=$(strip $(wildcard $(addsuffix /install$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL= __missing_command_GINSTALL
else
GINSTALL:=$(firstword $(GINSTALL))
endif
else
GINSTALL:=$(firstword $(GINSTALL))
endif
endif
export GINSTALL
ifndef CPPROG
CPPROG:=$(strip $(wildcard $(addsuffix /cp$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(CPPROG),)
CPPROG= __missing_command_CPPROG
else
CPPROG:=$(firstword $(CPPROG))
endif
endif
export CPPROG
ifndef RMPROG
RMPROG:=$(strip $(wildcard $(addsuffix /rm$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(RMPROG),)
RMPROG= __missing_command_RMPROG
else
RMPROG:=$(firstword $(RMPROG))
endif
endif
export RMPROG
ifndef MVPROG
MVPROG:=$(strip $(wildcard $(addsuffix /mv$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MVPROG),)
MVPROG= __missing_command_MVPROG
else
MVPROG:=$(firstword $(MVPROG))
endif
endif
export MVPROG
ifndef MKDIRPROG
MKDIRPROG:=$(strip $(wildcard $(addsuffix /gmkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG:=$(strip $(wildcard $(addsuffix /mkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG= __missing_command_MKDIRPROG
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
endif
export MKDIRPROG
ifndef ECHOREDIR
ifndef inUnix
ECHOREDIR=echo
else
ECHOREDIR=$(ECHO)
endif
endif
ifndef COPY
COPY:=$(CPPROG) -fp
endif
ifndef COPYTREE
COPYTREE:=$(CPPROG) -Rfp
endif
ifndef MKDIRTREE
MKDIRTREE:=$(MKDIRPROG) -p
endif
ifndef MOVE
MOVE:=$(MVPROG) -f
endif
ifndef DEL
DEL:=$(RMPROG) -f
endif
ifndef DELTREE
DELTREE:=$(RMPROG) -rf
endif
ifndef INSTALL
ifdef inUnix
INSTALL:=$(GINSTALL) -c -m 644
else
INSTALL:=$(COPY)
endif
endif
ifndef INSTALLEXE
ifdef inUnix
INSTALLEXE:=$(GINSTALL) -c -m 755
else
INSTALLEXE:=$(COPY)
endif
endif
ifndef MKDIR
MKDIR:=$(GINSTALL) -m 755 -d
endif
export ECHOREDIR COPY COPYTREE MOVE DEL DELTREE INSTALL INSTALLEXE MKDIR
ifndef PPUMOVE
PPUMOVE:=$(strip $(wildcard $(addsuffix /ppumove$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUMOVE),)
PPUMOVE= __missing_command_PPUMOVE
else
PPUMOVE:=$(firstword $(PPUMOVE))
endif
endif
export PPUMOVE
ifndef FPCMAKE
FPCMAKE:=$(strip $(wildcard $(addsuffix /fpcmake$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(FPCMAKE),)
FPCMAKE= __missing_command_FPCMAKE
else
FPCMAKE:=$(firstword $(FPCMAKE))
endif
endif
export FPCMAKE
ifndef ZIPPROG
ZIPPROG:=$(strip $(wildcard $(addsuffix /zip$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ZIPPROG),)
ZIPPROG= __missing_command_ZIPPROG
else
ZIPPROG:=$(firstword $(ZIPPROG))
endif
endif
export ZIPPROG
ifndef TARPROG
TARPROG:=$(strip $(wildcard $(addsuffix /gtar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG:=$(strip $(wildcard $(addsuffix /tar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG= __missing_command_TARPROG
else
TARPROG:=$(firstword $(TARPROG))
endif
else
TARPROG:=$(firstword $(TARPROG))
endif
endif
export TARPROG
ASNAME=$(BINUTILSPREFIX)as
LDNAME=$(BINUTILSPREFIX)ld
ARNAME=$(BINUTILSPREFIX)ar
RCNAME=$(BINUTILSPREFIX)rc
ifneq ($(findstring 1.0.,$(FPC_VERSION)),)
ifeq ($(OS_TARGET),win32)
ifeq ($(CROSSBINDIR),)
ASNAME=asw
LDNAME=ldw
ARNAME=arw
endif
endif
endif
ifndef ASPROG
ifdef CROSSBINDIR
ASPROG=$(CROSSBINDIR)/$(ASNAME)$(SRCEXEEXT)
else
ASPROG=$(ASNAME)
endif
endif
ifndef LDPROG
ifdef CROSSBINDIR
LDPROG=$(CROSSBINDIR)/$(LDNAME)$(SRCEXEEXT)
else
LDPROG=$(LDNAME)
endif
endif
ifndef RCPROG
ifdef CROSSBINDIR
RCPROG=$(CROSSBINDIR)/$(RCNAME)$(SRCEXEEXT)
else
RCPROG=$(RCNAME)
endif
endif
ifndef ARPROG
ifdef CROSSBINDIR
ARPROG=$(CROSSBINDIR)/$(ARNAME)$(SRCEXEEXT)
else
ARPROG=$(ARNAME)
endif
endif
AS=$(ASPROG)
LD=$(LDPROG)
RC=$(RCPROG)
AR=$(ARPROG)
PPAS=ppas$(SRCBATCHEXT)
ifdef inUnix
LDCONFIG=ldconfig
else
LDCONFIG=
endif
ifdef DATE
DATESTR:=$(shell $(DATE) +%Y%m%d)
else
DATESTR=
endif
ifndef UPXPROG
ifeq ($(OS_TARGET),go32v2)
UPXPROG:=1
endif
ifeq ($(OS_TARGET),win32)
UPXPROG:=1
endif
ifdef UPXPROG
UPXPROG:=$(strip $(wildcard $(addsuffix /upx$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(UPXPROG),)
UPXPROG=
else
UPXPROG:=$(firstword $(UPXPROG))
endif
else
UPXPROG=
endif
endif
export UPXPROG
ZIPOPT=-9
ZIPEXT=.zip
ifeq ($(USETAR),bz2)
TAROPT=vj
TAREXT=.tar.bz2
else
TAROPT=vz
TAREXT=.tar.gz
endif
override REQUIRE_PACKAGES=rtl regexpr
ifeq ($(FULL_TARGET),i386-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-win32)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-os2)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-beos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-solaris)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-qnx)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-netware)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-wdosx)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-emx)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-watcom)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-wince)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),i386-symbian)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),m68k-atari)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),m68k-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),powerpc-macos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),sparc-solaris)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),sparc-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),x86_64-win64)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),arm-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),arm-palmos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),arm-wince)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),arm-gba)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),arm-nds)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),arm-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),arm-symbian)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_REGEXPR=1
endif
ifdef REQUIRE_PACKAGES_RTL
PACKAGEDIR_RTL:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /rtl/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_RTL),)
ifneq ($(wildcard $(PACKAGEDIR_RTL)/units/$(TARGETSUFFIX)),)
UNITDIR_RTL=$(PACKAGEDIR_RTL)/units/$(TARGETSUFFIX)
else
UNITDIR_RTL=$(PACKAGEDIR_RTL)
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_RTL)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_RTL) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_RTL)/$(FPCMADE)
endif
else
PACKAGEDIR_RTL=
UNITDIR_RTL:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /rtl/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_RTL),)
UNITDIR_RTL:=$(firstword $(UNITDIR_RTL))
else
UNITDIR_RTL=
endif
endif
ifdef UNITDIR_RTL
override COMPILER_UNITDIR+=$(UNITDIR_RTL)
endif
endif
ifdef REQUIRE_PACKAGES_REGEXPR
PACKAGEDIR_REGEXPR:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /regexpr/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_REGEXPR),)
ifneq ($(wildcard $(PACKAGEDIR_REGEXPR)/units/$(TARGETSUFFIX)),)
UNITDIR_REGEXPR=$(PACKAGEDIR_REGEXPR)/units/$(TARGETSUFFIX)
else
UNITDIR_REGEXPR=$(PACKAGEDIR_REGEXPR)
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_REGEXPR)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_REGEXPR) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_REGEXPR)/$(FPCMADE)
endif
else
PACKAGEDIR_REGEXPR=
UNITDIR_REGEXPR:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /regexpr/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_REGEXPR),)
UNITDIR_REGEXPR:=$(firstword $(UNITDIR_REGEXPR))
else
UNITDIR_REGEXPR=
endif
endif
ifdef UNITDIR_REGEXPR
override COMPILER_UNITDIR+=$(UNITDIR_REGEXPR)
endif
endif
ifndef NOCPUDEF
override FPCOPTDEF=$(CPU_TARGET)
endif
ifneq ($(OS_TARGET),$(OS_SOURCE))
override FPCOPT+=-T$(OS_TARGET)
endif
ifneq ($(CPU_TARGET),$(CPU_SOURCE))
override FPCOPT+=-P$(CPU_TARGET)
endif
ifeq ($(OS_SOURCE),openbsd)
override FPCOPT+=-FD$(NEW_BINUTILS_PATH)
endif
ifndef CROSSBOOTSTRAP
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-XP$(BINUTILSPREFIX)
endif
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-Xr$(RLINKPATH)
endif
endif
ifdef UNITDIR
override FPCOPT+=$(addprefix -Fu,$(UNITDIR))
endif
ifdef LIBDIR
override FPCOPT+=$(addprefix -Fl,$(LIBDIR))
endif
ifdef OBJDIR
override FPCOPT+=$(addprefix -Fo,$(OBJDIR))
endif
ifdef INCDIR
override FPCOPT+=$(addprefix -Fi,$(INCDIR))
endif
ifdef LINKSMART
override FPCOPT+=-XX
endif
ifdef CREATESMART
override FPCOPT+=-CX
endif
ifdef DEBUG
override FPCOPT+=-gl
override FPCOPTDEF+=DEBUG
endif
ifdef RELEASE
ifneq ($(findstring 2.0.,$(FPC_VERSION)),)
ifeq ($(CPU_TARGET),i386)
FPCCPUOPT:=-OG2p3
endif
ifeq ($(CPU_TARGET),powerpc)
FPCCPUOPT:=-O1r
endif
else
FPCCPUOPT:=-O2
endif
override FPCOPT+=-Ur -Xs $(FPCCPUOPT) -n
override FPCOPTDEF+=RELEASE
endif
ifdef STRIP
override FPCOPT+=-Xs
endif
ifdef OPTIMIZE
override FPCOPT+=-O2
endif
ifdef VERBOSE
override FPCOPT+=-vwni
endif
ifdef COMPILER_OPTIONS
override FPCOPT+=$(COMPILER_OPTIONS)
endif
ifdef COMPILER_UNITDIR
override FPCOPT+=$(addprefix -Fu,$(COMPILER_UNITDIR))
endif
ifdef COMPILER_LIBRARYDIR
override FPCOPT+=$(addprefix -Fl,$(COMPILER_LIBRARYDIR))
endif
ifdef COMPILER_OBJECTDIR
override FPCOPT+=$(addprefix -Fo,$(COMPILER_OBJECTDIR))
endif
ifdef COMPILER_INCLUDEDIR
override FPCOPT+=$(addprefix -Fi,$(COMPILER_INCLUDEDIR))
endif
ifdef CROSSBINDIR
override FPCOPT+=-FD$(CROSSBINDIR)
endif
ifdef COMPILER_TARGETDIR
override FPCOPT+=-FE$(COMPILER_TARGETDIR)
ifeq ($(COMPILER_TARGETDIR),.)
override TARGETDIRPREFIX=
else
override TARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
endif
ifdef COMPILER_UNITTARGETDIR
override FPCOPT+=-FU$(COMPILER_UNITTARGETDIR)
ifeq ($(COMPILER_UNITTARGETDIR),.)
override UNITTARGETDIRPREFIX=
else
override UNITTARGETDIRPREFIX=$(COMPILER_UNITTARGETDIR)/
endif
else
ifdef COMPILER_TARGETDIR
override COMPILER_UNITTARGETDIR=$(COMPILER_TARGETDIR)
override UNITTARGETDIRPREFIX=$(TARGETDIRPREFIX)
endif
endif
ifdef CREATESHARED
override FPCOPT+=-Cg
ifeq ($(CPU_TARGET),i386)
override FPCOPT+=-Aas
endif
endif
ifeq ($(findstring 2.0.,$(FPC_VERSION)),)
ifeq ($(OS_TARGET),linux)
ifeq ($(CPU_TARGET),x86_64)
override FPCOPT+=-Cg
endif
endif
endif
ifdef LINKSHARED
endif
ifdef OPT
override FPCOPT+=$(OPT)
endif
ifdef FPCOPTDEF
override FPCOPT+=$(addprefix -d,$(FPCOPTDEF))
endif
ifdef CFGFILE
override FPCOPT+=@$(CFGFILE)
endif
ifdef USEENV
override FPCEXTCMD:=$(FPCOPT)
override FPCOPT:=!FPCEXTCMD
export FPCEXTCMD
endif
override AFULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
override AFULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifneq ($(AFULL_TARGET),$(AFULL_SOURCE))
override ACROSSCOMPILE=1
endif
ifdef ACROSSCOMPILE
override FPCOPT+=$(CROSSOPT)
endif
override COMPILER:=$(FPC) $(FPCOPT)
ifeq (,$(findstring -s ,$(COMPILER)))
EXECPPAS=
else
ifeq ($(FULL_SOURCE),$(FULL_TARGET))
ifdef RUNBATCH
EXECPPAS:=@$(RUNBATCH) $(PPAS)
else
EXECPPAS:=@$(PPAS)
endif
endif
endif
.PHONY: fpc_exes
ifndef CROSSINSTALL
ifneq ($(TARGET_PROGRAMS),)
override EXEFILES=$(addsuffix $(EXEEXT),$(TARGET_PROGRAMS))
override EXEOFILES:=$(addsuffix $(OEXT),$(TARGET_PROGRAMS)) $(addprefix $(STATICLIBPREFIX),$(addsuffix $(STATICLIBEXT),$(TARGET_PROGRAMS))) $(addprefix $(IMPORTLIBPREFIX),$(addsuffix $(STATICLIBEXT),$(TARGET_PROGRAMS)))
override ALLTARGET+=fpc_exes
override INSTALLEXEFILES+=$(EXEFILES)
override CLEANEXEFILES+=$(EXEFILES) $(EXEOFILES)
ifeq ($(OS_TARGET),os2)
override CLEANEXEFILES+=$(addsuffix $(AOUTEXT),$(TARGET_PROGRAMS))
endif
ifeq ($(OS_TARGET),emx)
override CLEANEXEFILES+=$(addsuffix $(AOUTEXT),$(TARGET_PROGRAMS))
endif
endif
endif
fpc_exes: $(COMPILER_TARGETDIR) $(COMPILER_UNITTARGETDIR) $(EXEFILES)
ifdef TARGET_RSTS
override RSTFILES=$(addsuffix $(RSTEXT),$(TARGET_RSTS))
override CLEANRSTFILES+=$(RSTFILES)
endif
.PHONY: fpc_examples
ifneq ($(TARGET_EXAMPLES),)
HASEXAMPLES=1
override EXAMPLESOURCEFILES:=$(wildcard $(addsuffix .pp,$(TARGET_EXAMPLES)) $(addsuffix .pas,$(TARGET_EXAMPLES)) $(addsuffix .lpr,$(TARGET_EXAMPLES)) $(addsuffix .dpr,$(TARGET_EXAMPLES)))
override EXAMPLEFILES:=$(addsuffix $(EXEEXT),$(TARGET_EXAMPLES))
override EXAMPLEOFILES:=$(addsuffix $(OEXT),$(TARGET_EXAMPLES)) $(addprefix $(STATICLIBPREFIX),$(addsuffix $(STATICLIBEXT),$(TARGET_EXAMPLES))) $(addprefix $(IMPORTLIBPREFIX),$(addsuffix $(STATICLIBEXT),$(TARGET_EXAMPLES)))
override CLEANEXEFILES+=$(EXAMPLEFILES) $(EXAMPLEOFILES)
ifeq ($(OS_TARGET),os2)
override CLEANEXEFILES+=$(addsuffix $(AOUTEXT),$(TARGET_EXAMPLES))
endif
ifeq ($(OS_TARGET),emx)
override CLEANEXEFILES+=$(addsuffix $(AOUTEXT),$(TARGET_EXAMPLES))
endif
endif
ifneq ($(TARGET_EXAMPLEDIRS),)
HASEXAMPLES=1
endif
fpc_examples: all $(EXAMPLEFILES) $(addsuffix _all,$(TARGET_EXAMPLEDIRS))
.PHONY: fpc_all fpc_smart fpc_debug fpc_release fpc_shared
$(FPCMADE): $(ALLDEPENDENCIES) $(ALLTARGET)
	@$(ECHOREDIR) Compiled > $(FPCMADE)
fpc_all: $(FPCMADE)
fpc_smart:
	$(MAKE) all LINKSMART=1 CREATESMART=1
fpc_debug:
	$(MAKE) all DEBUG=1
fpc_release:
	$(MAKE) all RELEASE=1
.SUFFIXES: $(EXEEXT) $(PPUEXT) $(OEXT) .pas .lpr .dpr .pp .rc .res
$(COMPILER_UNITTARGETDIR):
	$(MKDIRTREE) $(COMPILER_UNITTARGETDIR)
$(COMPILER_TARGETDIR):
	$(MKDIRTREE) $(COMPILER_TARGETDIR)
%$(PPUEXT): %.pp
	$(COMPILER) $<
	$(EXECPPAS)
%$(PPUEXT): %.pas
	$(COMPILER) $<
	$(EXECPPAS)
%$(EXEEXT): %.pp
	$(COMPILER) $<
	$(EXECPPAS)
%$(EXEEXT): %.pas
	$(COMPILER) $<
	$(EXECPPAS)
%$(EXEEXT): %.lpr
	$(COMPILER) $<
	$(EXECPPAS)
%$(EXEEXT): %.dpr
	$(COMPILER) $<
	$(EXECPPAS)
%.res: %.rc
	windres -i $< -o $@
vpath %.pp $(COMPILER_SOURCEDIR) $(COMPILER_INCLUDEDIR)
vpath %.pas $(COMPILER_SOURCEDIR) $(COMPILER_INCLUDEDIR)
vpath %.lpr $(COMPILER_SOURCEDIR) $(COMPILER_INCLUDEDIR)
vpath %.dpr $(COMPILER_SOURCEDIR) $(COMPILER_INCLUDEDIR)
vpath %.inc $(COMPILER_INCLUDEDIR)
vpath %$(OEXT) $(COMPILER_UNITTARGETDIR)
vpath %$(PPUEXT) $(COMPILER_UNITTARGETDIR)
.PHONY: fpc_shared
override INSTALLTARGET+=fpc_shared_install
ifndef SHARED_LIBVERSION
SHARED_LIBVERSION=$(FPC_VERSION)
endif
ifndef SHARED_LIBNAME
SHARED_LIBNAME=$(PACKAGE_NAME)
endif
ifndef SHARED_FULLNAME
SHARED_FULLNAME=$(SHAREDLIBPREFIX)$(SHARED_LIBNAME)-$(SHARED_LIBVERSION)$(SHAREDLIBEXT)
endif
ifndef SHARED_LIBUNITS
SHARED_LIBUNITS:=$(TARGET_UNITS) $(TARGET_IMPLICITUNITS)
override SHARED_LIBUNITS:=$(filter-out $(INSTALL_BUILDUNIT),$(SHARED_LIBUNITS))
endif
fpc_shared:
ifdef HASSHAREDLIB
	$(MAKE) all CREATESHARED=1 LINKSHARED=1 CREATESMART=1
ifneq ($(SHARED_BUILD),n)
	$(PPUMOVE) -q $(SHARED_LIBUNITS) -i$(COMPILER_UNITTARGETDIR) -o$(SHARED_FULLNAME) -d$(COMPILER_UNITTARGETDIR)
endif
else
	@$(ECHO) Shared Libraries not supported
endif
fpc_shared_install:
ifneq ($(SHARED_BUILD),n)
ifneq ($(SHARED_LIBUNITS),)
ifneq ($(wildcard $(COMPILER_UNITTARGETDIR)/$(SHARED_FULLNAME)),)
	$(INSTALL) $(COMPILER_UNITTARGETDIR)/$(SHARED_FULLNAME) $(INSTALL_SHAREDDIR)
endif
endif
endif
.PHONY: fpc_install fpc_sourceinstall fpc_exampleinstall
ifdef INSTALL_UNITS
override INSTALLPPUFILES+=$(addsuffix $(PPUEXT),$(INSTALL_UNITS))
endif
ifdef INSTALL_BUILDUNIT
override INSTALLPPUFILES:=$(filter-out $(INSTALL_BUILDUNIT)$(PPUEXT),$(INSTALLPPUFILES))
endif
ifdef INSTALLPPUFILES
override INSTALLPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(INSTALLPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES)))
ifneq ($(UNITTARGETDIRPREFIX),)
override INSTALLPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(notdir $(INSTALLPPUFILES)))
override INSTALLPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(notdir $(INSTALLPPULINKFILES))))
endif
override INSTALL_CREATEPACKAGEFPC=1
endif
ifdef INSTALLEXEFILES
ifneq ($(TARGETDIRPREFIX),)
override INSTALLEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(notdir $(INSTALLEXEFILES)))
endif
endif
fpc_install: all $(INSTALLTARGET)
ifdef INSTALLEXEFILES
	$(MKDIR) $(INSTALL_BINDIR)
ifdef UPXPROG
	-$(UPXPROG) $(INSTALLEXEFILES)
endif
	$(INSTALLEXE) $(INSTALLEXEFILES) $(INSTALL_BINDIR)
endif
ifdef INSTALL_CREATEPACKAGEFPC
ifdef FPCMAKE
ifdef PACKAGE_VERSION
ifneq ($(wildcard Makefile.fpc),)
	$(FPCMAKE) -p -T$(CPU_TARGET)-$(OS_TARGET) Makefile.fpc
	$(MKDIR) $(INSTALL_UNITDIR)
	$(INSTALL) Package.fpc $(INSTALL_UNITDIR)
endif
endif
endif
endif
ifdef INSTALLPPUFILES
	$(MKDIR) $(INSTALL_UNITDIR)
	$(INSTALL) $(INSTALLPPUFILES) $(INSTALL_UNITDIR)
ifneq ($(INSTALLPPULINKFILES),)
	$(INSTALL) $(INSTALLPPULINKFILES) $(INSTALL_UNITDIR)
endif
ifneq ($(wildcard $(LIB_FULLNAME)),)
	$(MKDIR) $(INSTALL_LIBDIR)
	$(INSTALL) $(LIB_FULLNAME) $(INSTALL_LIBDIR)
ifdef inUnix
	ln -sf $(LIB_FULLNAME) $(INSTALL_LIBDIR)/$(LIB_NAME)
endif
endif
endif
ifdef INSTALL_FILES
	$(MKDIR) $(INSTALL_DATADIR)
	$(INSTALL) $(INSTALL_FILES) $(INSTALL_DATADIR)
endif
fpc_sourceinstall: distclean
	$(MKDIR) $(INSTALL_SOURCEDIR)
	$(COPYTREE) $(BASEDIR)/* $(INSTALL_SOURCEDIR)
fpc_exampleinstall: $(addsuffix _distclean,$(TARGET_EXAMPLEDIRS))
ifdef HASEXAMPLES
	$(MKDIR) $(INSTALL_EXAMPLEDIR)
endif
ifdef EXAMPLESOURCEFILES
	$(COPY) $(EXAMPLESOURCEFILES) $(INSTALL_EXAMPLEDIR)
endif
ifdef TARGET_EXAMPLEDIRS
	$(COPYTREE) $(addsuffix /*,$(TARGET_EXAMPLEDIRS)) $(INSTALL_EXAMPLEDIR)
endif
.PHONY: fpc_distinstall
fpc_distinstall: install exampleinstall
.PHONY: fpc_zipinstall fpc_zipsourceinstall fpc_zipexampleinstall
ifndef PACKDIR
ifndef inUnix
PACKDIR=$(BASEDIR)/../fpc-pack
else
PACKDIR=/tmp/fpc-pack
endif
endif
ifndef ZIPNAME
ifdef DIST_ZIPNAME
ZIPNAME=$(DIST_ZIPNAME)
else
ZIPNAME=$(PACKAGE_NAME)
endif
endif
ifndef FULLZIPNAME
FULLZIPNAME=$(ZIPCROSSPREFIX)$(ZIPPREFIX)$(ZIPNAME)$(ZIPSUFFIX)
endif
ifndef ZIPTARGET
ifdef DIST_ZIPTARGET
ZIPTARGET=DIST_ZIPTARGET
else
ZIPTARGET=install
endif
endif
ifndef USEZIP
ifdef inUnix
USETAR=1
endif
endif
ifndef inUnix
USEZIPWRAPPER=1
endif
ifdef USEZIPWRAPPER
ZIPPATHSEP=$(PATHSEP)
ZIPWRAPPER=$(subst /,$(PATHSEP),$(DIST_DESTDIR)/fpczip$(SRCBATCHEXT))
else
ZIPPATHSEP=/
endif
ZIPCMD_CDPACK:=cd $(subst /,$(ZIPPATHSEP),$(PACKDIR))
ZIPCMD_CDBASE:=cd $(subst /,$(ZIPPATHSEP),$(BASEDIR))
ifdef USETAR
ZIPDESTFILE:=$(DIST_DESTDIR)/$(FULLZIPNAME)$(TAREXT)
ZIPCMD_ZIP:=$(TARPROG) cf$(TAROPT) $(ZIPDESTFILE) *
else
ZIPDESTFILE:=$(DIST_DESTDIR)/$(FULLZIPNAME)$(ZIPEXT)
ZIPCMD_ZIP:=$(subst /,$(ZIPPATHSEP),$(ZIPPROG)) -Dr $(ZIPOPT) $(ZIPDESTFILE) *
endif
fpc_zipinstall:
	$(MAKE) $(ZIPTARGET) INSTALL_PREFIX=$(PACKDIR) ZIPINSTALL=1
	$(MKDIR) $(DIST_DESTDIR)
	$(DEL) $(ZIPDESTFILE)
ifdef USEZIPWRAPPER
ifneq ($(ECHOREDIR),echo)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_CDPACK))" > $(ZIPWRAPPER)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_ZIP))" >> $(ZIPWRAPPER)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_CDBASE))" >> $(ZIPWRAPPER)
else
	echo $(ZIPCMD_CDPACK) > $(ZIPWRAPPER)
	echo $(ZIPCMD_ZIP) >> $(ZIPWRAPPER)
	echo $(ZIPCMD_CDBASE) >> $(ZIPWRAPPER)
endif
ifdef inUnix
	/bin/sh $(ZIPWRAPPER)
else
ifdef RUNBATCH
	$(RUNBATCH) (ZIPWRAPPER)
else
	$(ZIPWRAPPER)
endif
endif
	$(DEL) $(ZIPWRAPPER)
else
	$(ZIPCMD_CDPACK) ; $(ZIPCMD_ZIP) ; $(ZIPCMD_CDBASE)
endif
	$(DELTREE) $(PACKDIR)
fpc_zipsourceinstall:
	$(MAKE) fpc_zipinstall ZIPTARGET=sourceinstall ZIPSUFFIX=$(ZIPSOURCESUFFIX)
fpc_zipexampleinstall:
ifdef HASEXAMPLES
	$(MAKE) fpc_zipinstall ZIPTARGET=exampleinstall ZIPSUFFIX=$(ZIPEXAMPLESUFFIX)
endif
fpc_zipdistinstall:
	$(MAKE) fpc_zipinstall ZIPTARGET=distinstall
.PHONY: fpc_clean fpc_cleanall fpc_distclean
ifdef EXEFILES
override CLEANEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEFILES))
endif
ifdef CLEAN_UNITS
override CLEANPPUFILES+=$(addsuffix $(PPUEXT),$(CLEAN_UNITS))
endif
ifdef CLEANPPUFILES
override CLEANPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(CLEANPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES)))
ifdef DEBUGSYMEXT
override CLEANPPULINKFILES+=$(subst $(PPUEXT),$(DEBUGSYMEXT),$(CLEANPPUFILES))
endif
override CLEANPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPUFILES))
override CLEANPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPULINKFILES)))
endif
fpc_clean: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
ifdef LIB_NAME
	-$(DEL) $(LIB_NAME) $(LIB_FULLNAME)
endif
	-$(DEL) $(FPCMADE) Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *$(ASMEXT) *_ppas$(BATCHEXT)
fpc_cleanall: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef COMPILER_UNITTARGETDIR
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
endif
	-$(DELTREE) units
	-$(DEL) *$(OEXT) *$(PPUEXT) *$(RSTEXT) *$(ASMEXT) *$(STATICLIBEXT) *$(SHAREDLIBEXT) *$(PPLEXT)
ifneq ($(PPUEXT),.ppu)
	-$(DEL) *.o *.ppu *.a
endif
	-$(DELTREE) *$(SMARTEXT)
	-$(DEL) fpcmade.* Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *_ppas$(BATCHEXT)
ifdef AOUTEXT
	-$(DEL) *$(AOUTEXT)
endif
ifdef DEBUGSYMEXT
	-$(DEL) *$(DEBUGSYMEXT)
endif
fpc_distclean: cleanall
.PHONY: fpc_baseinfo
override INFORULES+=fpc_baseinfo
fpc_baseinfo:
	@$(ECHO)
	@$(ECHO)  == Package info ==
	@$(ECHO)  Package Name..... $(PACKAGE_NAME)
	@$(ECHO)  Package Version.. $(PACKAGE_VERSION)
	@$(ECHO)
	@$(ECHO)  == Configuration info ==
	@$(ECHO)
	@$(ECHO)  FPC.......... $(FPC)
	@$(ECHO)  FPC Version.. $(FPC_VERSION)
	@$(ECHO)  Source CPU... $(CPU_SOURCE)
	@$(ECHO)  Target CPU... $(CPU_TARGET)
	@$(ECHO)  Source OS.... $(OS_SOURCE)
	@$(ECHO)  Target OS.... $(OS_TARGET)
	@$(ECHO)  Full Source.. $(FULL_SOURCE)
	@$(ECHO)  Full Target.. $(FULL_TARGET)
	@$(ECHO)  SourceSuffix. $(SOURCESUFFIX)
	@$(ECHO)  TargetSuffix. $(TARGETSUFFIX)
	@$(ECHO)
	@$(ECHO)  == Directory info ==
	@$(ECHO)
	@$(ECHO)  Required pkgs... $(REQUIRE_PACKAGES)
	@$(ECHO)
	@$(ECHO)  Basedir......... $(BASEDIR)
	@$(ECHO)  FPCDir.......... $(FPCDIR)
	@$(ECHO)  CrossBinDir..... $(CROSSBINDIR)
	@$(ECHO)  UnitsDir........ $(UNITSDIR)
	@$(ECHO)  PackagesDir..... $(PACKAGESDIR)
	@$(ECHO)
	@$(ECHO)  GCC library..... $(GCCLIBDIR)
	@$(ECHO)  Other library... $(OTHERLIBDIR)
	@$(ECHO)
	@$(ECHO)  == Tools info ==
	@$(ECHO)
	@$(ECHO)  As........ $(AS)
	@$(ECHO)  Ld........ $(LD)
	@$(ECHO)  Ar........ $(AR)
	@$(ECHO)  Rc........ $(RC)
	@$(ECHO)
	@$(ECHO)  Mv........ $(MVPROG)
	@$(ECHO)  Cp........ $(CPPROG)
	@$(ECHO)  Rm........ $(RMPROG)
	@$(ECHO)  GInstall.. $(GINSTALL)
	@$(ECHO)  Echo...... $(ECHO)
	@$(ECHO)  Shell..... $(SHELL)
	@$(ECHO)  Date...... $(DATE)
	@$(ECHO)  FPCMake... $(FPCMAKE)
	@$(ECHO)  PPUMove... $(PPUMOVE)
	@$(ECHO)  Upx....... $(UPXPROG)
	@$(ECHO)  Zip....... $(ZIPPROG)
	@$(ECHO)
	@$(ECHO)  == Object info ==
	@$(ECHO)
	@$(ECHO)  Target Loaders........ $(TARGET_LOADERS)
	@$(ECHO)  Target Units.......... $(TARGET_UNITS)
	@$(ECHO)  Target Implicit Units. $(TARGET_IMPLICITUNITS)
	@$(ECHO)  Target Programs....... $(TARGET_PROGRAMS)
	@$(ECHO)  Target Dirs........... $(TARGET_DIRS)
	@$(ECHO)  Target Examples....... $(TARGET_EXAMPLES)
	@$(ECHO)  Target ExampleDirs.... $(TARGET_EXAMPLEDIRS)
	@$(ECHO)
	@$(ECHO)  Clean Units......... $(CLEAN_UNITS)
	@$(ECHO)  Clean Files......... $(CLEAN_FILES)
	@$(ECHO)
	@$(ECHO)  Install Units....... $(INSTALL_UNITS)
	@$(ECHO)  Install Files....... $(INSTALL_FILES)
	@$(ECHO)
	@$(ECHO)  == Install info ==
	@$(ECHO)
	@$(ECHO)  DateStr.............. $(DATESTR)
	@$(ECHO)  ZipName.............. $(ZIPNAME)
	@$(ECHO)  ZipPrefix............ $(ZIPPREFIX)
	@$(ECHO)  ZipCrossPrefix....... $(ZIPCROSSPREFIX)
	@$(ECHO)  ZipSuffix............ $(ZIPSUFFIX)
	@$(ECHO)  FullZipName.......... $(FULLZIPNAME)
	@$(ECHO)  Install FPC Package.. $(INSTALL_FPCPACKAGE)
	@$(ECHO)
	@$(ECHO)  Install base dir..... $(INSTALL_BASEDIR)
	@$(ECHO)  Install binary dir... $(INSTALL_BINDIR)
	@$(ECHO)  Install library dir.. $(INSTALL_LIBDIR)
	@$(ECHO)  Install units dir.... $(INSTALL_UNITDIR)
	@$(ECHO)  Install source dir... $(INSTALL_SOURCEDIR)
	@$(ECHO)  Install doc dir...... $(INSTALL_DOCDIR)
	@$(ECHO)  Install example dir.. $(INSTALL_EXAMPLEDIR)
	@$(ECHO)  Install data dir..... $(INSTALL_DATADIR)
	@$(ECHO)
	@$(ECHO)  Dist destination dir. $(DIST_DESTDIR)
	@$(ECHO)  Dist zip name........ $(DIST_ZIPNAME)
	@$(ECHO)
.PHONY: fpc_info
fpc_info: $(INFORULES)
.PHONY: fpc_makefile fpc_makefiles fpc_makefile_sub1 fpc_makefile_sub2 \
	fpc_makefile_dirs
fpc_makefile:
	$(FPCMAKE) -w -T$(OS_TARGET) Makefile.fpc
fpc_makefile_sub1:
ifdef TARGET_DIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_DIRS))
endif
ifdef TARGET_EXAMPLEDIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_EXAMPLEDIRS))
endif
fpc_makefile_sub2: $(addsuffix _makefile_dirs,$(TARGET_DIRS) $(TARGET_EXAMPLEDIRS))
fpc_makefile_dirs: fpc_makefile_sub1 fpc_makefile_sub2
fpc_makefiles: fpc_makefile fpc_makefile_dirs
ifeq ($(FULL_TARGET),i386-linux)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-win32)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-os2)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-beos)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-solaris)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-qnx)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-netware)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-wdosx)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-darwin)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-emx)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-watcom)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-wince)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-embedded)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),i386-symbian)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),m68k-atari)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),m68k-embedded)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),powerpc-macos)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),sparc-solaris)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),sparc-embedded)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),x86_64-win64)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),arm-linux)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),arm-palmos)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),arm-wince)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),arm-gba)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),arm-nds)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),arm-embedded)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),arm-symbian)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
TARGET_DIRS_LCL=1
TARGET_DIRS_COMPONENTS=1
TARGET_DIRS_PACKAGER/REGISTRATION=1
TARGET_DIRS_IDEINTF=1
TARGET_DIRS_DESIGNER=1
TARGET_DIRS_PACKAGER=1
endif
ifdef TARGET_DIRS_LCL
lcl_all:
	$(MAKE) -C lcl all
lcl_debug:
	$(MAKE) -C lcl debug
lcl_smart:
	$(MAKE) -C lcl smart
lcl_release:
	$(MAKE) -C lcl release
lcl_units:
	$(MAKE) -C lcl units
lcl_examples:
	$(MAKE) -C lcl examples
lcl_shared:
	$(MAKE) -C lcl shared
lcl_install:
	$(MAKE) -C lcl install
lcl_sourceinstall:
	$(MAKE) -C lcl sourceinstall
lcl_exampleinstall:
	$(MAKE) -C lcl exampleinstall
lcl_distinstall:
	$(MAKE) -C lcl distinstall
lcl_zipinstall:
	$(MAKE) -C lcl zipinstall
lcl_zipsourceinstall:
	$(MAKE) -C lcl zipsourceinstall
lcl_zipexampleinstall:
	$(MAKE) -C lcl zipexampleinstall
lcl_zipdistinstall:
	$(MAKE) -C lcl zipdistinstall
lcl_clean:
	$(MAKE) -C lcl clean
lcl_distclean:
	$(MAKE) -C lcl distclean
lcl_cleanall:
	$(MAKE) -C lcl cleanall
lcl_info:
	$(MAKE) -C lcl info
lcl_makefiles:
	$(MAKE) -C lcl makefiles
lcl:
	$(MAKE) -C lcl all
.PHONY: lcl_all lcl_debug lcl_smart lcl_release lcl_units lcl_examples lcl_shared lcl_install lcl_sourceinstall lcl_exampleinstall lcl_distinstall lcl_zipinstall lcl_zipsourceinstall lcl_zipexampleinstall lcl_zipdistinstall lcl_clean lcl_distclean lcl_cleanall lcl_info lcl_makefiles lcl
endif
ifdef TARGET_DIRS_COMPONENTS
components_all:
	$(MAKE) -C components all
components_debug:
	$(MAKE) -C components debug
components_smart:
	$(MAKE) -C components smart
components_release:
	$(MAKE) -C components release
components_units:
	$(MAKE) -C components units
components_examples:
	$(MAKE) -C components examples
components_shared:
	$(MAKE) -C components shared
components_install:
	$(MAKE) -C components install
components_sourceinstall:
	$(MAKE) -C components sourceinstall
components_exampleinstall:
	$(MAKE) -C components exampleinstall
components_distinstall:
	$(MAKE) -C components distinstall
components_zipinstall:
	$(MAKE) -C components zipinstall
components_zipsourceinstall:
	$(MAKE) -C components zipsourceinstall
components_zipexampleinstall:
	$(MAKE) -C components zipexampleinstall
components_zipdistinstall:
	$(MAKE) -C components zipdistinstall
components_clean:
	$(MAKE) -C components clean
components_distclean:
	$(MAKE) -C components distclean
components_cleanall:
	$(MAKE) -C components cleanall
components_info:
	$(MAKE) -C components info
components_makefiles:
	$(MAKE) -C components makefiles
components:
	$(MAKE) -C components all
.PHONY: components_all components_debug components_smart components_release components_units components_examples components_shared components_install components_sourceinstall components_exampleinstall components_distinstall components_zipinstall components_zipsourceinstall components_zipexampleinstall components_zipdistinstall components_clean components_distclean components_cleanall components_info components_makefiles components
endif
ifdef TARGET_DIRS_PACKAGER/REGISTRATION
packager/registration_all:
	$(MAKE) -C packager/registration all
packager/registration_debug:
	$(MAKE) -C packager/registration debug
packager/registration_smart:
	$(MAKE) -C packager/registration smart
packager/registration_release:
	$(MAKE) -C packager/registration release
packager/registration_units:
	$(MAKE) -C packager/registration units
packager/registration_examples:
	$(MAKE) -C packager/registration examples
packager/registration_shared:
	$(MAKE) -C packager/registration shared
packager/registration_install:
	$(MAKE) -C packager/registration install
packager/registration_sourceinstall:
	$(MAKE) -C packager/registration sourceinstall
packager/registration_exampleinstall:
	$(MAKE) -C packager/registration exampleinstall
packager/registration_distinstall:
	$(MAKE) -C packager/registration distinstall
packager/registration_zipinstall:
	$(MAKE) -C packager/registration zipinstall
packager/registration_zipsourceinstall:
	$(MAKE) -C packager/registration zipsourceinstall
packager/registration_zipexampleinstall:
	$(MAKE) -C packager/registration zipexampleinstall
packager/registration_zipdistinstall:
	$(MAKE) -C packager/registration zipdistinstall
packager/registration_clean:
	$(MAKE) -C packager/registration clean
packager/registration_distclean:
	$(MAKE) -C packager/registration distclean
packager/registration_cleanall:
	$(MAKE) -C packager/registration cleanall
packager/registration_info:
	$(MAKE) -C packager/registration info
packager/registration_makefiles:
	$(MAKE) -C packager/registration makefiles
packager/registration:
	$(MAKE) -C packager/registration all
.PHONY: packager/registration_all packager/registration_debug packager/registration_smart packager/registration_release packager/registration_units packager/registration_examples packager/registration_shared packager/registration_install packager/registration_sourceinstall packager/registration_exampleinstall packager/registration_distinstall packager/registration_zipinstall packager/registration_zipsourceinstall packager/registration_zipexampleinstall packager/registration_zipdistinstall packager/registration_clean packager/registration_distclean packager/registration_cleanall packager/registration_info packager/registration_makefiles packager/registration
endif
ifdef TARGET_DIRS_IDEINTF
ideintf_all:
	$(MAKE) -C ideintf all
ideintf_debug:
	$(MAKE) -C ideintf debug
ideintf_smart:
	$(MAKE) -C ideintf smart
ideintf_release:
	$(MAKE) -C ideintf release
ideintf_units:
	$(MAKE) -C ideintf units
ideintf_examples:
	$(MAKE) -C ideintf examples
ideintf_shared:
	$(MAKE) -C ideintf shared
ideintf_install:
	$(MAKE) -C ideintf install
ideintf_sourceinstall:
	$(MAKE) -C ideintf sourceinstall
ideintf_exampleinstall:
	$(MAKE) -C ideintf exampleinstall
ideintf_distinstall:
	$(MAKE) -C ideintf distinstall
ideintf_zipinstall:
	$(MAKE) -C ideintf zipinstall
ideintf_zipsourceinstall:
	$(MAKE) -C ideintf zipsourceinstall
ideintf_zipexampleinstall:
	$(MAKE) -C ideintf zipexampleinstall
ideintf_zipdistinstall:
	$(MAKE) -C ideintf zipdistinstall
ideintf_clean:
	$(MAKE) -C ideintf clean
ideintf_distclean:
	$(MAKE) -C ideintf distclean
ideintf_cleanall:
	$(MAKE) -C ideintf cleanall
ideintf_info:
	$(MAKE) -C ideintf info
ideintf_makefiles:
	$(MAKE) -C ideintf makefiles
ideintf:
	$(MAKE) -C ideintf all
.PHONY: ideintf_all ideintf_debug ideintf_smart ideintf_release ideintf_units ideintf_examples ideintf_shared ideintf_install ideintf_sourceinstall ideintf_exampleinstall ideintf_distinstall ideintf_zipinstall ideintf_zipsourceinstall ideintf_zipexampleinstall ideintf_zipdistinstall ideintf_clean ideintf_distclean ideintf_cleanall ideintf_info ideintf_makefiles ideintf
endif
ifdef TARGET_DIRS_DESIGNER
designer_all:
	$(MAKE) -C designer all
designer_debug:
	$(MAKE) -C designer debug
designer_smart:
	$(MAKE) -C designer smart
designer_release:
	$(MAKE) -C designer release
designer_units:
	$(MAKE) -C designer units
designer_examples:
	$(MAKE) -C designer examples
designer_shared:
	$(MAKE) -C designer shared
designer_install:
	$(MAKE) -C designer install
designer_sourceinstall:
	$(MAKE) -C designer sourceinstall
designer_exampleinstall:
	$(MAKE) -C designer exampleinstall
designer_distinstall:
	$(MAKE) -C designer distinstall
designer_zipinstall:
	$(MAKE) -C designer zipinstall
designer_zipsourceinstall:
	$(MAKE) -C designer zipsourceinstall
designer_zipexampleinstall:
	$(MAKE) -C designer zipexampleinstall
designer_zipdistinstall:
	$(MAKE) -C designer zipdistinstall
designer_clean:
	$(MAKE) -C designer clean
designer_distclean:
	$(MAKE) -C designer distclean
designer_cleanall:
	$(MAKE) -C designer cleanall
designer_info:
	$(MAKE) -C designer info
designer_makefiles:
	$(MAKE) -C designer makefiles
designer:
	$(MAKE) -C designer all
.PHONY: designer_all designer_debug designer_smart designer_release designer_units designer_examples designer_shared designer_install designer_sourceinstall designer_exampleinstall designer_distinstall designer_zipinstall designer_zipsourceinstall designer_zipexampleinstall designer_zipdistinstall designer_clean designer_distclean designer_cleanall designer_info designer_makefiles designer
endif
ifdef TARGET_DIRS_PACKAGER
packager_all:
	$(MAKE) -C packager all
packager_debug:
	$(MAKE) -C packager debug
packager_smart:
	$(MAKE) -C packager smart
packager_release:
	$(MAKE) -C packager release
packager_units:
	$(MAKE) -C packager units
packager_examples:
	$(MAKE) -C packager examples
packager_shared:
	$(MAKE) -C packager shared
packager_install:
	$(MAKE) -C packager install
packager_sourceinstall:
	$(MAKE) -C packager sourceinstall
packager_exampleinstall:
	$(MAKE) -C packager exampleinstall
packager_distinstall:
	$(MAKE) -C packager distinstall
packager_zipinstall:
	$(MAKE) -C packager zipinstall
packager_zipsourceinstall:
	$(MAKE) -C packager zipsourceinstall
packager_zipexampleinstall:
	$(MAKE) -C packager zipexampleinstall
packager_zipdistinstall:
	$(MAKE) -C packager zipdistinstall
packager_clean:
	$(MAKE) -C packager clean
packager_distclean:
	$(MAKE) -C packager distclean
packager_cleanall:
	$(MAKE) -C packager cleanall
packager_info:
	$(MAKE) -C packager info
packager_makefiles:
	$(MAKE) -C packager makefiles
packager:
	$(MAKE) -C packager all
.PHONY: packager_all packager_debug packager_smart packager_release packager_units packager_examples packager_shared packager_install packager_sourceinstall packager_exampleinstall packager_distinstall packager_zipinstall packager_zipsourceinstall packager_zipexampleinstall packager_zipdistinstall packager_clean packager_distclean packager_cleanall packager_info packager_makefiles packager
endif
ifeq ($(FULL_TARGET),i386-linux)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-win32)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-os2)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-beos)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-solaris)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-qnx)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-netware)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-wdosx)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-darwin)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-emx)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-watcom)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-wince)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-embedded)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),i386-symbian)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),m68k-atari)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),m68k-embedded)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),powerpc-macos)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),sparc-solaris)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),sparc-embedded)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),x86_64-win64)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),arm-linux)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),arm-palmos)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),arm-wince)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),arm-gba)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),arm-nds)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),arm-embedded)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),arm-symbian)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
TARGET_EXAMPLEDIRS_EXAMPLES=1
endif
ifdef TARGET_EXAMPLEDIRS_EXAMPLES
examples_all:
	$(MAKE) -C examples all
examples_debug:
	$(MAKE) -C examples debug
examples_smart:
	$(MAKE) -C examples smart
examples_release:
	$(MAKE) -C examples release
examples_units:
	$(MAKE) -C examples units
examples_examples:
	$(MAKE) -C examples examples
examples_shared:
	$(MAKE) -C examples shared
examples_install:
	$(MAKE) -C examples install
examples_sourceinstall:
	$(MAKE) -C examples sourceinstall
examples_exampleinstall:
	$(MAKE) -C examples exampleinstall
examples_distinstall:
	$(MAKE) -C examples distinstall
examples_zipinstall:
	$(MAKE) -C examples zipinstall
examples_zipsourceinstall:
	$(MAKE) -C examples zipsourceinstall
examples_zipexampleinstall:
	$(MAKE) -C examples zipexampleinstall
examples_zipdistinstall:
	$(MAKE) -C examples zipdistinstall
examples_clean:
	$(MAKE) -C examples clean
examples_distclean:
	$(MAKE) -C examples distclean
examples_cleanall:
	$(MAKE) -C examples cleanall
examples_info:
	$(MAKE) -C examples info
examples_makefiles:
	$(MAKE) -C examples makefiles
examples:
	$(MAKE) -C examples all
.PHONY: examples_all examples_debug examples_smart examples_release examples_units examples_examples examples_shared examples_install examples_sourceinstall examples_exampleinstall examples_distinstall examples_zipinstall examples_zipsourceinstall examples_zipexampleinstall examples_zipdistinstall examples_clean examples_distclean examples_cleanall examples_info examples_makefiles examples
endif
debug: fpc_debug
smart: fpc_smart
release: fpc_release
units: fpc_units $(addsuffix _units,$(TARGET_DIRS))
shared: fpc_shared
sourceinstall: fpc_sourceinstall
exampleinstall: fpc_exampleinstall $(addsuffix _exampleinstall,$(TARGET_DIRS))
distinstall: fpc_distinstall
zipinstall: fpc_zipinstall
zipsourceinstall: fpc_zipsourceinstall
zipexampleinstall: fpc_zipexampleinstall $(addsuffix _zipexampleinstall,$(TARGET_DIRS))
zipdistinstall: fpc_zipdistinstall
distclean: fpc_distclean $(addsuffix _distclean,$(TARGET_DIRS))
cleanall: fpc_cleanall $(addsuffix _cleanall,$(TARGET_DIRS))
info: fpc_info
makefiles: fpc_makefiles
.PHONY: debug smart release units shared sourceinstall exampleinstall distinstall zipinstall zipsourceinstall zipexampleinstall zipdistinstall distclean cleanall info makefiles
ifneq ($(wildcard fpcmake.loc),)
include fpcmake.loc
endif
.PHONY: lcl components packager/registration ideintf packager bigidecomponents ide idepkg idebig bigide starter lazbuilder tools all clean cleanide purge examples install
ide: 
	$(MAKE) -C ide ide
idepkg:
	$(MAKE) -C ide idepkg
bigide: lcl packager/registration ideintf designer packager bigidecomponents idebig starter
idebig:
	$(MAKE) -C ide bigide
bigidecomponents:
	$(MAKE) -C components bigidecomponents
starter:
	$(MAKE) -C ide starter
lazbuilder:
	$(MAKE) -C ide lazbuilder
tools: lcl components
	$(MAKE) -C tools
examples: lcl components
	$(MAKE) -C examples
all: lcl components packager/registration ideintf designer packager ide starter lazbuilder
cleanide:
	$(MAKE) -C ide cleanide
cleanlaz: cleanide
	$(MAKE) -C lcl clean
	$(MAKE) -C components clean
	$(MAKE) -C packager clean
	$(MAKE) -C designer clean
	$(MAKE) -C ideintf clean
purge: cleanlaz
	$(MAKE) -C examples clean
	$(MAKE) -C tools clean
	$(MAKE) -C doceditor clean
	$(MAKE) -C tools clean
clean: cleanlaz
installbase:
ifeq ($(OS_TARGET),win32)
else
	$(MKDIR) $(INSTALL_PREFIX)/share
	$(MKDIR) $(INSTALL_PREFIX)/share/lazarus
	$(MKDIR) $(INSTALL_BINDIR)
	$(MKDIR) $(INSTALL_MAN_DIR)
	$(MKDIR) $(INSTALL_MAN_DIR)/man1
endif
install:
	$(MAKE) installbase
	$(COPYTREE) . $(LAZARUS_INSTALL_DIR)
ifeq ($(OS_TARGET),win32)
else
	ln -sf $(LAZARUS_INSTALL_DIR)/lazarus $(INSTALL_PREFIX)/bin/lazarus-ide
	ln -sf $(LAZARUS_INSTALL_DIR)/startlazarus $(INSTALL_PREFIX)/bin/startlazarus
	ln -sf $(LAZARUS_INSTALL_DIR)/lazbuild $(INSTALL_PREFIX)/bin/lazbuild
	cat $(LAZARUS_INSTALL_DIR)/docs/lazbuild.1 | gzip > $(INSTALL_MAN_DIR)/man1/lazbuild.1.gz
endif
