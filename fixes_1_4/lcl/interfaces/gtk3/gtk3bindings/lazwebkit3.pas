{ This is an autogenerated unit using gobject introspection (gir2pascal). Do not Edit. }
unit LazWebKit3;

{$MODE OBJFPC}{$H+}

{$PACKRECORDS C}
{$MODESWITCH DUPLICATELOCALS+}

{$LINKLIB libwebkitgtk-3.0.so.0}
{$LINKLIB libjavascriptcoregtk-3.0.so.0}
interface
uses
  CTypes, LazGObject2, LazGtk3, LazJSCore3, LazSoup2_4, LazGLib2, LazGio2, LazGdkPixbuf2, LazAtk1, LazGdk3, Lazcairo1;

const
  WebKit3_library = 'libwebkitgtk-3.0.so.0';

  WEBKIT_MAJOR_VERSION = 2;
  WEBKIT_MICRO_VERSION = 4;
  WEBKIT_MINOR_VERSION = 0;
  WEBKIT_USER_AGENT_MAJOR_VERSION = 537;
  WEBKIT_USER_AGENT_MINOR_VERSION = 32;

type
  TWebKitCacheModel = Integer;
const
  { WebKitCacheModel }
  WEBKIT_CACHE_MODEL_DEFAULT: TWebKitCacheModel = 0;
  WEBKIT_CACHE_MODEL_DOCUMENT_VIEWER: TWebKitCacheModel = 1;
  WEBKIT_CACHE_MODEL_WEB_BROWSER: TWebKitCacheModel = 2;
  WEBKIT_CACHE_MODEL_DOCUMENT_BROWSER: TWebKitCacheModel = 3;

type
  TWebKitContextMenuAction = Integer;
const
  { WebKitContextMenuAction }
  WEBKIT_CONTEXT_MENU_ACTION_NO_ACTION: TWebKitContextMenuAction = 0;
  WEBKIT_CONTEXT_MENU_ACTION_OPEN_LINK: TWebKitContextMenuAction = 1;
  WEBKIT_CONTEXT_MENU_ACTION_OPEN_LINK_IN_NEW_WINDOW: TWebKitContextMenuAction = 2;
  WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_LINK_TO_DISK: TWebKitContextMenuAction = 3;
  WEBKIT_CONTEXT_MENU_ACTION_COPY_LINK_TO_CLIPBOARD: TWebKitContextMenuAction = 4;
  WEBKIT_CONTEXT_MENU_ACTION_OPEN_IMAGE_IN_NEW_WINDOW: TWebKitContextMenuAction = 5;
  WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_IMAGE_TO_DISK: TWebKitContextMenuAction = 6;
  WEBKIT_CONTEXT_MENU_ACTION_COPY_IMAGE_TO_CLIPBOARD: TWebKitContextMenuAction = 7;
  WEBKIT_CONTEXT_MENU_ACTION_COPY_IMAGE_URL_TO_CLIPBOARD: TWebKitContextMenuAction = 8;
  WEBKIT_CONTEXT_MENU_ACTION_OPEN_FRAME_IN_NEW_WINDOW: TWebKitContextMenuAction = 9;
  WEBKIT_CONTEXT_MENU_ACTION_GO_BACK: TWebKitContextMenuAction = 10;
  WEBKIT_CONTEXT_MENU_ACTION_GO_FORWARD: TWebKitContextMenuAction = 11;
  WEBKIT_CONTEXT_MENU_ACTION_STOP: TWebKitContextMenuAction = 12;
  WEBKIT_CONTEXT_MENU_ACTION_RELOAD: TWebKitContextMenuAction = 13;
  WEBKIT_CONTEXT_MENU_ACTION_COPY: TWebKitContextMenuAction = 14;
  WEBKIT_CONTEXT_MENU_ACTION_CUT: TWebKitContextMenuAction = 15;
  WEBKIT_CONTEXT_MENU_ACTION_PASTE: TWebKitContextMenuAction = 16;
  WEBKIT_CONTEXT_MENU_ACTION_DELETE: TWebKitContextMenuAction = 17;
  WEBKIT_CONTEXT_MENU_ACTION_SELECT_ALL: TWebKitContextMenuAction = 18;
  WEBKIT_CONTEXT_MENU_ACTION_INPUT_METHODS: TWebKitContextMenuAction = 19;
  WEBKIT_CONTEXT_MENU_ACTION_UNICODE: TWebKitContextMenuAction = 20;
  WEBKIT_CONTEXT_MENU_ACTION_SPELLING_GUESS: TWebKitContextMenuAction = 21;
  WEBKIT_CONTEXT_MENU_ACTION_NO_GUESSES_FOUND: TWebKitContextMenuAction = 22;
  WEBKIT_CONTEXT_MENU_ACTION_IGNORE_SPELLING: TWebKitContextMenuAction = 23;
  WEBKIT_CONTEXT_MENU_ACTION_LEARN_SPELLING: TWebKitContextMenuAction = 24;
  WEBKIT_CONTEXT_MENU_ACTION_IGNORE_GRAMMAR: TWebKitContextMenuAction = 25;
  WEBKIT_CONTEXT_MENU_ACTION_FONT_MENU: TWebKitContextMenuAction = 26;
  WEBKIT_CONTEXT_MENU_ACTION_BOLD: TWebKitContextMenuAction = 27;
  WEBKIT_CONTEXT_MENU_ACTION_ITALIC: TWebKitContextMenuAction = 28;
  WEBKIT_CONTEXT_MENU_ACTION_UNDERLINE: TWebKitContextMenuAction = 29;
  WEBKIT_CONTEXT_MENU_ACTION_OUTLINE: TWebKitContextMenuAction = 30;
  WEBKIT_CONTEXT_MENU_ACTION_INSPECT_ELEMENT: TWebKitContextMenuAction = 31;
  WEBKIT_CONTEXT_MENU_ACTION_OPEN_MEDIA_IN_NEW_WINDOW: TWebKitContextMenuAction = 32;
  WEBKIT_CONTEXT_MENU_ACTION_COPY_MEDIA_LINK_TO_CLIPBOARD: TWebKitContextMenuAction = 33;
  WEBKIT_CONTEXT_MENU_ACTION_TOGGLE_MEDIA_CONTROLS: TWebKitContextMenuAction = 34;
  WEBKIT_CONTEXT_MENU_ACTION_TOGGLE_MEDIA_LOOP: TWebKitContextMenuAction = 35;
  WEBKIT_CONTEXT_MENU_ACTION_ENTER_VIDEO_FULLSCREEN: TWebKitContextMenuAction = 36;
  WEBKIT_CONTEXT_MENU_ACTION_MEDIA_PLAY_PAUSE: TWebKitContextMenuAction = 37;
  WEBKIT_CONTEXT_MENU_ACTION_MEDIA_MUTE: TWebKitContextMenuAction = 38;

type
  TWebKitDownloadStatus = Integer;
const
  { WebKitDownloadStatus }
  WEBKIT_DOWNLOAD_STATUS_ERROR: TWebKitDownloadStatus = -1;
  WEBKIT_DOWNLOAD_STATUS_CREATED: TWebKitDownloadStatus = 0;
  WEBKIT_DOWNLOAD_STATUS_STARTED: TWebKitDownloadStatus = 1;
  WEBKIT_DOWNLOAD_STATUS_CANCELLED: TWebKitDownloadStatus = 2;
  WEBKIT_DOWNLOAD_STATUS_FINISHED: TWebKitDownloadStatus = 3;

type
  TWebKitDownloadError = Integer;
const
  { WebKitDownloadError }
  WEBKIT_DOWNLOAD_ERROR_CANCELLED_BY_USER: TWebKitDownloadError = 0;
  WEBKIT_DOWNLOAD_ERROR_DESTINATION: TWebKitDownloadError = 1;
  WEBKIT_DOWNLOAD_ERROR_NETWORK: TWebKitDownloadError = 2;

type
  TWebKitEditingBehavior = Integer;
const
  { WebKitEditingBehavior }
  WEBKIT_EDITING_BEHAVIOR_MAC: TWebKitEditingBehavior = 0;
  WEBKIT_EDITING_BEHAVIOR_WINDOWS: TWebKitEditingBehavior = 1;
  WEBKIT_EDITING_BEHAVIOR_UNIX: TWebKitEditingBehavior = 2;

type
  TWebKitHitTestResultContext = Integer;
const
  { WebKitHitTestResultContext }
  WEBKIT_HIT_TEST_RESULT_CONTEXT_DOCUMENT: TWebKitHitTestResultContext = 2;
  WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK: TWebKitHitTestResultContext = 4;
  WEBKIT_HIT_TEST_RESULT_CONTEXT_IMAGE: TWebKitHitTestResultContext = 8;
  WEBKIT_HIT_TEST_RESULT_CONTEXT_MEDIA: TWebKitHitTestResultContext = 16;
  WEBKIT_HIT_TEST_RESULT_CONTEXT_SELECTION: TWebKitHitTestResultContext = 32;
  WEBKIT_HIT_TEST_RESULT_CONTEXT_EDITABLE: TWebKitHitTestResultContext = 64;

type
  TWebKitInsertAction = Integer;
const
  { WebKitInsertAction }
  WEBKIT_INSERT_ACTION_TYPED: TWebKitInsertAction = 0;
  WEBKIT_INSERT_ACTION_PASTED: TWebKitInsertAction = 1;
  WEBKIT_INSERT_ACTION_DROPPED: TWebKitInsertAction = 2;

type
  TWebKitLoadStatus = Integer;
const
  { WebKitLoadStatus }
  WEBKIT_LOAD_PROVISIONAL: TWebKitLoadStatus = 0;
  WEBKIT_LOAD_COMMITTED: TWebKitLoadStatus = 1;
  WEBKIT_LOAD_FINISHED: TWebKitLoadStatus = 2;
  WEBKIT_LOAD_FIRST_VISUALLY_NON_EMPTY_LAYOUT: TWebKitLoadStatus = 3;
  WEBKIT_LOAD_FAILED: TWebKitLoadStatus = 4;

type
  TWebKitNavigationResponse = Integer;
const
  { WebKitNavigationResponse }
  WEBKIT_NAVIGATION_RESPONSE_ACCEPT: TWebKitNavigationResponse = 0;
  WEBKIT_NAVIGATION_RESPONSE_IGNORE: TWebKitNavigationResponse = 1;
  WEBKIT_NAVIGATION_RESPONSE_DOWNLOAD: TWebKitNavigationResponse = 2;

type
  TWebKitNetworkError = Integer;
const
  { WebKitNetworkError }
  WEBKIT_NETWORK_ERROR_FAILED: TWebKitNetworkError = 399;
  WEBKIT_NETWORK_ERROR_TRANSPORT: TWebKitNetworkError = 300;
  WEBKIT_NETWORK_ERROR_UNKNOWN_PROTOCOL: TWebKitNetworkError = 301;
  WEBKIT_NETWORK_ERROR_CANCELLED: TWebKitNetworkError = 302;
  WEBKIT_NETWORK_ERROR_FILE_DOES_NOT_EXIST: TWebKitNetworkError = 303;

type
  TWebKitPluginError = Integer;
const
  { WebKitPluginError }
  WEBKIT_PLUGIN_ERROR_FAILED: TWebKitPluginError = 299;
  WEBKIT_PLUGIN_ERROR_CANNOT_FIND_PLUGIN: TWebKitPluginError = 200;
  WEBKIT_PLUGIN_ERROR_CANNOT_LOAD_PLUGIN: TWebKitPluginError = 201;
  WEBKIT_PLUGIN_ERROR_JAVA_UNAVAILABLE: TWebKitPluginError = 202;
  WEBKIT_PLUGIN_ERROR_CONNECTION_CANCELLED: TWebKitPluginError = 203;
  WEBKIT_PLUGIN_ERROR_WILL_HANDLE_LOAD: TWebKitPluginError = 204;

type
  TWebKitPolicyError = Integer;
const
  { WebKitPolicyError }
  WEBKIT_POLICY_ERROR_FAILED: TWebKitPolicyError = 199;
  WEBKIT_POLICY_ERROR_CANNOT_SHOW_MIME_TYPE: TWebKitPolicyError = 100;
  WEBKIT_POLICY_ERROR_CANNOT_SHOW_URL: TWebKitPolicyError = 101;
  WEBKIT_POLICY_ERROR_FRAME_LOAD_INTERRUPTED_BY_POLICY_CHANGE: TWebKitPolicyError = 102;
  WEBKIT_POLICY_ERROR_CANNOT_USE_RESTRICTED_PORT: TWebKitPolicyError = 103;

type
  TWebKitSecurityPolicy = Integer;
const
  { WebKitSecurityPolicy }
  WEBKIT_SECURITY_POLICY_LOCAL: TWebKitSecurityPolicy = 2;
  WEBKIT_SECURITY_POLICY_NO_ACCESS_TO_OTHER_SCHEME: TWebKitSecurityPolicy = 4;
  WEBKIT_SECURITY_POLICY_DISPLAY_ISOLATED: TWebKitSecurityPolicy = 8;
  WEBKIT_SECURITY_POLICY_SECURE: TWebKitSecurityPolicy = 16;
  WEBKIT_SECURITY_POLICY_CORS_ENABLED: TWebKitSecurityPolicy = 32;
  WEBKIT_SECURITY_POLICY_EMPTY_DOCUMENT: TWebKitSecurityPolicy = 64;

type
  TWebKitSelectionAffinity = Integer;
const
  { WebKitSelectionAffinity }
  WEBKIT_SELECTION_AFFINITY_UPSTREAM: TWebKitSelectionAffinity = 0;
  WEBKIT_SELECTION_AFFINITY_DOWNSTREAM: TWebKitSelectionAffinity = 1;

type
  TWebKitWebViewViewMode = Integer;
const
  { WebKitWebViewViewMode }
  WEBKIT_WEB_VIEW_VIEW_MODE_WINDOWED: TWebKitWebViewViewMode = 0;
  WEBKIT_WEB_VIEW_VIEW_MODE_FLOATING: TWebKitWebViewViewMode = 1;
  WEBKIT_WEB_VIEW_VIEW_MODE_FULLSCREEN: TWebKitWebViewViewMode = 2;
  WEBKIT_WEB_VIEW_VIEW_MODE_MAXIMIZED: TWebKitWebViewViewMode = 3;
  WEBKIT_WEB_VIEW_VIEW_MODE_MINIMIZED: TWebKitWebViewViewMode = 4;

type
  TWebKitWebNavigationReason = Integer;
const
  { WebKitWebNavigationReason }
  WEBKIT_WEB_NAVIGATION_REASON_LINK_CLICKED: TWebKitWebNavigationReason = 0;
  WEBKIT_WEB_NAVIGATION_REASON_FORM_SUBMITTED: TWebKitWebNavigationReason = 1;
  WEBKIT_WEB_NAVIGATION_REASON_BACK_FORWARD: TWebKitWebNavigationReason = 2;
  WEBKIT_WEB_NAVIGATION_REASON_RELOAD: TWebKitWebNavigationReason = 3;
  WEBKIT_WEB_NAVIGATION_REASON_FORM_RESUBMITTED: TWebKitWebNavigationReason = 4;
  WEBKIT_WEB_NAVIGATION_REASON_OTHER: TWebKitWebNavigationReason = 5;

type
  TWebKitWebViewTargetInfo = Integer;
const
  { WebKitWebViewTargetInfo }
  WEBKIT_WEB_VIEW_TARGET_INFO_HTML: TWebKitWebViewTargetInfo = 0;
  WEBKIT_WEB_VIEW_TARGET_INFO_TEXT: TWebKitWebViewTargetInfo = 1;
  WEBKIT_WEB_VIEW_TARGET_INFO_IMAGE: TWebKitWebViewTargetInfo = 2;
  WEBKIT_WEB_VIEW_TARGET_INFO_URI_LIST: TWebKitWebViewTargetInfo = 3;
  WEBKIT_WEB_VIEW_TARGET_INFO_NETSCAPE_URL: TWebKitWebViewTargetInfo = 4;
type

  PPWebKitCacheModel = ^PWebKitCacheModel;
  PWebKitCacheModel = ^TWebKitCacheModel;

  PPWebKitContextMenuAction = ^PWebKitContextMenuAction;
  PWebKitContextMenuAction = ^TWebKitContextMenuAction;

  PPWebKitDOMEventTarget = ^PWebKitDOMEventTarget;
  PWebKitDOMEventTarget = ^TWebKitDOMEventTarget;

  PPWebKitDOMEvent = ^PWebKitDOMEvent;
  PWebKitDOMEvent = ^TWebKitDOMEvent;
  TWebKitDOMEventTarget = object
    function add_event_listener(eventName: Pgchar; handler: TGCallback; bubble: gboolean; userData: gpointer): gboolean; cdecl; inline;
    procedure dispatch_event(event: PWebKitDOMEvent; error: PPGError); cdecl; inline;
    function remove_event_listener(eventName: Pgchar; handler: TGCallback; bubble: gboolean): gboolean; cdecl; inline;
  end;

  PPWebKitDOMAttr = ^PWebKitDOMAttr;
  PWebKitDOMAttr = ^TWebKitDOMAttr;

  PPWebKitDOMNode = ^PWebKitDOMNode;
  PWebKitDOMNode = ^TWebKitDOMNode;

  PPWebKitDOMObject = ^PWebKitDOMObject;
  PWebKitDOMObject = ^TWebKitDOMObject;
  TWebKitDOMObject = object(TGObject)
    coreObject: gpointer;
    //property core_object: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_core_object  { property is writeable but setter not declared } ;
  end;

  PPWebKitDOMNamedNodeMap = ^PWebKitDOMNamedNodeMap;
  PWebKitDOMNamedNodeMap = ^TWebKitDOMNamedNodeMap;

  PPWebKitDOMNodeList = ^PWebKitDOMNodeList;
  PWebKitDOMNodeList = ^TWebKitDOMNodeList;

  PPWebKitDOMDocument = ^PWebKitDOMDocument;
  PWebKitDOMDocument = ^TWebKitDOMDocument;

  PPWebKitDOMElement = ^PWebKitDOMElement;
  PWebKitDOMElement = ^TWebKitDOMElement;
  TWebKitDOMNode = object(TWebKitDOMObject)
    function append_child(newChild: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl; inline;
    function clone_node(deep: gboolean): PWebKitDOMNode; cdecl; inline;
    function compare_document_position(other: PWebKitDOMNode): gushort; cdecl; inline;
    function contains(other: PWebKitDOMNode): gboolean; cdecl; inline;
    function dispatch_event(event: PWebKitDOMEvent; error: PPGError): gboolean; cdecl; inline;
    function get_attributes: PWebKitDOMNamedNodeMap; cdecl; inline;
    function get_base_uri: Pgchar; cdecl; inline;
    function get_child_nodes: PWebKitDOMNodeList; cdecl; inline;
    function get_first_child: PWebKitDOMNode; cdecl; inline;
    function get_last_child: PWebKitDOMNode; cdecl; inline;
    function get_local_name: Pgchar; cdecl; inline;
    function get_namespace_uri: Pgchar; cdecl; inline;
    function get_next_sibling: PWebKitDOMNode; cdecl; inline;
    function get_node_name: Pgchar; cdecl; inline;
    function get_node_type: gushort; cdecl; inline;
    function get_node_value: Pgchar; cdecl; inline;
    function get_owner_document: PWebKitDOMDocument; cdecl; inline;
    function get_parent_element: PWebKitDOMElement; cdecl; inline;
    function get_parent_node: PWebKitDOMNode; cdecl; inline;
    function get_prefix: Pgchar; cdecl; inline;
    function get_previous_sibling: PWebKitDOMNode; cdecl; inline;
    function get_text_content: Pgchar; cdecl; inline;
    function has_attributes: gboolean; cdecl; inline;
    function has_child_nodes: gboolean; cdecl; inline;
    function insert_before(newChild: PWebKitDOMNode; refChild: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl; inline;
    function is_default_namespace(namespaceURI: Pgchar): gboolean; cdecl; inline;
    function is_equal_node(other: PWebKitDOMNode): gboolean; cdecl; inline;
    function is_same_node(other: PWebKitDOMNode): gboolean; cdecl; inline;
    function is_supported(feature: Pgchar; version: Pgchar): gboolean; cdecl; inline;
    function lookup_namespace_uri(prefix: Pgchar): Pgchar; cdecl; inline;
    function lookup_prefix(namespaceURI: Pgchar): Pgchar; cdecl; inline;
    procedure normalize; cdecl; inline;
    function remove_child(oldChild: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl; inline;
    function replace_child(newChild: PWebKitDOMNode; oldChild: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl; inline;
    procedure set_node_value(value: Pgchar; error: PPGError); cdecl; inline;
    procedure set_prefix(value: Pgchar; error: PPGError); cdecl; inline;
    procedure set_text_content(value: Pgchar; error: PPGError); cdecl; inline;
    property attributes: PWebKitDOMNamedNodeMap read get_attributes ;
    property base_uri: Pgchar read get_base_uri ;
    property child_nodes: PWebKitDOMNodeList read get_child_nodes ;
    property first_child: PWebKitDOMNode read get_first_child ;
    property last_child: PWebKitDOMNode read get_last_child ;
    property local_name: Pgchar read get_local_name ;
    property namespace_uri: Pgchar read get_namespace_uri ;
    property next_sibling: PWebKitDOMNode read get_next_sibling ;
    property node_name: Pgchar read get_node_name ;
    property node_type: gushort read get_node_type ;
    property node_value: Pgchar read get_node_value  { property is writeable but setter not declared } ;
    property owner_document: PWebKitDOMDocument read get_owner_document ;
    property parent_element: PWebKitDOMElement read get_parent_element ;
    property parent_node: PWebKitDOMNode read get_parent_node ;
    property prefix: Pgchar read get_prefix  { property is writeable but setter not declared } ;
    property previous_sibling: PWebKitDOMNode read get_previous_sibling ;
    property text_content: Pgchar read get_text_content  { property is writeable but setter not declared } ;
  end;
  TWebKitDOMAttr = object(TWebKitDOMNode)
    function get_is_id: gboolean; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_owner_element: PWebKitDOMElement; cdecl; inline;
    function get_specified: gboolean; cdecl; inline;
    function get_value: Pgchar; cdecl; inline;
    procedure set_value(value: Pgchar; error: PPGError); cdecl; inline;
    property is_id: gboolean read get_is_id ;
    property name: Pgchar read get_name ;
    property owner_element: PWebKitDOMElement read get_owner_element ;
    property specified: gboolean read get_specified ;
    property value: Pgchar read get_value  { property is writeable but setter not declared } ;
  end;

  PPWebKitDOMDOMTokenList = ^PWebKitDOMDOMTokenList;
  PWebKitDOMDOMTokenList = ^TWebKitDOMDOMTokenList;

  PPWebKitDOMCSSStyleDeclaration = ^PWebKitDOMCSSStyleDeclaration;
  PWebKitDOMCSSStyleDeclaration = ^TWebKitDOMCSSStyleDeclaration;
  TWebKitDOMElement = object(TWebKitDOMNode)
    procedure blur; cdecl; inline;
    procedure focus; cdecl; inline;
    function get_attribute(name: Pgchar): Pgchar; cdecl; inline;
    function get_attribute_node(name: Pgchar): PWebKitDOMAttr; cdecl; inline;
    function get_attribute_node_ns(namespaceURI: Pgchar; localName: Pgchar): PWebKitDOMAttr; cdecl; inline;
    function get_attribute_ns(namespaceURI: Pgchar; localName: Pgchar): Pgchar; cdecl; inline;
    function get_child_element_count: gulong; cdecl; inline;
    function get_class_list: PWebKitDOMDOMTokenList; cdecl; inline;
    function get_class_name: Pgchar; cdecl; inline;
    function get_client_height: glong; cdecl; inline;
    function get_client_left: glong; cdecl; inline;
    function get_client_top: glong; cdecl; inline;
    function get_client_width: glong; cdecl; inline;
    function get_elements_by_class_name(name: Pgchar): PWebKitDOMNodeList; cdecl; inline;
    function get_elements_by_tag_name(name: Pgchar): PWebKitDOMNodeList; cdecl; inline;
    function get_elements_by_tag_name_ns(namespaceURI: Pgchar; localName: Pgchar): PWebKitDOMNodeList; cdecl; inline;
    function get_first_element_child: PWebKitDOMElement; cdecl; inline;
    function get_last_element_child: PWebKitDOMElement; cdecl; inline;
    function get_next_element_sibling: PWebKitDOMElement; cdecl; inline;
    function get_offset_height: glong; cdecl; inline;
    function get_offset_left: glong; cdecl; inline;
    function get_offset_parent: PWebKitDOMElement; cdecl; inline;
    function get_offset_top: glong; cdecl; inline;
    function get_offset_width: glong; cdecl; inline;
    function get_previous_element_sibling: PWebKitDOMElement; cdecl; inline;
    function get_scroll_height: glong; cdecl; inline;
    function get_scroll_left: glong; cdecl; inline;
    function get_scroll_top: glong; cdecl; inline;
    function get_scroll_width: glong; cdecl; inline;
    function get_style: PWebKitDOMCSSStyleDeclaration; cdecl; inline;
    function get_tag_name: Pgchar; cdecl; inline;
    function get_webkit_region_overflow: Pgchar; cdecl; inline;
    function get_webkit_region_overset: Pgchar; cdecl; inline;
    function has_attribute(name: Pgchar): gboolean; cdecl; inline;
    function has_attribute_ns(namespaceURI: Pgchar; localName: Pgchar): gboolean; cdecl; inline;
    function query_selector(selectors: Pgchar; error: PPGError): PWebKitDOMElement; cdecl; inline;
    function query_selector_all(selectors: Pgchar; error: PPGError): PWebKitDOMNodeList; cdecl; inline;
    procedure remove(error: PPGError); cdecl; inline;
    procedure remove_attribute(name: Pgchar); cdecl; inline;
    function remove_attribute_node(oldAttr: PWebKitDOMAttr; error: PPGError): PWebKitDOMAttr; cdecl; inline;
    procedure remove_attribute_ns(namespaceURI: Pgchar; localName: Pgchar); cdecl; inline;
    procedure scroll_by_lines(lines: glong); cdecl; inline;
    procedure scroll_by_pages(pages: glong); cdecl; inline;
    procedure scroll_into_view(alignWithTop: gboolean); cdecl; inline;
    procedure scroll_into_view_if_needed(centerIfNeeded: gboolean); cdecl; inline;
    procedure set_attribute(name: Pgchar; value: Pgchar; error: PPGError); cdecl; inline;
    function set_attribute_node(newAttr: PWebKitDOMAttr; error: PPGError): PWebKitDOMAttr; cdecl; inline;
    function set_attribute_node_ns(newAttr: PWebKitDOMAttr; error: PPGError): PWebKitDOMAttr; cdecl; inline;
    procedure set_attribute_ns(namespaceURI: Pgchar; qualifiedName: Pgchar; value: Pgchar; error: PPGError); cdecl; inline;
    procedure set_class_name(value: Pgchar); cdecl; inline;
    procedure set_scroll_left(value: glong); cdecl; inline;
    procedure set_scroll_top(value: glong); cdecl; inline;
    function webkit_matches_selector(selectors: Pgchar; error: PPGError): gboolean; cdecl; inline;
    procedure webkit_request_full_screen(flags: gushort); cdecl; inline;
    procedure webkit_request_fullscreen; cdecl; inline;
    procedure webkit_request_pointer_lock; cdecl; inline;
    property child_element_count: gulong read get_child_element_count ;
    property class_list: PWebKitDOMDOMTokenList read get_class_list ;
    property class_name: Pgchar read get_class_name write set_class_name;
    property client_height: glong read get_client_height ;
    property client_left: glong read get_client_left ;
    property client_top: glong read get_client_top ;
    property client_width: glong read get_client_width ;
    property first_element_child: PWebKitDOMElement read get_first_element_child ;
    property last_element_child: PWebKitDOMElement read get_last_element_child ;
    property next_element_sibling: PWebKitDOMElement read get_next_element_sibling ;
    property offset_height: glong read get_offset_height ;
    property offset_left: glong read get_offset_left ;
    property offset_parent: PWebKitDOMElement read get_offset_parent ;
    property offset_top: glong read get_offset_top ;
    property offset_width: glong read get_offset_width ;
    property previous_element_sibling: PWebKitDOMElement read get_previous_element_sibling ;
    property scroll_height: glong read get_scroll_height ;
    property scroll_left: glong read get_scroll_left write set_scroll_left;
    property scroll_top: glong read get_scroll_top write set_scroll_top;
    property scroll_width: glong read get_scroll_width ;
    property style: PWebKitDOMCSSStyleDeclaration read get_style ;
    property tag_name: Pgchar read get_tag_name ;
    property webkit_region_overset: Pgchar read get_webkit_region_overset ;
  end;

  PPWebKitDOMNodeClass = ^PWebKitDOMNodeClass;
  PWebKitDOMNodeClass = ^TWebKitDOMNodeClass;

  PPWebKitDOMObjectClass = ^PWebKitDOMObjectClass;
  PWebKitDOMObjectClass = ^TWebKitDOMObjectClass;
  TWebKitDOMObjectClass = object
    parentClass: TGObjectClass;
  end;
  TWebKitDOMNodeClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMAttrClass = ^PWebKitDOMAttrClass;
  PWebKitDOMAttrClass = ^TWebKitDOMAttrClass;
  TWebKitDOMAttrClass = object
    parent_class: TWebKitDOMNodeClass;
  end;

  PPWebKitDOMBarInfo = ^PWebKitDOMBarInfo;
  PWebKitDOMBarInfo = ^TWebKitDOMBarInfo;
  TWebKitDOMBarInfo = object(TWebKitDOMObject)
    function get_visible: gboolean; cdecl; inline;
    property visible: gboolean read get_visible ;
  end;

  PPWebKitDOMBarInfoClass = ^PWebKitDOMBarInfoClass;
  PWebKitDOMBarInfoClass = ^TWebKitDOMBarInfoClass;
  TWebKitDOMBarInfoClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMBlob = ^PWebKitDOMBlob;
  PWebKitDOMBlob = ^TWebKitDOMBlob;
  TWebKitDOMBlob = object(TWebKitDOMObject)
    function get_size: guint64; cdecl; inline;
    function slice(start: gint64; end_: gint64; contentType: Pgchar): PWebKitDOMBlob; cdecl; inline;
    function webkit_slice(start: gint64; end_: gint64; content_type: Pgchar): PWebKitDOMBlob; cdecl; inline;
    property size: guint64 read get_size ;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type ;
  end;

  PPWebKitDOMBlobClass = ^PWebKitDOMBlobClass;
  PWebKitDOMBlobClass = ^TWebKitDOMBlobClass;
  TWebKitDOMBlobClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMText = ^PWebKitDOMText;
  PWebKitDOMText = ^TWebKitDOMText;

  PPWebKitDOMCharacterData = ^PWebKitDOMCharacterData;
  PWebKitDOMCharacterData = ^TWebKitDOMCharacterData;
  TWebKitDOMCharacterData = object(TWebKitDOMNode)
    procedure append_data(data: Pgchar; error: PPGError); cdecl; inline;
    procedure delete_data(offset: gulong; length: gulong; error: PPGError); cdecl; inline;
    function get_data: Pgchar; cdecl; inline;
    function get_length: gulong; cdecl; inline;
    procedure insert_data(offset: gulong; data: Pgchar; error: PPGError); cdecl; inline;
    procedure remove(error: PPGError); cdecl; inline;
    procedure replace_data(offset: gulong; length: gulong; data: Pgchar; error: PPGError); cdecl; inline;
    procedure set_data(value: Pgchar; error: PPGError); cdecl; inline;
    function substring_data(offset: gulong; length: gulong; error: PPGError): Pgchar; cdecl; inline;
    property data: Pgchar read get_data  { property is writeable but setter not declared } ;
    property length: gulong read get_length ;
  end;
  TWebKitDOMText = object(TWebKitDOMCharacterData)
    function get_whole_text: Pgchar; cdecl; inline;
    function replace_whole_text(content: Pgchar; error: PPGError): PWebKitDOMText; cdecl; inline;
    function split_text(offset: gulong; error: PPGError): PWebKitDOMText; cdecl; inline;
    property whole_text: Pgchar read get_whole_text ;
  end;

  PPWebKitDOMCDATASection = ^PWebKitDOMCDATASection;
  PWebKitDOMCDATASection = ^TWebKitDOMCDATASection;
  TWebKitDOMCDATASection = object(TWebKitDOMText)
  end;

  PPWebKitDOMTextClass = ^PWebKitDOMTextClass;
  PWebKitDOMTextClass = ^TWebKitDOMTextClass;

  PPWebKitDOMCharacterDataClass = ^PWebKitDOMCharacterDataClass;
  PWebKitDOMCharacterDataClass = ^TWebKitDOMCharacterDataClass;
  TWebKitDOMCharacterDataClass = object
    parent_class: TWebKitDOMNodeClass;
  end;
  TWebKitDOMTextClass = object
    parent_class: TWebKitDOMCharacterDataClass;
  end;

  PPWebKitDOMCDATASectionClass = ^PWebKitDOMCDATASectionClass;
  PWebKitDOMCDATASectionClass = ^TWebKitDOMCDATASectionClass;
  TWebKitDOMCDATASectionClass = object
    parent_class: TWebKitDOMTextClass;
  end;

  PPWebKitDOMCSSRule = ^PWebKitDOMCSSRule;
  PWebKitDOMCSSRule = ^TWebKitDOMCSSRule;

  PPWebKitDOMCSSStyleSheet = ^PWebKitDOMCSSStyleSheet;
  PWebKitDOMCSSStyleSheet = ^TWebKitDOMCSSStyleSheet;
  TWebKitDOMCSSRule = object(TWebKitDOMObject)
    function get_css_text: Pgchar; cdecl; inline;
    function get_parent_rule: PWebKitDOMCSSRule; cdecl; inline;
    function get_parent_style_sheet: PWebKitDOMCSSStyleSheet; cdecl; inline;
    procedure set_css_text(value: Pgchar; error: PPGError); cdecl; inline;
    property css_text: Pgchar read get_css_text  { property is writeable but setter not declared } ;
    property parent_rule: PWebKitDOMCSSRule read get_parent_rule ;
    property parent_style_sheet: PWebKitDOMCSSStyleSheet read get_parent_style_sheet ;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type ;
  end;

  PPWebKitDOMStyleSheet = ^PWebKitDOMStyleSheet;
  PWebKitDOMStyleSheet = ^TWebKitDOMStyleSheet;

  PPWebKitDOMMediaList = ^PWebKitDOMMediaList;
  PWebKitDOMMediaList = ^TWebKitDOMMediaList;
  TWebKitDOMStyleSheet = object(TWebKitDOMObject)
    function get_disabled: gboolean; cdecl; inline;
    function get_href: Pgchar; cdecl; inline;
    function get_media: PWebKitDOMMediaList; cdecl; inline;
    function get_owner_node: PWebKitDOMNode; cdecl; inline;
    function get_parent_style_sheet: PWebKitDOMStyleSheet; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    procedure set_disabled(value: gboolean); cdecl; inline;
    property disabled: gboolean read get_disabled write set_disabled;
    property href: Pgchar read get_href ;
    property media: PWebKitDOMMediaList read get_media ;
    property owner_node: PWebKitDOMNode read get_owner_node ;
    property parent_style_sheet: PWebKitDOMStyleSheet read get_parent_style_sheet ;
    property title: Pgchar read get_title ;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type ;
  end;

  PPWebKitDOMCSSRuleList = ^PWebKitDOMCSSRuleList;
  PWebKitDOMCSSRuleList = ^TWebKitDOMCSSRuleList;
  TWebKitDOMCSSStyleSheet = object(TWebKitDOMStyleSheet)
    function add_rule(selector: Pgchar; style: Pgchar; index: gulong; error: PPGError): glong; cdecl; inline;
    procedure delete_rule(index: gulong; error: PPGError); cdecl; inline;
    function get_css_rules: PWebKitDOMCSSRuleList; cdecl; inline;
    function get_owner_rule: PWebKitDOMCSSRule; cdecl; inline;
    function get_rules: PWebKitDOMCSSRuleList; cdecl; inline;
    function insert_rule(rule: Pgchar; index: gulong; error: PPGError): gulong; cdecl; inline;
    procedure remove_rule(index: gulong; error: PPGError); cdecl; inline;
    property css_rules: PWebKitDOMCSSRuleList read get_css_rules ;
    property owner_rule: PWebKitDOMCSSRule read get_owner_rule ;
    property rules: PWebKitDOMCSSRuleList read get_rules ;
  end;

  PPWebKitDOMCSSRuleClass = ^PWebKitDOMCSSRuleClass;
  PWebKitDOMCSSRuleClass = ^TWebKitDOMCSSRuleClass;
  TWebKitDOMCSSRuleClass = object
    parent_class: TWebKitDOMObjectClass;
  end;
  TWebKitDOMCSSRuleList = object(TWebKitDOMObject)
    function get_length: gulong; cdecl; inline;
    function item(index: gulong): PWebKitDOMCSSRule; cdecl; inline;
    property length: gulong read get_length ;
  end;

  PPWebKitDOMCSSRuleListClass = ^PWebKitDOMCSSRuleListClass;
  PWebKitDOMCSSRuleListClass = ^TWebKitDOMCSSRuleListClass;
  TWebKitDOMCSSRuleListClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMCSSValue = ^PWebKitDOMCSSValue;
  PWebKitDOMCSSValue = ^TWebKitDOMCSSValue;
  TWebKitDOMCSSStyleDeclaration = object(TWebKitDOMObject)
    function get_css_text: Pgchar; cdecl; inline;
    function get_length: gulong; cdecl; inline;
    function get_parent_rule: PWebKitDOMCSSRule; cdecl; inline;
    function get_property_css_value(propertyName: Pgchar): PWebKitDOMCSSValue; cdecl; inline;
    function get_property_priority(propertyName: Pgchar): Pgchar; cdecl; inline;
    function get_property_shorthand(propertyName: Pgchar): Pgchar; cdecl; inline;
    function get_property_value(propertyName: Pgchar): Pgchar; cdecl; inline;
    function is_property_implicit(propertyName: Pgchar): gboolean; cdecl; inline;
    function item(index: gulong): Pgchar; cdecl; inline;
    function remove_property(propertyName: Pgchar; error: PPGError): Pgchar; cdecl; inline;
    procedure set_css_text(value: Pgchar; error: PPGError); cdecl; inline;
    procedure set_property(propertyName: Pgchar; value: Pgchar; priority: Pgchar; error: PPGError); cdecl; inline;
    property css_text: Pgchar read get_css_text  { property is writeable but setter not declared } ;
    property length: gulong read get_length ;
    property parent_rule: PWebKitDOMCSSRule read get_parent_rule ;
  end;
  TWebKitDOMCSSValue = object(TWebKitDOMObject)
    function get_css_text: Pgchar; cdecl; inline;
    function get_css_value_type: gushort; cdecl; inline;
    procedure set_css_text(value: Pgchar; error: PPGError); cdecl; inline;
    property css_text: Pgchar read get_css_text  { property is writeable but setter not declared } ;
    property css_value_type: gushort read get_css_value_type ;
  end;

  PPWebKitDOMCSSStyleDeclarationClass = ^PWebKitDOMCSSStyleDeclarationClass;
  PWebKitDOMCSSStyleDeclarationClass = ^TWebKitDOMCSSStyleDeclarationClass;
  TWebKitDOMCSSStyleDeclarationClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMStyleSheetClass = ^PWebKitDOMStyleSheetClass;
  PWebKitDOMStyleSheetClass = ^TWebKitDOMStyleSheetClass;
  TWebKitDOMStyleSheetClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMCSSStyleSheetClass = ^PWebKitDOMCSSStyleSheetClass;
  PWebKitDOMCSSStyleSheetClass = ^TWebKitDOMCSSStyleSheetClass;
  TWebKitDOMCSSStyleSheetClass = object
    parent_class: TWebKitDOMStyleSheetClass;
  end;

  PPWebKitDOMCSSValueClass = ^PWebKitDOMCSSValueClass;
  PWebKitDOMCSSValueClass = ^TWebKitDOMCSSValueClass;
  TWebKitDOMCSSValueClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMComment = ^PWebKitDOMComment;
  PWebKitDOMComment = ^TWebKitDOMComment;
  TWebKitDOMComment = object(TWebKitDOMCharacterData)
  end;

  PPWebKitDOMCommentClass = ^PWebKitDOMCommentClass;
  PWebKitDOMCommentClass = ^TWebKitDOMCommentClass;
  TWebKitDOMCommentClass = object
    parent_class: TWebKitDOMCharacterDataClass;
  end;

  PPWebKitDOMMemoryInfo = ^PWebKitDOMMemoryInfo;
  PWebKitDOMMemoryInfo = ^TWebKitDOMMemoryInfo;
  TWebKitDOMMemoryInfo = object(TWebKitDOMObject)
    function get_js_heap_size_limit: gulong; cdecl; inline;
    function get_total_js_heap_size: gulong; cdecl; inline;
    function get_used_js_heap_size: gulong; cdecl; inline;
    property js_heap_size_limit: gulong read get_js_heap_size_limit ;
    property total_js_heap_size: gulong read get_total_js_heap_size ;
    property used_js_heap_size: gulong read get_used_js_heap_size ;
  end;

  PPWebKitDOMConsole = ^PWebKitDOMConsole;
  PWebKitDOMConsole = ^TWebKitDOMConsole;
  TWebKitDOMConsole = object(TWebKitDOMObject)
    function get_memory: PWebKitDOMMemoryInfo; cdecl; inline;
    procedure group_end; cdecl; inline;
    procedure time(title: Pgchar); cdecl; inline;
    property memory: PWebKitDOMMemoryInfo read get_memory ;
  end;

  PPWebKitDOMConsoleClass = ^PWebKitDOMConsoleClass;
  PWebKitDOMConsoleClass = ^TWebKitDOMConsoleClass;
  TWebKitDOMConsoleClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMCustom = ^PWebKitDOMCustom;
  PWebKitDOMCustom = ^TWebKitDOMCustom;

  TWebKitDOMCustom = record
  end;



  PPWebKitDOMCustomClass = ^PWebKitDOMCustomClass;
  PWebKitDOMCustomClass = ^TWebKitDOMCustomClass;

  TWebKitDOMCustomClass = record
  end;



  PPWebKitDOMDOMApplicationCache = ^PWebKitDOMDOMApplicationCache;
  PWebKitDOMDOMApplicationCache = ^TWebKitDOMDOMApplicationCache;
  TWebKitDOMDOMApplicationCache = object(TWebKitDOMObject)
    procedure abort; cdecl; inline;
    function dispatch_event(evt: PWebKitDOMEvent; error: PPGError): gboolean; cdecl; inline;
    function get_status: gushort; cdecl; inline;
    procedure swap_cache(error: PPGError); cdecl; inline;
    procedure update(error: PPGError); cdecl; inline;
    property status: gushort read get_status ;
  end;
  TWebKitDOMEvent = object(TWebKitDOMObject)
    function get_bubbles: gboolean; cdecl; inline;
    function get_cancel_bubble: gboolean; cdecl; inline;
    function get_cancelable: gboolean; cdecl; inline;
    function get_current_target: PWebKitDOMEventTarget; cdecl; inline;
    function get_default_prevented: gboolean; cdecl; inline;
    function get_event_phase: gushort; cdecl; inline;
    function get_return_value: gboolean; cdecl; inline;
    function get_src_element: PWebKitDOMEventTarget; cdecl; inline;
    function get_target: PWebKitDOMEventTarget; cdecl; inline;
    function get_time_stamp: guint32; cdecl; inline;
    procedure init_event(eventTypeArg: Pgchar; canBubbleArg: gboolean; cancelableArg: gboolean); cdecl; inline;
    procedure prevent_default; cdecl; inline;
    procedure set_cancel_bubble(value: gboolean); cdecl; inline;
    procedure set_return_value(value: gboolean); cdecl; inline;
    procedure stop_immediate_propagation; cdecl; inline;
    procedure stop_propagation; cdecl; inline;
    property bubbles: gboolean read get_bubbles ;
    property cancel_bubble: gboolean read get_cancel_bubble write set_cancel_bubble;
    property cancelable: gboolean read get_cancelable ;
    property current_target: PWebKitDOMEventTarget read get_current_target ;
    property default_prevented: gboolean read get_default_prevented ;
    property event_phase: gushort read get_event_phase ;
    property return_value: gboolean read get_return_value write set_return_value;
    property src_element: PWebKitDOMEventTarget read get_src_element ;
    property target: PWebKitDOMEventTarget read get_target ;
    property time_stamp: guint32 read get_time_stamp ;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type ;
  end;

  PPWebKitDOMDOMApplicationCacheClass = ^PWebKitDOMDOMApplicationCacheClass;
  PWebKitDOMDOMApplicationCacheClass = ^TWebKitDOMDOMApplicationCacheClass;
  TWebKitDOMDOMApplicationCacheClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMDOMImplementation = ^PWebKitDOMDOMImplementation;
  PWebKitDOMDOMImplementation = ^TWebKitDOMDOMImplementation;

  PPWebKitDOMDocumentType = ^PWebKitDOMDocumentType;
  PWebKitDOMDocumentType = ^TWebKitDOMDocumentType;

  PPWebKitDOMHTMLDocument = ^PWebKitDOMHTMLDocument;
  PWebKitDOMHTMLDocument = ^TWebKitDOMHTMLDocument;
  TWebKitDOMDOMImplementation = object(TWebKitDOMObject)
    function create_css_style_sheet(title: Pgchar; media: Pgchar; error: PPGError): PWebKitDOMCSSStyleSheet; cdecl; inline;
    function create_document(namespaceURI: Pgchar; qualifiedName: Pgchar; doctype: PWebKitDOMDocumentType; error: PPGError): PWebKitDOMDocument; cdecl; inline;
    function create_document_type(qualifiedName: Pgchar; publicId: Pgchar; systemId: Pgchar; error: PPGError): PWebKitDOMDocumentType; cdecl; inline;
    function create_html_document(title: Pgchar): PWebKitDOMHTMLDocument; cdecl; inline;
    function has_feature(feature: Pgchar; version: Pgchar): gboolean; cdecl; inline;
  end;

  PPWebKitDOMRange = ^PWebKitDOMRange;
  PWebKitDOMRange = ^TWebKitDOMRange;

  PPWebKitDOMDocumentFragment = ^PWebKitDOMDocumentFragment;
  PWebKitDOMDocumentFragment = ^TWebKitDOMDocumentFragment;

  PPWebKitDOMEntityReference = ^PWebKitDOMEntityReference;
  PWebKitDOMEntityReference = ^TWebKitDOMEntityReference;

  PPWebKitDOMXPathExpression = ^PWebKitDOMXPathExpression;
  PWebKitDOMXPathExpression = ^TWebKitDOMXPathExpression;

  PPWebKitDOMXPathNSResolver = ^PWebKitDOMXPathNSResolver;
  PWebKitDOMXPathNSResolver = ^TWebKitDOMXPathNSResolver;

  PPWebKitDOMNodeIterator = ^PWebKitDOMNodeIterator;
  PWebKitDOMNodeIterator = ^TWebKitDOMNodeIterator;

  PPWebKitDOMNodeFilter = ^PWebKitDOMNodeFilter;
  PWebKitDOMNodeFilter = ^TWebKitDOMNodeFilter;

  PPWebKitDOMProcessingInstruction = ^PWebKitDOMProcessingInstruction;
  PWebKitDOMProcessingInstruction = ^TWebKitDOMProcessingInstruction;

  PPWebKitDOMTreeWalker = ^PWebKitDOMTreeWalker;
  PWebKitDOMTreeWalker = ^TWebKitDOMTreeWalker;

  PPWebKitDOMXPathResult = ^PWebKitDOMXPathResult;
  PWebKitDOMXPathResult = ^TWebKitDOMXPathResult;

  PPWebKitDOMHTMLCollection = ^PWebKitDOMHTMLCollection;
  PWebKitDOMHTMLCollection = ^TWebKitDOMHTMLCollection;

  PPWebKitDOMHTMLElement = ^PWebKitDOMHTMLElement;
  PWebKitDOMHTMLElement = ^TWebKitDOMHTMLElement;

  PPWebKitDOMDOMWindow = ^PWebKitDOMDOMWindow;
  PWebKitDOMDOMWindow = ^TWebKitDOMDOMWindow;

  PPWebKitDOMHTMLHeadElement = ^PWebKitDOMHTMLHeadElement;
  PWebKitDOMHTMLHeadElement = ^TWebKitDOMHTMLHeadElement;

  PPWebKitDOMDOMSecurityPolicy = ^PWebKitDOMDOMSecurityPolicy;
  PWebKitDOMDOMSecurityPolicy = ^TWebKitDOMDOMSecurityPolicy;

  PPWebKitDOMStyleSheetList = ^PWebKitDOMStyleSheetList;
  PWebKitDOMStyleSheetList = ^TWebKitDOMStyleSheetList;

  PPWebKitDOMDOMNamedFlowCollection = ^PWebKitDOMDOMNamedFlowCollection;
  PWebKitDOMDOMNamedFlowCollection = ^TWebKitDOMDOMNamedFlowCollection;
  TWebKitDOMDocument = object(TWebKitDOMNode)
    function adopt_node(source: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl; inline;
    function caret_range_from_point(x: glong; y: glong): PWebKitDOMRange; cdecl; inline;
    function create_attribute(name: Pgchar; error: PPGError): PWebKitDOMAttr; cdecl; inline;
    function create_attribute_ns(namespaceURI: Pgchar; qualifiedName: Pgchar; error: PPGError): PWebKitDOMAttr; cdecl; inline;
    function create_cdata_section(data: Pgchar; error: PPGError): PWebKitDOMCDATASection; cdecl; inline;
    function create_comment(data: Pgchar): PWebKitDOMComment; cdecl; inline;
    function create_css_style_declaration: PWebKitDOMCSSStyleDeclaration; cdecl; inline;
    function create_document_fragment: PWebKitDOMDocumentFragment; cdecl; inline;
    function create_element(tagName: Pgchar; error: PPGError): PWebKitDOMElement; cdecl; inline;
    function create_element_ns(namespaceURI: Pgchar; qualifiedName: Pgchar; error: PPGError): PWebKitDOMElement; cdecl; inline;
    function create_entity_reference(name: Pgchar; error: PPGError): PWebKitDOMEntityReference; cdecl; inline;
    function create_event(eventType: Pgchar; error: PPGError): PWebKitDOMEvent; cdecl; inline;
    function create_expression(expression: Pgchar; resolver: PWebKitDOMXPathNSResolver; error: PPGError): PWebKitDOMXPathExpression; cdecl; inline;
    function create_node_iterator(root: PWebKitDOMNode; whatToShow: gulong; filter: PWebKitDOMNodeFilter; expandEntityReferences: gboolean; error: PPGError): PWebKitDOMNodeIterator; cdecl; inline;
    function create_ns_resolver(nodeResolver: PWebKitDOMNode): PWebKitDOMXPathNSResolver; cdecl; inline;
    function create_processing_instruction(target: Pgchar; data: Pgchar; error: PPGError): PWebKitDOMProcessingInstruction; cdecl; inline;
    function create_range: PWebKitDOMRange; cdecl; inline;
    function create_text_node(data: Pgchar): PWebKitDOMText; cdecl; inline;
    function create_tree_walker(root: PWebKitDOMNode; whatToShow: gulong; filter: PWebKitDOMNodeFilter; expandEntityReferences: gboolean; error: PPGError): PWebKitDOMTreeWalker; cdecl; inline;
    function element_from_point(x: glong; y: glong): PWebKitDOMElement; cdecl; inline;
    function evaluate(expression: Pgchar; contextNode: PWebKitDOMNode; resolver: PWebKitDOMXPathNSResolver; type_: gushort; inResult: PWebKitDOMXPathResult; error: PPGError): PWebKitDOMXPathResult; cdecl; inline;
    function exec_command(command: Pgchar; userInterface: gboolean; value: Pgchar): gboolean; cdecl; inline;
    function get_anchors: PWebKitDOMHTMLCollection; cdecl; inline;
    function get_applets: PWebKitDOMHTMLCollection; cdecl; inline;
    function get_body: PWebKitDOMHTMLElement; cdecl; inline;
    function get_character_set: Pgchar; cdecl; inline;
    function get_charset: Pgchar; cdecl; inline;
    function get_compat_mode: Pgchar; cdecl; inline;
    function get_cookie(error: PPGError): Pgchar; cdecl; inline;
    function get_default_charset: Pgchar; cdecl; inline;
    function get_default_view: PWebKitDOMDOMWindow; cdecl; inline;
    function get_doctype: PWebKitDOMDocumentType; cdecl; inline;
    function get_document_element: PWebKitDOMElement; cdecl; inline;
    function get_document_uri: Pgchar; cdecl; inline;
    function get_domain: Pgchar; cdecl; inline;
    function get_element_by_id(elementId: Pgchar): PWebKitDOMElement; cdecl; inline;
    function get_elements_by_class_name(tagname: Pgchar): PWebKitDOMNodeList; cdecl; inline;
    function get_elements_by_name(elementName: Pgchar): PWebKitDOMNodeList; cdecl; inline;
    function get_elements_by_tag_name(tagname: Pgchar): PWebKitDOMNodeList; cdecl; inline;
    function get_elements_by_tag_name_ns(namespaceURI: Pgchar; localName: Pgchar): PWebKitDOMNodeList; cdecl; inline;
    function get_forms: PWebKitDOMHTMLCollection; cdecl; inline;
    function get_head: PWebKitDOMHTMLHeadElement; cdecl; inline;
    function get_images: PWebKitDOMHTMLCollection; cdecl; inline;
    function get_implementation: PWebKitDOMDOMImplementation; cdecl; inline;
    function get_input_encoding: Pgchar; cdecl; inline;
    function get_last_modified: Pgchar; cdecl; inline;
    function get_links: PWebKitDOMHTMLCollection; cdecl; inline;
    function get_override_style(element: PWebKitDOMElement; pseudoElement: Pgchar): PWebKitDOMCSSStyleDeclaration; cdecl; inline;
    function get_preferred_stylesheet_set: Pgchar; cdecl; inline;
    function get_ready_state: Pgchar; cdecl; inline;
    function get_referrer: Pgchar; cdecl; inline;
    function get_security_policy: PWebKitDOMDOMSecurityPolicy; cdecl; inline;
    function get_selected_stylesheet_set: Pgchar; cdecl; inline;
    function get_style_sheets: PWebKitDOMStyleSheetList; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_webkit_current_full_screen_element: PWebKitDOMElement; cdecl; inline;
    function get_webkit_full_screen_keyboard_input_allowed: gboolean; cdecl; inline;
    function get_webkit_fullscreen_element: PWebKitDOMElement; cdecl; inline;
    function get_webkit_fullscreen_enabled: gboolean; cdecl; inline;
    function get_webkit_hidden: gboolean; cdecl; inline;
    function get_webkit_is_full_screen: gboolean; cdecl; inline;
    function get_webkit_pointer_lock_element: PWebKitDOMElement; cdecl; inline;
    function get_webkit_visibility_state: Pgchar; cdecl; inline;
    function get_xml_encoding: Pgchar; cdecl; inline;
    function get_xml_standalone: gboolean; cdecl; inline;
    function get_xml_version: Pgchar; cdecl; inline;
    function import_node(importedNode: PWebKitDOMNode; deep: gboolean; error: PPGError): PWebKitDOMNode; cdecl; inline;
    function query_command_enabled(command: Pgchar): gboolean; cdecl; inline;
    function query_command_indeterm(command: Pgchar): gboolean; cdecl; inline;
    function query_command_state(command: Pgchar): gboolean; cdecl; inline;
    function query_command_supported(command: Pgchar): gboolean; cdecl; inline;
    function query_command_value(command: Pgchar): Pgchar; cdecl; inline;
    function query_selector(selectors: Pgchar; error: PPGError): PWebKitDOMElement; cdecl; inline;
    function query_selector_all(selectors: Pgchar; error: PPGError): PWebKitDOMNodeList; cdecl; inline;
    procedure set_body(value: PWebKitDOMHTMLElement; error: PPGError); cdecl; inline;
    procedure set_charset(value: Pgchar); cdecl; inline;
    procedure set_cookie(value: Pgchar; error: PPGError); cdecl; inline;
    procedure set_document_uri(value: Pgchar); cdecl; inline;
    procedure set_selected_stylesheet_set(value: Pgchar); cdecl; inline;
    procedure set_title(value: Pgchar); cdecl; inline;
    procedure set_xml_standalone(value: gboolean; error: PPGError); cdecl; inline;
    procedure set_xml_version(value: Pgchar; error: PPGError); cdecl; inline;
    procedure webkit_cancel_full_screen; cdecl; inline;
    procedure webkit_exit_fullscreen; cdecl; inline;
    procedure webkit_exit_pointer_lock; cdecl; inline;
    function webkit_get_named_flows: PWebKitDOMDOMNamedFlowCollection; cdecl; inline;
    property anchors: PWebKitDOMHTMLCollection read get_anchors ;
    property applets: PWebKitDOMHTMLCollection read get_applets ;
    property body: PWebKitDOMHTMLElement read get_body  { property is writeable but setter not declared } ;
    property character_set: Pgchar read get_character_set ;
    property charset: Pgchar read get_charset write set_charset;
    property compat_mode: Pgchar read get_compat_mode ;
    //property cookie: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cookie  { property is writeable but setter not declared } ;
    property default_charset: Pgchar read get_default_charset ;
    property default_view: PWebKitDOMDOMWindow read get_default_view ;
    property doctype: PWebKitDOMDocumentType read get_doctype ;
    property document_element: PWebKitDOMElement read get_document_element ;
    property document_uri: Pgchar read get_document_uri write set_document_uri;
    property domain: Pgchar read get_domain ;
    property forms: PWebKitDOMHTMLCollection read get_forms ;
    property head: PWebKitDOMHTMLHeadElement read get_head ;
    property images: PWebKitDOMHTMLCollection read get_images ;
    property implementation_: PWebKitDOMDOMImplementation read get_implementation ;
    property input_encoding: Pgchar read get_input_encoding ;
    property last_modified: Pgchar read get_last_modified ;
    property links: PWebKitDOMHTMLCollection read get_links ;
    property preferred_stylesheet_set: Pgchar read get_preferred_stylesheet_set ;
    property ready_state: Pgchar read get_ready_state ;
    property referrer: Pgchar read get_referrer ;
    property security_policy: PWebKitDOMDOMSecurityPolicy read get_security_policy ;
    property selected_stylesheet_set: Pgchar read get_selected_stylesheet_set write set_selected_stylesheet_set;
    property style_sheets: PWebKitDOMStyleSheetList read get_style_sheets ;
    property title: Pgchar read get_title write set_title;
    //property url: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_url ;
    property webkit_current_full_screen_element: PWebKitDOMElement read get_webkit_current_full_screen_element ;
    property webkit_full_screen_keyboard_input_allowed: gboolean read get_webkit_full_screen_keyboard_input_allowed ;
    property webkit_fullscreen_element: PWebKitDOMElement read get_webkit_fullscreen_element ;
    property webkit_fullscreen_enabled: gboolean read get_webkit_fullscreen_enabled ;
    property webkit_hidden: gboolean read get_webkit_hidden ;
    property webkit_is_full_screen: gboolean read get_webkit_is_full_screen ;
    property webkit_pointer_lock_element: PWebKitDOMElement read get_webkit_pointer_lock_element ;
    property webkit_visibility_state: Pgchar read get_webkit_visibility_state ;
    property xml_encoding: Pgchar read get_xml_encoding ;
    property xml_standalone: gboolean read get_xml_standalone  { property is writeable but setter not declared } ;
    property xml_version: Pgchar read get_xml_version  { property is writeable but setter not declared } ;
  end;
  TWebKitDOMDocumentType = object(TWebKitDOMNode)
    function get_entities: PWebKitDOMNamedNodeMap; cdecl; inline;
    function get_internal_subset: Pgchar; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_notations: PWebKitDOMNamedNodeMap; cdecl; inline;
    function get_public_id: Pgchar; cdecl; inline;
    function get_system_id: Pgchar; cdecl; inline;
    procedure remove(error: PPGError); cdecl; inline;
    property entities: PWebKitDOMNamedNodeMap read get_entities ;
    property internal_subset: Pgchar read get_internal_subset ;
    property name: Pgchar read get_name ;
    property notations: PWebKitDOMNamedNodeMap read get_notations ;
    property public_id: Pgchar read get_public_id ;
    property system_id: Pgchar read get_system_id ;
  end;
  TWebKitDOMHTMLDocument = object(TWebKitDOMDocument)
    procedure capture_events; cdecl; inline;
    procedure clear; cdecl; inline;
    procedure close; cdecl; inline;
    function get_active_element: PWebKitDOMElement; cdecl; inline;
    function get_alink_color: Pgchar; cdecl; inline;
    function get_bg_color: Pgchar; cdecl; inline;
    function get_compat_mode: Pgchar; cdecl; inline;
    function get_design_mode: Pgchar; cdecl; inline;
    function get_dir: Pgchar; cdecl; inline;
    function get_embeds: PWebKitDOMHTMLCollection; cdecl; inline;
    function get_fg_color: Pgchar; cdecl; inline;
    function get_height: glong; cdecl; inline;
    function get_link_color: Pgchar; cdecl; inline;
    function get_plugins: PWebKitDOMHTMLCollection; cdecl; inline;
    function get_scripts: PWebKitDOMHTMLCollection; cdecl; inline;
    function get_vlink_color: Pgchar; cdecl; inline;
    function get_width: glong; cdecl; inline;
    function has_focus: gboolean; cdecl; inline;
    procedure open; cdecl; inline;
    procedure release_events; cdecl; inline;
    procedure set_alink_color(value: Pgchar); cdecl; inline;
    procedure set_bg_color(value: Pgchar); cdecl; inline;
    procedure set_design_mode(value: Pgchar); cdecl; inline;
    procedure set_dir(value: Pgchar); cdecl; inline;
    procedure set_fg_color(value: Pgchar); cdecl; inline;
    procedure set_link_color(value: Pgchar); cdecl; inline;
    procedure set_vlink_color(value: Pgchar); cdecl; inline;
    property active_element: PWebKitDOMElement read get_active_element ;
    property alink_color: Pgchar read get_alink_color write set_alink_color;
    property bg_color: Pgchar read get_bg_color write set_bg_color;
    property compat_mode1: Pgchar read get_compat_mode ;
    property design_mode: Pgchar read get_design_mode write set_design_mode;
    property dir: Pgchar read get_dir write set_dir;
    property embeds: PWebKitDOMHTMLCollection read get_embeds ;
    property fg_color: Pgchar read get_fg_color write set_fg_color;
    property height: glong read get_height ;
    property link_color: Pgchar read get_link_color write set_link_color;
    property plugins: PWebKitDOMHTMLCollection read get_plugins ;
    property scripts: PWebKitDOMHTMLCollection read get_scripts ;
    property vlink_color: Pgchar read get_vlink_color write set_vlink_color;
    property width: glong read get_width ;
  end;

  PPWebKitDOMDOMImplementationClass = ^PWebKitDOMDOMImplementationClass;
  PWebKitDOMDOMImplementationClass = ^TWebKitDOMDOMImplementationClass;
  TWebKitDOMDOMImplementationClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMDOMMimeType = ^PWebKitDOMDOMMimeType;
  PWebKitDOMDOMMimeType = ^TWebKitDOMDOMMimeType;

  PPWebKitDOMDOMPlugin = ^PWebKitDOMDOMPlugin;
  PWebKitDOMDOMPlugin = ^TWebKitDOMDOMPlugin;
  TWebKitDOMDOMMimeType = object(TWebKitDOMObject)
    function get_description: Pgchar; cdecl; inline;
    function get_enabled_plugin: PWebKitDOMDOMPlugin; cdecl; inline;
    function get_suffixes: Pgchar; cdecl; inline;
    property description: Pgchar read get_description ;
    property enabled_plugin: PWebKitDOMDOMPlugin read get_enabled_plugin ;
    property suffixes: Pgchar read get_suffixes ;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type ;
  end;
  TWebKitDOMDOMPlugin = object(TWebKitDOMObject)
    function get_description: Pgchar; cdecl; inline;
    function get_filename: Pgchar; cdecl; inline;
    function get_length: gulong; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function item(index: gulong): PWebKitDOMDOMMimeType; cdecl; inline;
    function named_item(name: Pgchar): PWebKitDOMDOMMimeType; cdecl; inline;
    property description: Pgchar read get_description ;
    property filename: Pgchar read get_filename ;
    property length: gulong read get_length ;
    property name: Pgchar read get_name ;
  end;

  PPWebKitDOMDOMMimeTypeArray = ^PWebKitDOMDOMMimeTypeArray;
  PWebKitDOMDOMMimeTypeArray = ^TWebKitDOMDOMMimeTypeArray;
  TWebKitDOMDOMMimeTypeArray = object(TWebKitDOMObject)
    function get_length: gulong; cdecl; inline;
    function item(index: gulong): PWebKitDOMDOMMimeType; cdecl; inline;
    function named_item(name: Pgchar): PWebKitDOMDOMMimeType; cdecl; inline;
    property length: gulong read get_length ;
  end;

  PPWebKitDOMDOMMimeTypeArrayClass = ^PWebKitDOMDOMMimeTypeArrayClass;
  PWebKitDOMDOMMimeTypeArrayClass = ^TWebKitDOMDOMMimeTypeArrayClass;
  TWebKitDOMDOMMimeTypeArrayClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMDOMMimeTypeClass = ^PWebKitDOMDOMMimeTypeClass;
  PWebKitDOMDOMMimeTypeClass = ^TWebKitDOMDOMMimeTypeClass;
  TWebKitDOMDOMMimeTypeClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMWebKitNamedFlow = ^PWebKitDOMWebKitNamedFlow;
  PWebKitDOMWebKitNamedFlow = ^TWebKitDOMWebKitNamedFlow;
  TWebKitDOMDOMNamedFlowCollection = object(TWebKitDOMObject)
    function get_length: gulong; cdecl; inline;
    function item(index: gulong): PWebKitDOMWebKitNamedFlow; cdecl; inline;
    function named_item(name: Pgchar): PWebKitDOMWebKitNamedFlow; cdecl; inline;
    property length: gulong read get_length ;
  end;
  TWebKitDOMWebKitNamedFlow = object(TWebKitDOMObject)
    function dispatch_event(event: PWebKitDOMEvent; error: PPGError): gboolean; cdecl; inline;
    function get_content: PWebKitDOMNodeList; cdecl; inline;
    function get_content_nodes: PWebKitDOMNodeList; cdecl; inline;
    function get_first_empty_region_index: glong; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_overflow: gboolean; cdecl; inline;
    function get_overset: gboolean; cdecl; inline;
    function get_regions: PWebKitDOMNodeList; cdecl; inline;
    function get_regions_by_content(contentNode: PWebKitDOMNode): PWebKitDOMNodeList; cdecl; inline;
    function get_regions_by_content_node(contentNode: PWebKitDOMNode): PWebKitDOMNodeList; cdecl; inline;
    property first_empty_region_index: glong read get_first_empty_region_index ;
    property name: Pgchar read get_name ;
    property overset: gboolean read get_overset ;
  end;

  PPWebKitDOMDOMNamedFlowCollectionClass = ^PWebKitDOMDOMNamedFlowCollectionClass;
  PWebKitDOMDOMNamedFlowCollectionClass = ^TWebKitDOMDOMNamedFlowCollectionClass;
  TWebKitDOMDOMNamedFlowCollectionClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMDOMPluginArray = ^PWebKitDOMDOMPluginArray;
  PWebKitDOMDOMPluginArray = ^TWebKitDOMDOMPluginArray;
  TWebKitDOMDOMPluginArray = object(TWebKitDOMObject)
    function get_length: gulong; cdecl; inline;
    function item(index: gulong): PWebKitDOMDOMPlugin; cdecl; inline;
    function named_item(name: Pgchar): PWebKitDOMDOMPlugin; cdecl; inline;
    procedure refresh(reload: gboolean); cdecl; inline;
    property length: gulong read get_length ;
  end;

  PPWebKitDOMDOMPluginArrayClass = ^PWebKitDOMDOMPluginArrayClass;
  PWebKitDOMDOMPluginArrayClass = ^TWebKitDOMDOMPluginArrayClass;
  TWebKitDOMDOMPluginArrayClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMDOMPluginClass = ^PWebKitDOMDOMPluginClass;
  PWebKitDOMDOMPluginClass = ^TWebKitDOMDOMPluginClass;
  TWebKitDOMDOMPluginClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMDOMStringList = ^PWebKitDOMDOMStringList;
  PWebKitDOMDOMStringList = ^TWebKitDOMDOMStringList;
  TWebKitDOMDOMSecurityPolicy = object(TWebKitDOMObject)
    function allows_connection_to(url: Pgchar): gboolean; cdecl; inline;
    function allows_font_from(url: Pgchar): gboolean; cdecl; inline;
    function allows_form_action(url: Pgchar): gboolean; cdecl; inline;
    function allows_frame_from(url: Pgchar): gboolean; cdecl; inline;
    function allows_image_from(url: Pgchar): gboolean; cdecl; inline;
    function allows_media_from(url: Pgchar): gboolean; cdecl; inline;
    function allows_object_from(url: Pgchar): gboolean; cdecl; inline;
    function allows_plugin_type(type_: Pgchar): gboolean; cdecl; inline;
    function allows_script_from(url: Pgchar): gboolean; cdecl; inline;
    function allows_style_from(url: Pgchar): gboolean; cdecl; inline;
    function get_allows_eval: gboolean; cdecl; inline;
    function get_allows_inline_script: gboolean; cdecl; inline;
    function get_allows_inline_style: gboolean; cdecl; inline;
    function get_is_active: gboolean; cdecl; inline;
    function get_report_ur_is: PWebKitDOMDOMStringList; cdecl; inline;
    property allows_eval: gboolean read get_allows_eval ;
    property allows_inline_script: gboolean read get_allows_inline_script ;
    property allows_inline_style: gboolean read get_allows_inline_style ;
    property is_active: gboolean read get_is_active ;
    property report_ur_is: PWebKitDOMDOMStringList read get_report_ur_is ;
  end;
  TWebKitDOMDOMStringList = object(TWebKitDOMObject)
    function contains(string_: Pgchar): gboolean; cdecl; inline;
    function get_length: gulong; cdecl; inline;
    function item(index: gulong): Pgchar; cdecl; inline;
    property length: gulong read get_length ;
  end;

  PPWebKitDOMDOMSecurityPolicyClass = ^PWebKitDOMDOMSecurityPolicyClass;
  PWebKitDOMDOMSecurityPolicyClass = ^TWebKitDOMDOMSecurityPolicyClass;
  TWebKitDOMDOMSecurityPolicyClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMDOMSelection = ^PWebKitDOMDOMSelection;
  PWebKitDOMDOMSelection = ^TWebKitDOMDOMSelection;
  TWebKitDOMDOMSelection = object(TWebKitDOMObject)
    procedure add_range(range: PWebKitDOMRange); cdecl; inline;
    procedure collapse(node: PWebKitDOMNode; index: glong; error: PPGError); cdecl; inline;
    procedure collapse_to_end(error: PPGError); cdecl; inline;
    procedure collapse_to_start(error: PPGError); cdecl; inline;
    function contains_node(node: PWebKitDOMNode; allowPartial: gboolean): gboolean; cdecl; inline;
    procedure delete_from_document; cdecl; inline;
    procedure empty; cdecl; inline;
    procedure extend(node: PWebKitDOMNode; offset: glong; error: PPGError); cdecl; inline;
    function get_anchor_node: PWebKitDOMNode; cdecl; inline;
    function get_anchor_offset: glong; cdecl; inline;
    function get_base_node: PWebKitDOMNode; cdecl; inline;
    function get_base_offset: glong; cdecl; inline;
    function get_extent_node: PWebKitDOMNode; cdecl; inline;
    function get_extent_offset: glong; cdecl; inline;
    function get_focus_node: PWebKitDOMNode; cdecl; inline;
    function get_focus_offset: glong; cdecl; inline;
    function get_is_collapsed: gboolean; cdecl; inline;
    function get_range_at(index: glong; error: PPGError): PWebKitDOMRange; cdecl; inline;
    function get_range_count: glong; cdecl; inline;
    procedure modify(alter: Pgchar; direction: Pgchar; granularity: Pgchar); cdecl; inline;
    procedure remove_all_ranges; cdecl; inline;
    procedure select_all_children(node: PWebKitDOMNode; error: PPGError); cdecl; inline;
    procedure set_base_and_extent(baseNode: PWebKitDOMNode; baseOffset: glong; extentNode: PWebKitDOMNode; extentOffset: glong; error: PPGError); cdecl; inline;
    procedure set_position(node: PWebKitDOMNode; offset: glong; error: PPGError); cdecl; inline;
    property anchor_node: PWebKitDOMNode read get_anchor_node ;
    property anchor_offset: glong read get_anchor_offset ;
    property base_node: PWebKitDOMNode read get_base_node ;
    property base_offset: glong read get_base_offset ;
    property extent_node: PWebKitDOMNode read get_extent_node ;
    property extent_offset: glong read get_extent_offset ;
    property focus_node: PWebKitDOMNode read get_focus_node ;
    property focus_offset: glong read get_focus_offset ;
    property is_collapsed: gboolean read get_is_collapsed ;
    property range_count: glong read get_range_count ;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type ;
  end;
  TWebKitDOMRange = object(TWebKitDOMObject)
    function clone_contents(error: PPGError): PWebKitDOMDocumentFragment; cdecl; inline;
    function clone_range(error: PPGError): PWebKitDOMRange; cdecl; inline;
    procedure collapse(toStart: gboolean; error: PPGError); cdecl; inline;
    function compare_boundary_points(how: gushort; sourceRange: PWebKitDOMRange; error: PPGError): gshort; cdecl; inline;
    function compare_node(refNode: PWebKitDOMNode; error: PPGError): gshort; cdecl; inline;
    function compare_point(refNode: PWebKitDOMNode; offset: glong; error: PPGError): gshort; cdecl; inline;
    function create_contextual_fragment(html: Pgchar; error: PPGError): PWebKitDOMDocumentFragment; cdecl; inline;
    procedure delete_contents(error: PPGError); cdecl; inline;
    procedure detach(error: PPGError); cdecl; inline;
    procedure expand(unit_: Pgchar; error: PPGError); cdecl; inline;
    function extract_contents(error: PPGError): PWebKitDOMDocumentFragment; cdecl; inline;
    function get_collapsed(error: PPGError): gboolean; cdecl; inline;
    function get_common_ancestor_container(error: PPGError): PWebKitDOMNode; cdecl; inline;
    function get_end_container(error: PPGError): PWebKitDOMNode; cdecl; inline;
    function get_end_offset(error: PPGError): glong; cdecl; inline;
    function get_start_container(error: PPGError): PWebKitDOMNode; cdecl; inline;
    function get_start_offset(error: PPGError): glong; cdecl; inline;
    function get_text: Pgchar; cdecl; inline;
    procedure insert_node(newNode: PWebKitDOMNode; error: PPGError); cdecl; inline;
    function intersects_node(refNode: PWebKitDOMNode; error: PPGError): gboolean; cdecl; inline;
    function is_point_in_range(refNode: PWebKitDOMNode; offset: glong; error: PPGError): gboolean; cdecl; inline;
    procedure select_node(refNode: PWebKitDOMNode; error: PPGError); cdecl; inline;
    procedure select_node_contents(refNode: PWebKitDOMNode; error: PPGError); cdecl; inline;
    procedure set_end(refNode: PWebKitDOMNode; offset: glong; error: PPGError); cdecl; inline;
    procedure set_end_after(refNode: PWebKitDOMNode; error: PPGError); cdecl; inline;
    procedure set_end_before(refNode: PWebKitDOMNode; error: PPGError); cdecl; inline;
    procedure set_start(refNode: PWebKitDOMNode; offset: glong; error: PPGError); cdecl; inline;
    procedure set_start_after(refNode: PWebKitDOMNode; error: PPGError); cdecl; inline;
    procedure set_start_before(refNode: PWebKitDOMNode; error: PPGError); cdecl; inline;
    procedure surround_contents(newParent: PWebKitDOMNode; error: PPGError); cdecl; inline;
    function to_string(error: PPGError): Pgchar; cdecl; inline;
    //property collapsed: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_collapsed ;
    //property common_ancestor_container: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_common_ancestor_container ;
    //property end_container: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_end_container ;
    //property end_offset: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_end_offset ;
    //property start_container: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_start_container ;
    //property start_offset: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_start_offset ;
    property text: Pgchar read get_text ;
  end;

  PPWebKitDOMDOMSelectionClass = ^PWebKitDOMDOMSelectionClass;
  PWebKitDOMDOMSelectionClass = ^TWebKitDOMDOMSelectionClass;
  TWebKitDOMDOMSelectionClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMDOMSettableTokenList = ^PWebKitDOMDOMSettableTokenList;
  PWebKitDOMDOMSettableTokenList = ^TWebKitDOMDOMSettableTokenList;
  TWebKitDOMDOMTokenList = object(TWebKitDOMObject)
    procedure add(tokens: Pgchar; error: PPGError); cdecl; inline;
    function contains(token: Pgchar; error: PPGError): gboolean; cdecl; inline;
    function get_length: gulong; cdecl; inline;
    function item(index: gulong): Pgchar; cdecl; inline;
    procedure remove(tokens: Pgchar; error: PPGError); cdecl; inline;
    function toggle(token: Pgchar; force: gboolean; error: PPGError): gboolean; cdecl; inline;
    property length: gulong read get_length ;
  end;
  TWebKitDOMDOMSettableTokenList = object(TWebKitDOMDOMTokenList)
    function get_value: Pgchar; cdecl; inline;
    procedure set_value(value: Pgchar); cdecl; inline;
    property value: Pgchar read get_value write set_value;
  end;

  PPWebKitDOMDOMTokenListClass = ^PWebKitDOMDOMTokenListClass;
  PWebKitDOMDOMTokenListClass = ^TWebKitDOMDOMTokenListClass;
  TWebKitDOMDOMTokenListClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMDOMSettableTokenListClass = ^PWebKitDOMDOMSettableTokenListClass;
  PWebKitDOMDOMSettableTokenListClass = ^TWebKitDOMDOMSettableTokenListClass;
  TWebKitDOMDOMSettableTokenListClass = object
    parent_class: TWebKitDOMDOMTokenListClass;
  end;

  PPWebKitDOMDOMStringListClass = ^PWebKitDOMDOMStringListClass;
  PWebKitDOMDOMStringListClass = ^TWebKitDOMDOMStringListClass;
  TWebKitDOMDOMStringListClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMDOMStringMap = ^PWebKitDOMDOMStringMap;
  PWebKitDOMDOMStringMap = ^TWebKitDOMDOMStringMap;
  TWebKitDOMDOMStringMap = object(TWebKitDOMObject)
  end;

  PPWebKitDOMDOMStringMapClass = ^PWebKitDOMDOMStringMapClass;
  PWebKitDOMDOMStringMapClass = ^TWebKitDOMDOMStringMapClass;
  TWebKitDOMDOMStringMapClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMNavigator = ^PWebKitDOMNavigator;
  PWebKitDOMNavigator = ^TWebKitDOMNavigator;

  PPWebKitDOMDOMWindowCSS = ^PWebKitDOMDOMWindowCSS;
  PWebKitDOMDOMWindowCSS = ^TWebKitDOMDOMWindowCSS;

  PPWebKitDOMHistory = ^PWebKitDOMHistory;
  PWebKitDOMHistory = ^TWebKitDOMHistory;

  PPWebKitDOMStorage = ^PWebKitDOMStorage;
  PWebKitDOMStorage = ^TWebKitDOMStorage;

  PPWebKitDOMPerformance = ^PWebKitDOMPerformance;
  PWebKitDOMPerformance = ^TWebKitDOMPerformance;

  PPWebKitDOMScreen = ^PWebKitDOMScreen;
  PWebKitDOMScreen = ^TWebKitDOMScreen;

  PPWebKitDOMStyleMedia = ^PWebKitDOMStyleMedia;
  PWebKitDOMStyleMedia = ^TWebKitDOMStyleMedia;

  PPWebKitDOMStorageInfo = ^PWebKitDOMStorageInfo;
  PWebKitDOMStorageInfo = ^TWebKitDOMStorageInfo;

  PPWebKitDOMMediaQueryList = ^PWebKitDOMMediaQueryList;
  PWebKitDOMMediaQueryList = ^TWebKitDOMMediaQueryList;

  PPWebKitDOMWebKitPoint = ^PWebKitDOMWebKitPoint;
  PWebKitDOMWebKitPoint = ^TWebKitDOMWebKitPoint;
  TWebKitDOMDOMWindow = object(TWebKitDOMObject)
    procedure alert(message: Pgchar); cdecl; inline;
    function atob(string_: Pgchar; error: PPGError): Pgchar; cdecl; inline;
    procedure blur; cdecl; inline;
    function btoa(string_: Pgchar; error: PPGError): Pgchar; cdecl; inline;
    procedure cancel_animation_frame(id: glong); cdecl; inline;
    procedure capture_events; cdecl; inline;
    procedure clear_interval(handle: glong); cdecl; inline;
    procedure clear_timeout(handle: glong); cdecl; inline;
    procedure close; cdecl; inline;
    function confirm(message: Pgchar): gboolean; cdecl; inline;
    function dispatch_event(evt: PWebKitDOMEvent; error: PPGError): gboolean; cdecl; inline;
    function find(string_: Pgchar; caseSensitive: gboolean; backwards: gboolean; wrap: gboolean; wholeWord: gboolean; searchInFrames: gboolean; showDialog: gboolean): gboolean; cdecl; inline;
    procedure focus; cdecl; inline;
    function get_application_cache: PWebKitDOMDOMApplicationCache; cdecl; inline;
    function get_client_information: PWebKitDOMNavigator; cdecl; inline;
    function get_closed: gboolean; cdecl; inline;
    function get_computed_style(element: PWebKitDOMElement; pseudoElement: Pgchar): PWebKitDOMCSSStyleDeclaration; cdecl; inline;
    function get_console: PWebKitDOMConsole; cdecl; inline;
    function get_css: PWebKitDOMDOMWindowCSS; cdecl; inline;
    function get_default_status: Pgchar; cdecl; inline;
    function get_device_pixel_ratio: gdouble; cdecl; inline;
    function get_document: PWebKitDOMDocument; cdecl; inline;
    function get_frame_element: PWebKitDOMElement; cdecl; inline;
    function get_frames: PWebKitDOMDOMWindow; cdecl; inline;
    function get_history: PWebKitDOMHistory; cdecl; inline;
    function get_inner_height: glong; cdecl; inline;
    function get_inner_width: glong; cdecl; inline;
    function get_length: gulong; cdecl; inline;
    function get_local_storage(error: PPGError): PWebKitDOMStorage; cdecl; inline;
    function get_locationbar: PWebKitDOMBarInfo; cdecl; inline;
    function get_menubar: PWebKitDOMBarInfo; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_navigator: PWebKitDOMNavigator; cdecl; inline;
    function get_offscreen_buffering: gboolean; cdecl; inline;
    function get_opener: PWebKitDOMDOMWindow; cdecl; inline;
    function get_outer_height: glong; cdecl; inline;
    function get_outer_width: glong; cdecl; inline;
    function get_page_x_offset: glong; cdecl; inline;
    function get_page_y_offset: glong; cdecl; inline;
    function get_parent: PWebKitDOMDOMWindow; cdecl; inline;
    function get_performance: PWebKitDOMPerformance; cdecl; inline;
    function get_personalbar: PWebKitDOMBarInfo; cdecl; inline;
    function get_screen: PWebKitDOMScreen; cdecl; inline;
    function get_screen_left: glong; cdecl; inline;
    function get_screen_top: glong; cdecl; inline;
    function get_screen_x: glong; cdecl; inline;
    function get_screen_y: glong; cdecl; inline;
    function get_scroll_x: glong; cdecl; inline;
    function get_scroll_y: glong; cdecl; inline;
    function get_scrollbars: PWebKitDOMBarInfo; cdecl; inline;
    function get_selection: PWebKitDOMDOMSelection; cdecl; inline;
    function get_self: PWebKitDOMDOMWindow; cdecl; inline;
    function get_session_storage(error: PPGError): PWebKitDOMStorage; cdecl; inline;
    function get_status: Pgchar; cdecl; inline;
    function get_statusbar: PWebKitDOMBarInfo; cdecl; inline;
    function get_style_media: PWebKitDOMStyleMedia; cdecl; inline;
    function get_toolbar: PWebKitDOMBarInfo; cdecl; inline;
    function get_top: PWebKitDOMDOMWindow; cdecl; inline;
    function get_webkit_storage_info: PWebKitDOMStorageInfo; cdecl; inline;
    function get_window: PWebKitDOMDOMWindow; cdecl; inline;
    function match_media(query: Pgchar): PWebKitDOMMediaQueryList; cdecl; inline;
    procedure move_by(x: gfloat; y: gfloat); cdecl; inline;
    procedure move_to(x: gfloat; y: gfloat); cdecl; inline;
    procedure print; cdecl; inline;
    function prompt(message: Pgchar; defaultValue: Pgchar): Pgchar; cdecl; inline;
    procedure release_events; cdecl; inline;
    procedure resize_by(x: gfloat; y: gfloat); cdecl; inline;
    procedure resize_to(width: gfloat; height: gfloat); cdecl; inline;
    procedure scroll(x: glong; y: glong); cdecl; inline;
    procedure scroll_by(x: glong; y: glong); cdecl; inline;
    procedure scroll_to(x: glong; y: glong); cdecl; inline;
    procedure set_default_status(value: Pgchar); cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    procedure set_status(value: Pgchar); cdecl; inline;
    procedure stop; cdecl; inline;
    procedure webkit_cancel_animation_frame(id: glong); cdecl; inline;
    procedure webkit_cancel_request_animation_frame(id: glong); cdecl; inline;
    function webkit_convert_point_from_node_to_page(node: PWebKitDOMNode; p: PWebKitDOMWebKitPoint): PWebKitDOMWebKitPoint; cdecl; inline;
    function webkit_convert_point_from_page_to_node(node: PWebKitDOMNode; p: PWebKitDOMWebKitPoint): PWebKitDOMWebKitPoint; cdecl; inline;
    property application_cache: PWebKitDOMDOMApplicationCache read get_application_cache ;
    property client_information: PWebKitDOMNavigator read get_client_information ;
    property closed: gboolean read get_closed ;
    property console: PWebKitDOMConsole read get_console ;
    property css: PWebKitDOMDOMWindowCSS read get_css  { property is writeable but setter not declared } ;
    property default_status: Pgchar read get_default_status write set_default_status;
    property device_pixel_ratio: gdouble read get_device_pixel_ratio ;
    property document: PWebKitDOMDocument read get_document ;
    property frame_element: PWebKitDOMElement read get_frame_element ;
    property frames: PWebKitDOMDOMWindow read get_frames ;
    property history: PWebKitDOMHistory read get_history ;
    property inner_height: glong read get_inner_height ;
    property inner_width: glong read get_inner_width ;
    property length: gulong read get_length ;
    //property local_storage: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_local_storage ;
    property locationbar: PWebKitDOMBarInfo read get_locationbar ;
    property menubar: PWebKitDOMBarInfo read get_menubar ;
    property name: Pgchar read get_name write set_name;
    property navigator: PWebKitDOMNavigator read get_navigator ;
    property offscreen_buffering: gboolean read get_offscreen_buffering ;
    property opener: PWebKitDOMDOMWindow read get_opener ;
    property outer_height: glong read get_outer_height ;
    property outer_width: glong read get_outer_width ;
    property page_x_offset: glong read get_page_x_offset ;
    property page_y_offset: glong read get_page_y_offset ;
    property parent: PWebKitDOMDOMWindow read get_parent ;
    property performance: PWebKitDOMPerformance read get_performance ;
    property personalbar: PWebKitDOMBarInfo read get_personalbar ;
    property screen: PWebKitDOMScreen read get_screen ;
    property screen_left: glong read get_screen_left ;
    property screen_top: glong read get_screen_top ;
    property screen_x: glong read get_screen_x ;
    property screen_y: glong read get_screen_y ;
    property scroll_x: glong read get_scroll_x ;
    property scroll_y: glong read get_scroll_y ;
    property scrollbars: PWebKitDOMBarInfo read get_scrollbars ;
    property self: PWebKitDOMDOMWindow read get_self ;
    //property session_storage: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_session_storage ;
    property status: Pgchar read get_status write set_status;
    property statusbar: PWebKitDOMBarInfo read get_statusbar ;
    property style_media: PWebKitDOMStyleMedia read get_style_media ;
    property toolbar: PWebKitDOMBarInfo read get_toolbar ;
    property top: PWebKitDOMDOMWindow read get_top ;
    property webkit_storage_info: PWebKitDOMStorageInfo read get_webkit_storage_info ;
    property window: PWebKitDOMDOMWindow read get_window ;
  end;

  PPWebKitDOMGeolocation = ^PWebKitDOMGeolocation;
  PWebKitDOMGeolocation = ^TWebKitDOMGeolocation;

  PPWebKitDOMGamepadList = ^PWebKitDOMGamepadList;
  PWebKitDOMGamepadList = ^TWebKitDOMGamepadList;
  TWebKitDOMNavigator = object(TWebKitDOMObject)
    function get_app_code_name: Pgchar; cdecl; inline;
    function get_app_name: Pgchar; cdecl; inline;
    function get_app_version: Pgchar; cdecl; inline;
    function get_cookie_enabled: gboolean; cdecl; inline;
    function get_geolocation: PWebKitDOMGeolocation; cdecl; inline;
    function get_language: Pgchar; cdecl; inline;
    function get_mime_types: PWebKitDOMDOMMimeTypeArray; cdecl; inline;
    function get_on_line: gboolean; cdecl; inline;
    function get_platform: Pgchar; cdecl; inline;
    function get_plugins: PWebKitDOMDOMPluginArray; cdecl; inline;
    function get_product: Pgchar; cdecl; inline;
    function get_product_sub: Pgchar; cdecl; inline;
    procedure get_storage_updates; cdecl; inline;
    function get_user_agent: Pgchar; cdecl; inline;
    function get_vendor: Pgchar; cdecl; inline;
    function get_vendor_sub: Pgchar; cdecl; inline;
    function is_protocol_handler_registered(scheme: Pgchar; url: Pgchar; error: PPGError): Pgchar; cdecl; inline;
    function java_enabled: gboolean; cdecl; inline;
    procedure register_protocol_handler(scheme: Pgchar; url: Pgchar; title: Pgchar; error: PPGError); cdecl; inline;
    procedure unregister_protocol_handler(scheme: Pgchar; url: Pgchar; error: PPGError); cdecl; inline;
    function webkit_get_gamepads: PWebKitDOMGamepadList; cdecl; inline;
    property app_code_name: Pgchar read get_app_code_name ;
    property app_name: Pgchar read get_app_name ;
    property app_version: Pgchar read get_app_version ;
    property cookie_enabled: gboolean read get_cookie_enabled ;
    property geolocation: PWebKitDOMGeolocation read get_geolocation ;
    property language: Pgchar read get_language ;
    property mime_types: PWebKitDOMDOMMimeTypeArray read get_mime_types ;
    property on_line: gboolean read get_on_line ;
    property platform: Pgchar read get_platform ;
    property plugins: PWebKitDOMDOMPluginArray read get_plugins ;
    property product: Pgchar read get_product ;
    property product_sub: Pgchar read get_product_sub ;
    property user_agent: Pgchar read get_user_agent ;
    property vendor: Pgchar read get_vendor ;
    property vendor_sub: Pgchar read get_vendor_sub ;
  end;
  TWebKitDOMDOMWindowCSS = object(TWebKitDOMObject)
    function supports(property_: Pgchar; value: Pgchar): gboolean; cdecl; inline;
  end;
  TWebKitDOMHistory = object(TWebKitDOMObject)
    procedure back; cdecl; inline;
    procedure forward; cdecl; inline;
    function get_length: gulong; cdecl; inline;
    procedure go(distance: glong); cdecl; inline;
    property length: gulong read get_length ;
  end;
  TWebKitDOMStorage = object(TWebKitDOMObject)
    procedure clear(error: PPGError); cdecl; inline;
    function get_item(key: Pgchar; error: PPGError): Pgchar; cdecl; inline;
    function get_length(error: PPGError): gulong; cdecl; inline;
    function key(index: gulong; error: PPGError): Pgchar; cdecl; inline;
    procedure remove_item(key: Pgchar; error: PPGError); cdecl; inline;
    procedure set_item(key: Pgchar; data: Pgchar; error: PPGError); cdecl; inline;
    //property length: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_length ;
  end;

  PPWebKitDOMPerformanceNavigation = ^PWebKitDOMPerformanceNavigation;
  PWebKitDOMPerformanceNavigation = ^TWebKitDOMPerformanceNavigation;

  PPWebKitDOMPerformanceTiming = ^PWebKitDOMPerformanceTiming;
  PWebKitDOMPerformanceTiming = ^TWebKitDOMPerformanceTiming;
  TWebKitDOMPerformance = object(TWebKitDOMObject)
    function get_memory: PWebKitDOMMemoryInfo; cdecl; inline;
    function get_navigation: PWebKitDOMPerformanceNavigation; cdecl; inline;
    function get_timing: PWebKitDOMPerformanceTiming; cdecl; inline;
    function now: gdouble; cdecl; inline;
    property memory: PWebKitDOMMemoryInfo read get_memory ;
    property navigation: PWebKitDOMPerformanceNavigation read get_navigation ;
    property timing: PWebKitDOMPerformanceTiming read get_timing ;
  end;
  TWebKitDOMScreen = object(TWebKitDOMObject)
    function get_avail_height: gulong; cdecl; inline;
    function get_avail_left: glong; cdecl; inline;
    function get_avail_top: glong; cdecl; inline;
    function get_avail_width: gulong; cdecl; inline;
    function get_color_depth: gulong; cdecl; inline;
    function get_height: gulong; cdecl; inline;
    function get_pixel_depth: gulong; cdecl; inline;
    function get_width: gulong; cdecl; inline;
    property avail_height: gulong read get_avail_height ;
    property avail_left: glong read get_avail_left ;
    property avail_top: glong read get_avail_top ;
    property avail_width: gulong read get_avail_width ;
    property color_depth: gulong read get_color_depth ;
    property height: gulong read get_height ;
    property pixel_depth: gulong read get_pixel_depth ;
    property width: gulong read get_width ;
  end;
  TWebKitDOMStyleMedia = object(TWebKitDOMObject)
    function match_medium(mediaquery: Pgchar): gboolean; cdecl; inline;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type ;
  end;
  TWebKitDOMStorageInfo = object(TWebKitDOMObject)
  end;
  TWebKitDOMMediaQueryList = object(TWebKitDOMObject)
    function get_matches: gboolean; cdecl; inline;
    function get_media: Pgchar; cdecl; inline;
    property matches: gboolean read get_matches ;
    property media: Pgchar read get_media ;
  end;
  TWebKitDOMWebKitPoint = object(TWebKitDOMObject)
    function get_x: gfloat; cdecl; inline;
    function get_y: gfloat; cdecl; inline;
    procedure set_x(value: gfloat); cdecl; inline;
    procedure set_y(value: gfloat); cdecl; inline;
    property x: gfloat read get_x write set_x;
    property y: gfloat read get_y write set_y;
  end;

  PPWebKitDOMDOMWindowCSSClass = ^PWebKitDOMDOMWindowCSSClass;
  PWebKitDOMDOMWindowCSSClass = ^TWebKitDOMDOMWindowCSSClass;
  TWebKitDOMDOMWindowCSSClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMDOMWindowClass = ^PWebKitDOMDOMWindowClass;
  PWebKitDOMDOMWindowClass = ^TWebKitDOMDOMWindowClass;
  TWebKitDOMDOMWindowClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMDatabase = ^PWebKitDOMDatabase;
  PWebKitDOMDatabase = ^TWebKitDOMDatabase;
  TWebKitDOMDatabase = object(TWebKitDOMObject)
    function get_version: Pgchar; cdecl; inline;
    property version: Pgchar read get_version ;
  end;

  PPWebKitDOMDatabaseClass = ^PWebKitDOMDatabaseClass;
  PWebKitDOMDatabaseClass = ^TWebKitDOMDatabaseClass;
  TWebKitDOMDatabaseClass = object
    parent_class: TWebKitDOMObjectClass;
  end;
  TWebKitDOMDocumentFragment = object(TWebKitDOMNode)
    function query_selector(selectors: Pgchar; error: PPGError): PWebKitDOMElement; cdecl; inline;
    function query_selector_all(selectors: Pgchar; error: PPGError): PWebKitDOMNodeList; cdecl; inline;
  end;
  TWebKitDOMEntityReference = object(TWebKitDOMNode)
  end;
  TWebKitDOMXPathExpression = object(TWebKitDOMObject)
    function evaluate(contextNode: PWebKitDOMNode; type_: gushort; inResult: PWebKitDOMXPathResult; error: PPGError): PWebKitDOMXPathResult; cdecl; inline;
  end;
  TWebKitDOMXPathNSResolver = object(TWebKitDOMObject)
    function lookup_namespace_uri(prefix: Pgchar): Pgchar; cdecl; inline;
  end;
  TWebKitDOMNodeIterator = object(TWebKitDOMObject)
    procedure detach; cdecl; inline;
    function get_expand_entity_references: gboolean; cdecl; inline;
    function get_filter: PWebKitDOMNodeFilter; cdecl; inline;
    function get_pointer_before_reference_node: gboolean; cdecl; inline;
    function get_reference_node: PWebKitDOMNode; cdecl; inline;
    function get_root: PWebKitDOMNode; cdecl; inline;
    function get_what_to_show: gulong; cdecl; inline;
    function next_node(error: PPGError): PWebKitDOMNode; cdecl; inline;
    function previous_node(error: PPGError): PWebKitDOMNode; cdecl; inline;
    property expand_entity_references: gboolean read get_expand_entity_references ;
    property filter: PWebKitDOMNodeFilter read get_filter ;
    property pointer_before_reference_node: gboolean read get_pointer_before_reference_node ;
    property reference_node: PWebKitDOMNode read get_reference_node ;
    property root: PWebKitDOMNode read get_root ;
    property what_to_show: gulong read get_what_to_show ;
  end;
  TWebKitDOMNodeFilter = object(TWebKitDOMObject)
    function accept_node(n: PWebKitDOMNode): gshort; cdecl; inline;
  end;
  TWebKitDOMProcessingInstruction = object(TWebKitDOMNode)
    function get_data: Pgchar; cdecl; inline;
    function get_sheet: PWebKitDOMStyleSheet; cdecl; inline;
    function get_target: Pgchar; cdecl; inline;
    procedure set_data(value: Pgchar; error: PPGError); cdecl; inline;
    property data: Pgchar read get_data  { property is writeable but setter not declared } ;
    property sheet: PWebKitDOMStyleSheet read get_sheet ;
    property target: Pgchar read get_target ;
  end;
  TWebKitDOMTreeWalker = object(TWebKitDOMObject)
    function first_child: PWebKitDOMNode; cdecl; inline;
    function get_current_node: PWebKitDOMNode; cdecl; inline;
    function get_expand_entity_references: gboolean; cdecl; inline;
    function get_filter: PWebKitDOMNodeFilter; cdecl; inline;
    function get_root: PWebKitDOMNode; cdecl; inline;
    function get_what_to_show: gulong; cdecl; inline;
    function last_child: PWebKitDOMNode; cdecl; inline;
    function next_node: PWebKitDOMNode; cdecl; inline;
    function next_sibling: PWebKitDOMNode; cdecl; inline;
    function parent_node: PWebKitDOMNode; cdecl; inline;
    function previous_node: PWebKitDOMNode; cdecl; inline;
    function previous_sibling: PWebKitDOMNode; cdecl; inline;
    procedure set_current_node(value: PWebKitDOMNode; error: PPGError); cdecl; inline;
    property expand_entity_references: gboolean read get_expand_entity_references ;
    property filter: PWebKitDOMNodeFilter read get_filter ;
    property root: PWebKitDOMNode read get_root ;
    property what_to_show: gulong read get_what_to_show ;
  end;
  TWebKitDOMXPathResult = object(TWebKitDOMObject)
    function get_boolean_value(error: PPGError): gboolean; cdecl; inline;
    function get_invalid_iterator_state: gboolean; cdecl; inline;
    function get_number_value(error: PPGError): gdouble; cdecl; inline;
    function get_result_type: gushort; cdecl; inline;
    function get_single_node_value(error: PPGError): PWebKitDOMNode; cdecl; inline;
    function get_snapshot_length(error: PPGError): gulong; cdecl; inline;
    function get_string_value(error: PPGError): Pgchar; cdecl; inline;
    function iterate_next(error: PPGError): PWebKitDOMNode; cdecl; inline;
    function snapshot_item(index: gulong; error: PPGError): PWebKitDOMNode; cdecl; inline;
    //property boolean_value: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_boolean_value ;
    property invalid_iterator_state: gboolean read get_invalid_iterator_state ;
    //property number_value: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_number_value ;
    property result_type: gushort read get_result_type ;
    //property single_node_value: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_single_node_value ;
    //property snapshot_length: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_snapshot_length ;
    //property string_value: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_string_value ;
  end;
  TWebKitDOMHTMLCollection = object(TWebKitDOMObject)
    function get_length: gulong; cdecl; inline;
    function item(index: gulong): PWebKitDOMNode; cdecl; inline;
    function named_item(name: Pgchar): PWebKitDOMNode; cdecl; inline;
    property length: gulong read get_length ;
  end;
  TWebKitDOMHTMLElement = object(TWebKitDOMElement)
    procedure click; cdecl; inline;
    function get_access_key: Pgchar; cdecl; inline;
    function get_children: PWebKitDOMHTMLCollection; cdecl; inline;
    function get_class_list: PWebKitDOMDOMTokenList; cdecl; inline;
    function get_class_name: Pgchar; cdecl; inline;
    function get_content_editable: Pgchar; cdecl; inline;
    function get_dir: Pgchar; cdecl; inline;
    function get_draggable: gboolean; cdecl; inline;
    function get_hidden: gboolean; cdecl; inline;
    function get_id: Pgchar; cdecl; inline;
    function get_inner_html: Pgchar; cdecl; inline;
    function get_inner_text: Pgchar; cdecl; inline;
    function get_is_content_editable: gboolean; cdecl; inline;
    function get_item_id: Pgchar; cdecl; inline;
    function get_item_prop: PWebKitDOMDOMSettableTokenList; cdecl; inline;
    function get_item_ref: PWebKitDOMDOMSettableTokenList; cdecl; inline;
    function get_item_scope: gboolean; cdecl; inline;
    function get_item_type: PWebKitDOMDOMSettableTokenList; cdecl; inline;
    function get_lang: Pgchar; cdecl; inline;
    function get_outer_html: Pgchar; cdecl; inline;
    function get_outer_text: Pgchar; cdecl; inline;
    function get_spellcheck: gboolean; cdecl; inline;
    function get_tab_index: glong; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_translate: gboolean; cdecl; inline;
    function get_webkitdropzone: Pgchar; cdecl; inline;
    function insert_adjacent_element(where: Pgchar; element: PWebKitDOMElement; error: PPGError): PWebKitDOMElement; cdecl; inline;
    procedure insert_adjacent_html(where: Pgchar; html: Pgchar; error: PPGError); cdecl; inline;
    procedure insert_adjacent_text(where: Pgchar; text: Pgchar; error: PPGError); cdecl; inline;
    procedure set_access_key(value: Pgchar); cdecl; inline;
    procedure set_class_name(value: Pgchar); cdecl; inline;
    procedure set_content_editable(value: Pgchar; error: PPGError); cdecl; inline;
    procedure set_dir(value: Pgchar); cdecl; inline;
    procedure set_draggable(value: gboolean); cdecl; inline;
    procedure set_hidden(value: gboolean); cdecl; inline;
    procedure set_id(value: Pgchar); cdecl; inline;
    procedure set_inner_html(value: Pgchar; error: PPGError); cdecl; inline;
    procedure set_inner_text(value: Pgchar; error: PPGError); cdecl; inline;
    procedure set_item_id(value: Pgchar); cdecl; inline;
    procedure set_item_scope(value: gboolean); cdecl; inline;
    procedure set_lang(value: Pgchar); cdecl; inline;
    procedure set_outer_html(value: Pgchar; error: PPGError); cdecl; inline;
    procedure set_outer_text(value: Pgchar; error: PPGError); cdecl; inline;
    procedure set_spellcheck(value: gboolean); cdecl; inline;
    procedure set_tab_index(value: glong); cdecl; inline;
    procedure set_title(value: Pgchar); cdecl; inline;
    procedure set_translate(value: gboolean); cdecl; inline;
    procedure set_webkitdropzone(value: Pgchar); cdecl; inline;
    property access_key: Pgchar read get_access_key write set_access_key;
    property children: PWebKitDOMHTMLCollection read get_children ;
    property content_editable: Pgchar read get_content_editable  { property is writeable but setter not declared } ;
    property dir: Pgchar read get_dir write set_dir;
    property draggable: gboolean read get_draggable write set_draggable;
    property hidden: gboolean read get_hidden write set_hidden;
    property id: Pgchar read get_id write set_id;
    property inner_html: Pgchar read get_inner_html  { property is writeable but setter not declared } ;
    property inner_text: Pgchar read get_inner_text  { property is writeable but setter not declared } ;
    property is_content_editable: gboolean read get_is_content_editable ;
    property item_id: Pgchar read get_item_id write set_item_id;
    property item_prop: PWebKitDOMDOMSettableTokenList read get_item_prop ;
    property item_ref: PWebKitDOMDOMSettableTokenList read get_item_ref ;
    property item_scope: gboolean read get_item_scope write set_item_scope;
    property item_type: PWebKitDOMDOMSettableTokenList read get_item_type ;
    property lang: Pgchar read get_lang write set_lang;
    property outer_html: Pgchar read get_outer_html  { property is writeable but setter not declared } ;
    property outer_text: Pgchar read get_outer_text  { property is writeable but setter not declared } ;
    property spellcheck: gboolean read get_spellcheck write set_spellcheck;
    property tab_index: glong read get_tab_index write set_tab_index;
    property title: Pgchar read get_title write set_title;
    property translate: gboolean read get_translate write set_translate;
    property webkitdropzone: Pgchar read get_webkitdropzone write set_webkitdropzone;
  end;
  TWebKitDOMNodeList = object(TWebKitDOMObject)
    function get_length: gulong; cdecl; inline;
    function item(index: gulong): PWebKitDOMNode; cdecl; inline;
    property length: gulong read get_length ;
  end;
  TWebKitDOMHTMLHeadElement = object(TWebKitDOMHTMLElement)
    function get_profile: Pgchar; cdecl; inline;
    procedure set_profile(value: Pgchar); cdecl; inline;
    property profile: Pgchar read get_profile write set_profile;
  end;
  TWebKitDOMStyleSheetList = object(TWebKitDOMObject)
    function get_length: gulong; cdecl; inline;
    function item(index: gulong): PWebKitDOMStyleSheet; cdecl; inline;
    property length: gulong read get_length ;
  end;

  PPWebKitDOMDocumentClass = ^PWebKitDOMDocumentClass;
  PWebKitDOMDocumentClass = ^TWebKitDOMDocumentClass;
  TWebKitDOMDocumentClass = object
    parent_class: TWebKitDOMNodeClass;
  end;

  PPWebKitDOMDocumentFragmentClass = ^PWebKitDOMDocumentFragmentClass;
  PWebKitDOMDocumentFragmentClass = ^TWebKitDOMDocumentFragmentClass;
  TWebKitDOMDocumentFragmentClass = object
    parent_class: TWebKitDOMNodeClass;
  end;
  TWebKitDOMNamedNodeMap = object(TWebKitDOMObject)
    function get_length: gulong; cdecl; inline;
    function get_named_item(name: Pgchar): PWebKitDOMNode; cdecl; inline;
    function get_named_item_ns(namespaceURI: Pgchar; localName: Pgchar): PWebKitDOMNode; cdecl; inline;
    function item(index: gulong): PWebKitDOMNode; cdecl; inline;
    function remove_named_item(name: Pgchar; error: PPGError): PWebKitDOMNode; cdecl; inline;
    function remove_named_item_ns(namespaceURI: Pgchar; localName: Pgchar; error: PPGError): PWebKitDOMNode; cdecl; inline;
    function set_named_item(node: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl; inline;
    function set_named_item_ns(node: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl; inline;
    property length: gulong read get_length ;
  end;

  PPWebKitDOMDocumentTypeClass = ^PWebKitDOMDocumentTypeClass;
  PWebKitDOMDocumentTypeClass = ^TWebKitDOMDocumentTypeClass;
  TWebKitDOMDocumentTypeClass = object
    parent_class: TWebKitDOMNodeClass;
  end;

  PPWebKitDOMElementClass = ^PWebKitDOMElementClass;
  PWebKitDOMElementClass = ^TWebKitDOMElementClass;
  TWebKitDOMElementClass = object
    parent_class: TWebKitDOMNodeClass;
  end;

  PPWebKitDOMEntityReferenceClass = ^PWebKitDOMEntityReferenceClass;
  PWebKitDOMEntityReferenceClass = ^TWebKitDOMEntityReferenceClass;
  TWebKitDOMEntityReferenceClass = object
    parent_class: TWebKitDOMNodeClass;
  end;

  PPWebKitDOMEventClass = ^PWebKitDOMEventClass;
  PWebKitDOMEventClass = ^TWebKitDOMEventClass;
  TWebKitDOMEventClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMEventTargetClass = ^PWebKitDOMEventTargetClass;
  PWebKitDOMEventTargetClass = ^TWebKitDOMEventTargetClass;

  TWebKitDOMEventTargetClass = record
  end;



  PPWebKitDOMEventTargetIface = ^PWebKitDOMEventTargetIface;
  PWebKitDOMEventTargetIface = ^TWebKitDOMEventTargetIface;
  TWebKitDOMEventTargetIface = object
    gIface: TGTypeInterface;
    dispatch_event: procedure(target: PWebKitDOMEventTarget; event: PWebKitDOMEvent; error: PPGError); cdecl;
    add_event_listener: function(target: PWebKitDOMEventTarget; eventName: Pgchar; handler: TGCallback; bubble: gboolean; userData: gpointer): gboolean; cdecl;
    remove_event_listener: function(target: PWebKitDOMEventTarget; eventName: Pgchar; handler: TGCallback; bubble: gboolean): gboolean; cdecl;
  end;

  PPWebKitDOMFile = ^PWebKitDOMFile;
  PWebKitDOMFile = ^TWebKitDOMFile;
  TWebKitDOMFile = object(TWebKitDOMBlob)
    function get_name: Pgchar; cdecl; inline;
    property name: Pgchar read get_name ;
  end;

  PPWebKitDOMFileClass = ^PWebKitDOMFileClass;
  PWebKitDOMFileClass = ^TWebKitDOMFileClass;
  TWebKitDOMFileClass = object
    parent_class: TWebKitDOMBlobClass;
  end;

  PPWebKitDOMFileList = ^PWebKitDOMFileList;
  PWebKitDOMFileList = ^TWebKitDOMFileList;
  TWebKitDOMFileList = object(TWebKitDOMObject)
    function get_length: gulong; cdecl; inline;
    function item(index: gulong): PWebKitDOMFile; cdecl; inline;
    property length: gulong read get_length ;
  end;

  PPWebKitDOMFileListClass = ^PWebKitDOMFileListClass;
  PWebKitDOMFileListClass = ^TWebKitDOMFileListClass;
  TWebKitDOMFileListClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMGamepad = ^PWebKitDOMGamepad;
  PWebKitDOMGamepad = ^TWebKitDOMGamepad;
  TWebKitDOMGamepad = object(TWebKitDOMObject)
    function get_id: Pgchar; cdecl; inline;
    function get_index: gulong; cdecl; inline;
    function get_timestamp: guint64; cdecl; inline;
    property id: Pgchar read get_id ;
    property index: gulong read get_index ;
    property timestamp: guint64 read get_timestamp ;
  end;

  PPWebKitDOMGamepadClass = ^PWebKitDOMGamepadClass;
  PWebKitDOMGamepadClass = ^TWebKitDOMGamepadClass;
  TWebKitDOMGamepadClass = object
    parent_class: TWebKitDOMObjectClass;
  end;
  TWebKitDOMGamepadList = object(TWebKitDOMObject)
    function get_length: gulong; cdecl; inline;
    function item(index: gulong): PWebKitDOMGamepad; cdecl; inline;
    property length: gulong read get_length ;
  end;

  PPWebKitDOMGamepadListClass = ^PWebKitDOMGamepadListClass;
  PWebKitDOMGamepadListClass = ^TWebKitDOMGamepadListClass;
  TWebKitDOMGamepadListClass = object
    parent_class: TWebKitDOMObjectClass;
  end;
  TWebKitDOMGeolocation = object(TWebKitDOMObject)
    procedure clear_watch(watchID: glong); cdecl; inline;
  end;

  PPWebKitDOMGeolocationClass = ^PWebKitDOMGeolocationClass;
  PWebKitDOMGeolocationClass = ^TWebKitDOMGeolocationClass;
  TWebKitDOMGeolocationClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMHTMLAnchorElement = ^PWebKitDOMHTMLAnchorElement;
  PWebKitDOMHTMLAnchorElement = ^TWebKitDOMHTMLAnchorElement;
  TWebKitDOMHTMLAnchorElement = object(TWebKitDOMHTMLElement)
    function get_charset: Pgchar; cdecl; inline;
    function get_coords: Pgchar; cdecl; inline;
    function get_download: Pgchar; cdecl; inline;
    function get_hash: Pgchar; cdecl; inline;
    function get_host: Pgchar; cdecl; inline;
    function get_hostname: Pgchar; cdecl; inline;
    function get_href: Pgchar; cdecl; inline;
    function get_hreflang: Pgchar; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_origin: Pgchar; cdecl; inline;
    function get_pathname: Pgchar; cdecl; inline;
    function get_ping: Pgchar; cdecl; inline;
    function get_port: Pgchar; cdecl; inline;
    function get_protocol: Pgchar; cdecl; inline;
    function get_rel: Pgchar; cdecl; inline;
    function get_rev: Pgchar; cdecl; inline;
    function get_search: Pgchar; cdecl; inline;
    function get_shape: Pgchar; cdecl; inline;
    function get_target: Pgchar; cdecl; inline;
    function get_text: Pgchar; cdecl; inline;
    procedure set_charset(value: Pgchar); cdecl; inline;
    procedure set_coords(value: Pgchar); cdecl; inline;
    procedure set_download(value: Pgchar); cdecl; inline;
    procedure set_hash(value: Pgchar); cdecl; inline;
    procedure set_host(value: Pgchar); cdecl; inline;
    procedure set_hostname(value: Pgchar); cdecl; inline;
    procedure set_href(value: Pgchar); cdecl; inline;
    procedure set_hreflang(value: Pgchar); cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    procedure set_pathname(value: Pgchar); cdecl; inline;
    procedure set_ping(value: Pgchar); cdecl; inline;
    procedure set_port(value: Pgchar); cdecl; inline;
    procedure set_protocol(value: Pgchar); cdecl; inline;
    procedure set_rel(value: Pgchar); cdecl; inline;
    procedure set_rev(value: Pgchar); cdecl; inline;
    procedure set_search(value: Pgchar); cdecl; inline;
    procedure set_shape(value: Pgchar); cdecl; inline;
    procedure set_target(value: Pgchar); cdecl; inline;
    property charset: Pgchar read get_charset write set_charset;
    property coords: Pgchar read get_coords write set_coords;
    property download: Pgchar read get_download write set_download;
    property hash: Pgchar read get_hash write set_hash;
    property host: Pgchar read get_host write set_host;
    property hostname: Pgchar read get_hostname write set_hostname;
    property href: Pgchar read get_href write set_href;
    property hreflang: Pgchar read get_hreflang write set_hreflang;
    property name: Pgchar read get_name write set_name;
    property origin: Pgchar read get_origin ;
    property pathname: Pgchar read get_pathname write set_pathname;
    property ping: Pgchar read get_ping write set_ping;
    property port: Pgchar read get_port write set_port;
    property protocol: Pgchar read get_protocol write set_protocol;
    property rel: Pgchar read get_rel write set_rel;
    property rev: Pgchar read get_rev write set_rev;
    property search: Pgchar read get_search write set_search;
    property shape: Pgchar read get_shape write set_shape;
    property target: Pgchar read get_target write set_target;
    property text: Pgchar read get_text ;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type  { property is writeable but setter not declared } ;
  end;

  PPWebKitDOMHTMLElementClass = ^PWebKitDOMHTMLElementClass;
  PWebKitDOMHTMLElementClass = ^TWebKitDOMHTMLElementClass;
  TWebKitDOMHTMLElementClass = object
    parent_class: TWebKitDOMElementClass;
  end;

  PPWebKitDOMHTMLAnchorElementClass = ^PWebKitDOMHTMLAnchorElementClass;
  PWebKitDOMHTMLAnchorElementClass = ^TWebKitDOMHTMLAnchorElementClass;
  TWebKitDOMHTMLAnchorElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLAppletElement = ^PWebKitDOMHTMLAppletElement;
  PWebKitDOMHTMLAppletElement = ^TWebKitDOMHTMLAppletElement;
  TWebKitDOMHTMLAppletElement = object(TWebKitDOMHTMLElement)
    function get_align: Pgchar; cdecl; inline;
    function get_alt: Pgchar; cdecl; inline;
    function get_archive: Pgchar; cdecl; inline;
    function get_code: Pgchar; cdecl; inline;
    function get_code_base: Pgchar; cdecl; inline;
    function get_height: Pgchar; cdecl; inline;
    function get_hspace: glong; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_object: Pgchar; cdecl; inline;
    function get_vspace: glong; cdecl; inline;
    function get_width: Pgchar; cdecl; inline;
    procedure set_align(value: Pgchar); cdecl; inline;
    procedure set_alt(value: Pgchar); cdecl; inline;
    procedure set_archive(value: Pgchar); cdecl; inline;
    procedure set_code(value: Pgchar); cdecl; inline;
    procedure set_code_base(value: Pgchar); cdecl; inline;
    procedure set_height(value: Pgchar); cdecl; inline;
    procedure set_hspace(value: glong); cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    procedure set_object(value: Pgchar); cdecl; inline;
    procedure set_vspace(value: glong); cdecl; inline;
    procedure set_width(value: Pgchar); cdecl; inline;
    property align: Pgchar read get_align write set_align;
    property alt: Pgchar read get_alt write set_alt;
    property archive: Pgchar read get_archive write set_archive;
    property code: Pgchar read get_code write set_code;
    property code_base: Pgchar read get_code_base write set_code_base;
    property height: Pgchar read get_height write set_height;
    property hspace: glong read get_hspace write set_hspace;
    property name: Pgchar read get_name write set_name;
    property object_: Pgchar read get_object write set_object;
    property vspace: glong read get_vspace write set_vspace;
    property width: Pgchar read get_width write set_width;
  end;

  PPWebKitDOMHTMLAppletElementClass = ^PWebKitDOMHTMLAppletElementClass;
  PWebKitDOMHTMLAppletElementClass = ^TWebKitDOMHTMLAppletElementClass;
  TWebKitDOMHTMLAppletElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLAreaElement = ^PWebKitDOMHTMLAreaElement;
  PWebKitDOMHTMLAreaElement = ^TWebKitDOMHTMLAreaElement;
  TWebKitDOMHTMLAreaElement = object(TWebKitDOMHTMLElement)
    function get_alt: Pgchar; cdecl; inline;
    function get_coords: Pgchar; cdecl; inline;
    function get_hash: Pgchar; cdecl; inline;
    function get_host: Pgchar; cdecl; inline;
    function get_hostname: Pgchar; cdecl; inline;
    function get_href: Pgchar; cdecl; inline;
    function get_no_href: gboolean; cdecl; inline;
    function get_pathname: Pgchar; cdecl; inline;
    function get_ping: Pgchar; cdecl; inline;
    function get_port: Pgchar; cdecl; inline;
    function get_protocol: Pgchar; cdecl; inline;
    function get_search: Pgchar; cdecl; inline;
    function get_shape: Pgchar; cdecl; inline;
    function get_target: Pgchar; cdecl; inline;
    procedure set_alt(value: Pgchar); cdecl; inline;
    procedure set_coords(value: Pgchar); cdecl; inline;
    procedure set_href(value: Pgchar); cdecl; inline;
    procedure set_no_href(value: gboolean); cdecl; inline;
    procedure set_ping(value: Pgchar); cdecl; inline;
    procedure set_shape(value: Pgchar); cdecl; inline;
    procedure set_target(value: Pgchar); cdecl; inline;
    property alt: Pgchar read get_alt write set_alt;
    property coords: Pgchar read get_coords write set_coords;
    property hash: Pgchar read get_hash ;
    property host: Pgchar read get_host ;
    property hostname: Pgchar read get_hostname ;
    property href: Pgchar read get_href write set_href;
    property no_href: gboolean read get_no_href write set_no_href;
    property pathname: Pgchar read get_pathname ;
    property ping: Pgchar read get_ping write set_ping;
    property port: Pgchar read get_port ;
    property protocol: Pgchar read get_protocol ;
    property search: Pgchar read get_search ;
    property shape: Pgchar read get_shape write set_shape;
    property target: Pgchar read get_target write set_target;
  end;

  PPWebKitDOMHTMLAreaElementClass = ^PWebKitDOMHTMLAreaElementClass;
  PWebKitDOMHTMLAreaElementClass = ^TWebKitDOMHTMLAreaElementClass;
  TWebKitDOMHTMLAreaElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLMediaElement = ^PWebKitDOMHTMLMediaElement;
  PWebKitDOMHTMLMediaElement = ^TWebKitDOMHTMLMediaElement;

  PPWebKitDOMTimeRanges = ^PWebKitDOMTimeRanges;
  PWebKitDOMTimeRanges = ^TWebKitDOMTimeRanges;

  PPWebKitDOMMediaError = ^PWebKitDOMMediaError;
  PWebKitDOMMediaError = ^TWebKitDOMMediaError;
  TWebKitDOMHTMLMediaElement = object(TWebKitDOMHTMLElement)
    function can_play_type(type_: Pgchar): Pgchar; cdecl; inline;
    function get_autoplay: gboolean; cdecl; inline;
    function get_buffered: PWebKitDOMTimeRanges; cdecl; inline;
    function get_controls: gboolean; cdecl; inline;
    function get_current_src: Pgchar; cdecl; inline;
    function get_current_time: gfloat; cdecl; inline;
    function get_default_muted: gboolean; cdecl; inline;
    function get_default_playback_rate: gfloat; cdecl; inline;
    function get_duration: gfloat; cdecl; inline;
    function get_ended: gboolean; cdecl; inline;
    function get_error: PWebKitDOMMediaError; cdecl; inline;
    function get_initial_time: gdouble; cdecl; inline;
    function get_loop: gboolean; cdecl; inline;
    function get_media_group: Pgchar; cdecl; inline;
    function get_muted: gboolean; cdecl; inline;
    function get_network_state: gushort; cdecl; inline;
    function get_paused: gboolean; cdecl; inline;
    function get_playback_rate: gfloat; cdecl; inline;
    function get_played: PWebKitDOMTimeRanges; cdecl; inline;
    function get_preload: Pgchar; cdecl; inline;
    function get_ready_state: gushort; cdecl; inline;
    function get_seekable: PWebKitDOMTimeRanges; cdecl; inline;
    function get_seeking: gboolean; cdecl; inline;
    function get_src: Pgchar; cdecl; inline;
    function get_start_time: gfloat; cdecl; inline;
    function get_volume: gfloat; cdecl; inline;
    function get_webkit_audio_decoded_byte_count: gulong; cdecl; inline;
    function get_webkit_closed_captions_visible: gboolean; cdecl; inline;
    function get_webkit_has_closed_captions: gboolean; cdecl; inline;
    function get_webkit_preserves_pitch: gboolean; cdecl; inline;
    function get_webkit_video_decoded_byte_count: gulong; cdecl; inline;
    procedure load; cdecl; inline;
    procedure pause; cdecl; inline;
    procedure play; cdecl; inline;
    procedure set_autoplay(value: gboolean); cdecl; inline;
    procedure set_controls(value: gboolean); cdecl; inline;
    procedure set_current_time(value: gfloat; error: PPGError); cdecl; inline;
    procedure set_default_muted(value: gboolean); cdecl; inline;
    procedure set_default_playback_rate(value: gfloat); cdecl; inline;
    procedure set_loop(value: gboolean); cdecl; inline;
    procedure set_media_group(value: Pgchar); cdecl; inline;
    procedure set_muted(value: gboolean); cdecl; inline;
    procedure set_playback_rate(value: gfloat); cdecl; inline;
    procedure set_preload(value: Pgchar); cdecl; inline;
    procedure set_src(value: Pgchar); cdecl; inline;
    procedure set_volume(value: gfloat; error: PPGError); cdecl; inline;
    procedure set_webkit_closed_captions_visible(value: gboolean); cdecl; inline;
    procedure set_webkit_preserves_pitch(value: gboolean); cdecl; inline;
    property autoplay: gboolean read get_autoplay write set_autoplay;
    property buffered: PWebKitDOMTimeRanges read get_buffered ;
    property controls: gboolean read get_controls write set_controls;
    property current_src: Pgchar read get_current_src ;
    property current_time: gfloat read get_current_time  { property is writeable but setter not declared } ;
    property default_muted: gboolean read get_default_muted write set_default_muted;
    property default_playback_rate: gfloat read get_default_playback_rate write set_default_playback_rate;
    property duration: gfloat read get_duration ;
    property ended: gboolean read get_ended ;
    property error: PWebKitDOMMediaError read get_error ;
    property initial_time: gdouble read get_initial_time ;
    property loop: gboolean read get_loop write set_loop;
    property media_group: Pgchar read get_media_group write set_media_group;
    property muted: gboolean read get_muted write set_muted;
    property network_state: gushort read get_network_state ;
    property paused: gboolean read get_paused ;
    property playback_rate: gfloat read get_playback_rate write set_playback_rate;
    property played: PWebKitDOMTimeRanges read get_played ;
    property preload: Pgchar read get_preload write set_preload;
    property ready_state: gushort read get_ready_state ;
    property seekable: PWebKitDOMTimeRanges read get_seekable ;
    property seeking: gboolean read get_seeking ;
    property src: Pgchar read get_src write set_src;
    property start_time: gfloat read get_start_time ;
    property volume: gfloat read get_volume  { property is writeable but setter not declared } ;
    property webkit_audio_decoded_byte_count: gulong read get_webkit_audio_decoded_byte_count ;
    property webkit_closed_captions_visible: gboolean read get_webkit_closed_captions_visible write set_webkit_closed_captions_visible;
    property webkit_has_closed_captions: gboolean read get_webkit_has_closed_captions ;
    property webkit_preserves_pitch: gboolean read get_webkit_preserves_pitch write set_webkit_preserves_pitch;
    property webkit_video_decoded_byte_count: gulong read get_webkit_video_decoded_byte_count ;
  end;

  PPWebKitDOMHTMLAudioElement = ^PWebKitDOMHTMLAudioElement;
  PWebKitDOMHTMLAudioElement = ^TWebKitDOMHTMLAudioElement;
  TWebKitDOMHTMLAudioElement = object(TWebKitDOMHTMLMediaElement)
  end;

  PPWebKitDOMHTMLMediaElementClass = ^PWebKitDOMHTMLMediaElementClass;
  PWebKitDOMHTMLMediaElementClass = ^TWebKitDOMHTMLMediaElementClass;
  TWebKitDOMHTMLMediaElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLAudioElementClass = ^PWebKitDOMHTMLAudioElementClass;
  PWebKitDOMHTMLAudioElementClass = ^TWebKitDOMHTMLAudioElementClass;
  TWebKitDOMHTMLAudioElementClass = object
    parent_class: TWebKitDOMHTMLMediaElementClass;
  end;

  PPWebKitDOMHTMLBRElement = ^PWebKitDOMHTMLBRElement;
  PWebKitDOMHTMLBRElement = ^TWebKitDOMHTMLBRElement;
  TWebKitDOMHTMLBRElement = object(TWebKitDOMHTMLElement)
    function get_clear: Pgchar; cdecl; inline;
    procedure set_clear(value: Pgchar); cdecl; inline;
    property clear: Pgchar read get_clear write set_clear;
  end;

  PPWebKitDOMHTMLBRElementClass = ^PWebKitDOMHTMLBRElementClass;
  PWebKitDOMHTMLBRElementClass = ^TWebKitDOMHTMLBRElementClass;
  TWebKitDOMHTMLBRElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLBaseElement = ^PWebKitDOMHTMLBaseElement;
  PWebKitDOMHTMLBaseElement = ^TWebKitDOMHTMLBaseElement;
  TWebKitDOMHTMLBaseElement = object(TWebKitDOMHTMLElement)
    function get_href: Pgchar; cdecl; inline;
    function get_target: Pgchar; cdecl; inline;
    procedure set_href(value: Pgchar); cdecl; inline;
    procedure set_target(value: Pgchar); cdecl; inline;
    property href: Pgchar read get_href write set_href;
    property target: Pgchar read get_target write set_target;
  end;

  PPWebKitDOMHTMLBaseElementClass = ^PWebKitDOMHTMLBaseElementClass;
  PWebKitDOMHTMLBaseElementClass = ^TWebKitDOMHTMLBaseElementClass;
  TWebKitDOMHTMLBaseElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLBaseFontElement = ^PWebKitDOMHTMLBaseFontElement;
  PWebKitDOMHTMLBaseFontElement = ^TWebKitDOMHTMLBaseFontElement;
  TWebKitDOMHTMLBaseFontElement = object(TWebKitDOMHTMLElement)
    function get_color: Pgchar; cdecl; inline;
    function get_face: Pgchar; cdecl; inline;
    function get_size: glong; cdecl; inline;
    procedure set_color(value: Pgchar); cdecl; inline;
    procedure set_face(value: Pgchar); cdecl; inline;
    procedure set_size(value: glong); cdecl; inline;
    property color: Pgchar read get_color write set_color;
    property face: Pgchar read get_face write set_face;
    property size: glong read get_size write set_size;
  end;

  PPWebKitDOMHTMLBaseFontElementClass = ^PWebKitDOMHTMLBaseFontElementClass;
  PWebKitDOMHTMLBaseFontElementClass = ^TWebKitDOMHTMLBaseFontElementClass;
  TWebKitDOMHTMLBaseFontElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLBodyElement = ^PWebKitDOMHTMLBodyElement;
  PWebKitDOMHTMLBodyElement = ^TWebKitDOMHTMLBodyElement;
  TWebKitDOMHTMLBodyElement = object(TWebKitDOMHTMLElement)
    function get_a_link: Pgchar; cdecl; inline;
    function get_background: Pgchar; cdecl; inline;
    function get_bg_color: Pgchar; cdecl; inline;
    function get_link: Pgchar; cdecl; inline;
    function get_text: Pgchar; cdecl; inline;
    function get_v_link: Pgchar; cdecl; inline;
    procedure set_a_link(value: Pgchar); cdecl; inline;
    procedure set_background(value: Pgchar); cdecl; inline;
    procedure set_bg_color(value: Pgchar); cdecl; inline;
    procedure set_link(value: Pgchar); cdecl; inline;
    procedure set_text(value: Pgchar); cdecl; inline;
    procedure set_v_link(value: Pgchar); cdecl; inline;
    property a_link: Pgchar read get_a_link write set_a_link;
    property background: Pgchar read get_background write set_background;
    property bg_color: Pgchar read get_bg_color write set_bg_color;
    property link: Pgchar read get_link write set_link;
    property text: Pgchar read get_text write set_text;
    property v_link: Pgchar read get_v_link write set_v_link;
  end;

  PPWebKitDOMHTMLBodyElementClass = ^PWebKitDOMHTMLBodyElementClass;
  PWebKitDOMHTMLBodyElementClass = ^TWebKitDOMHTMLBodyElementClass;
  TWebKitDOMHTMLBodyElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLButtonElement = ^PWebKitDOMHTMLButtonElement;
  PWebKitDOMHTMLButtonElement = ^TWebKitDOMHTMLButtonElement;

  PPWebKitDOMHTMLFormElement = ^PWebKitDOMHTMLFormElement;
  PWebKitDOMHTMLFormElement = ^TWebKitDOMHTMLFormElement;

  PPWebKitDOMValidityState = ^PWebKitDOMValidityState;
  PWebKitDOMValidityState = ^TWebKitDOMValidityState;
  TWebKitDOMHTMLButtonElement = object(TWebKitDOMHTMLElement)
    function check_validity: gboolean; cdecl; inline;
    function get_autofocus: gboolean; cdecl; inline;
    function get_disabled: gboolean; cdecl; inline;
    function get_form: PWebKitDOMHTMLFormElement; cdecl; inline;
    function get_form_action: Pgchar; cdecl; inline;
    function get_form_enctype: Pgchar; cdecl; inline;
    function get_form_method: Pgchar; cdecl; inline;
    function get_form_no_validate: gboolean; cdecl; inline;
    function get_form_target: Pgchar; cdecl; inline;
    function get_labels: PWebKitDOMNodeList; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_validation_message: Pgchar; cdecl; inline;
    function get_validity: PWebKitDOMValidityState; cdecl; inline;
    function get_value: Pgchar; cdecl; inline;
    function get_will_validate: gboolean; cdecl; inline;
    procedure set_autofocus(value: gboolean); cdecl; inline;
    procedure set_custom_validity(error: Pgchar); cdecl; inline;
    procedure set_disabled(value: gboolean); cdecl; inline;
    procedure set_form_action(value: Pgchar); cdecl; inline;
    procedure set_form_enctype(value: Pgchar); cdecl; inline;
    procedure set_form_method(value: Pgchar); cdecl; inline;
    procedure set_form_no_validate(value: gboolean); cdecl; inline;
    procedure set_form_target(value: Pgchar); cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    procedure set_value(value: Pgchar); cdecl; inline;
    property autofocus: gboolean read get_autofocus write set_autofocus;
    property disabled: gboolean read get_disabled write set_disabled;
    property form: PWebKitDOMHTMLFormElement read get_form ;
    property form_action: Pgchar read get_form_action write set_form_action;
    property form_enctype: Pgchar read get_form_enctype write set_form_enctype;
    property form_method: Pgchar read get_form_method write set_form_method;
    property form_no_validate: gboolean read get_form_no_validate write set_form_no_validate;
    property form_target: Pgchar read get_form_target write set_form_target;
    property labels: PWebKitDOMNodeList read get_labels ;
    property name: Pgchar read get_name write set_name;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type  { property is writeable but setter not declared } ;
    property validation_message: Pgchar read get_validation_message ;
    property validity: PWebKitDOMValidityState read get_validity ;
    property value: Pgchar read get_value write set_value;
    property will_validate: gboolean read get_will_validate ;
  end;
  TWebKitDOMHTMLFormElement = object(TWebKitDOMHTMLElement)
    function check_validity: gboolean; cdecl; inline;
    procedure dispatch_form_change; cdecl; inline;
    procedure dispatch_form_input; cdecl; inline;
    function get_accept_charset: Pgchar; cdecl; inline;
    function get_action: Pgchar; cdecl; inline;
    function get_autocomplete: Pgchar; cdecl; inline;
    function get_elements: PWebKitDOMHTMLCollection; cdecl; inline;
    function get_encoding: Pgchar; cdecl; inline;
    function get_enctype: Pgchar; cdecl; inline;
    function get_length: glong; cdecl; inline;
    function get_method: Pgchar; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_no_validate: gboolean; cdecl; inline;
    function get_target: Pgchar; cdecl; inline;
    procedure reset; cdecl; inline;
    procedure set_accept_charset(value: Pgchar); cdecl; inline;
    procedure set_action(value: Pgchar); cdecl; inline;
    procedure set_autocomplete(value: Pgchar); cdecl; inline;
    procedure set_encoding(value: Pgchar); cdecl; inline;
    procedure set_enctype(value: Pgchar); cdecl; inline;
    procedure set_method(value: Pgchar); cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    procedure set_no_validate(value: gboolean); cdecl; inline;
    procedure set_target(value: Pgchar); cdecl; inline;
    procedure submit; cdecl; inline;
    property accept_charset: Pgchar read get_accept_charset write set_accept_charset;
    property action: Pgchar read get_action write set_action;
    property autocomplete: Pgchar read get_autocomplete write set_autocomplete;
    property elements: PWebKitDOMHTMLCollection read get_elements ;
    property encoding: Pgchar read get_encoding write set_encoding;
    property enctype: Pgchar read get_enctype write set_enctype;
    property length: glong read get_length ;
    property method: Pgchar read get_method write set_method;
    property name: Pgchar read get_name write set_name;
    property no_validate: gboolean read get_no_validate write set_no_validate;
    property target: Pgchar read get_target write set_target;
  end;
  TWebKitDOMValidityState = object(TWebKitDOMObject)
    function get_bad_input: gboolean; cdecl; inline;
    function get_custom_error: gboolean; cdecl; inline;
    function get_pattern_mismatch: gboolean; cdecl; inline;
    function get_range_overflow: gboolean; cdecl; inline;
    function get_range_underflow: gboolean; cdecl; inline;
    function get_step_mismatch: gboolean; cdecl; inline;
    function get_too_long: gboolean; cdecl; inline;
    function get_type_mismatch: gboolean; cdecl; inline;
    function get_valid: gboolean; cdecl; inline;
    function get_value_missing: gboolean; cdecl; inline;
    property bad_input: gboolean read get_bad_input ;
    property custom_error: gboolean read get_custom_error ;
    property pattern_mismatch: gboolean read get_pattern_mismatch ;
    property range_overflow: gboolean read get_range_overflow ;
    property range_underflow: gboolean read get_range_underflow ;
    property step_mismatch: gboolean read get_step_mismatch ;
    property too_long: gboolean read get_too_long ;
    property type_mismatch: gboolean read get_type_mismatch ;
    property valid: gboolean read get_valid ;
    property value_missing: gboolean read get_value_missing ;
  end;

  PPWebKitDOMHTMLButtonElementClass = ^PWebKitDOMHTMLButtonElementClass;
  PWebKitDOMHTMLButtonElementClass = ^TWebKitDOMHTMLButtonElementClass;
  TWebKitDOMHTMLButtonElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLCanvasElement = ^PWebKitDOMHTMLCanvasElement;
  PWebKitDOMHTMLCanvasElement = ^TWebKitDOMHTMLCanvasElement;
  TWebKitDOMHTMLCanvasElement = object(TWebKitDOMHTMLElement)
    function get_height: glong; cdecl; inline;
    function get_width: glong; cdecl; inline;
    procedure set_height(value: glong); cdecl; inline;
    procedure set_width(value: glong); cdecl; inline;
    property height: glong read get_height write set_height;
    property width: glong read get_width write set_width;
  end;

  PPWebKitDOMHTMLCanvasElementClass = ^PWebKitDOMHTMLCanvasElementClass;
  PWebKitDOMHTMLCanvasElementClass = ^TWebKitDOMHTMLCanvasElementClass;
  TWebKitDOMHTMLCanvasElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLCollectionClass = ^PWebKitDOMHTMLCollectionClass;
  PWebKitDOMHTMLCollectionClass = ^TWebKitDOMHTMLCollectionClass;
  TWebKitDOMHTMLCollectionClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMHTMLDListElement = ^PWebKitDOMHTMLDListElement;
  PWebKitDOMHTMLDListElement = ^TWebKitDOMHTMLDListElement;
  TWebKitDOMHTMLDListElement = object(TWebKitDOMHTMLElement)
    function get_compact: gboolean; cdecl; inline;
    procedure set_compact(value: gboolean); cdecl; inline;
    property compact: gboolean read get_compact write set_compact;
  end;

  PPWebKitDOMHTMLDListElementClass = ^PWebKitDOMHTMLDListElementClass;
  PWebKitDOMHTMLDListElementClass = ^TWebKitDOMHTMLDListElementClass;
  TWebKitDOMHTMLDListElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLDetailsElement = ^PWebKitDOMHTMLDetailsElement;
  PWebKitDOMHTMLDetailsElement = ^TWebKitDOMHTMLDetailsElement;
  TWebKitDOMHTMLDetailsElement = object(TWebKitDOMHTMLElement)
    function get_open: gboolean; cdecl; inline;
    procedure set_open(value: gboolean); cdecl; inline;
    property open: gboolean read get_open write set_open;
  end;

  PPWebKitDOMHTMLDetailsElementClass = ^PWebKitDOMHTMLDetailsElementClass;
  PWebKitDOMHTMLDetailsElementClass = ^TWebKitDOMHTMLDetailsElementClass;
  TWebKitDOMHTMLDetailsElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLDirectoryElement = ^PWebKitDOMHTMLDirectoryElement;
  PWebKitDOMHTMLDirectoryElement = ^TWebKitDOMHTMLDirectoryElement;
  TWebKitDOMHTMLDirectoryElement = object(TWebKitDOMHTMLElement)
    function get_compact: gboolean; cdecl; inline;
    procedure set_compact(value: gboolean); cdecl; inline;
    property compact: gboolean read get_compact write set_compact;
  end;

  PPWebKitDOMHTMLDirectoryElementClass = ^PWebKitDOMHTMLDirectoryElementClass;
  PWebKitDOMHTMLDirectoryElementClass = ^TWebKitDOMHTMLDirectoryElementClass;
  TWebKitDOMHTMLDirectoryElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLDivElement = ^PWebKitDOMHTMLDivElement;
  PWebKitDOMHTMLDivElement = ^TWebKitDOMHTMLDivElement;
  TWebKitDOMHTMLDivElement = object(TWebKitDOMHTMLElement)
    function get_align: Pgchar; cdecl; inline;
    procedure set_align(value: Pgchar); cdecl; inline;
    property align: Pgchar read get_align write set_align;
  end;

  PPWebKitDOMHTMLDivElementClass = ^PWebKitDOMHTMLDivElementClass;
  PWebKitDOMHTMLDivElementClass = ^TWebKitDOMHTMLDivElementClass;
  TWebKitDOMHTMLDivElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLDocumentClass = ^PWebKitDOMHTMLDocumentClass;
  PWebKitDOMHTMLDocumentClass = ^TWebKitDOMHTMLDocumentClass;
  TWebKitDOMHTMLDocumentClass = object
    parent_class: TWebKitDOMDocumentClass;
  end;

  PPWebKitDOMHTMLEmbedElement = ^PWebKitDOMHTMLEmbedElement;
  PWebKitDOMHTMLEmbedElement = ^TWebKitDOMHTMLEmbedElement;
  TWebKitDOMHTMLEmbedElement = object(TWebKitDOMHTMLElement)
    function get_align: Pgchar; cdecl; inline;
    function get_height: glong; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_src: Pgchar; cdecl; inline;
    function get_width: glong; cdecl; inline;
    procedure set_align(value: Pgchar); cdecl; inline;
    procedure set_height(value: glong); cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    procedure set_src(value: Pgchar); cdecl; inline;
    procedure set_width(value: glong); cdecl; inline;
    property align: Pgchar read get_align write set_align;
    property height: glong read get_height write set_height;
    property name: Pgchar read get_name write set_name;
    property src: Pgchar read get_src write set_src;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type  { property is writeable but setter not declared } ;
    property width: glong read get_width write set_width;
  end;

  PPWebKitDOMHTMLEmbedElementClass = ^PWebKitDOMHTMLEmbedElementClass;
  PWebKitDOMHTMLEmbedElementClass = ^TWebKitDOMHTMLEmbedElementClass;
  TWebKitDOMHTMLEmbedElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLFieldSetElement = ^PWebKitDOMHTMLFieldSetElement;
  PWebKitDOMHTMLFieldSetElement = ^TWebKitDOMHTMLFieldSetElement;
  TWebKitDOMHTMLFieldSetElement = object(TWebKitDOMHTMLElement)
    function check_validity: gboolean; cdecl; inline;
    function get_disabled: gboolean; cdecl; inline;
    function get_elements: PWebKitDOMHTMLCollection; cdecl; inline;
    function get_form: PWebKitDOMHTMLFormElement; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_validation_message: Pgchar; cdecl; inline;
    function get_validity: PWebKitDOMValidityState; cdecl; inline;
    function get_will_validate: gboolean; cdecl; inline;
    procedure set_custom_validity(error: Pgchar); cdecl; inline;
    procedure set_disabled(value: gboolean); cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    property disabled: gboolean read get_disabled write set_disabled;
    property elements: PWebKitDOMHTMLCollection read get_elements ;
    property form: PWebKitDOMHTMLFormElement read get_form ;
    property name: Pgchar read get_name write set_name;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type ;
    property validation_message: Pgchar read get_validation_message ;
    property validity: PWebKitDOMValidityState read get_validity ;
    property will_validate: gboolean read get_will_validate ;
  end;

  PPWebKitDOMHTMLFieldSetElementClass = ^PWebKitDOMHTMLFieldSetElementClass;
  PWebKitDOMHTMLFieldSetElementClass = ^TWebKitDOMHTMLFieldSetElementClass;
  TWebKitDOMHTMLFieldSetElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLFontElement = ^PWebKitDOMHTMLFontElement;
  PWebKitDOMHTMLFontElement = ^TWebKitDOMHTMLFontElement;
  TWebKitDOMHTMLFontElement = object(TWebKitDOMHTMLElement)
    function get_color: Pgchar; cdecl; inline;
    function get_face: Pgchar; cdecl; inline;
    function get_size: Pgchar; cdecl; inline;
    procedure set_color(value: Pgchar); cdecl; inline;
    procedure set_face(value: Pgchar); cdecl; inline;
    procedure set_size(value: Pgchar); cdecl; inline;
    property color: Pgchar read get_color write set_color;
    property face: Pgchar read get_face write set_face;
    property size: Pgchar read get_size write set_size;
  end;

  PPWebKitDOMHTMLFontElementClass = ^PWebKitDOMHTMLFontElementClass;
  PWebKitDOMHTMLFontElementClass = ^TWebKitDOMHTMLFontElementClass;
  TWebKitDOMHTMLFontElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLFormElementClass = ^PWebKitDOMHTMLFormElementClass;
  PWebKitDOMHTMLFormElementClass = ^TWebKitDOMHTMLFormElementClass;
  TWebKitDOMHTMLFormElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLFrameElement = ^PWebKitDOMHTMLFrameElement;
  PWebKitDOMHTMLFrameElement = ^TWebKitDOMHTMLFrameElement;
  TWebKitDOMHTMLFrameElement = object(TWebKitDOMHTMLElement)
    function get_content_document: PWebKitDOMDocument; cdecl; inline;
    function get_content_window: PWebKitDOMDOMWindow; cdecl; inline;
    function get_frame_border: Pgchar; cdecl; inline;
    function get_height: glong; cdecl; inline;
    function get_long_desc: Pgchar; cdecl; inline;
    function get_margin_height: Pgchar; cdecl; inline;
    function get_margin_width: Pgchar; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_no_resize: gboolean; cdecl; inline;
    function get_scrolling: Pgchar; cdecl; inline;
    function get_src: Pgchar; cdecl; inline;
    function get_width: glong; cdecl; inline;
    procedure set_frame_border(value: Pgchar); cdecl; inline;
    procedure set_long_desc(value: Pgchar); cdecl; inline;
    procedure set_margin_height(value: Pgchar); cdecl; inline;
    procedure set_margin_width(value: Pgchar); cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    procedure set_no_resize(value: gboolean); cdecl; inline;
    procedure set_scrolling(value: Pgchar); cdecl; inline;
    procedure set_src(value: Pgchar); cdecl; inline;
    property content_document: PWebKitDOMDocument read get_content_document ;
    property content_window: PWebKitDOMDOMWindow read get_content_window ;
    property frame_border: Pgchar read get_frame_border write set_frame_border;
    property height: glong read get_height ;
    property long_desc: Pgchar read get_long_desc write set_long_desc;
    property margin_height: Pgchar read get_margin_height write set_margin_height;
    property margin_width: Pgchar read get_margin_width write set_margin_width;
    property name: Pgchar read get_name write set_name;
    property no_resize: gboolean read get_no_resize write set_no_resize;
    property scrolling: Pgchar read get_scrolling write set_scrolling;
    property src: Pgchar read get_src write set_src;
    property width: glong read get_width ;
  end;

  PPWebKitDOMHTMLFrameElementClass = ^PWebKitDOMHTMLFrameElementClass;
  PWebKitDOMHTMLFrameElementClass = ^TWebKitDOMHTMLFrameElementClass;
  TWebKitDOMHTMLFrameElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLFrameSetElement = ^PWebKitDOMHTMLFrameSetElement;
  PWebKitDOMHTMLFrameSetElement = ^TWebKitDOMHTMLFrameSetElement;
  TWebKitDOMHTMLFrameSetElement = object(TWebKitDOMHTMLElement)
    function get_cols: Pgchar; cdecl; inline;
    function get_rows: Pgchar; cdecl; inline;
    procedure set_cols(value: Pgchar); cdecl; inline;
    procedure set_rows(value: Pgchar); cdecl; inline;
    property cols: Pgchar read get_cols write set_cols;
    property rows: Pgchar read get_rows write set_rows;
  end;

  PPWebKitDOMHTMLFrameSetElementClass = ^PWebKitDOMHTMLFrameSetElementClass;
  PWebKitDOMHTMLFrameSetElementClass = ^TWebKitDOMHTMLFrameSetElementClass;
  TWebKitDOMHTMLFrameSetElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLHRElement = ^PWebKitDOMHTMLHRElement;
  PWebKitDOMHTMLHRElement = ^TWebKitDOMHTMLHRElement;
  TWebKitDOMHTMLHRElement = object(TWebKitDOMHTMLElement)
    function get_align: Pgchar; cdecl; inline;
    function get_no_shade: gboolean; cdecl; inline;
    function get_size: Pgchar; cdecl; inline;
    function get_width: Pgchar; cdecl; inline;
    procedure set_align(value: Pgchar); cdecl; inline;
    procedure set_no_shade(value: gboolean); cdecl; inline;
    procedure set_size(value: Pgchar); cdecl; inline;
    procedure set_width(value: Pgchar); cdecl; inline;
    property align: Pgchar read get_align write set_align;
    property no_shade: gboolean read get_no_shade write set_no_shade;
    property size: Pgchar read get_size write set_size;
    property width: Pgchar read get_width write set_width;
  end;

  PPWebKitDOMHTMLHRElementClass = ^PWebKitDOMHTMLHRElementClass;
  PWebKitDOMHTMLHRElementClass = ^TWebKitDOMHTMLHRElementClass;
  TWebKitDOMHTMLHRElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLHeadElementClass = ^PWebKitDOMHTMLHeadElementClass;
  PWebKitDOMHTMLHeadElementClass = ^TWebKitDOMHTMLHeadElementClass;
  TWebKitDOMHTMLHeadElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLHeadingElement = ^PWebKitDOMHTMLHeadingElement;
  PWebKitDOMHTMLHeadingElement = ^TWebKitDOMHTMLHeadingElement;
  TWebKitDOMHTMLHeadingElement = object(TWebKitDOMHTMLElement)
    function get_align: Pgchar; cdecl; inline;
    procedure set_align(value: Pgchar); cdecl; inline;
    property align: Pgchar read get_align write set_align;
  end;

  PPWebKitDOMHTMLHeadingElementClass = ^PWebKitDOMHTMLHeadingElementClass;
  PWebKitDOMHTMLHeadingElementClass = ^TWebKitDOMHTMLHeadingElementClass;
  TWebKitDOMHTMLHeadingElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLHtmlElement = ^PWebKitDOMHTMLHtmlElement;
  PWebKitDOMHTMLHtmlElement = ^TWebKitDOMHTMLHtmlElement;
  TWebKitDOMHTMLHtmlElement = object(TWebKitDOMHTMLElement)
    function get_manifest: Pgchar; cdecl; inline;
    function get_version: Pgchar; cdecl; inline;
    procedure set_manifest(value: Pgchar); cdecl; inline;
    procedure set_version(value: Pgchar); cdecl; inline;
    property manifest: Pgchar read get_manifest write set_manifest;
    property version: Pgchar read get_version write set_version;
  end;

  PPWebKitDOMHTMLHtmlElementClass = ^PWebKitDOMHTMLHtmlElementClass;
  PWebKitDOMHTMLHtmlElementClass = ^TWebKitDOMHTMLHtmlElementClass;
  TWebKitDOMHTMLHtmlElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLIFrameElement = ^PWebKitDOMHTMLIFrameElement;
  PWebKitDOMHTMLIFrameElement = ^TWebKitDOMHTMLIFrameElement;
  TWebKitDOMHTMLIFrameElement = object(TWebKitDOMHTMLElement)
    function get_align: Pgchar; cdecl; inline;
    function get_content_document: PWebKitDOMDocument; cdecl; inline;
    function get_content_window: PWebKitDOMDOMWindow; cdecl; inline;
    function get_frame_border: Pgchar; cdecl; inline;
    function get_height: Pgchar; cdecl; inline;
    function get_long_desc: Pgchar; cdecl; inline;
    function get_margin_height: Pgchar; cdecl; inline;
    function get_margin_width: Pgchar; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_sandbox: Pgchar; cdecl; inline;
    function get_scrolling: Pgchar; cdecl; inline;
    function get_seamless: gboolean; cdecl; inline;
    function get_src: Pgchar; cdecl; inline;
    function get_srcdoc: Pgchar; cdecl; inline;
    function get_width: Pgchar; cdecl; inline;
    procedure set_align(value: Pgchar); cdecl; inline;
    procedure set_frame_border(value: Pgchar); cdecl; inline;
    procedure set_height(value: Pgchar); cdecl; inline;
    procedure set_long_desc(value: Pgchar); cdecl; inline;
    procedure set_margin_height(value: Pgchar); cdecl; inline;
    procedure set_margin_width(value: Pgchar); cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    procedure set_sandbox(value: Pgchar); cdecl; inline;
    procedure set_scrolling(value: Pgchar); cdecl; inline;
    procedure set_seamless(value: gboolean); cdecl; inline;
    procedure set_src(value: Pgchar); cdecl; inline;
    procedure set_srcdoc(value: Pgchar); cdecl; inline;
    procedure set_width(value: Pgchar); cdecl; inline;
    property align: Pgchar read get_align write set_align;
    property content_document: PWebKitDOMDocument read get_content_document ;
    property content_window: PWebKitDOMDOMWindow read get_content_window ;
    property frame_border: Pgchar read get_frame_border write set_frame_border;
    property height: Pgchar read get_height write set_height;
    property long_desc: Pgchar read get_long_desc write set_long_desc;
    property margin_height: Pgchar read get_margin_height write set_margin_height;
    property margin_width: Pgchar read get_margin_width write set_margin_width;
    property name: Pgchar read get_name write set_name;
    property sandbox: Pgchar read get_sandbox write set_sandbox;
    property scrolling: Pgchar read get_scrolling write set_scrolling;
    property seamless: gboolean read get_seamless write set_seamless;
    property src: Pgchar read get_src write set_src;
    property srcdoc: Pgchar read get_srcdoc write set_srcdoc;
    property width: Pgchar read get_width write set_width;
  end;

  PPWebKitDOMHTMLIFrameElementClass = ^PWebKitDOMHTMLIFrameElementClass;
  PWebKitDOMHTMLIFrameElementClass = ^TWebKitDOMHTMLIFrameElementClass;
  TWebKitDOMHTMLIFrameElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLImageElement = ^PWebKitDOMHTMLImageElement;
  PWebKitDOMHTMLImageElement = ^TWebKitDOMHTMLImageElement;
  TWebKitDOMHTMLImageElement = object(TWebKitDOMHTMLElement)
    function get_align: Pgchar; cdecl; inline;
    function get_alt: Pgchar; cdecl; inline;
    function get_border: Pgchar; cdecl; inline;
    function get_complete: gboolean; cdecl; inline;
    function get_cross_origin: Pgchar; cdecl; inline;
    function get_height: glong; cdecl; inline;
    function get_hspace: glong; cdecl; inline;
    function get_is_map: gboolean; cdecl; inline;
    function get_long_desc: Pgchar; cdecl; inline;
    function get_lowsrc: Pgchar; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_natural_height: glong; cdecl; inline;
    function get_natural_width: glong; cdecl; inline;
    function get_src: Pgchar; cdecl; inline;
    function get_use_map: Pgchar; cdecl; inline;
    function get_vspace: glong; cdecl; inline;
    function get_width: glong; cdecl; inline;
    function get_x: glong; cdecl; inline;
    function get_y: glong; cdecl; inline;
    procedure set_align(value: Pgchar); cdecl; inline;
    procedure set_alt(value: Pgchar); cdecl; inline;
    procedure set_border(value: Pgchar); cdecl; inline;
    procedure set_cross_origin(value: Pgchar); cdecl; inline;
    procedure set_height(value: glong); cdecl; inline;
    procedure set_hspace(value: glong); cdecl; inline;
    procedure set_is_map(value: gboolean); cdecl; inline;
    procedure set_long_desc(value: Pgchar); cdecl; inline;
    procedure set_lowsrc(value: Pgchar); cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    procedure set_src(value: Pgchar); cdecl; inline;
    procedure set_use_map(value: Pgchar); cdecl; inline;
    procedure set_vspace(value: glong); cdecl; inline;
    procedure set_width(value: glong); cdecl; inline;
    property align: Pgchar read get_align write set_align;
    property alt: Pgchar read get_alt write set_alt;
    property border: Pgchar read get_border write set_border;
    property complete: gboolean read get_complete ;
    property cross_origin: Pgchar read get_cross_origin write set_cross_origin;
    property height: glong read get_height write set_height;
    property hspace: glong read get_hspace write set_hspace;
    property is_map: gboolean read get_is_map write set_is_map;
    property long_desc: Pgchar read get_long_desc write set_long_desc;
    property lowsrc: Pgchar read get_lowsrc write set_lowsrc;
    property name: Pgchar read get_name write set_name;
    property natural_height: glong read get_natural_height ;
    property natural_width: glong read get_natural_width ;
    property src: Pgchar read get_src write set_src;
    property use_map: Pgchar read get_use_map write set_use_map;
    property vspace: glong read get_vspace write set_vspace;
    property width: glong read get_width write set_width;
    property x: glong read get_x ;
    property y: glong read get_y ;
  end;

  PPWebKitDOMHTMLImageElementClass = ^PWebKitDOMHTMLImageElementClass;
  PWebKitDOMHTMLImageElementClass = ^TWebKitDOMHTMLImageElementClass;
  TWebKitDOMHTMLImageElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLInputElement = ^PWebKitDOMHTMLInputElement;
  PWebKitDOMHTMLInputElement = ^TWebKitDOMHTMLInputElement;
  TWebKitDOMHTMLInputElement = object(TWebKitDOMHTMLElement)
    function check_validity: gboolean; cdecl; inline;
    function get_accept: Pgchar; cdecl; inline;
    function get_align: Pgchar; cdecl; inline;
    function get_alt: Pgchar; cdecl; inline;
    function get_autocomplete: Pgchar; cdecl; inline;
    function get_autofocus: gboolean; cdecl; inline;
    function get_capture: Pgchar; cdecl; inline;
    function get_checked: gboolean; cdecl; inline;
    function get_default_checked: gboolean; cdecl; inline;
    function get_default_value: Pgchar; cdecl; inline;
    function get_dir_name: Pgchar; cdecl; inline;
    function get_disabled: gboolean; cdecl; inline;
    function get_files: PWebKitDOMFileList; cdecl; inline;
    function get_form: PWebKitDOMHTMLFormElement; cdecl; inline;
    function get_form_action: Pgchar; cdecl; inline;
    function get_form_enctype: Pgchar; cdecl; inline;
    function get_form_method: Pgchar; cdecl; inline;
    function get_form_no_validate: gboolean; cdecl; inline;
    function get_form_target: Pgchar; cdecl; inline;
    function get_height: gulong; cdecl; inline;
    function get_incremental: gboolean; cdecl; inline;
    function get_indeterminate: gboolean; cdecl; inline;
    function get_labels: PWebKitDOMNodeList; cdecl; inline;
    function get_list: PWebKitDOMHTMLElement; cdecl; inline;
    function get_max: Pgchar; cdecl; inline;
    function get_max_length: glong; cdecl; inline;
    function get_min: Pgchar; cdecl; inline;
    function get_multiple: gboolean; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_pattern: Pgchar; cdecl; inline;
    function get_placeholder: Pgchar; cdecl; inline;
    function get_read_only: gboolean; cdecl; inline;
    function get_required: gboolean; cdecl; inline;
    function get_size: gulong; cdecl; inline;
    function get_src: Pgchar; cdecl; inline;
    function get_step: Pgchar; cdecl; inline;
    function get_use_map: Pgchar; cdecl; inline;
    function get_validation_message: Pgchar; cdecl; inline;
    function get_validity: PWebKitDOMValidityState; cdecl; inline;
    function get_value: Pgchar; cdecl; inline;
    function get_value_as_number: gdouble; cdecl; inline;
    function get_webkit_grammar: gboolean; cdecl; inline;
    function get_webkit_speech: gboolean; cdecl; inline;
    function get_webkitdirectory: gboolean; cdecl; inline;
    function get_width: gulong; cdecl; inline;
    function get_will_validate: gboolean; cdecl; inline;
    function is_edited: gboolean; cdecl; inline;
    procedure select; cdecl; inline;
    procedure set_accept(value: Pgchar); cdecl; inline;
    procedure set_align(value: Pgchar); cdecl; inline;
    procedure set_alt(value: Pgchar); cdecl; inline;
    procedure set_autocomplete(value: Pgchar); cdecl; inline;
    procedure set_autofocus(value: gboolean); cdecl; inline;
    procedure set_capture(value: Pgchar); cdecl; inline;
    procedure set_checked(value: gboolean); cdecl; inline;
    procedure set_custom_validity(error: Pgchar); cdecl; inline;
    procedure set_default_checked(value: gboolean); cdecl; inline;
    procedure set_default_value(value: Pgchar); cdecl; inline;
    procedure set_dir_name(value: Pgchar); cdecl; inline;
    procedure set_disabled(value: gboolean); cdecl; inline;
    procedure set_files(value: PWebKitDOMFileList); cdecl; inline;
    procedure set_form_action(value: Pgchar); cdecl; inline;
    procedure set_form_enctype(value: Pgchar); cdecl; inline;
    procedure set_form_method(value: Pgchar); cdecl; inline;
    procedure set_form_no_validate(value: gboolean); cdecl; inline;
    procedure set_form_target(value: Pgchar); cdecl; inline;
    procedure set_height(value: gulong); cdecl; inline;
    procedure set_incremental(value: gboolean); cdecl; inline;
    procedure set_indeterminate(value: gboolean); cdecl; inline;
    procedure set_max(value: Pgchar); cdecl; inline;
    procedure set_max_length(value: glong; error: PPGError); cdecl; inline;
    procedure set_min(value: Pgchar); cdecl; inline;
    procedure set_multiple(value: gboolean); cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    procedure set_pattern(value: Pgchar); cdecl; inline;
    procedure set_placeholder(value: Pgchar); cdecl; inline;
    procedure set_range_text(replacement: Pgchar; start: gulong; end_: gulong; selectionMode: Pgchar; error: PPGError); cdecl; inline;
    procedure set_read_only(value: gboolean); cdecl; inline;
    procedure set_required(value: gboolean); cdecl; inline;
    procedure set_size(value: gulong; error: PPGError); cdecl; inline;
    procedure set_src(value: Pgchar); cdecl; inline;
    procedure set_step(value: Pgchar); cdecl; inline;
    procedure set_use_map(value: Pgchar); cdecl; inline;
    procedure set_value(value: Pgchar); cdecl; inline;
    procedure set_value_as_number(value: gdouble; error: PPGError); cdecl; inline;
    procedure set_value_for_user(value: Pgchar); cdecl; inline;
    procedure set_webkit_grammar(value: gboolean); cdecl; inline;
    procedure set_webkit_speech(value: gboolean); cdecl; inline;
    procedure set_webkitdirectory(value: gboolean); cdecl; inline;
    procedure set_width(value: gulong); cdecl; inline;
    procedure step_down(n: glong; error: PPGError); cdecl; inline;
    procedure step_up(n: glong; error: PPGError); cdecl; inline;
    property accept: Pgchar read get_accept write set_accept;
    property align: Pgchar read get_align write set_align;
    property alt: Pgchar read get_alt write set_alt;
    property autocomplete: Pgchar read get_autocomplete write set_autocomplete;
    property autofocus: gboolean read get_autofocus write set_autofocus;
    property capture: Pgchar read get_capture write set_capture;
    property checked: gboolean read get_checked write set_checked;
    property default_checked: gboolean read get_default_checked write set_default_checked;
    property default_value: Pgchar read get_default_value write set_default_value;
    property dir_name: Pgchar read get_dir_name write set_dir_name;
    property disabled: gboolean read get_disabled write set_disabled;
    property files: PWebKitDOMFileList read get_files write set_files;
    property form: PWebKitDOMHTMLFormElement read get_form ;
    property form_action: Pgchar read get_form_action write set_form_action;
    property form_enctype: Pgchar read get_form_enctype write set_form_enctype;
    property form_method: Pgchar read get_form_method write set_form_method;
    property form_no_validate: gboolean read get_form_no_validate write set_form_no_validate;
    property form_target: Pgchar read get_form_target write set_form_target;
    property height: gulong read get_height write set_height;
    property incremental: gboolean read get_incremental write set_incremental;
    property indeterminate: gboolean read get_indeterminate write set_indeterminate;
    property labels: PWebKitDOMNodeList read get_labels ;
    property list: PWebKitDOMHTMLElement read get_list ;
    property max: Pgchar read get_max write set_max;
    property max_length: glong read get_max_length  { property is writeable but setter not declared } ;
    property min: Pgchar read get_min write set_min;
    property multiple: gboolean read get_multiple write set_multiple;
    property name: Pgchar read get_name write set_name;
    property pattern: Pgchar read get_pattern write set_pattern;
    property placeholder: Pgchar read get_placeholder write set_placeholder;
    property read_only: gboolean read get_read_only write set_read_only;
    property required: gboolean read get_required write set_required;
    property size: gulong read get_size  { property is writeable but setter not declared } ;
    property src: Pgchar read get_src write set_src;
    property step: Pgchar read get_step write set_step;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type  { property is writeable but setter not declared } ;
    property use_map: Pgchar read get_use_map write set_use_map;
    property validation_message: Pgchar read get_validation_message ;
    property validity: PWebKitDOMValidityState read get_validity ;
    property value: Pgchar read get_value write set_value;
    property value_as_number: gdouble read get_value_as_number  { property is writeable but setter not declared } ;
    property webkit_grammar: gboolean read get_webkit_grammar write set_webkit_grammar;
    property webkit_speech: gboolean read get_webkit_speech write set_webkit_speech;
    property webkitdirectory: gboolean read get_webkitdirectory write set_webkitdirectory;
    property width: gulong read get_width write set_width;
    property will_validate: gboolean read get_will_validate ;
  end;

  PPWebKitDOMHTMLInputElementClass = ^PWebKitDOMHTMLInputElementClass;
  PWebKitDOMHTMLInputElementClass = ^TWebKitDOMHTMLInputElementClass;
  TWebKitDOMHTMLInputElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLKeygenElement = ^PWebKitDOMHTMLKeygenElement;
  PWebKitDOMHTMLKeygenElement = ^TWebKitDOMHTMLKeygenElement;
  TWebKitDOMHTMLKeygenElement = object(TWebKitDOMHTMLElement)
    function check_validity: gboolean; cdecl; inline;
    function get_autofocus: gboolean; cdecl; inline;
    function get_challenge: Pgchar; cdecl; inline;
    function get_disabled: gboolean; cdecl; inline;
    function get_form: PWebKitDOMHTMLFormElement; cdecl; inline;
    function get_keytype: Pgchar; cdecl; inline;
    function get_labels: PWebKitDOMNodeList; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_validation_message: Pgchar; cdecl; inline;
    function get_validity: PWebKitDOMValidityState; cdecl; inline;
    function get_will_validate: gboolean; cdecl; inline;
    procedure set_autofocus(value: gboolean); cdecl; inline;
    procedure set_challenge(value: Pgchar); cdecl; inline;
    procedure set_custom_validity(error: Pgchar); cdecl; inline;
    procedure set_disabled(value: gboolean); cdecl; inline;
    procedure set_keytype(value: Pgchar); cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    property autofocus: gboolean read get_autofocus write set_autofocus;
    property challenge: Pgchar read get_challenge write set_challenge;
    property disabled: gboolean read get_disabled write set_disabled;
    property form: PWebKitDOMHTMLFormElement read get_form ;
    property keytype: Pgchar read get_keytype write set_keytype;
    property labels: PWebKitDOMNodeList read get_labels ;
    property name: Pgchar read get_name write set_name;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type ;
    property validation_message: Pgchar read get_validation_message ;
    property validity: PWebKitDOMValidityState read get_validity ;
    property will_validate: gboolean read get_will_validate ;
  end;

  PPWebKitDOMHTMLKeygenElementClass = ^PWebKitDOMHTMLKeygenElementClass;
  PWebKitDOMHTMLKeygenElementClass = ^TWebKitDOMHTMLKeygenElementClass;
  TWebKitDOMHTMLKeygenElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLLIElement = ^PWebKitDOMHTMLLIElement;
  PWebKitDOMHTMLLIElement = ^TWebKitDOMHTMLLIElement;
  TWebKitDOMHTMLLIElement = object(TWebKitDOMHTMLElement)
    function get_value: glong; cdecl; inline;
    procedure set_value(value: glong); cdecl; inline;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type  { property is writeable but setter not declared } ;
    property value: glong read get_value write set_value;
  end;

  PPWebKitDOMHTMLLIElementClass = ^PWebKitDOMHTMLLIElementClass;
  PWebKitDOMHTMLLIElementClass = ^TWebKitDOMHTMLLIElementClass;
  TWebKitDOMHTMLLIElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLLabelElement = ^PWebKitDOMHTMLLabelElement;
  PWebKitDOMHTMLLabelElement = ^TWebKitDOMHTMLLabelElement;
  TWebKitDOMHTMLLabelElement = object(TWebKitDOMHTMLElement)
    function get_control: PWebKitDOMHTMLElement; cdecl; inline;
    function get_form: PWebKitDOMHTMLFormElement; cdecl; inline;
    function get_html_for: Pgchar; cdecl; inline;
    procedure set_html_for(value: Pgchar); cdecl; inline;
    property control: PWebKitDOMHTMLElement read get_control ;
    property form: PWebKitDOMHTMLFormElement read get_form ;
    property html_for: Pgchar read get_html_for write set_html_for;
  end;

  PPWebKitDOMHTMLLabelElementClass = ^PWebKitDOMHTMLLabelElementClass;
  PWebKitDOMHTMLLabelElementClass = ^TWebKitDOMHTMLLabelElementClass;
  TWebKitDOMHTMLLabelElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLLegendElement = ^PWebKitDOMHTMLLegendElement;
  PWebKitDOMHTMLLegendElement = ^TWebKitDOMHTMLLegendElement;
  TWebKitDOMHTMLLegendElement = object(TWebKitDOMHTMLElement)
    function get_align: Pgchar; cdecl; inline;
    function get_form: PWebKitDOMHTMLFormElement; cdecl; inline;
    procedure set_align(value: Pgchar); cdecl; inline;
    property align: Pgchar read get_align write set_align;
    property form: PWebKitDOMHTMLFormElement read get_form ;
  end;

  PPWebKitDOMHTMLLegendElementClass = ^PWebKitDOMHTMLLegendElementClass;
  PWebKitDOMHTMLLegendElementClass = ^TWebKitDOMHTMLLegendElementClass;
  TWebKitDOMHTMLLegendElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLLinkElement = ^PWebKitDOMHTMLLinkElement;
  PWebKitDOMHTMLLinkElement = ^TWebKitDOMHTMLLinkElement;
  TWebKitDOMHTMLLinkElement = object(TWebKitDOMHTMLElement)
    function get_charset: Pgchar; cdecl; inline;
    function get_disabled: gboolean; cdecl; inline;
    function get_href: Pgchar; cdecl; inline;
    function get_hreflang: Pgchar; cdecl; inline;
    function get_media: Pgchar; cdecl; inline;
    function get_rel: Pgchar; cdecl; inline;
    function get_rev: Pgchar; cdecl; inline;
    function get_sheet: PWebKitDOMStyleSheet; cdecl; inline;
    function get_target: Pgchar; cdecl; inline;
    procedure set_charset(value: Pgchar); cdecl; inline;
    procedure set_disabled(value: gboolean); cdecl; inline;
    procedure set_href(value: Pgchar); cdecl; inline;
    procedure set_hreflang(value: Pgchar); cdecl; inline;
    procedure set_media(value: Pgchar); cdecl; inline;
    procedure set_rel(value: Pgchar); cdecl; inline;
    procedure set_rev(value: Pgchar); cdecl; inline;
    procedure set_target(value: Pgchar); cdecl; inline;
    property charset: Pgchar read get_charset write set_charset;
    property disabled: gboolean read get_disabled write set_disabled;
    property href: Pgchar read get_href write set_href;
    property hreflang: Pgchar read get_hreflang write set_hreflang;
    property media: Pgchar read get_media write set_media;
    property rel: Pgchar read get_rel write set_rel;
    property rev: Pgchar read get_rev write set_rev;
    property sheet: PWebKitDOMStyleSheet read get_sheet ;
    property target: Pgchar read get_target write set_target;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type  { property is writeable but setter not declared } ;
  end;

  PPWebKitDOMHTMLLinkElementClass = ^PWebKitDOMHTMLLinkElementClass;
  PWebKitDOMHTMLLinkElementClass = ^TWebKitDOMHTMLLinkElementClass;
  TWebKitDOMHTMLLinkElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLMapElement = ^PWebKitDOMHTMLMapElement;
  PWebKitDOMHTMLMapElement = ^TWebKitDOMHTMLMapElement;
  TWebKitDOMHTMLMapElement = object(TWebKitDOMHTMLElement)
    function get_areas: PWebKitDOMHTMLCollection; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    property areas: PWebKitDOMHTMLCollection read get_areas ;
    property name: Pgchar read get_name write set_name;
  end;

  PPWebKitDOMHTMLMapElementClass = ^PWebKitDOMHTMLMapElementClass;
  PWebKitDOMHTMLMapElementClass = ^TWebKitDOMHTMLMapElementClass;
  TWebKitDOMHTMLMapElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLMarqueeElement = ^PWebKitDOMHTMLMarqueeElement;
  PWebKitDOMHTMLMarqueeElement = ^TWebKitDOMHTMLMarqueeElement;
  TWebKitDOMHTMLMarqueeElement = object(TWebKitDOMHTMLElement)
    function get_behavior: Pgchar; cdecl; inline;
    function get_bg_color: Pgchar; cdecl; inline;
    function get_direction: Pgchar; cdecl; inline;
    function get_height: Pgchar; cdecl; inline;
    function get_hspace: gulong; cdecl; inline;
    function get_loop: glong; cdecl; inline;
    function get_scroll_amount: glong; cdecl; inline;
    function get_scroll_delay: glong; cdecl; inline;
    function get_true_speed: gboolean; cdecl; inline;
    function get_vspace: gulong; cdecl; inline;
    function get_width: Pgchar; cdecl; inline;
    procedure set_behavior(value: Pgchar); cdecl; inline;
    procedure set_bg_color(value: Pgchar); cdecl; inline;
    procedure set_direction(value: Pgchar); cdecl; inline;
    procedure set_height(value: Pgchar); cdecl; inline;
    procedure set_hspace(value: gulong); cdecl; inline;
    procedure set_loop(value: glong; error: PPGError); cdecl; inline;
    procedure set_scroll_amount(value: glong; error: PPGError); cdecl; inline;
    procedure set_scroll_delay(value: glong; error: PPGError); cdecl; inline;
    procedure set_true_speed(value: gboolean); cdecl; inline;
    procedure set_vspace(value: gulong); cdecl; inline;
    procedure set_width(value: Pgchar); cdecl; inline;
    procedure start; cdecl; inline;
    procedure stop; cdecl; inline;
    property behavior: Pgchar read get_behavior write set_behavior;
    property bg_color: Pgchar read get_bg_color write set_bg_color;
    property direction: Pgchar read get_direction write set_direction;
    property height: Pgchar read get_height write set_height;
    property hspace: gulong read get_hspace write set_hspace;
    property loop: glong read get_loop  { property is writeable but setter not declared } ;
    property scroll_amount: glong read get_scroll_amount  { property is writeable but setter not declared } ;
    property scroll_delay: glong read get_scroll_delay  { property is writeable but setter not declared } ;
    property true_speed: gboolean read get_true_speed write set_true_speed;
    property vspace: gulong read get_vspace write set_vspace;
    property width: Pgchar read get_width write set_width;
  end;

  PPWebKitDOMHTMLMarqueeElementClass = ^PWebKitDOMHTMLMarqueeElementClass;
  PWebKitDOMHTMLMarqueeElementClass = ^TWebKitDOMHTMLMarqueeElementClass;
  TWebKitDOMHTMLMarqueeElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;
  TWebKitDOMTimeRanges = object(TWebKitDOMObject)
    function end_(index: gulong; error: PPGError): gfloat; cdecl; inline;
    function get_length: gulong; cdecl; inline;
    function start(index: gulong; error: PPGError): gfloat; cdecl; inline;
    property length: gulong read get_length ;
  end;
  TWebKitDOMMediaError = object(TWebKitDOMObject)
    function get_code: gushort; cdecl; inline;
    property code: gushort read get_code ;
  end;

  PPWebKitDOMHTMLMenuElement = ^PWebKitDOMHTMLMenuElement;
  PWebKitDOMHTMLMenuElement = ^TWebKitDOMHTMLMenuElement;
  TWebKitDOMHTMLMenuElement = object(TWebKitDOMHTMLElement)
    function get_compact: gboolean; cdecl; inline;
    procedure set_compact(value: gboolean); cdecl; inline;
    property compact: gboolean read get_compact write set_compact;
  end;

  PPWebKitDOMHTMLMenuElementClass = ^PWebKitDOMHTMLMenuElementClass;
  PWebKitDOMHTMLMenuElementClass = ^TWebKitDOMHTMLMenuElementClass;
  TWebKitDOMHTMLMenuElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLMetaElement = ^PWebKitDOMHTMLMetaElement;
  PWebKitDOMHTMLMetaElement = ^TWebKitDOMHTMLMetaElement;
  TWebKitDOMHTMLMetaElement = object(TWebKitDOMHTMLElement)
    function get_content: Pgchar; cdecl; inline;
    function get_http_equiv: Pgchar; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_scheme: Pgchar; cdecl; inline;
    procedure set_content(value: Pgchar); cdecl; inline;
    procedure set_http_equiv(value: Pgchar); cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    procedure set_scheme(value: Pgchar); cdecl; inline;
    property content: Pgchar read get_content write set_content;
    property http_equiv: Pgchar read get_http_equiv write set_http_equiv;
    property name: Pgchar read get_name write set_name;
    property scheme: Pgchar read get_scheme write set_scheme;
  end;

  PPWebKitDOMHTMLMetaElementClass = ^PWebKitDOMHTMLMetaElementClass;
  PWebKitDOMHTMLMetaElementClass = ^TWebKitDOMHTMLMetaElementClass;
  TWebKitDOMHTMLMetaElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLModElement = ^PWebKitDOMHTMLModElement;
  PWebKitDOMHTMLModElement = ^TWebKitDOMHTMLModElement;
  TWebKitDOMHTMLModElement = object(TWebKitDOMHTMLElement)
    function get_cite: Pgchar; cdecl; inline;
    function get_date_time: Pgchar; cdecl; inline;
    procedure set_cite(value: Pgchar); cdecl; inline;
    procedure set_date_time(value: Pgchar); cdecl; inline;
    property cite: Pgchar read get_cite write set_cite;
    property date_time: Pgchar read get_date_time write set_date_time;
  end;

  PPWebKitDOMHTMLModElementClass = ^PWebKitDOMHTMLModElementClass;
  PWebKitDOMHTMLModElementClass = ^TWebKitDOMHTMLModElementClass;
  TWebKitDOMHTMLModElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLOListElement = ^PWebKitDOMHTMLOListElement;
  PWebKitDOMHTMLOListElement = ^TWebKitDOMHTMLOListElement;
  TWebKitDOMHTMLOListElement = object(TWebKitDOMHTMLElement)
    function get_compact: gboolean; cdecl; inline;
    function get_reversed: gboolean; cdecl; inline;
    function get_start: glong; cdecl; inline;
    procedure set_compact(value: gboolean); cdecl; inline;
    procedure set_reversed(value: gboolean); cdecl; inline;
    procedure set_start(value: glong); cdecl; inline;
    property compact: gboolean read get_compact write set_compact;
    property reversed: gboolean read get_reversed write set_reversed;
    property start: glong read get_start write set_start;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type  { property is writeable but setter not declared } ;
  end;

  PPWebKitDOMHTMLOListElementClass = ^PWebKitDOMHTMLOListElementClass;
  PWebKitDOMHTMLOListElementClass = ^TWebKitDOMHTMLOListElementClass;
  TWebKitDOMHTMLOListElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLObjectElement = ^PWebKitDOMHTMLObjectElement;
  PWebKitDOMHTMLObjectElement = ^TWebKitDOMHTMLObjectElement;
  TWebKitDOMHTMLObjectElement = object(TWebKitDOMHTMLElement)
    function check_validity: gboolean; cdecl; inline;
    function get_align: Pgchar; cdecl; inline;
    function get_archive: Pgchar; cdecl; inline;
    function get_border: Pgchar; cdecl; inline;
    function get_code: Pgchar; cdecl; inline;
    function get_code_base: Pgchar; cdecl; inline;
    function get_code_type: Pgchar; cdecl; inline;
    function get_content_document: PWebKitDOMDocument; cdecl; inline;
    function get_data: Pgchar; cdecl; inline;
    function get_declare: gboolean; cdecl; inline;
    function get_form: PWebKitDOMHTMLFormElement; cdecl; inline;
    function get_height: Pgchar; cdecl; inline;
    function get_hspace: glong; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_standby: Pgchar; cdecl; inline;
    function get_use_map: Pgchar; cdecl; inline;
    function get_validation_message: Pgchar; cdecl; inline;
    function get_validity: PWebKitDOMValidityState; cdecl; inline;
    function get_vspace: glong; cdecl; inline;
    function get_width: Pgchar; cdecl; inline;
    function get_will_validate: gboolean; cdecl; inline;
    procedure set_align(value: Pgchar); cdecl; inline;
    procedure set_archive(value: Pgchar); cdecl; inline;
    procedure set_border(value: Pgchar); cdecl; inline;
    procedure set_code(value: Pgchar); cdecl; inline;
    procedure set_code_base(value: Pgchar); cdecl; inline;
    procedure set_code_type(value: Pgchar); cdecl; inline;
    procedure set_custom_validity(error: Pgchar); cdecl; inline;
    procedure set_data(value: Pgchar); cdecl; inline;
    procedure set_declare(value: gboolean); cdecl; inline;
    procedure set_height(value: Pgchar); cdecl; inline;
    procedure set_hspace(value: glong); cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    procedure set_standby(value: Pgchar); cdecl; inline;
    procedure set_use_map(value: Pgchar); cdecl; inline;
    procedure set_vspace(value: glong); cdecl; inline;
    procedure set_width(value: Pgchar); cdecl; inline;
    property align: Pgchar read get_align write set_align;
    property archive: Pgchar read get_archive write set_archive;
    property border: Pgchar read get_border write set_border;
    property code: Pgchar read get_code write set_code;
    property code_base: Pgchar read get_code_base write set_code_base;
    property code_type: Pgchar read get_code_type write set_code_type;
    property content_document: PWebKitDOMDocument read get_content_document ;
    property data: Pgchar read get_data write set_data;
    property declare: gboolean read get_declare write set_declare;
    property form: PWebKitDOMHTMLFormElement read get_form ;
    property height: Pgchar read get_height write set_height;
    property hspace: glong read get_hspace write set_hspace;
    property name: Pgchar read get_name write set_name;
    property standby: Pgchar read get_standby write set_standby;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type  { property is writeable but setter not declared } ;
    property use_map: Pgchar read get_use_map write set_use_map;
    property validation_message: Pgchar read get_validation_message ;
    property validity: PWebKitDOMValidityState read get_validity ;
    property vspace: glong read get_vspace write set_vspace;
    property width: Pgchar read get_width write set_width;
    property will_validate: gboolean read get_will_validate ;
  end;

  PPWebKitDOMHTMLObjectElementClass = ^PWebKitDOMHTMLObjectElementClass;
  PWebKitDOMHTMLObjectElementClass = ^TWebKitDOMHTMLObjectElementClass;
  TWebKitDOMHTMLObjectElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLOptGroupElement = ^PWebKitDOMHTMLOptGroupElement;
  PWebKitDOMHTMLOptGroupElement = ^TWebKitDOMHTMLOptGroupElement;
  TWebKitDOMHTMLOptGroupElement = object(TWebKitDOMHTMLElement)
    function get_disabled: gboolean; cdecl; inline;
    function get_label: Pgchar; cdecl; inline;
    procedure set_disabled(value: gboolean); cdecl; inline;
    procedure set_label(value: Pgchar); cdecl; inline;
    property disabled: gboolean read get_disabled write set_disabled;
    property label_: Pgchar read get_label write set_label;
  end;

  PPWebKitDOMHTMLOptGroupElementClass = ^PWebKitDOMHTMLOptGroupElementClass;
  PWebKitDOMHTMLOptGroupElementClass = ^TWebKitDOMHTMLOptGroupElementClass;
  TWebKitDOMHTMLOptGroupElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLOptionElement = ^PWebKitDOMHTMLOptionElement;
  PWebKitDOMHTMLOptionElement = ^TWebKitDOMHTMLOptionElement;
  TWebKitDOMHTMLOptionElement = object(TWebKitDOMHTMLElement)
    function get_default_selected: gboolean; cdecl; inline;
    function get_disabled: gboolean; cdecl; inline;
    function get_form: PWebKitDOMHTMLFormElement; cdecl; inline;
    function get_index: glong; cdecl; inline;
    function get_label: Pgchar; cdecl; inline;
    function get_selected: gboolean; cdecl; inline;
    function get_text: Pgchar; cdecl; inline;
    function get_value: Pgchar; cdecl; inline;
    procedure set_default_selected(value: gboolean); cdecl; inline;
    procedure set_disabled(value: gboolean); cdecl; inline;
    procedure set_label(value: Pgchar); cdecl; inline;
    procedure set_selected(value: gboolean); cdecl; inline;
    procedure set_value(value: Pgchar); cdecl; inline;
    property default_selected: gboolean read get_default_selected write set_default_selected;
    property disabled: gboolean read get_disabled write set_disabled;
    property form: PWebKitDOMHTMLFormElement read get_form ;
    property index: glong read get_index ;
    property label_: Pgchar read get_label write set_label;
    property selected: gboolean read get_selected write set_selected;
    property text: Pgchar read get_text ;
    property value: Pgchar read get_value write set_value;
  end;

  PPWebKitDOMHTMLOptionElementClass = ^PWebKitDOMHTMLOptionElementClass;
  PWebKitDOMHTMLOptionElementClass = ^TWebKitDOMHTMLOptionElementClass;
  TWebKitDOMHTMLOptionElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLOptionsCollection = ^PWebKitDOMHTMLOptionsCollection;
  PWebKitDOMHTMLOptionsCollection = ^TWebKitDOMHTMLOptionsCollection;
  TWebKitDOMHTMLOptionsCollection = object(TWebKitDOMHTMLCollection)
    function get_selected_index: glong; cdecl; inline;
    procedure set_selected_index(value: glong); cdecl; inline;
    property selected_index: glong read get_selected_index write set_selected_index;
  end;

  PPWebKitDOMHTMLOptionsCollectionClass = ^PWebKitDOMHTMLOptionsCollectionClass;
  PWebKitDOMHTMLOptionsCollectionClass = ^TWebKitDOMHTMLOptionsCollectionClass;
  TWebKitDOMHTMLOptionsCollectionClass = object
    parent_class: TWebKitDOMHTMLCollectionClass;
  end;

  PPWebKitDOMHTMLParagraphElement = ^PWebKitDOMHTMLParagraphElement;
  PWebKitDOMHTMLParagraphElement = ^TWebKitDOMHTMLParagraphElement;
  TWebKitDOMHTMLParagraphElement = object(TWebKitDOMHTMLElement)
    function get_align: Pgchar; cdecl; inline;
    procedure set_align(value: Pgchar); cdecl; inline;
    property align: Pgchar read get_align write set_align;
  end;

  PPWebKitDOMHTMLParagraphElementClass = ^PWebKitDOMHTMLParagraphElementClass;
  PWebKitDOMHTMLParagraphElementClass = ^TWebKitDOMHTMLParagraphElementClass;
  TWebKitDOMHTMLParagraphElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLParamElement = ^PWebKitDOMHTMLParamElement;
  PWebKitDOMHTMLParamElement = ^TWebKitDOMHTMLParamElement;
  TWebKitDOMHTMLParamElement = object(TWebKitDOMHTMLElement)
    function get_name: Pgchar; cdecl; inline;
    function get_value: Pgchar; cdecl; inline;
    function get_value_type: Pgchar; cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    procedure set_value(value: Pgchar); cdecl; inline;
    procedure set_value_type(value: Pgchar); cdecl; inline;
    property name: Pgchar read get_name write set_name;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type  { property is writeable but setter not declared } ;
    property value: Pgchar read get_value write set_value;
    property value_type: Pgchar read get_value_type write set_value_type;
  end;

  PPWebKitDOMHTMLParamElementClass = ^PWebKitDOMHTMLParamElementClass;
  PWebKitDOMHTMLParamElementClass = ^TWebKitDOMHTMLParamElementClass;
  TWebKitDOMHTMLParamElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLPreElement = ^PWebKitDOMHTMLPreElement;
  PWebKitDOMHTMLPreElement = ^TWebKitDOMHTMLPreElement;
  TWebKitDOMHTMLPreElement = object(TWebKitDOMHTMLElement)
    function get_width: glong; cdecl; inline;
    function get_wrap: gboolean; cdecl; inline;
    procedure set_width(value: glong); cdecl; inline;
    procedure set_wrap(value: gboolean); cdecl; inline;
    property width: glong read get_width write set_width;
    property wrap: gboolean read get_wrap write set_wrap;
  end;

  PPWebKitDOMHTMLPreElementClass = ^PWebKitDOMHTMLPreElementClass;
  PWebKitDOMHTMLPreElementClass = ^TWebKitDOMHTMLPreElementClass;
  TWebKitDOMHTMLPreElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLPropertiesCollection = ^PWebKitDOMHTMLPropertiesCollection;
  PWebKitDOMHTMLPropertiesCollection = ^TWebKitDOMHTMLPropertiesCollection;

  PPWebKitDOMPropertyNodeList = ^PWebKitDOMPropertyNodeList;
  PWebKitDOMPropertyNodeList = ^TWebKitDOMPropertyNodeList;
  TWebKitDOMHTMLPropertiesCollection = object(TWebKitDOMHTMLCollection)
    function get_length: gulong; cdecl; inline;
    function get_names: PWebKitDOMDOMStringList; cdecl; inline;
    function item(index: gulong): PWebKitDOMNode; cdecl; inline;
    function named_item(name: Pgchar): PWebKitDOMPropertyNodeList; cdecl; inline;
    property length1: gulong read get_length ;
    property names: PWebKitDOMDOMStringList read get_names ;
  end;
  TWebKitDOMPropertyNodeList = object(TWebKitDOMNodeList)
    function get_length: gulong; cdecl; inline;
    function item(index: gulong): PWebKitDOMNode; cdecl; inline;
    property length1: gulong read get_length ;
  end;

  PPWebKitDOMHTMLPropertiesCollectionClass = ^PWebKitDOMHTMLPropertiesCollectionClass;
  PWebKitDOMHTMLPropertiesCollectionClass = ^TWebKitDOMHTMLPropertiesCollectionClass;
  TWebKitDOMHTMLPropertiesCollectionClass = object
    parent_class: TWebKitDOMHTMLCollectionClass;
  end;

  PPWebKitDOMHTMLQuoteElement = ^PWebKitDOMHTMLQuoteElement;
  PWebKitDOMHTMLQuoteElement = ^TWebKitDOMHTMLQuoteElement;
  TWebKitDOMHTMLQuoteElement = object(TWebKitDOMHTMLElement)
    function get_cite: Pgchar; cdecl; inline;
    procedure set_cite(value: Pgchar); cdecl; inline;
    property cite: Pgchar read get_cite write set_cite;
  end;

  PPWebKitDOMHTMLQuoteElementClass = ^PWebKitDOMHTMLQuoteElementClass;
  PWebKitDOMHTMLQuoteElementClass = ^TWebKitDOMHTMLQuoteElementClass;
  TWebKitDOMHTMLQuoteElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLScriptElement = ^PWebKitDOMHTMLScriptElement;
  PWebKitDOMHTMLScriptElement = ^TWebKitDOMHTMLScriptElement;
  TWebKitDOMHTMLScriptElement = object(TWebKitDOMHTMLElement)
    function get_async: gboolean; cdecl; inline;
    function get_charset: Pgchar; cdecl; inline;
    function get_cross_origin: Pgchar; cdecl; inline;
    function get_defer: gboolean; cdecl; inline;
    function get_event: Pgchar; cdecl; inline;
    function get_html_for: Pgchar; cdecl; inline;
    function get_nonce: Pgchar; cdecl; inline;
    function get_src: Pgchar; cdecl; inline;
    function get_text: Pgchar; cdecl; inline;
    procedure set_async(value: gboolean); cdecl; inline;
    procedure set_charset(value: Pgchar); cdecl; inline;
    procedure set_cross_origin(value: Pgchar); cdecl; inline;
    procedure set_defer(value: gboolean); cdecl; inline;
    procedure set_event(value: Pgchar); cdecl; inline;
    procedure set_html_for(value: Pgchar); cdecl; inline;
    procedure set_nonce(value: Pgchar); cdecl; inline;
    procedure set_src(value: Pgchar); cdecl; inline;
    procedure set_text(value: Pgchar); cdecl; inline;
    property async: gboolean read get_async write set_async;
    property charset: Pgchar read get_charset write set_charset;
    property cross_origin: Pgchar read get_cross_origin write set_cross_origin;
    property defer: gboolean read get_defer write set_defer;
    property event: Pgchar read get_event write set_event;
    property html_for: Pgchar read get_html_for write set_html_for;
    property nonce: Pgchar read get_nonce write set_nonce;
    property src: Pgchar read get_src write set_src;
    property text: Pgchar read get_text write set_text;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type  { property is writeable but setter not declared } ;
  end;

  PPWebKitDOMHTMLScriptElementClass = ^PWebKitDOMHTMLScriptElementClass;
  PWebKitDOMHTMLScriptElementClass = ^TWebKitDOMHTMLScriptElementClass;
  TWebKitDOMHTMLScriptElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLSelectElement = ^PWebKitDOMHTMLSelectElement;
  PWebKitDOMHTMLSelectElement = ^TWebKitDOMHTMLSelectElement;
  TWebKitDOMHTMLSelectElement = object(TWebKitDOMHTMLElement)
    procedure add(element: PWebKitDOMHTMLElement; before: PWebKitDOMHTMLElement; error: PPGError); cdecl; inline;
    function check_validity: gboolean; cdecl; inline;
    function get_autofocus: gboolean; cdecl; inline;
    function get_disabled: gboolean; cdecl; inline;
    function get_form: PWebKitDOMHTMLFormElement; cdecl; inline;
    function get_labels: PWebKitDOMNodeList; cdecl; inline;
    function get_length: gulong; cdecl; inline;
    function get_multiple: gboolean; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_options: PWebKitDOMHTMLOptionsCollection; cdecl; inline;
    function get_required: gboolean; cdecl; inline;
    function get_selected_index: glong; cdecl; inline;
    function get_selected_options: PWebKitDOMHTMLCollection; cdecl; inline;
    function get_size: glong; cdecl; inline;
    function get_validation_message: Pgchar; cdecl; inline;
    function get_validity: PWebKitDOMValidityState; cdecl; inline;
    function get_value: Pgchar; cdecl; inline;
    function get_will_validate: gboolean; cdecl; inline;
    function item(index: gulong): PWebKitDOMNode; cdecl; inline;
    function named_item(name: Pgchar): PWebKitDOMNode; cdecl; inline;
    procedure remove(index: glong); cdecl; inline;
    procedure set_autofocus(value: gboolean); cdecl; inline;
    procedure set_custom_validity(error: Pgchar); cdecl; inline;
    procedure set_disabled(value: gboolean); cdecl; inline;
    procedure set_length(value: gulong; error: PPGError); cdecl; inline;
    procedure set_multiple(value: gboolean); cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    procedure set_required(value: gboolean); cdecl; inline;
    procedure set_selected_index(value: glong); cdecl; inline;
    procedure set_size(value: glong); cdecl; inline;
    procedure set_value(value: Pgchar); cdecl; inline;
    property autofocus: gboolean read get_autofocus write set_autofocus;
    property disabled: gboolean read get_disabled write set_disabled;
    property form: PWebKitDOMHTMLFormElement read get_form ;
    property labels: PWebKitDOMNodeList read get_labels ;
    property length: gulong read get_length  { property is writeable but setter not declared } ;
    property multiple: gboolean read get_multiple write set_multiple;
    property name: Pgchar read get_name write set_name;
    property options: PWebKitDOMHTMLOptionsCollection read get_options ;
    property required: gboolean read get_required write set_required;
    property selected_index: glong read get_selected_index write set_selected_index;
    property selected_options: PWebKitDOMHTMLCollection read get_selected_options ;
    property size: glong read get_size write set_size;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type ;
    property validation_message: Pgchar read get_validation_message ;
    property validity: PWebKitDOMValidityState read get_validity ;
    property value: Pgchar read get_value write set_value;
    property will_validate: gboolean read get_will_validate ;
  end;

  PPWebKitDOMHTMLSelectElementClass = ^PWebKitDOMHTMLSelectElementClass;
  PWebKitDOMHTMLSelectElementClass = ^TWebKitDOMHTMLSelectElementClass;
  TWebKitDOMHTMLSelectElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLStyleElement = ^PWebKitDOMHTMLStyleElement;
  PWebKitDOMHTMLStyleElement = ^TWebKitDOMHTMLStyleElement;
  TWebKitDOMHTMLStyleElement = object(TWebKitDOMHTMLElement)
    function get_disabled: gboolean; cdecl; inline;
    function get_media: Pgchar; cdecl; inline;
    function get_scoped: gboolean; cdecl; inline;
    function get_sheet: PWebKitDOMStyleSheet; cdecl; inline;
    procedure set_disabled(value: gboolean); cdecl; inline;
    procedure set_media(value: Pgchar); cdecl; inline;
    procedure set_scoped(value: gboolean); cdecl; inline;
    property disabled: gboolean read get_disabled write set_disabled;
    property media: Pgchar read get_media write set_media;
    property scoped: gboolean read get_scoped write set_scoped;
    property sheet: PWebKitDOMStyleSheet read get_sheet ;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type  { property is writeable but setter not declared } ;
  end;

  PPWebKitDOMHTMLStyleElementClass = ^PWebKitDOMHTMLStyleElementClass;
  PWebKitDOMHTMLStyleElementClass = ^TWebKitDOMHTMLStyleElementClass;
  TWebKitDOMHTMLStyleElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLTableCaptionElement = ^PWebKitDOMHTMLTableCaptionElement;
  PWebKitDOMHTMLTableCaptionElement = ^TWebKitDOMHTMLTableCaptionElement;
  TWebKitDOMHTMLTableCaptionElement = object(TWebKitDOMHTMLElement)
    function get_align: Pgchar; cdecl; inline;
    procedure set_align(value: Pgchar); cdecl; inline;
    property align: Pgchar read get_align write set_align;
  end;

  PPWebKitDOMHTMLTableCaptionElementClass = ^PWebKitDOMHTMLTableCaptionElementClass;
  PWebKitDOMHTMLTableCaptionElementClass = ^TWebKitDOMHTMLTableCaptionElementClass;
  TWebKitDOMHTMLTableCaptionElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLTableCellElement = ^PWebKitDOMHTMLTableCellElement;
  PWebKitDOMHTMLTableCellElement = ^TWebKitDOMHTMLTableCellElement;
  TWebKitDOMHTMLTableCellElement = object(TWebKitDOMHTMLElement)
    function get_abbr: Pgchar; cdecl; inline;
    function get_align: Pgchar; cdecl; inline;
    function get_axis: Pgchar; cdecl; inline;
    function get_bg_color: Pgchar; cdecl; inline;
    function get_cell_index: glong; cdecl; inline;
    function get_ch: Pgchar; cdecl; inline;
    function get_ch_off: Pgchar; cdecl; inline;
    function get_col_span: glong; cdecl; inline;
    function get_headers: Pgchar; cdecl; inline;
    function get_height: Pgchar; cdecl; inline;
    function get_no_wrap: gboolean; cdecl; inline;
    function get_row_span: glong; cdecl; inline;
    function get_scope: Pgchar; cdecl; inline;
    function get_v_align: Pgchar; cdecl; inline;
    function get_width: Pgchar; cdecl; inline;
    procedure set_abbr(value: Pgchar); cdecl; inline;
    procedure set_align(value: Pgchar); cdecl; inline;
    procedure set_axis(value: Pgchar); cdecl; inline;
    procedure set_bg_color(value: Pgchar); cdecl; inline;
    procedure set_ch(value: Pgchar); cdecl; inline;
    procedure set_ch_off(value: Pgchar); cdecl; inline;
    procedure set_col_span(value: glong); cdecl; inline;
    procedure set_headers(value: Pgchar); cdecl; inline;
    procedure set_height(value: Pgchar); cdecl; inline;
    procedure set_no_wrap(value: gboolean); cdecl; inline;
    procedure set_row_span(value: glong); cdecl; inline;
    procedure set_scope(value: Pgchar); cdecl; inline;
    procedure set_v_align(value: Pgchar); cdecl; inline;
    procedure set_width(value: Pgchar); cdecl; inline;
    property abbr: Pgchar read get_abbr write set_abbr;
    property align: Pgchar read get_align write set_align;
    property axis: Pgchar read get_axis write set_axis;
    property bg_color: Pgchar read get_bg_color write set_bg_color;
    property cell_index: glong read get_cell_index ;
    property ch: Pgchar read get_ch write set_ch;
    property ch_off: Pgchar read get_ch_off write set_ch_off;
    property col_span: glong read get_col_span write set_col_span;
    property headers: Pgchar read get_headers write set_headers;
    property height: Pgchar read get_height write set_height;
    property no_wrap: gboolean read get_no_wrap write set_no_wrap;
    property row_span: glong read get_row_span write set_row_span;
    property scope: Pgchar read get_scope write set_scope;
    property v_align: Pgchar read get_v_align write set_v_align;
    property width: Pgchar read get_width write set_width;
  end;

  PPWebKitDOMHTMLTableCellElementClass = ^PWebKitDOMHTMLTableCellElementClass;
  PWebKitDOMHTMLTableCellElementClass = ^TWebKitDOMHTMLTableCellElementClass;
  TWebKitDOMHTMLTableCellElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLTableColElement = ^PWebKitDOMHTMLTableColElement;
  PWebKitDOMHTMLTableColElement = ^TWebKitDOMHTMLTableColElement;
  TWebKitDOMHTMLTableColElement = object(TWebKitDOMHTMLElement)
    function get_align: Pgchar; cdecl; inline;
    function get_ch: Pgchar; cdecl; inline;
    function get_ch_off: Pgchar; cdecl; inline;
    function get_span: glong; cdecl; inline;
    function get_v_align: Pgchar; cdecl; inline;
    function get_width: Pgchar; cdecl; inline;
    procedure set_align(value: Pgchar); cdecl; inline;
    procedure set_ch(value: Pgchar); cdecl; inline;
    procedure set_ch_off(value: Pgchar); cdecl; inline;
    procedure set_span(value: glong); cdecl; inline;
    procedure set_v_align(value: Pgchar); cdecl; inline;
    procedure set_width(value: Pgchar); cdecl; inline;
    property align: Pgchar read get_align write set_align;
    property ch: Pgchar read get_ch write set_ch;
    property ch_off: Pgchar read get_ch_off write set_ch_off;
    property span: glong read get_span write set_span;
    property v_align: Pgchar read get_v_align write set_v_align;
    property width: Pgchar read get_width write set_width;
  end;

  PPWebKitDOMHTMLTableColElementClass = ^PWebKitDOMHTMLTableColElementClass;
  PWebKitDOMHTMLTableColElementClass = ^TWebKitDOMHTMLTableColElementClass;
  TWebKitDOMHTMLTableColElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLTableElement = ^PWebKitDOMHTMLTableElement;
  PWebKitDOMHTMLTableElement = ^TWebKitDOMHTMLTableElement;

  PPWebKitDOMHTMLTableSectionElement = ^PWebKitDOMHTMLTableSectionElement;
  PWebKitDOMHTMLTableSectionElement = ^TWebKitDOMHTMLTableSectionElement;
  TWebKitDOMHTMLTableElement = object(TWebKitDOMHTMLElement)
    function create_caption: PWebKitDOMHTMLElement; cdecl; inline;
    function create_t_body: PWebKitDOMHTMLElement; cdecl; inline;
    function create_t_foot: PWebKitDOMHTMLElement; cdecl; inline;
    function create_t_head: PWebKitDOMHTMLElement; cdecl; inline;
    procedure delete_caption; cdecl; inline;
    procedure delete_row(index: glong; error: PPGError); cdecl; inline;
    procedure delete_t_foot; cdecl; inline;
    procedure delete_t_head; cdecl; inline;
    function get_align: Pgchar; cdecl; inline;
    function get_bg_color: Pgchar; cdecl; inline;
    function get_border: Pgchar; cdecl; inline;
    function get_caption: PWebKitDOMHTMLTableCaptionElement; cdecl; inline;
    function get_cell_padding: Pgchar; cdecl; inline;
    function get_cell_spacing: Pgchar; cdecl; inline;
    function get_frame: Pgchar; cdecl; inline;
    function get_rows: PWebKitDOMHTMLCollection; cdecl; inline;
    function get_rules: Pgchar; cdecl; inline;
    function get_summary: Pgchar; cdecl; inline;
    function get_t_bodies: PWebKitDOMHTMLCollection; cdecl; inline;
    function get_t_foot: PWebKitDOMHTMLTableSectionElement; cdecl; inline;
    function get_t_head: PWebKitDOMHTMLTableSectionElement; cdecl; inline;
    function get_width: Pgchar; cdecl; inline;
    function insert_row(index: glong; error: PPGError): PWebKitDOMHTMLElement; cdecl; inline;
    procedure set_align(value: Pgchar); cdecl; inline;
    procedure set_bg_color(value: Pgchar); cdecl; inline;
    procedure set_border(value: Pgchar); cdecl; inline;
    procedure set_caption(value: PWebKitDOMHTMLTableCaptionElement; error: PPGError); cdecl; inline;
    procedure set_cell_padding(value: Pgchar); cdecl; inline;
    procedure set_cell_spacing(value: Pgchar); cdecl; inline;
    procedure set_frame(value: Pgchar); cdecl; inline;
    procedure set_rules(value: Pgchar); cdecl; inline;
    procedure set_summary(value: Pgchar); cdecl; inline;
    procedure set_t_foot(value: PWebKitDOMHTMLTableSectionElement; error: PPGError); cdecl; inline;
    procedure set_t_head(value: PWebKitDOMHTMLTableSectionElement; error: PPGError); cdecl; inline;
    procedure set_width(value: Pgchar); cdecl; inline;
    property align: Pgchar read get_align write set_align;
    property bg_color: Pgchar read get_bg_color write set_bg_color;
    property border: Pgchar read get_border write set_border;
    property caption: PWebKitDOMHTMLTableCaptionElement read get_caption  { property is writeable but setter not declared } ;
    property cell_padding: Pgchar read get_cell_padding write set_cell_padding;
    property cell_spacing: Pgchar read get_cell_spacing write set_cell_spacing;
    property frame: Pgchar read get_frame write set_frame;
    property rows: PWebKitDOMHTMLCollection read get_rows ;
    property rules: Pgchar read get_rules write set_rules;
    property summary: Pgchar read get_summary write set_summary;
    property t_bodies: PWebKitDOMHTMLCollection read get_t_bodies ;
    property t_foot: PWebKitDOMHTMLTableSectionElement read get_t_foot  { property is writeable but setter not declared } ;
    property t_head: PWebKitDOMHTMLTableSectionElement read get_t_head  { property is writeable but setter not declared } ;
    property width: Pgchar read get_width write set_width;
  end;
  TWebKitDOMHTMLTableSectionElement = object(TWebKitDOMHTMLElement)
    procedure delete_row(index: glong; error: PPGError); cdecl; inline;
    function get_align: Pgchar; cdecl; inline;
    function get_ch: Pgchar; cdecl; inline;
    function get_ch_off: Pgchar; cdecl; inline;
    function get_rows: PWebKitDOMHTMLCollection; cdecl; inline;
    function get_v_align: Pgchar; cdecl; inline;
    function insert_row(index: glong; error: PPGError): PWebKitDOMHTMLElement; cdecl; inline;
    procedure set_align(value: Pgchar); cdecl; inline;
    procedure set_ch(value: Pgchar); cdecl; inline;
    procedure set_ch_off(value: Pgchar); cdecl; inline;
    procedure set_v_align(value: Pgchar); cdecl; inline;
    property align: Pgchar read get_align write set_align;
    property ch: Pgchar read get_ch write set_ch;
    property ch_off: Pgchar read get_ch_off write set_ch_off;
    property rows: PWebKitDOMHTMLCollection read get_rows ;
    property v_align: Pgchar read get_v_align write set_v_align;
  end;

  PPWebKitDOMHTMLTableElementClass = ^PWebKitDOMHTMLTableElementClass;
  PWebKitDOMHTMLTableElementClass = ^TWebKitDOMHTMLTableElementClass;
  TWebKitDOMHTMLTableElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLTableRowElement = ^PWebKitDOMHTMLTableRowElement;
  PWebKitDOMHTMLTableRowElement = ^TWebKitDOMHTMLTableRowElement;
  TWebKitDOMHTMLTableRowElement = object(TWebKitDOMHTMLElement)
    procedure delete_cell(index: glong; error: PPGError); cdecl; inline;
    function get_align: Pgchar; cdecl; inline;
    function get_bg_color: Pgchar; cdecl; inline;
    function get_cells: PWebKitDOMHTMLCollection; cdecl; inline;
    function get_ch: Pgchar; cdecl; inline;
    function get_ch_off: Pgchar; cdecl; inline;
    function get_row_index: glong; cdecl; inline;
    function get_section_row_index: glong; cdecl; inline;
    function get_v_align: Pgchar; cdecl; inline;
    function insert_cell(index: glong; error: PPGError): PWebKitDOMHTMLElement; cdecl; inline;
    procedure set_align(value: Pgchar); cdecl; inline;
    procedure set_bg_color(value: Pgchar); cdecl; inline;
    procedure set_ch(value: Pgchar); cdecl; inline;
    procedure set_ch_off(value: Pgchar); cdecl; inline;
    procedure set_v_align(value: Pgchar); cdecl; inline;
    property align: Pgchar read get_align write set_align;
    property bg_color: Pgchar read get_bg_color write set_bg_color;
    property cells: PWebKitDOMHTMLCollection read get_cells ;
    property ch: Pgchar read get_ch write set_ch;
    property ch_off: Pgchar read get_ch_off write set_ch_off;
    property row_index: glong read get_row_index ;
    property section_row_index: glong read get_section_row_index ;
    property v_align: Pgchar read get_v_align write set_v_align;
  end;

  PPWebKitDOMHTMLTableRowElementClass = ^PWebKitDOMHTMLTableRowElementClass;
  PWebKitDOMHTMLTableRowElementClass = ^TWebKitDOMHTMLTableRowElementClass;
  TWebKitDOMHTMLTableRowElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLTableSectionElementClass = ^PWebKitDOMHTMLTableSectionElementClass;
  PWebKitDOMHTMLTableSectionElementClass = ^TWebKitDOMHTMLTableSectionElementClass;
  TWebKitDOMHTMLTableSectionElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLTextAreaElement = ^PWebKitDOMHTMLTextAreaElement;
  PWebKitDOMHTMLTextAreaElement = ^TWebKitDOMHTMLTextAreaElement;
  TWebKitDOMHTMLTextAreaElement = object(TWebKitDOMHTMLElement)
    function check_validity: gboolean; cdecl; inline;
    function get_autofocus: gboolean; cdecl; inline;
    function get_cols: glong; cdecl; inline;
    function get_default_value: Pgchar; cdecl; inline;
    function get_dir_name: Pgchar; cdecl; inline;
    function get_disabled: gboolean; cdecl; inline;
    function get_form: PWebKitDOMHTMLFormElement; cdecl; inline;
    function get_labels: PWebKitDOMNodeList; cdecl; inline;
    function get_max_length: glong; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_placeholder: Pgchar; cdecl; inline;
    function get_read_only: gboolean; cdecl; inline;
    function get_required: gboolean; cdecl; inline;
    function get_rows: glong; cdecl; inline;
    function get_selection_direction: Pgchar; cdecl; inline;
    function get_selection_end: glong; cdecl; inline;
    function get_selection_start: glong; cdecl; inline;
    function get_text_length: gulong; cdecl; inline;
    function get_validation_message: Pgchar; cdecl; inline;
    function get_validity: PWebKitDOMValidityState; cdecl; inline;
    function get_value: Pgchar; cdecl; inline;
    function get_will_validate: gboolean; cdecl; inline;
    function get_wrap: Pgchar; cdecl; inline;
    function is_edited: gboolean; cdecl; inline;
    procedure select; cdecl; inline;
    procedure set_autofocus(value: gboolean); cdecl; inline;
    procedure set_cols(value: glong); cdecl; inline;
    procedure set_custom_validity(error: Pgchar); cdecl; inline;
    procedure set_default_value(value: Pgchar); cdecl; inline;
    procedure set_dir_name(value: Pgchar); cdecl; inline;
    procedure set_disabled(value: gboolean); cdecl; inline;
    procedure set_max_length(value: glong; error: PPGError); cdecl; inline;
    procedure set_name(value: Pgchar); cdecl; inline;
    procedure set_placeholder(value: Pgchar); cdecl; inline;
    procedure set_range_text(replacement: Pgchar; start: gulong; end_: gulong; selectionMode: Pgchar; error: PPGError); cdecl; inline;
    procedure set_read_only(value: gboolean); cdecl; inline;
    procedure set_required(value: gboolean); cdecl; inline;
    procedure set_rows(value: glong); cdecl; inline;
    procedure set_selection_direction(value: Pgchar); cdecl; inline;
    procedure set_selection_end(value: glong); cdecl; inline;
    procedure set_selection_range(start: glong; end_: glong; direction: Pgchar); cdecl; inline;
    procedure set_selection_start(value: glong); cdecl; inline;
    procedure set_value(value: Pgchar); cdecl; inline;
    procedure set_wrap(value: Pgchar); cdecl; inline;
    property autofocus: gboolean read get_autofocus write set_autofocus;
    property cols: glong read get_cols write set_cols;
    property default_value: Pgchar read get_default_value write set_default_value;
    property dir_name: Pgchar read get_dir_name write set_dir_name;
    property disabled: gboolean read get_disabled write set_disabled;
    property form: PWebKitDOMHTMLFormElement read get_form ;
    property labels: PWebKitDOMNodeList read get_labels ;
    property max_length: glong read get_max_length  { property is writeable but setter not declared } ;
    property name: Pgchar read get_name write set_name;
    property placeholder: Pgchar read get_placeholder write set_placeholder;
    property read_only: gboolean read get_read_only write set_read_only;
    property required: gboolean read get_required write set_required;
    property rows: glong read get_rows write set_rows;
    property selection_direction: Pgchar read get_selection_direction write set_selection_direction;
    property selection_end: glong read get_selection_end write set_selection_end;
    property selection_start: glong read get_selection_start write set_selection_start;
    property text_length: gulong read get_text_length ;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type ;
    property validation_message: Pgchar read get_validation_message ;
    property validity: PWebKitDOMValidityState read get_validity ;
    property value: Pgchar read get_value write set_value;
    property will_validate: gboolean read get_will_validate ;
    property wrap: Pgchar read get_wrap write set_wrap;
  end;

  PPWebKitDOMHTMLTextAreaElementClass = ^PWebKitDOMHTMLTextAreaElementClass;
  PWebKitDOMHTMLTextAreaElementClass = ^TWebKitDOMHTMLTextAreaElementClass;
  TWebKitDOMHTMLTextAreaElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLTitleElement = ^PWebKitDOMHTMLTitleElement;
  PWebKitDOMHTMLTitleElement = ^TWebKitDOMHTMLTitleElement;
  TWebKitDOMHTMLTitleElement = object(TWebKitDOMHTMLElement)
    function get_text: Pgchar; cdecl; inline;
    procedure set_text(value: Pgchar); cdecl; inline;
    property text: Pgchar read get_text write set_text;
  end;

  PPWebKitDOMHTMLTitleElementClass = ^PWebKitDOMHTMLTitleElementClass;
  PWebKitDOMHTMLTitleElementClass = ^TWebKitDOMHTMLTitleElementClass;
  TWebKitDOMHTMLTitleElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLUListElement = ^PWebKitDOMHTMLUListElement;
  PWebKitDOMHTMLUListElement = ^TWebKitDOMHTMLUListElement;
  TWebKitDOMHTMLUListElement = object(TWebKitDOMHTMLElement)
    function get_compact: gboolean; cdecl; inline;
    procedure set_compact(value: gboolean); cdecl; inline;
    property compact: gboolean read get_compact write set_compact;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type  { property is writeable but setter not declared } ;
  end;

  PPWebKitDOMHTMLUListElementClass = ^PWebKitDOMHTMLUListElementClass;
  PWebKitDOMHTMLUListElementClass = ^TWebKitDOMHTMLUListElementClass;
  TWebKitDOMHTMLUListElementClass = object
    parent_class: TWebKitDOMHTMLElementClass;
  end;

  PPWebKitDOMHTMLVideoElement = ^PWebKitDOMHTMLVideoElement;
  PWebKitDOMHTMLVideoElement = ^TWebKitDOMHTMLVideoElement;
  TWebKitDOMHTMLVideoElement = object(TWebKitDOMHTMLMediaElement)
    function get_height: gulong; cdecl; inline;
    function get_poster: Pgchar; cdecl; inline;
    function get_video_height: gulong; cdecl; inline;
    function get_video_width: gulong; cdecl; inline;
    function get_webkit_decoded_frame_count: gulong; cdecl; inline;
    function get_webkit_displaying_fullscreen: gboolean; cdecl; inline;
    function get_webkit_dropped_frame_count: gulong; cdecl; inline;
    function get_webkit_supports_fullscreen: gboolean; cdecl; inline;
    function get_width: gulong; cdecl; inline;
    procedure set_height(value: gulong); cdecl; inline;
    procedure set_poster(value: Pgchar); cdecl; inline;
    procedure set_width(value: gulong); cdecl; inline;
    procedure webkit_enter_full_screen(error: PPGError); cdecl; inline;
    procedure webkit_enter_fullscreen(error: PPGError); cdecl; inline;
    procedure webkit_exit_full_screen; cdecl; inline;
    procedure webkit_exit_fullscreen; cdecl; inline;
    property height: gulong read get_height write set_height;
    property poster: Pgchar read get_poster write set_poster;
    property video_height: gulong read get_video_height ;
    property video_width: gulong read get_video_width ;
    property webkit_decoded_frame_count: gulong read get_webkit_decoded_frame_count ;
    property webkit_displaying_fullscreen: gboolean read get_webkit_displaying_fullscreen ;
    property webkit_dropped_frame_count: gulong read get_webkit_dropped_frame_count ;
    property webkit_supports_fullscreen: gboolean read get_webkit_supports_fullscreen ;
    property width: gulong read get_width write set_width;
  end;

  PPWebKitDOMHTMLVideoElementClass = ^PWebKitDOMHTMLVideoElementClass;
  PWebKitDOMHTMLVideoElementClass = ^TWebKitDOMHTMLVideoElementClass;
  TWebKitDOMHTMLVideoElementClass = object
    parent_class: TWebKitDOMHTMLMediaElementClass;
  end;

  PPWebKitDOMHistoryClass = ^PWebKitDOMHistoryClass;
  PWebKitDOMHistoryClass = ^TWebKitDOMHistoryClass;
  TWebKitDOMHistoryClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMLocation = ^PWebKitDOMLocation;
  PWebKitDOMLocation = ^TWebKitDOMLocation;
  TWebKitDOMLocation = object(TWebKitDOMObject)
    function get_ancestor_origins: PWebKitDOMDOMStringList; cdecl; inline;
    function get_origin: Pgchar; cdecl; inline;
    property ancestor_origins: PWebKitDOMDOMStringList read get_ancestor_origins ;
    property origin: Pgchar read get_origin ;
  end;

  PPWebKitDOMLocationClass = ^PWebKitDOMLocationClass;
  PWebKitDOMLocationClass = ^TWebKitDOMLocationClass;
  TWebKitDOMLocationClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMMediaErrorClass = ^PWebKitDOMMediaErrorClass;
  PWebKitDOMMediaErrorClass = ^TWebKitDOMMediaErrorClass;
  TWebKitDOMMediaErrorClass = object
    parent_class: TWebKitDOMObjectClass;
  end;
  TWebKitDOMMediaList = object(TWebKitDOMObject)
    procedure append_medium(newMedium: Pgchar; error: PPGError); cdecl; inline;
    procedure delete_medium(oldMedium: Pgchar; error: PPGError); cdecl; inline;
    function get_length: gulong; cdecl; inline;
    function get_media_text: Pgchar; cdecl; inline;
    function item(index: gulong): Pgchar; cdecl; inline;
    procedure set_media_text(value: Pgchar; error: PPGError); cdecl; inline;
    property length: gulong read get_length ;
    property media_text: Pgchar read get_media_text  { property is writeable but setter not declared } ;
  end;

  PPWebKitDOMMediaListClass = ^PWebKitDOMMediaListClass;
  PWebKitDOMMediaListClass = ^TWebKitDOMMediaListClass;
  TWebKitDOMMediaListClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMMediaQueryListClass = ^PWebKitDOMMediaQueryListClass;
  PWebKitDOMMediaQueryListClass = ^TWebKitDOMMediaQueryListClass;
  TWebKitDOMMediaQueryListClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMMemoryInfoClass = ^PWebKitDOMMemoryInfoClass;
  PWebKitDOMMemoryInfoClass = ^TWebKitDOMMemoryInfoClass;
  TWebKitDOMMemoryInfoClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMMessagePort = ^PWebKitDOMMessagePort;
  PWebKitDOMMessagePort = ^TWebKitDOMMessagePort;
  TWebKitDOMMessagePort = object(TWebKitDOMObject)
  end;

  PPWebKitDOMMessagePortClass = ^PWebKitDOMMessagePortClass;
  PWebKitDOMMessagePortClass = ^TWebKitDOMMessagePortClass;
  TWebKitDOMMessagePortClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMMicroDataItemValue = ^PWebKitDOMMicroDataItemValue;
  PWebKitDOMMicroDataItemValue = ^TWebKitDOMMicroDataItemValue;
  TWebKitDOMMicroDataItemValue = object(TWebKitDOMObject)
  end;

  PPWebKitDOMMicroDataItemValueClass = ^PWebKitDOMMicroDataItemValueClass;
  PWebKitDOMMicroDataItemValueClass = ^TWebKitDOMMicroDataItemValueClass;
  TWebKitDOMMicroDataItemValueClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMMouseEvent = ^PWebKitDOMMouseEvent;
  PWebKitDOMMouseEvent = ^TWebKitDOMMouseEvent;

  PPWebKitDOMUIEvent = ^PWebKitDOMUIEvent;
  PWebKitDOMUIEvent = ^TWebKitDOMUIEvent;
  TWebKitDOMUIEvent = object(TWebKitDOMEvent)
    function get_char_code: glong; cdecl; inline;
    function get_detail: glong; cdecl; inline;
    function get_key_code: glong; cdecl; inline;
    function get_layer_x: glong; cdecl; inline;
    function get_layer_y: glong; cdecl; inline;
    function get_page_x: glong; cdecl; inline;
    function get_page_y: glong; cdecl; inline;
    function get_view: PWebKitDOMDOMWindow; cdecl; inline;
    function get_which: glong; cdecl; inline;
    procedure init_ui_event(type_: Pgchar; canBubble: gboolean; cancelable: gboolean; view: PWebKitDOMDOMWindow; detail: glong); cdecl; inline;
    property char_code: glong read get_char_code ;
    property detail: glong read get_detail ;
    property key_code: glong read get_key_code ;
    property layer_x: glong read get_layer_x ;
    property layer_y: glong read get_layer_y ;
    property page_x: glong read get_page_x ;
    property page_y: glong read get_page_y ;
    property view: PWebKitDOMDOMWindow read get_view ;
    property which: glong read get_which ;
  end;
  TWebKitDOMMouseEvent = object(TWebKitDOMUIEvent)
    function get_alt_key: gboolean; cdecl; inline;
    function get_button: gushort; cdecl; inline;
    function get_client_x: glong; cdecl; inline;
    function get_client_y: glong; cdecl; inline;
    function get_ctrl_key: gboolean; cdecl; inline;
    function get_from_element: PWebKitDOMNode; cdecl; inline;
    function get_meta_key: gboolean; cdecl; inline;
    function get_offset_x: glong; cdecl; inline;
    function get_offset_y: glong; cdecl; inline;
    function get_related_target: PWebKitDOMEventTarget; cdecl; inline;
    function get_screen_x: glong; cdecl; inline;
    function get_screen_y: glong; cdecl; inline;
    function get_shift_key: gboolean; cdecl; inline;
    function get_to_element: PWebKitDOMNode; cdecl; inline;
    function get_webkit_movement_x: glong; cdecl; inline;
    function get_webkit_movement_y: glong; cdecl; inline;
    function get_x: glong; cdecl; inline;
    function get_y: glong; cdecl; inline;
    procedure init_mouse_event(type_: Pgchar; canBubble: gboolean; cancelable: gboolean; view: PWebKitDOMDOMWindow; detail: glong; screenX: glong; screenY: glong; clientX: glong; clientY: glong; ctrlKey: gboolean; altKey: gboolean; shiftKey: gboolean; metaKey: gboolean; button: gushort; relatedTarget: PWebKitDOMEventTarget); cdecl; inline;
    property alt_key: gboolean read get_alt_key ;
    property button: gushort read get_button ;
    property client_x: glong read get_client_x ;
    property client_y: glong read get_client_y ;
    property ctrl_key: gboolean read get_ctrl_key ;
    property from_element: PWebKitDOMNode read get_from_element ;
    property meta_key: gboolean read get_meta_key ;
    property offset_x: glong read get_offset_x ;
    property offset_y: glong read get_offset_y ;
    property related_target: PWebKitDOMEventTarget read get_related_target ;
    property screen_x: glong read get_screen_x ;
    property screen_y: glong read get_screen_y ;
    property shift_key: gboolean read get_shift_key ;
    property to_element: PWebKitDOMNode read get_to_element ;
    property webkit_movement_x: glong read get_webkit_movement_x ;
    property webkit_movement_y: glong read get_webkit_movement_y ;
    property x: glong read get_x ;
    property y: glong read get_y ;
  end;

  PPWebKitDOMUIEventClass = ^PWebKitDOMUIEventClass;
  PWebKitDOMUIEventClass = ^TWebKitDOMUIEventClass;
  TWebKitDOMUIEventClass = object
    parent_class: TWebKitDOMEventClass;
  end;

  PPWebKitDOMMouseEventClass = ^PWebKitDOMMouseEventClass;
  PWebKitDOMMouseEventClass = ^TWebKitDOMMouseEventClass;
  TWebKitDOMMouseEventClass = object
    parent_class: TWebKitDOMUIEventClass;
  end;

  PPWebKitDOMNamedNodeMapClass = ^PWebKitDOMNamedNodeMapClass;
  PWebKitDOMNamedNodeMapClass = ^TWebKitDOMNamedNodeMapClass;
  TWebKitDOMNamedNodeMapClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMNavigatorClass = ^PWebKitDOMNavigatorClass;
  PWebKitDOMNavigatorClass = ^TWebKitDOMNavigatorClass;
  TWebKitDOMNavigatorClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMNodeFilterClass = ^PWebKitDOMNodeFilterClass;
  PWebKitDOMNodeFilterClass = ^TWebKitDOMNodeFilterClass;
  TWebKitDOMNodeFilterClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMNodeIteratorClass = ^PWebKitDOMNodeIteratorClass;
  PWebKitDOMNodeIteratorClass = ^TWebKitDOMNodeIteratorClass;
  TWebKitDOMNodeIteratorClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMNodeListClass = ^PWebKitDOMNodeListClass;
  PWebKitDOMNodeListClass = ^TWebKitDOMNodeListClass;
  TWebKitDOMNodeListClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMObjectPrivate = ^PWebKitDOMObjectPrivate;
  PWebKitDOMObjectPrivate = ^TWebKitDOMObjectPrivate;

  TWebKitDOMObjectPrivate = record
  end;


  TWebKitDOMPerformanceNavigation = object(TWebKitDOMObject)
    function get_redirect_count: gushort; cdecl; inline;
    property redirect_count: gushort read get_redirect_count ;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type ;
  end;
  TWebKitDOMPerformanceTiming = object(TWebKitDOMObject)
    function get_connect_end: guint64; cdecl; inline;
    function get_connect_start: guint64; cdecl; inline;
    function get_dom_complete: guint64; cdecl; inline;
    function get_dom_content_loaded_event_end: guint64; cdecl; inline;
    function get_dom_content_loaded_event_start: guint64; cdecl; inline;
    function get_dom_interactive: guint64; cdecl; inline;
    function get_dom_loading: guint64; cdecl; inline;
    function get_domain_lookup_end: guint64; cdecl; inline;
    function get_domain_lookup_start: guint64; cdecl; inline;
    function get_fetch_start: guint64; cdecl; inline;
    function get_load_event_end: guint64; cdecl; inline;
    function get_load_event_start: guint64; cdecl; inline;
    function get_navigation_start: guint64; cdecl; inline;
    function get_redirect_end: guint64; cdecl; inline;
    function get_redirect_start: guint64; cdecl; inline;
    function get_request_start: guint64; cdecl; inline;
    function get_response_end: guint64; cdecl; inline;
    function get_response_start: guint64; cdecl; inline;
    function get_secure_connection_start: guint64; cdecl; inline;
    function get_unload_event_end: guint64; cdecl; inline;
    function get_unload_event_start: guint64; cdecl; inline;
    property connect_end: guint64 read get_connect_end ;
    property connect_start: guint64 read get_connect_start ;
    property dom_complete: guint64 read get_dom_complete ;
    property dom_content_loaded_event_end: guint64 read get_dom_content_loaded_event_end ;
    property dom_content_loaded_event_start: guint64 read get_dom_content_loaded_event_start ;
    property dom_interactive: guint64 read get_dom_interactive ;
    property dom_loading: guint64 read get_dom_loading ;
    property domain_lookup_end: guint64 read get_domain_lookup_end ;
    property domain_lookup_start: guint64 read get_domain_lookup_start ;
    property fetch_start: guint64 read get_fetch_start ;
    property load_event_end: guint64 read get_load_event_end ;
    property load_event_start: guint64 read get_load_event_start ;
    property navigation_start: guint64 read get_navigation_start ;
    property redirect_end: guint64 read get_redirect_end ;
    property redirect_start: guint64 read get_redirect_start ;
    property request_start: guint64 read get_request_start ;
    property response_end: guint64 read get_response_end ;
    property response_start: guint64 read get_response_start ;
    property secure_connection_start: guint64 read get_secure_connection_start ;
    property unload_event_end: guint64 read get_unload_event_end ;
    property unload_event_start: guint64 read get_unload_event_start ;
  end;

  PPWebKitDOMPerformanceClass = ^PWebKitDOMPerformanceClass;
  PWebKitDOMPerformanceClass = ^TWebKitDOMPerformanceClass;
  TWebKitDOMPerformanceClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMPerformanceEntry = ^PWebKitDOMPerformanceEntry;
  PWebKitDOMPerformanceEntry = ^TWebKitDOMPerformanceEntry;
  TWebKitDOMPerformanceEntry = object(TWebKitDOMObject)
    function get_duration: gdouble; cdecl; inline;
    function get_entry_type: Pgchar; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_start_time: gdouble; cdecl; inline;
    property duration: gdouble read get_duration ;
    property entry_type: Pgchar read get_entry_type ;
    property name: Pgchar read get_name ;
    property start_time: gdouble read get_start_time ;
  end;

  PPWebKitDOMPerformanceEntryClass = ^PWebKitDOMPerformanceEntryClass;
  PWebKitDOMPerformanceEntryClass = ^TWebKitDOMPerformanceEntryClass;
  TWebKitDOMPerformanceEntryClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMPerformanceEntryList = ^PWebKitDOMPerformanceEntryList;
  PWebKitDOMPerformanceEntryList = ^TWebKitDOMPerformanceEntryList;
  TWebKitDOMPerformanceEntryList = object(TWebKitDOMObject)
    function get_length: gulong; cdecl; inline;
    function item(index: gulong): PWebKitDOMPerformanceEntry; cdecl; inline;
    property length: gulong read get_length ;
  end;

  PPWebKitDOMPerformanceEntryListClass = ^PWebKitDOMPerformanceEntryListClass;
  PWebKitDOMPerformanceEntryListClass = ^TWebKitDOMPerformanceEntryListClass;
  TWebKitDOMPerformanceEntryListClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMPerformanceNavigationClass = ^PWebKitDOMPerformanceNavigationClass;
  PWebKitDOMPerformanceNavigationClass = ^TWebKitDOMPerformanceNavigationClass;
  TWebKitDOMPerformanceNavigationClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMPerformanceTimingClass = ^PWebKitDOMPerformanceTimingClass;
  PWebKitDOMPerformanceTimingClass = ^TWebKitDOMPerformanceTimingClass;
  TWebKitDOMPerformanceTimingClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMProcessingInstructionClass = ^PWebKitDOMProcessingInstructionClass;
  PWebKitDOMProcessingInstructionClass = ^TWebKitDOMProcessingInstructionClass;
  TWebKitDOMProcessingInstructionClass = object
    parent_class: TWebKitDOMNodeClass;
  end;

  PPWebKitDOMPropertyNodeListClass = ^PWebKitDOMPropertyNodeListClass;
  PWebKitDOMPropertyNodeListClass = ^TWebKitDOMPropertyNodeListClass;
  TWebKitDOMPropertyNodeListClass = object
    parent_class: TWebKitDOMNodeListClass;
  end;

  PPWebKitDOMRangeClass = ^PWebKitDOMRangeClass;
  PWebKitDOMRangeClass = ^TWebKitDOMRangeClass;
  TWebKitDOMRangeClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMScreenClass = ^PWebKitDOMScreenClass;
  PWebKitDOMScreenClass = ^TWebKitDOMScreenClass;
  TWebKitDOMScreenClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMShadowRoot = ^PWebKitDOMShadowRoot;
  PWebKitDOMShadowRoot = ^TWebKitDOMShadowRoot;
  TWebKitDOMShadowRoot = object(TWebKitDOMDocumentFragment)
    function element_from_point(x: glong; y: glong): PWebKitDOMElement; cdecl; inline;
    function get_active_element: PWebKitDOMElement; cdecl; inline;
    function get_apply_author_styles: gboolean; cdecl; inline;
    function get_element_by_id(elementId: Pgchar): PWebKitDOMElement; cdecl; inline;
    function get_elements_by_class_name(className: Pgchar): PWebKitDOMNodeList; cdecl; inline;
    function get_elements_by_tag_name(tagName: Pgchar): PWebKitDOMNodeList; cdecl; inline;
    function get_elements_by_tag_name_ns(namespaceURI: Pgchar; localName: Pgchar): PWebKitDOMNodeList; cdecl; inline;
    function get_inner_html: Pgchar; cdecl; inline;
    function get_reset_style_inheritance: gboolean; cdecl; inline;
    function get_selection: PWebKitDOMDOMSelection; cdecl; inline;
    procedure set_apply_author_styles(value: gboolean); cdecl; inline;
    procedure set_inner_html(value: Pgchar; error: PPGError); cdecl; inline;
    procedure set_reset_style_inheritance(value: gboolean); cdecl; inline;
    property active_element: PWebKitDOMElement read get_active_element ;
    property apply_author_styles: gboolean read get_apply_author_styles write set_apply_author_styles;
    property inner_html: Pgchar read get_inner_html  { property is writeable but setter not declared } ;
    property reset_style_inheritance: gboolean read get_reset_style_inheritance write set_reset_style_inheritance;
  end;

  PPWebKitDOMShadowRootClass = ^PWebKitDOMShadowRootClass;
  PWebKitDOMShadowRootClass = ^TWebKitDOMShadowRootClass;
  TWebKitDOMShadowRootClass = object
    parent_class: TWebKitDOMDocumentFragmentClass;
  end;

  PPWebKitDOMStorageClass = ^PWebKitDOMStorageClass;
  PWebKitDOMStorageClass = ^TWebKitDOMStorageClass;
  TWebKitDOMStorageClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMStorageInfoClass = ^PWebKitDOMStorageInfoClass;
  PWebKitDOMStorageInfoClass = ^TWebKitDOMStorageInfoClass;
  TWebKitDOMStorageInfoClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMStyleMediaClass = ^PWebKitDOMStyleMediaClass;
  PWebKitDOMStyleMediaClass = ^TWebKitDOMStyleMediaClass;
  TWebKitDOMStyleMediaClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMStyleSheetListClass = ^PWebKitDOMStyleSheetListClass;
  PWebKitDOMStyleSheetListClass = ^TWebKitDOMStyleSheetListClass;
  TWebKitDOMStyleSheetListClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMTextTrack = ^PWebKitDOMTextTrack;
  PWebKitDOMTextTrack = ^TWebKitDOMTextTrack;

  PPWebKitDOMTextTrackCue = ^PWebKitDOMTextTrackCue;
  PWebKitDOMTextTrackCue = ^TWebKitDOMTextTrackCue;

  PPWebKitDOMTextTrackCueList = ^PWebKitDOMTextTrackCueList;
  PWebKitDOMTextTrackCueList = ^TWebKitDOMTextTrackCueList;
  TWebKitDOMTextTrack = object(TWebKitDOMObject)
    procedure add_cue(cue: PWebKitDOMTextTrackCue); cdecl; inline;
    function dispatch_event(evt: PWebKitDOMEvent; error: PPGError): gboolean; cdecl; inline;
    function get_active_cues: PWebKitDOMTextTrackCueList; cdecl; inline;
    function get_cues: PWebKitDOMTextTrackCueList; cdecl; inline;
    function get_kind: Pgchar; cdecl; inline;
    function get_label: Pgchar; cdecl; inline;
    function get_language: Pgchar; cdecl; inline;
    function get_mode: Pgchar; cdecl; inline;
    procedure remove_cue(cue: PWebKitDOMTextTrackCue; error: PPGError); cdecl; inline;
    procedure set_mode(value: Pgchar); cdecl; inline;
    property active_cues: PWebKitDOMTextTrackCueList read get_active_cues ;
    property cues: PWebKitDOMTextTrackCueList read get_cues ;
    property kind: Pgchar read get_kind ;
    property label_: Pgchar read get_label ;
    property language: Pgchar read get_language ;
    property mode: Pgchar read get_mode write set_mode;
  end;
  TWebKitDOMTextTrackCue = object(TWebKitDOMObject)
    function dispatch_event(evt: PWebKitDOMEvent; error: PPGError): gboolean; cdecl; inline;
    function get_align: Pgchar; cdecl; inline;
    function get_cue_as_html: PWebKitDOMDocumentFragment; cdecl; inline;
    function get_end_time: gdouble; cdecl; inline;
    function get_id: Pgchar; cdecl; inline;
    function get_line: glong; cdecl; inline;
    function get_pause_on_exit: gboolean; cdecl; inline;
    function get_position: glong; cdecl; inline;
    function get_size: glong; cdecl; inline;
    function get_snap_to_lines: gboolean; cdecl; inline;
    function get_start_time: gdouble; cdecl; inline;
    function get_text: Pgchar; cdecl; inline;
    function get_track: PWebKitDOMTextTrack; cdecl; inline;
    function get_vertical: Pgchar; cdecl; inline;
    procedure set_align(value: Pgchar; error: PPGError); cdecl; inline;
    procedure set_end_time(value: gdouble; error: PPGError); cdecl; inline;
    procedure set_id(value: Pgchar); cdecl; inline;
    procedure set_line(value: glong; error: PPGError); cdecl; inline;
    procedure set_pause_on_exit(value: gboolean); cdecl; inline;
    procedure set_position(value: glong; error: PPGError); cdecl; inline;
    procedure set_size(value: glong; error: PPGError); cdecl; inline;
    procedure set_snap_to_lines(value: gboolean); cdecl; inline;
    procedure set_start_time(value: gdouble; error: PPGError); cdecl; inline;
    procedure set_text(value: Pgchar); cdecl; inline;
    procedure set_vertical(value: Pgchar; error: PPGError); cdecl; inline;
    property align: Pgchar read get_align  { property is writeable but setter not declared } ;
    property end_time: gdouble read get_end_time  { property is writeable but setter not declared } ;
    property id: Pgchar read get_id write set_id;
    property line: glong read get_line  { property is writeable but setter not declared } ;
    property pause_on_exit: gboolean read get_pause_on_exit write set_pause_on_exit;
    property position: glong read get_position  { property is writeable but setter not declared } ;
    property size: glong read get_size  { property is writeable but setter not declared } ;
    property snap_to_lines: gboolean read get_snap_to_lines write set_snap_to_lines;
    property start_time: gdouble read get_start_time  { property is writeable but setter not declared } ;
    property text: Pgchar read get_text write set_text;
    property track: PWebKitDOMTextTrack read get_track ;
    property vertical: Pgchar read get_vertical  { property is writeable but setter not declared } ;
  end;
  TWebKitDOMTextTrackCueList = object(TWebKitDOMObject)
    function get_cue_by_id(id: Pgchar): PWebKitDOMTextTrackCue; cdecl; inline;
    function get_length: gulong; cdecl; inline;
    function item(index: gulong): PWebKitDOMTextTrackCue; cdecl; inline;
    property length: gulong read get_length ;
  end;

  PPWebKitDOMTextTrackClass = ^PWebKitDOMTextTrackClass;
  PWebKitDOMTextTrackClass = ^TWebKitDOMTextTrackClass;
  TWebKitDOMTextTrackClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMTextTrackCueClass = ^PWebKitDOMTextTrackCueClass;
  PWebKitDOMTextTrackCueClass = ^TWebKitDOMTextTrackCueClass;
  TWebKitDOMTextTrackCueClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMTextTrackCueListClass = ^PWebKitDOMTextTrackCueListClass;
  PWebKitDOMTextTrackCueListClass = ^TWebKitDOMTextTrackCueListClass;
  TWebKitDOMTextTrackCueListClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMTextTrackList = ^PWebKitDOMTextTrackList;
  PWebKitDOMTextTrackList = ^TWebKitDOMTextTrackList;
  TWebKitDOMTextTrackList = object(TWebKitDOMObject)
    function dispatch_event(evt: PWebKitDOMEvent; error: PPGError): gboolean; cdecl; inline;
    function get_length: gulong; cdecl; inline;
    function item(index: gulong): PWebKitDOMTextTrack; cdecl; inline;
    property length: gulong read get_length ;
  end;

  PPWebKitDOMTextTrackListClass = ^PWebKitDOMTextTrackListClass;
  PWebKitDOMTextTrackListClass = ^TWebKitDOMTextTrackListClass;
  TWebKitDOMTextTrackListClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMTimeRangesClass = ^PWebKitDOMTimeRangesClass;
  PWebKitDOMTimeRangesClass = ^TWebKitDOMTimeRangesClass;
  TWebKitDOMTimeRangesClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMTrackEvent = ^PWebKitDOMTrackEvent;
  PWebKitDOMTrackEvent = ^TWebKitDOMTrackEvent;
  TWebKitDOMTrackEvent = object(TWebKitDOMEvent)
  end;

  PPWebKitDOMTrackEventClass = ^PWebKitDOMTrackEventClass;
  PWebKitDOMTrackEventClass = ^TWebKitDOMTrackEventClass;
  TWebKitDOMTrackEventClass = object
    parent_class: TWebKitDOMEventClass;
  end;

  PPWebKitDOMTreeWalkerClass = ^PWebKitDOMTreeWalkerClass;
  PWebKitDOMTreeWalkerClass = ^TWebKitDOMTreeWalkerClass;
  TWebKitDOMTreeWalkerClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMValidityStateClass = ^PWebKitDOMValidityStateClass;
  PWebKitDOMValidityStateClass = ^TWebKitDOMValidityStateClass;
  TWebKitDOMValidityStateClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMWebKitNamedFlowClass = ^PWebKitDOMWebKitNamedFlowClass;
  PWebKitDOMWebKitNamedFlowClass = ^TWebKitDOMWebKitNamedFlowClass;
  TWebKitDOMWebKitNamedFlowClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMWebKitPointClass = ^PWebKitDOMWebKitPointClass;
  PWebKitDOMWebKitPointClass = ^TWebKitDOMWebKitPointClass;
  TWebKitDOMWebKitPointClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMXPathExpressionClass = ^PWebKitDOMXPathExpressionClass;
  PWebKitDOMXPathExpressionClass = ^TWebKitDOMXPathExpressionClass;
  TWebKitDOMXPathExpressionClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMXPathNSResolverClass = ^PWebKitDOMXPathNSResolverClass;
  PWebKitDOMXPathNSResolverClass = ^TWebKitDOMXPathNSResolverClass;
  TWebKitDOMXPathNSResolverClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDOMXPathResultClass = ^PWebKitDOMXPathResultClass;
  PWebKitDOMXPathResultClass = ^TWebKitDOMXPathResultClass;
  TWebKitDOMXPathResultClass = object
    parent_class: TWebKitDOMObjectClass;
  end;

  PPWebKitDownload = ^PWebKitDownload;
  PWebKitDownload = ^TWebKitDownload;

  PPWebKitNetworkRequest = ^PWebKitNetworkRequest;
  PWebKitNetworkRequest = ^TWebKitNetworkRequest;

  PPWebKitNetworkResponse = ^PWebKitNetworkResponse;
  PWebKitNetworkResponse = ^TWebKitNetworkResponse;

  PPWebKitDownloadStatus = ^PWebKitDownloadStatus;
  PWebKitDownloadStatus = ^TWebKitDownloadStatus;

  PPWebKitDownloadPrivate = ^PWebKitDownloadPrivate;
  PWebKitDownloadPrivate = ^TWebKitDownloadPrivate;
  TWebKitDownload = object(TGObject)
    priv: PWebKitDownloadPrivate;
    function new(request: PWebKitNetworkRequest): PWebKitDownload; cdecl; inline; static;
    procedure cancel; cdecl; inline;
    function get_current_size: guint64; cdecl; inline;
    function get_destination_uri: Pgchar; cdecl; inline;
    function get_elapsed_time: gdouble; cdecl; inline;
    function get_network_request: PWebKitNetworkRequest; cdecl; inline;
    function get_network_response: PWebKitNetworkResponse; cdecl; inline;
    function get_progress: gdouble; cdecl; inline;
    function get_status: TWebKitDownloadStatus; cdecl; inline;
    function get_suggested_filename: Pgchar; cdecl; inline;
    function get_total_size: guint64; cdecl; inline;
    function get_uri: Pgchar; cdecl; inline;
    procedure set_destination_uri(destination_uri: Pgchar); cdecl; inline;
    procedure start; cdecl; inline;
    property current_size: guint64 read get_current_size ;
    property destination_uri: Pgchar read get_destination_uri write set_destination_uri;
    property network_request: PWebKitNetworkRequest read get_network_request  { property is writeable but setter not declared } ;
    property network_response: PWebKitNetworkResponse read get_network_response  { property is writeable but setter not declared } ;
    property progress: gdouble read get_progress ;
    property status: TWebKitDownloadStatus read get_status ;
    property suggested_filename: Pgchar read get_suggested_filename ;
    property total_size: guint64 read get_total_size ;
  end;

  PPWebKitNetworkRequestPrivate = ^PWebKitNetworkRequestPrivate;
  PWebKitNetworkRequestPrivate = ^TWebKitNetworkRequestPrivate;
  TWebKitNetworkRequest = object(TGObject)
    priv: PWebKitNetworkRequestPrivate;
    function new(uri: Pgchar): PWebKitNetworkRequest; cdecl; inline; static;
    function get_message: PSoupMessage; cdecl; inline;
    function get_uri: Pgchar; cdecl; inline;
    procedure set_uri(uri: Pgchar); cdecl; inline;
    property message: PSoupMessage read get_message  { property is writeable but setter not declared } ;
    property uri: Pgchar read get_uri write set_uri;
  end;

  PPWebKitNetworkResponsePrivate = ^PWebKitNetworkResponsePrivate;
  PWebKitNetworkResponsePrivate = ^TWebKitNetworkResponsePrivate;
  TWebKitNetworkResponse = object(TGObject)
    priv: PWebKitNetworkResponsePrivate;
    function new(uri: Pgchar): PWebKitNetworkResponse; cdecl; inline; static;
    function get_message: PSoupMessage; cdecl; inline;
    function get_suggested_filename: Pgchar; cdecl; inline;
    function get_uri: Pgchar; cdecl; inline;
    procedure set_uri(uri: Pgchar); cdecl; inline;
    property message: PSoupMessage read get_message  { property is writeable but setter not declared } ;
    property suggested_filename: Pgchar read get_suggested_filename ;
    property uri: Pgchar read get_uri write set_uri;
  end;

  TWebKitDownloadPrivate = record
  end;



  PPWebKitDownloadClass = ^PWebKitDownloadClass;
  PWebKitDownloadClass = ^TWebKitDownloadClass;
  TWebKitDownloadClass = object
    parent_class: TGObjectClass;
    _webkit_reserved0: procedure; cdecl;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
  end;

  PPWebKitDownloadError = ^PWebKitDownloadError;
  PWebKitDownloadError = ^TWebKitDownloadError;

  PPWebKitEditingBehavior = ^PWebKitEditingBehavior;
  PWebKitEditingBehavior = ^TWebKitEditingBehavior;

  PPWebKitFaviconDatabase = ^PWebKitFaviconDatabase;
  PWebKitFaviconDatabase = ^TWebKitFaviconDatabase;

  PPWebKitFaviconDatabasePrivate = ^PWebKitFaviconDatabasePrivate;
  PWebKitFaviconDatabasePrivate = ^TWebKitFaviconDatabasePrivate;
  TWebKitFaviconDatabase = object(TGObject)
    priv: PWebKitFaviconDatabasePrivate;
    procedure clear; cdecl; inline;
    procedure get_favicon_pixbuf(page_uri: Pgchar; width: guint; height: guint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; inline;
    function get_favicon_pixbuf_finish(result_: PGAsyncResult; error: PPGError): PGdkPixbuf; cdecl; inline;
    function get_favicon_uri(page_uri: Pgchar): Pgchar; cdecl; inline;
    function get_path: Pgchar; cdecl; inline;
    procedure set_path(path: Pgchar); cdecl; inline;
    function try_get_favicon_pixbuf(page_uri: Pgchar; width: guint; height: guint): PGdkPixbuf; cdecl; inline;
    property path: Pgchar read get_path write set_path;
  end;

  TWebKitFaviconDatabasePrivate = record
  end;



  PPWebKitFaviconDatabaseClass = ^PWebKitFaviconDatabaseClass;
  PWebKitFaviconDatabaseClass = ^TWebKitFaviconDatabaseClass;
  TWebKitFaviconDatabaseClass = object
    parent_class: TGObjectClass;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
    _webkit_reserved4: procedure; cdecl;
  end;

  PPWebKitFileChooserRequest = ^PWebKitFileChooserRequest;
  PWebKitFileChooserRequest = ^TWebKitFileChooserRequest;

  PPWebKitFileChooserRequestPrivate = ^PWebKitFileChooserRequestPrivate;
  PWebKitFileChooserRequestPrivate = ^TWebKitFileChooserRequestPrivate;
  TWebKitFileChooserRequest = object(TGObject)
    priv: PWebKitFileChooserRequestPrivate;
    function get_mime_types: PPgchar; cdecl; inline;
    function get_mime_types_filter: PGtkFileFilter; cdecl; inline;
    function get_select_multiple: gboolean; cdecl; inline;
    function get_selected_files: PPgchar; cdecl; inline;
    procedure select_files(files: PPgchar); cdecl; inline;
    //property filter: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_filter ;
    property mime_types: PPgchar read get_mime_types ;
    property select_multiple: gboolean read get_select_multiple ;
    property selected_files: PPgchar read get_selected_files ;
  end;

  TWebKitFileChooserRequestPrivate = record
  end;



  PPWebKitFileChooserRequestClass = ^PWebKitFileChooserRequestClass;
  PWebKitFileChooserRequestClass = ^TWebKitFileChooserRequestClass;
  TWebKitFileChooserRequestClass = object
    parent_class: TGObjectClass;
  end;

  PPWebKitGeolocationPolicyDecisionPrivate = ^PWebKitGeolocationPolicyDecisionPrivate;
  PWebKitGeolocationPolicyDecisionPrivate = ^TWebKitGeolocationPolicyDecisionPrivate;

  TWebKitGeolocationPolicyDecisionPrivate = record
  end;



  PPWebKitGeolocationPolicyDecision = ^PWebKitGeolocationPolicyDecision;
  PWebKitGeolocationPolicyDecision = ^TWebKitGeolocationPolicyDecision;
  TWebKitGeolocationPolicyDecision = object(TGObject)
    priv: PWebKitGeolocationPolicyDecisionPrivate;
  end;

  PPWebKitGeolocationPolicyDecisionClass = ^PWebKitGeolocationPolicyDecisionClass;
  PWebKitGeolocationPolicyDecisionClass = ^TWebKitGeolocationPolicyDecisionClass;
  TWebKitGeolocationPolicyDecisionClass = object
    parent_class: TGObjectClass;
    _webkit_reserved0: procedure; cdecl;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
  end;

  PPWebKitHitTestResultContext = ^PWebKitHitTestResultContext;
  PWebKitHitTestResultContext = ^TWebKitHitTestResultContext;

  PPWebKitHitTestResultPrivate = ^PWebKitHitTestResultPrivate;
  PWebKitHitTestResultPrivate = ^TWebKitHitTestResultPrivate;

  TWebKitHitTestResultPrivate = record
  end;



  PPWebKitHitTestResult = ^PWebKitHitTestResult;
  PWebKitHitTestResult = ^TWebKitHitTestResult;
  TWebKitHitTestResult = object(TGObject)
    priv: PWebKitHitTestResultPrivate;
    //property context: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_context  { property is writeable but setter not declared } ;
    //property image_uri: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_image_uri  { property is writeable but setter not declared } ;
    //property inner_node: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_inner_node  { property is writeable but setter not declared } ;
    //property link_uri: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_link_uri  { property is writeable but setter not declared } ;
    //property media_uri: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_media_uri  { property is writeable but setter not declared } ;
    //property x: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_x  { property is writeable but setter not declared } ;
    //property y: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_y  { property is writeable but setter not declared } ;
  end;

  PPWebKitHitTestResultClass = ^PWebKitHitTestResultClass;
  PWebKitHitTestResultClass = ^TWebKitHitTestResultClass;
  TWebKitHitTestResultClass = object
    parent_class: TGObjectClass;
    _webkit_reserved0: procedure; cdecl;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
  end;

  PPWebKitIconDatabase = ^PWebKitIconDatabase;
  PWebKitIconDatabase = ^TWebKitIconDatabase;

  PPWebKitIconDatabasePrivate = ^PWebKitIconDatabasePrivate;
  PWebKitIconDatabasePrivate = ^TWebKitIconDatabasePrivate;
  TWebKitIconDatabase = object(TGObject)
    priv: PWebKitIconDatabasePrivate;
    //property path: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_path  { property is writeable but setter not declared } ;
  end;

  TWebKitIconDatabasePrivate = record
  end;



  PPWebKitWebFrame = ^PWebKitWebFrame;
  PWebKitWebFrame = ^TWebKitWebFrame;

  PPWebKitWebDataSource = ^PWebKitWebDataSource;
  PWebKitWebDataSource = ^TWebKitWebDataSource;

  PPWebKitLoadStatus = ^PWebKitLoadStatus;
  PWebKitLoadStatus = ^TWebKitLoadStatus;

  PPWebKitSecurityOrigin = ^PWebKitSecurityOrigin;
  PWebKitSecurityOrigin = ^TWebKitSecurityOrigin;

  PPWebKitWebView = ^PWebKitWebView;
  PWebKitWebView = ^TWebKitWebView;

  PPWebKitWebFramePrivate = ^PWebKitWebFramePrivate;
  PWebKitWebFramePrivate = ^TWebKitWebFramePrivate;
  TWebKitWebFrame = object(TGObject)
    priv: PWebKitWebFramePrivate;
    function find_frame(name: Pgchar): PWebKitWebFrame; cdecl; inline;
    function get_data_source: PWebKitWebDataSource; cdecl; inline;
    function get_dom_document: PWebKitDOMDocument; cdecl; inline;
    function get_global_context: TJSGlobalContextRef; cdecl; inline;
    function get_horizontal_scrollbar_policy: TGtkPolicyType; cdecl; inline;
    function get_load_status: TWebKitLoadStatus; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_network_response: PWebKitNetworkResponse; cdecl; inline;
    function get_parent: PWebKitWebFrame; cdecl; inline;
    function get_provisional_data_source: PWebKitWebDataSource; cdecl; inline;
    function get_range_for_word_around_caret: PWebKitDOMRange; cdecl; inline;
    function get_security_origin: PWebKitSecurityOrigin; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_uri: Pgchar; cdecl; inline;
    function get_vertical_scrollbar_policy: TGtkPolicyType; cdecl; inline;
    function get_web_view: PWebKitWebView; cdecl; inline;
    procedure load_alternate_string(content: Pgchar; base_url: Pgchar; unreachable_url: Pgchar); cdecl; inline;
    procedure load_request(request: PWebKitNetworkRequest); cdecl; inline;
    procedure load_string(content: Pgchar; mime_type: Pgchar; encoding: Pgchar; base_uri: Pgchar); cdecl; inline;
    procedure load_uri(uri: Pgchar); cdecl; inline;
    procedure print; cdecl; inline;
    function print_full(operation: PGtkPrintOperation; action: TGtkPrintOperationAction; error: PPGError): TGtkPrintOperationResult; cdecl; inline;
    procedure reload; cdecl; inline;
    procedure replace_selection(text: Pgchar); cdecl; inline;
    procedure stop_loading; cdecl; inline;
    property horizontal_scrollbar_policy: TGtkPolicyType read get_horizontal_scrollbar_policy ;
    property load_status: TWebKitLoadStatus read get_load_status ;
    property name: Pgchar read get_name ;
    property title: Pgchar read get_title ;
    property uri: Pgchar read get_uri ;
    property vertical_scrollbar_policy: TGtkPolicyType read get_vertical_scrollbar_policy ;
  end;

  PPWebKitIconDatabaseClass = ^PWebKitIconDatabaseClass;
  PWebKitIconDatabaseClass = ^TWebKitIconDatabaseClass;
  TWebKitIconDatabaseClass = object
    parent_class: TGObjectClass;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
    _webkit_reserved4: procedure; cdecl;
  end;

  PPWebKitInsertAction = ^PWebKitInsertAction;
  PWebKitInsertAction = ^TWebKitInsertAction;

  PPWebKitNavigationResponse = ^PWebKitNavigationResponse;
  PWebKitNavigationResponse = ^TWebKitNavigationResponse;

  PPWebKitNetworkError = ^PWebKitNetworkError;
  PWebKitNetworkError = ^TWebKitNetworkError;

  TWebKitNetworkRequestPrivate = record
  end;



  PPWebKitNetworkRequestClass = ^PWebKitNetworkRequestClass;
  PWebKitNetworkRequestClass = ^TWebKitNetworkRequestClass;
  TWebKitNetworkRequestClass = object
    parent_class: TGObjectClass;
    _webkit_reserved0: procedure; cdecl;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
  end;

  TWebKitNetworkResponsePrivate = record
  end;



  PPWebKitNetworkResponseClass = ^PWebKitNetworkResponseClass;
  PWebKitNetworkResponseClass = ^TWebKitNetworkResponseClass;
  TWebKitNetworkResponseClass = object
    parent_class: TGObjectClass;
    _webkit_reserved0: procedure; cdecl;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
  end;

  PPWebKitPluginError = ^PWebKitPluginError;
  PWebKitPluginError = ^TWebKitPluginError;

  PPWebKitPolicyError = ^PWebKitPolicyError;
  PWebKitPolicyError = ^TWebKitPolicyError;

  PPWebKitSecurityOriginPrivate = ^PWebKitSecurityOriginPrivate;
  PWebKitSecurityOriginPrivate = ^TWebKitSecurityOriginPrivate;
  TWebKitSecurityOrigin = object(TGObject)
    priv: PWebKitSecurityOriginPrivate;
    function get_all_web_databases: PGList; cdecl; inline;
    function get_host: Pgchar; cdecl; inline;
    function get_port: guint; cdecl; inline;
    function get_protocol: Pgchar; cdecl; inline;
    function get_web_database_quota: guint64; cdecl; inline;
    function get_web_database_usage: guint64; cdecl; inline;
    procedure set_web_database_quota(quota: guint64); cdecl; inline;
    property host: Pgchar read get_host ;
    property port: guint read get_port ;
    property protocol: Pgchar read get_protocol ;
    property web_database_quota: guint64 read get_web_database_quota write set_web_database_quota;
    property web_database_usage: guint64 read get_web_database_usage ;
  end;

  TWebKitSecurityOriginPrivate = record
  end;



  PPWebKitSecurityOriginClass = ^PWebKitSecurityOriginClass;
  PWebKitSecurityOriginClass = ^TWebKitSecurityOriginClass;
  TWebKitSecurityOriginClass = object
    parent_class: TGObjectClass;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
    _webkit_reserved4: procedure; cdecl;
  end;

  PPWebKitSecurityPolicy = ^PWebKitSecurityPolicy;
  PWebKitSecurityPolicy = ^TWebKitSecurityPolicy;

  PPWebKitSelectionAffinity = ^PWebKitSelectionAffinity;
  PWebKitSelectionAffinity = ^TWebKitSelectionAffinity;

  PPWebKitSoupAuthDialog = ^PWebKitSoupAuthDialog;
  PWebKitSoupAuthDialog = ^TWebKitSoupAuthDialog;
  TWebKitSoupAuthDialog = object(TGObject)
  end;

  PPWebKitSoupAuthDialogClass = ^PWebKitSoupAuthDialogClass;
  PWebKitSoupAuthDialogClass = ^TWebKitSoupAuthDialogClass;
  TWebKitSoupAuthDialogClass = object
    parent_class: TGObjectClass;
    current_toplevel: function(authDialog: PWebKitSoupAuthDialog; message: PSoupMessage): PGtkWidget; cdecl;
  end;

  PPWebKitSpellChecker = ^PWebKitSpellChecker;
  PWebKitSpellChecker = ^TWebKitSpellChecker;
  TWebKitSpellChecker = object
    procedure check_spelling_of_string(string_: Pgchar; misspelling_location: Pgint; misspelling_length: Pgint); cdecl; inline;
    function get_autocorrect_suggestions_for_misspelled_word(word: Pgchar): Pgchar; cdecl; inline;
    function get_guesses_for_word(word: Pgchar; context: Pgchar): PPgchar; cdecl; inline;
    procedure ignore_word(word: Pgchar); cdecl; inline;
    procedure learn_word(word: Pgchar); cdecl; inline;
    procedure update_spell_checking_languages(languages: Pgchar); cdecl; inline;
  end;

  PPWebKitSpellCheckerInterface = ^PWebKitSpellCheckerInterface;
  PWebKitSpellCheckerInterface = ^TWebKitSpellCheckerInterface;
  TWebKitSpellCheckerInterface = object
    g_iface: TGTypeInterface;
    check_spelling_of_string: procedure(checker: PWebKitSpellChecker; word: Pgchar; misspelling_location: Pgint; misspelling_length: Pgint); cdecl;
    get_guesses_for_word: function(checker: PWebKitSpellChecker; word: Pgchar; context: Pgchar): PPgchar; cdecl;
    update_spell_checking_languages: procedure(checker: PWebKitSpellChecker; languages: Pgchar); cdecl;
    get_autocorrect_suggestions_for_misspelled_word: function(checker: PWebKitSpellChecker; word: Pgchar): Pgchar; cdecl;
    learn_word: procedure(checker: PWebKitSpellChecker; word: Pgchar); cdecl;
    ignore_word: procedure(checker: PWebKitSpellChecker; word: Pgchar); cdecl;
  end;

  PPWebKitViewportAttributes = ^PWebKitViewportAttributes;
  PWebKitViewportAttributes = ^TWebKitViewportAttributes;

  PPWebKitViewportAttributesPrivate = ^PWebKitViewportAttributesPrivate;
  PWebKitViewportAttributesPrivate = ^TWebKitViewportAttributesPrivate;
  TWebKitViewportAttributes = object(TGObject)
    priv: PWebKitViewportAttributesPrivate;
    procedure recompute; cdecl; inline;
    //property available_height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_available_height  { property is writeable but setter not declared } ;
    //property available_width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_available_width  { property is writeable but setter not declared } ;
    //property desktop_width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_desktop_width  { property is writeable but setter not declared } ;
    //property device_dpi: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_device_dpi  { property is writeable but setter not declared } ;
    //property device_height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_device_height  { property is writeable but setter not declared } ;
    //property device_pixel_ratio: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_device_pixel_ratio ;
    //property device_width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_device_width  { property is writeable but setter not declared } ;
    //property height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_height ;
    //property initial_scale_factor: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_initial_scale_factor ;
    //property maximum_scale_factor: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_maximum_scale_factor ;
    //property minimum_scale_factor: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_minimum_scale_factor ;
    //property user_scalable: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_user_scalable ;
    //property valid: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_valid ;
    //property width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_width ;
  end;

  TWebKitViewportAttributesPrivate = record
  end;



  PPWebKitViewportAttributesClass = ^PWebKitViewportAttributesClass;
  PWebKitViewportAttributesClass = ^TWebKitViewportAttributesClass;
  TWebKitViewportAttributesClass = object
    parent_class: TGObjectClass;
    _webkit_reserved0: procedure; cdecl;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
  end;

  PPWebKitWebBackForwardList = ^PWebKitWebBackForwardList;
  PWebKitWebBackForwardList = ^TWebKitWebBackForwardList;

  PPWebKitWebHistoryItem = ^PWebKitWebHistoryItem;
  PWebKitWebHistoryItem = ^TWebKitWebHistoryItem;

  PPWebKitWebBackForwardListPrivate = ^PWebKitWebBackForwardListPrivate;
  PWebKitWebBackForwardListPrivate = ^TWebKitWebBackForwardListPrivate;
  TWebKitWebBackForwardList = object(TGObject)
    priv: PWebKitWebBackForwardListPrivate;
    procedure add_item(history_item: PWebKitWebHistoryItem); cdecl; inline;
    procedure clear; cdecl; inline;
    function contains_item(history_item: PWebKitWebHistoryItem): gboolean; cdecl; inline;
    function get_back_item: PWebKitWebHistoryItem; cdecl; inline;
    function get_back_length: gint; cdecl; inline;
    function get_back_list_with_limit(limit: gint): PGList; cdecl; inline;
    function get_current_item: PWebKitWebHistoryItem; cdecl; inline;
    function get_forward_item: PWebKitWebHistoryItem; cdecl; inline;
    function get_forward_length: gint; cdecl; inline;
    function get_forward_list_with_limit(limit: gint): PGList; cdecl; inline;
    function get_limit: gint; cdecl; inline;
    function get_nth_item(index: gint): PWebKitWebHistoryItem; cdecl; inline;
    procedure go_back; cdecl; inline;
    procedure go_forward; cdecl; inline;
    procedure go_to_item(history_item: PWebKitWebHistoryItem); cdecl; inline;
    procedure set_limit(limit: gint); cdecl; inline;
  end;

  PPWebKitWebInspector = ^PWebKitWebInspector;
  PWebKitWebInspector = ^TWebKitWebInspector;

  PPWebKitWebSettings = ^PWebKitWebSettings;
  PWebKitWebSettings = ^TWebKitWebSettings;

  PPWebKitWebViewViewMode = ^PWebKitWebViewViewMode;
  PWebKitWebViewViewMode = ^TWebKitWebViewViewMode;

  PPWebKitWebWindowFeatures = ^PWebKitWebWindowFeatures;
  PWebKitWebWindowFeatures = ^TWebKitWebWindowFeatures;

  PPWebKitWebViewPrivate = ^PWebKitWebViewPrivate;
  PWebKitWebViewPrivate = ^TWebKitWebViewPrivate;
  TWebKitWebView = object(TGtkContainer)
    priv2: PWebKitWebViewPrivate;
    function new: PWebKitWebView; cdecl; inline; static;
    function can_copy_clipboard: gboolean; cdecl; inline;
    function can_cut_clipboard: gboolean; cdecl; inline;
    function can_go_back: gboolean; cdecl; inline;
    function can_go_back_or_forward(steps: gint): gboolean; cdecl; inline;
    function can_go_forward: gboolean; cdecl; inline;
    function can_paste_clipboard: gboolean; cdecl; inline;
    function can_redo: gboolean; cdecl; inline;
    function can_show_mime_type(mime_type: Pgchar): gboolean; cdecl; inline;
    function can_undo: gboolean; cdecl; inline;
    procedure copy_clipboard; cdecl; inline;
    procedure cut_clipboard; cdecl; inline;
    procedure delete_selection; cdecl; inline;
    procedure execute_script(script: Pgchar); cdecl; inline;
    function get_back_forward_list: PWebKitWebBackForwardList; cdecl; inline;
    function get_copy_target_list: PGtkTargetList; cdecl; inline;
    function get_custom_encoding: Pgchar; cdecl; inline;
    function get_dom_document: PWebKitDOMDocument; cdecl; inline;
    function get_editable: gboolean; cdecl; inline;
    function get_encoding: Pgchar; cdecl; inline;
    function get_focused_frame: PWebKitWebFrame; cdecl; inline;
    function get_full_content_zoom: gboolean; cdecl; inline;
    function get_hit_test_result(event: PGdkEventButton): PWebKitHitTestResult; cdecl; inline;
    function get_icon_uri: Pgchar; cdecl; inline;
    function get_inspector: PWebKitWebInspector; cdecl; inline;
    function get_load_status: TWebKitLoadStatus; cdecl; inline;
    function get_main_frame: PWebKitWebFrame; cdecl; inline;
    function get_paste_target_list: PGtkTargetList; cdecl; inline;
    function get_progress: gdouble; cdecl; inline;
    function get_settings: PWebKitWebSettings; cdecl; inline;
    function get_snapshot: Pcairo_surface_t; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_transparent: gboolean; cdecl; inline;
    function get_uri: Pgchar; cdecl; inline;
    function get_view_mode: TWebKitWebViewViewMode; cdecl; inline;
    function get_view_source_mode: gboolean; cdecl; inline;
    function get_viewport_attributes: PWebKitViewportAttributes; cdecl; inline;
    function get_window_features: PWebKitWebWindowFeatures; cdecl; inline;
    function get_zoom_level: gfloat; cdecl; inline;
    procedure go_back; cdecl; inline;
    procedure go_back_or_forward(steps: gint); cdecl; inline;
    procedure go_forward; cdecl; inline;
    function go_to_back_forward_item(item: PWebKitWebHistoryItem): gboolean; cdecl; inline;
    function has_selection: gboolean; cdecl; inline;
    procedure load_request(request: PWebKitNetworkRequest); cdecl; inline;
    procedure load_string(content: Pgchar; mime_type: Pgchar; encoding: Pgchar; base_uri: Pgchar); cdecl; inline;
    procedure load_uri(uri: Pgchar); cdecl; inline;
    function mark_text_matches(string_: Pgchar; case_sensitive: gboolean; limit: guint): guint; cdecl; inline;
    procedure move_cursor(step: TGtkMovementStep; count: gint); cdecl; inline;
    procedure paste_clipboard; cdecl; inline;
    procedure redo; cdecl; inline;
    procedure reload; cdecl; inline;
    procedure reload_bypass_cache; cdecl; inline;
    function search_text(text: Pgchar; case_sensitive: gboolean; forward: gboolean; wrap: gboolean): gboolean; cdecl; inline;
    procedure select_all; cdecl; inline;
    procedure set_custom_encoding(encoding: Pgchar); cdecl; inline;
    procedure set_editable(flag: gboolean); cdecl; inline;
    procedure set_full_content_zoom(full_content_zoom: gboolean); cdecl; inline;
    procedure set_highlight_text_matches(highlight: gboolean); cdecl; inline;
    procedure set_maintains_back_forward_list(flag: gboolean); cdecl; inline;
    procedure set_settings(settings: PWebKitWebSettings); cdecl; inline;
    procedure set_transparent(flag: gboolean); cdecl; inline;
    procedure set_view_mode(mode: TWebKitWebViewViewMode); cdecl; inline;
    procedure set_view_source_mode(view_source_mode: gboolean); cdecl; inline;
    procedure set_zoom_level(zoom_level: gfloat); cdecl; inline;
    procedure stop_loading; cdecl; inline;
    function try_get_favicon_pixbuf(width: guint; height: guint): PGdkPixbuf; cdecl; inline;
    procedure undo; cdecl; inline;
    procedure unmark_text_matches; cdecl; inline;
    procedure zoom_in; cdecl; inline;
    procedure zoom_out; cdecl; inline;
    property copy_target_list: PGtkTargetList read get_copy_target_list ;
    property custom_encoding: Pgchar read get_custom_encoding write set_custom_encoding;
    property editable: gboolean read get_editable write set_editable;
    property encoding: Pgchar read get_encoding ;
    property full_content_zoom: gboolean read get_full_content_zoom write set_full_content_zoom;
    property icon_uri: Pgchar read get_icon_uri ;
    //property im_context: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_im_context ;
    property load_status: TWebKitLoadStatus read get_load_status ;
    property paste_target_list: PGtkTargetList read get_paste_target_list ;
    property progress: gdouble read get_progress ;
    //property self_scrolling: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_self_scrolling  { property is writeable but setter not declared } ;
    property settings: PWebKitWebSettings read get_settings write set_settings;
    property title: Pgchar read get_title ;
    property transparent: gboolean read get_transparent write set_transparent;
    property uri: Pgchar read get_uri ;
    property view_mode: TWebKitWebViewViewMode read get_view_mode write set_view_mode;
    property viewport_attributes: PWebKitViewportAttributes read get_viewport_attributes ;
    //property web_inspector: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_web_inspector ;
    property window_features: PWebKitWebWindowFeatures read get_window_features  { property is writeable but setter not declared } ;
    property zoom_level: gfloat read get_zoom_level write set_zoom_level;
  end;

  PPWebKitWebHistoryItemPrivate = ^PWebKitWebHistoryItemPrivate;
  PWebKitWebHistoryItemPrivate = ^TWebKitWebHistoryItemPrivate;
  TWebKitWebHistoryItem = object(TGObject)
    priv: PWebKitWebHistoryItemPrivate;
    function new: PWebKitWebHistoryItem; cdecl; inline; static;
    function new_with_data(uri: Pgchar; title: Pgchar): PWebKitWebHistoryItem; cdecl; inline; static;
    function copy: PWebKitWebHistoryItem; cdecl; inline;
    function get_alternate_title: Pgchar; cdecl; inline;
    function get_last_visited_time: gdouble; cdecl; inline;
    function get_original_uri: Pgchar; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_uri: Pgchar; cdecl; inline;
    procedure set_alternate_title(title: Pgchar); cdecl; inline;
    property alternate_title: Pgchar read get_alternate_title write set_alternate_title;
    property last_visited_time: gdouble read get_last_visited_time ;
    property original_uri: Pgchar read get_original_uri ;
    property title: Pgchar read get_title ;
    property uri: Pgchar read get_uri ;
  end;

  TWebKitWebBackForwardListPrivate = record
  end;



  PPWebKitWebBackForwardListClass = ^PWebKitWebBackForwardListClass;
  PWebKitWebBackForwardListClass = ^TWebKitWebBackForwardListClass;
  TWebKitWebBackForwardListClass = object
    parent_class: TGObjectClass;
    _webkit_reserved0: procedure; cdecl;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
  end;

  PPWebKitWebResource = ^PWebKitWebResource;
  PWebKitWebResource = ^TWebKitWebResource;

  PPWebKitWebDataSourcePrivate = ^PWebKitWebDataSourcePrivate;
  PWebKitWebDataSourcePrivate = ^TWebKitWebDataSourcePrivate;
  TWebKitWebDataSource = object(TGObject)
    priv: PWebKitWebDataSourcePrivate;
    function new: PWebKitWebDataSource; cdecl; inline; static;
    function new_with_request(request: PWebKitNetworkRequest): PWebKitWebDataSource; cdecl; inline; static;
    function get_data: PGString; cdecl; inline;
    function get_encoding: Pgchar; cdecl; inline;
    function get_initial_request: PWebKitNetworkRequest; cdecl; inline;
    function get_main_resource: PWebKitWebResource; cdecl; inline;
    function get_request: PWebKitNetworkRequest; cdecl; inline;
    function get_subresources: PGList; cdecl; inline;
    function get_unreachable_uri: Pgchar; cdecl; inline;
    function get_web_frame: PWebKitWebFrame; cdecl; inline;
    function is_loading: gboolean; cdecl; inline;
  end;

  PPWebKitWebResourcePrivate = ^PWebKitWebResourcePrivate;
  PWebKitWebResourcePrivate = ^TWebKitWebResourcePrivate;
  TWebKitWebResource = object(TGObject)
    priv: PWebKitWebResourcePrivate;
    function new(data: Pgchar; size: gssize; uri: Pgchar; mime_type: Pgchar; encoding: Pgchar; frame_name: Pgchar): PWebKitWebResource; cdecl; inline; static;
    function get_data: PGString; cdecl; inline;
    function get_encoding: Pgchar; cdecl; inline;
    function get_frame_name: Pgchar; cdecl; inline;
    function get_mime_type: Pgchar; cdecl; inline;
    function get_uri: Pgchar; cdecl; inline;
    property encoding: Pgchar read get_encoding ;
    property frame_name: Pgchar read get_frame_name ;
    property mime_type: Pgchar read get_mime_type ;
    property uri: Pgchar read get_uri  { property is writeable but setter not declared } ;
  end;

  TWebKitWebDataSourcePrivate = record
  end;



  PPWebKitWebDataSourceClass = ^PWebKitWebDataSourceClass;
  PWebKitWebDataSourceClass = ^TWebKitWebDataSourceClass;
  TWebKitWebDataSourceClass = object
    parent_class: TGObjectClass;
    _webkit_reserved0: procedure; cdecl;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
  end;

  PPWebKitWebDatabase = ^PWebKitWebDatabase;
  PWebKitWebDatabase = ^TWebKitWebDatabase;

  PPWebKitWebDatabasePrivate = ^PWebKitWebDatabasePrivate;
  PWebKitWebDatabasePrivate = ^TWebKitWebDatabasePrivate;
  TWebKitWebDatabase = object(TGObject)
    priv: PWebKitWebDatabasePrivate;
    function get_display_name: Pgchar; cdecl; inline;
    function get_expected_size: guint64; cdecl; inline;
    function get_filename: Pgchar; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_security_origin: PWebKitSecurityOrigin; cdecl; inline;
    function get_size: guint64; cdecl; inline;
    procedure remove; cdecl; inline;
    property display_name: Pgchar read get_display_name ;
    property expected_size: guint64 read get_expected_size ;
    property filename: Pgchar read get_filename ;
    property name: Pgchar read get_name  { property is writeable but setter not declared } ;
    property security_origin: PWebKitSecurityOrigin read get_security_origin  { property is writeable but setter not declared } ;
    property size: guint64 read get_size ;
  end;

  TWebKitWebDatabasePrivate = record
  end;



  PPWebKitWebDatabaseClass = ^PWebKitWebDatabaseClass;
  PWebKitWebDatabaseClass = ^TWebKitWebDatabaseClass;
  TWebKitWebDatabaseClass = object
    parent_class: TGObjectClass;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
    _webkit_reserved4: procedure; cdecl;
  end;

  TWebKitWebFramePrivate = record
  end;



  PPWebKitWebFrameClass = ^PWebKitWebFrameClass;
  PWebKitWebFrameClass = ^TWebKitWebFrameClass;
  TWebKitWebFrameClass = object
    parent_class: TGObjectClass;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
    _webkit_reserved4: procedure; cdecl;
    _webkit_reserved5: procedure; cdecl;
    _webkit_reserved6: procedure; cdecl;
  end;

  TWebKitWebHistoryItemPrivate = record
  end;



  PPWebKitWebHistoryItemClass = ^PWebKitWebHistoryItemClass;
  PWebKitWebHistoryItemClass = ^TWebKitWebHistoryItemClass;
  TWebKitWebHistoryItemClass = object
    parent_class: TGObjectClass;
    _webkit_reserved0: procedure; cdecl;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
  end;

  PPWebKitWebInspectorPrivate = ^PWebKitWebInspectorPrivate;
  PWebKitWebInspectorPrivate = ^TWebKitWebInspectorPrivate;
  TWebKitWebInspector = object(TGObject)
    priv: PWebKitWebInspectorPrivate;
    procedure close; cdecl; inline;
    function get_inspected_uri: Pgchar; cdecl; inline;
    function get_web_view: PWebKitWebView; cdecl; inline;
    procedure inspect_coordinates(x: gdouble; y: gdouble); cdecl; inline;
    procedure inspect_node(node: PWebKitDOMNode); cdecl; inline;
    procedure show; cdecl; inline;
    property inspected_uri: Pgchar read get_inspected_uri ;
    //property javascript_profiling_enabled: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_javascript_profiling_enabled  { property is writeable but setter not declared } ;
    //property timeline_profiling_enabled: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_timeline_profiling_enabled  { property is writeable but setter not declared } ;
    property web_view: PWebKitWebView read get_web_view ;
  end;

  TWebKitWebInspectorPrivate = record
  end;



  PPWebKitWebInspectorClass = ^PWebKitWebInspectorClass;
  PWebKitWebInspectorClass = ^TWebKitWebInspectorClass;
  TWebKitWebInspectorClass = object
    parent_class: TGObjectClass;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
    _webkit_reserved4: procedure; cdecl;
  end;

  PPWebKitWebNavigationAction = ^PWebKitWebNavigationAction;
  PWebKitWebNavigationAction = ^TWebKitWebNavigationAction;

  PPWebKitWebNavigationReason = ^PWebKitWebNavigationReason;
  PWebKitWebNavigationReason = ^TWebKitWebNavigationReason;

  PPWebKitWebNavigationActionPrivate = ^PWebKitWebNavigationActionPrivate;
  PWebKitWebNavigationActionPrivate = ^TWebKitWebNavigationActionPrivate;
  TWebKitWebNavigationAction = object(TGObject)
    priv: PWebKitWebNavigationActionPrivate;
    function get_button: gint; cdecl; inline;
    function get_modifier_state: gint; cdecl; inline;
    function get_original_uri: Pgchar; cdecl; inline;
    function get_reason: TWebKitWebNavigationReason; cdecl; inline;
    function get_target_frame: Pgchar; cdecl; inline;
    procedure set_original_uri(originalUri: Pgchar); cdecl; inline;
    procedure set_reason(reason: TWebKitWebNavigationReason); cdecl; inline;
    property button: gint read get_button  { property is writeable but setter not declared } ;
    property modifier_state: gint read get_modifier_state  { property is writeable but setter not declared } ;
    property original_uri: Pgchar read get_original_uri write set_original_uri;
    property reason: TWebKitWebNavigationReason read get_reason write set_reason;
    property target_frame: Pgchar read get_target_frame  { property is writeable but setter not declared } ;
  end;

  TWebKitWebNavigationActionPrivate = record
  end;



  PPWebKitWebNavigationActionClass = ^PWebKitWebNavigationActionClass;
  PWebKitWebNavigationActionClass = ^TWebKitWebNavigationActionClass;
  TWebKitWebNavigationActionClass = object
    parent_class: TGObjectClass;
    _webkit_reserved0: procedure; cdecl;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
  end;

  PPWebKitWebPlugin = ^PWebKitWebPlugin;
  PWebKitWebPlugin = ^TWebKitWebPlugin;

  PPWebKitWebPluginPrivate = ^PWebKitWebPluginPrivate;
  PWebKitWebPluginPrivate = ^TWebKitWebPluginPrivate;
  TWebKitWebPlugin = object(TGObject)
    priv: PWebKitWebPluginPrivate;
    function get_description: Pgchar; cdecl; inline;
    function get_enabled: gboolean; cdecl; inline;
    function get_mimetypes: PGSList; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_path: Pgchar; cdecl; inline;
    procedure set_enabled(enabled: gboolean); cdecl; inline;
    property enabled: gboolean read get_enabled write set_enabled;
  end;

  TWebKitWebPluginPrivate = record
  end;



  PPWebKitWebPluginClass = ^PWebKitWebPluginClass;
  PWebKitWebPluginClass = ^TWebKitWebPluginClass;
  TWebKitWebPluginClass = object
    parentClass: TGObjectClass;
  end;

  PPWebKitWebPluginDatabase = ^PWebKitWebPluginDatabase;
  PWebKitWebPluginDatabase = ^TWebKitWebPluginDatabase;

  PPWebKitWebPluginDatabasePrivate = ^PWebKitWebPluginDatabasePrivate;
  PWebKitWebPluginDatabasePrivate = ^TWebKitWebPluginDatabasePrivate;
  TWebKitWebPluginDatabase = object(TGObject)
    priv: PWebKitWebPluginDatabasePrivate;
    procedure plugins_list_free(list: PGSList); cdecl; inline; static;
    function get_plugin_for_mimetype(mime_type: Pgchar): PWebKitWebPlugin; cdecl; inline;
    function get_plugins: PGSList; cdecl; inline;
    procedure refresh; cdecl; inline;
  end;

  TWebKitWebPluginDatabasePrivate = record
  end;



  PPWebKitWebPluginDatabaseClass = ^PWebKitWebPluginDatabaseClass;
  PWebKitWebPluginDatabaseClass = ^TWebKitWebPluginDatabaseClass;
  TWebKitWebPluginDatabaseClass = object
    parentClass: TGObjectClass;
  end;

  PPWebKitWebPolicyDecision = ^PWebKitWebPolicyDecision;
  PWebKitWebPolicyDecision = ^TWebKitWebPolicyDecision;

  PPWebKitWebPolicyDecisionPrivate = ^PWebKitWebPolicyDecisionPrivate;
  PWebKitWebPolicyDecisionPrivate = ^TWebKitWebPolicyDecisionPrivate;
  TWebKitWebPolicyDecision = object(TGObject)
    priv: PWebKitWebPolicyDecisionPrivate;
    procedure download; cdecl; inline;
    procedure ignore; cdecl; inline;
    procedure use; cdecl; inline;
  end;

  TWebKitWebPolicyDecisionPrivate = record
  end;



  PPWebKitWebPolicyDecisionClass = ^PWebKitWebPolicyDecisionClass;
  PWebKitWebPolicyDecisionClass = ^TWebKitWebPolicyDecisionClass;
  TWebKitWebPolicyDecisionClass = object
    parent_class: TGObjectClass;
    _webkit_reserved0: procedure; cdecl;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
  end;

  TWebKitWebResourcePrivate = record
  end;



  PPWebKitWebResourceClass = ^PWebKitWebResourceClass;
  PWebKitWebResourceClass = ^TWebKitWebResourceClass;
  TWebKitWebResourceClass = object
    parent_class: TGObjectClass;
    _webkit_reserved0: procedure; cdecl;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
  end;

  PPWebKitWebSettingsPrivate = ^PWebKitWebSettingsPrivate;
  PWebKitWebSettingsPrivate = ^TWebKitWebSettingsPrivate;
  TWebKitWebSettings = object(TGObject)
    priv: PWebKitWebSettingsPrivate;
    function new: PWebKitWebSettings; cdecl; inline; static;
    function copy: PWebKitWebSettings; cdecl; inline;
    function get_user_agent: Pgchar; cdecl; inline;
    //property auto_load_images: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_auto_load_images  { property is writeable but setter not declared } ;
    //property auto_resize_window: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_auto_resize_window  { property is writeable but setter not declared } ;
    //property auto_shrink_images: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_auto_shrink_images  { property is writeable but setter not declared } ;
    //property cursive_font_family: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cursive_font_family  { property is writeable but setter not declared } ;
    //property default_encoding: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_default_encoding  { property is writeable but setter not declared } ;
    //property default_font_family: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_default_font_family  { property is writeable but setter not declared } ;
    //property default_font_size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_default_font_size  { property is writeable but setter not declared } ;
    //property default_monospace_font_size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_default_monospace_font_size  { property is writeable but setter not declared } ;
    //property editing_behavior: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_editing_behavior  { property is writeable but setter not declared } ;
    //property enable_accelerated_compositing: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_accelerated_compositing  { property is writeable but setter not declared } ;
    //property enable_caret_browsing: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_caret_browsing  { property is writeable but setter not declared } ;
    //property enable_css_shaders: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_css_shaders  { property is writeable but setter not declared } ;
    //property enable_default_context_menu: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_default_context_menu  { property is writeable but setter not declared } ;
    //property enable_developer_extras: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_developer_extras  { property is writeable but setter not declared } ;
    //property enable_display_of_insecure_content: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_display_of_insecure_content  { property is writeable but setter not declared } ;
    //property enable_dns_prefetching: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_dns_prefetching  { property is writeable but setter not declared } ;
    //property enable_dom_paste: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_dom_paste  { property is writeable but setter not declared } ;
    //property enable_file_access_from_file_uris: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_file_access_from_file_uris  { property is writeable but setter not declared } ;
    //property enable_frame_flattening: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_frame_flattening  { property is writeable but setter not declared } ;
    //property enable_fullscreen: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_fullscreen  { property is writeable but setter not declared } ;
    //property enable_html5_database: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_html5_database  { property is writeable but setter not declared } ;
    //property enable_html5_local_storage: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_html5_local_storage  { property is writeable but setter not declared } ;
    //property enable_hyperlink_auditing: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_hyperlink_auditing  { property is writeable but setter not declared } ;
    //property enable_java_applet: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_java_applet  { property is writeable but setter not declared } ;
    //property enable_media_stream: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_media_stream  { property is writeable but setter not declared } ;
    //property enable_offline_web_application_cache: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_offline_web_application_cache  { property is writeable but setter not declared } ;
    //property enable_page_cache: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_page_cache  { property is writeable but setter not declared } ;
    //property enable_plugins: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_plugins  { property is writeable but setter not declared } ;
    //property enable_private_browsing: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_private_browsing  { property is writeable but setter not declared } ;
    //property enable_running_of_insecure_content: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_running_of_insecure_content  { property is writeable but setter not declared } ;
    //property enable_scripts: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_scripts  { property is writeable but setter not declared } ;
    //property enable_site_specific_quirks: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_site_specific_quirks  { property is writeable but setter not declared } ;
    //property enable_smooth_scrolling: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_smooth_scrolling  { property is writeable but setter not declared } ;
    //property enable_spatial_navigation: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_spatial_navigation  { property is writeable but setter not declared } ;
    //property enable_spell_checking: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_spell_checking  { property is writeable but setter not declared } ;
    //property enable_universal_access_from_file_uris: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_universal_access_from_file_uris  { property is writeable but setter not declared } ;
    //property enable_webaudio: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_webaudio  { property is writeable but setter not declared } ;
    //property enable_webgl: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_webgl  { property is writeable but setter not declared } ;
    //property enable_xss_auditor: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_xss_auditor  { property is writeable but setter not declared } ;
    //property enforce_96_dpi: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enforce_96_dpi  { property is writeable but setter not declared } ;
    //property fantasy_font_family: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_fantasy_font_family  { property is writeable but setter not declared } ;
    //property html5_local_storage_database_path: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_html5_local_storage_database_path  { property is writeable but setter not declared } ;
    //property javascript_can_access_clipboard: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_javascript_can_access_clipboard  { property is writeable but setter not declared } ;
    //property javascript_can_open_windows_automatically: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_javascript_can_open_windows_automatically  { property is writeable but setter not declared } ;
    //property media_playback_allows_inline: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_media_playback_allows_inline  { property is writeable but setter not declared } ;
    //property media_playback_requires_user_gesture: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_media_playback_requires_user_gesture  { property is writeable but setter not declared } ;
    //property minimum_font_size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_minimum_font_size  { property is writeable but setter not declared } ;
    //property minimum_logical_font_size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_minimum_logical_font_size  { property is writeable but setter not declared } ;
    //property monospace_font_family: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_monospace_font_family  { property is writeable but setter not declared } ;
    //property print_backgrounds: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_print_backgrounds  { property is writeable but setter not declared } ;
    //property resizable_text_areas: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_resizable_text_areas  { property is writeable but setter not declared } ;
    //property respect_image_orientation: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_respect_image_orientation  { property is writeable but setter not declared } ;
    //property sans_serif_font_family: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_sans_serif_font_family  { property is writeable but setter not declared } ;
    //property serif_font_family: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_serif_font_family  { property is writeable but setter not declared } ;
    //property spell_checking_languages: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_spell_checking_languages  { property is writeable but setter not declared } ;
    //property tab_key_cycles_through_elements: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tab_key_cycles_through_elements  { property is writeable but setter not declared } ;
    property user_agent: Pgchar read get_user_agent  { property is writeable but setter not declared } ;
    //property user_stylesheet_uri: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_user_stylesheet_uri  { property is writeable but setter not declared } ;
    //property zoom_step: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_zoom_step  { property is writeable but setter not declared } ;
  end;

  TWebKitWebSettingsPrivate = record
  end;



  PPWebKitWebSettingsClass = ^PWebKitWebSettingsClass;
  PWebKitWebSettingsClass = ^TWebKitWebSettingsClass;
  TWebKitWebSettingsClass = object
    parent_class: TGObjectClass;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
    _webkit_reserved4: procedure; cdecl;
  end;

  PPWebKitWebWindowFeaturesPrivate = ^PWebKitWebWindowFeaturesPrivate;
  PWebKitWebWindowFeaturesPrivate = ^TWebKitWebWindowFeaturesPrivate;
  TWebKitWebWindowFeatures = object(TGObject)
    priv: PWebKitWebWindowFeaturesPrivate;
    function new: PWebKitWebWindowFeatures; cdecl; inline; static;
    function equal(features2: PWebKitWebWindowFeatures): gboolean; cdecl; inline;
    //property fullscreen: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_fullscreen  { property is writeable but setter not declared } ;
    //property height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_height  { property is writeable but setter not declared } ;
    //property locationbar_visible: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_locationbar_visible  { property is writeable but setter not declared } ;
    //property menubar_visible: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_menubar_visible  { property is writeable but setter not declared } ;
    //property scrollbar_visible: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_scrollbar_visible  { property is writeable but setter not declared } ;
    //property statusbar_visible: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_statusbar_visible  { property is writeable but setter not declared } ;
    //property toolbar_visible: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_toolbar_visible  { property is writeable but setter not declared } ;
    //property width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_width  { property is writeable but setter not declared } ;
    //property x: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_x  { property is writeable but setter not declared } ;
    //property y: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_y  { property is writeable but setter not declared } ;
  end;

  TWebKitWebViewPrivate = record
  end;



  PPWebKitWebViewClass = ^PWebKitWebViewClass;
  PWebKitWebViewClass = ^TWebKitWebViewClass;
  TWebKitWebViewClass = object
    parent_class: TGtkContainerClass;
    create_web_view: function(web_view: PWebKitWebView; web_frame: PWebKitWebFrame): PWebKitWebView; cdecl;
    web_view_ready: function(web_view: PWebKitWebView): gboolean; cdecl;
    close_web_view: function(web_view: PWebKitWebView): gboolean; cdecl;
    navigation_requested: function(web_view: PWebKitWebView; frame: PWebKitWebFrame; request: PWebKitNetworkRequest): TWebKitNavigationResponse; cdecl;
    window_object_cleared: procedure(web_view: PWebKitWebView; frame: PWebKitWebFrame; context: TJSGlobalContextRef; window_object: TJSObjectRef); cdecl;
    choose_file: function(web_view: PWebKitWebView; frame: PWebKitWebFrame; old_file: Pgchar): Pgchar; cdecl;
    script_alert: function(web_view: PWebKitWebView; frame: PWebKitWebFrame; alert_message: Pgchar): gboolean; cdecl;
    script_confirm: function(web_view: PWebKitWebView; frame: PWebKitWebFrame; confirm_message: Pgchar; did_confirm: Pgboolean): gboolean; cdecl;
    script_prompt: function(web_view: PWebKitWebView; frame: PWebKitWebFrame; message: Pgchar; default_value: Pgchar; value: PPgchar): gboolean; cdecl;
    console_message: function(web_view: PWebKitWebView; message: Pgchar; line_number: guint; source_id: Pgchar): gboolean; cdecl;
    select_all: procedure(web_view: PWebKitWebView); cdecl;
    cut_clipboard: procedure(web_view: PWebKitWebView); cdecl;
    copy_clipboard: procedure(web_view: PWebKitWebView); cdecl;
    paste_clipboard: procedure(web_view: PWebKitWebView); cdecl;
    move_cursor: function(web_view: PWebKitWebView; step: TGtkMovementStep; count: gint): gboolean; cdecl;
    set_scroll_adjustments: procedure(web_view: PWebKitWebView; hadjustment: PGtkAdjustment; vadjustment: PGtkAdjustment); cdecl;
    undo: procedure(web_view: PWebKitWebView); cdecl;
    redo: procedure(web_view: PWebKitWebView); cdecl;
    should_allow_editing_action: function(web_view: PWebKitWebView): gboolean; cdecl;
    entering_fullscreen: function(web_view: PWebKitWebView): gboolean; cdecl;
    leaving_fullscreen: function(web_view: PWebKitWebView): gboolean; cdecl;
    run_file_chooser: function(web_view: PWebKitWebView; request: PWebKitFileChooserRequest): gboolean; cdecl;
  end;

  PPWebKitWebViewTargetInfo = ^PWebKitWebViewTargetInfo;
  PWebKitWebViewTargetInfo = ^TWebKitWebViewTargetInfo;

  TWebKitWebWindowFeaturesPrivate = record
  end;



  PPWebKitWebWindowFeaturesClass = ^PWebKitWebWindowFeaturesClass;
  PWebKitWebWindowFeaturesClass = ^TWebKitWebWindowFeaturesClass;
  TWebKitWebWindowFeaturesClass = object
    parent_class: TGObjectClass;
    _webkit_reserved1: procedure; cdecl;
    _webkit_reserved2: procedure; cdecl;
    _webkit_reserved3: procedure; cdecl;
    _webkit_reserved4: procedure; cdecl;
  end;

  PP_WebKitWebPluginMIMEType = ^P_WebKitWebPluginMIMEType;
  P_WebKitWebPluginMIMEType = ^T_WebKitWebPluginMIMEType;

  T_WebKitWebPluginMIMEType = record
    name: Pgchar;
    description: Pgchar;
    extensions: PPgchar;
  end;



function webkit_application_cache_get_database_directory_path: Pgchar; cdecl; external;
function webkit_application_cache_get_maximum_size: unsigned_long_long; cdecl; external;
function webkit_check_version(major: guint; minor: guint; micro: guint): gboolean; cdecl; external;
function webkit_context_menu_item_get_action(item: PGtkMenuItem): TWebKitContextMenuAction; cdecl; external;
function webkit_dom_attr_get_is_id(self: PWebKitDOMAttr): gboolean; cdecl; external;
function webkit_dom_attr_get_name(self: PWebKitDOMAttr): Pgchar; cdecl; external;
function webkit_dom_attr_get_owner_element(self: PWebKitDOMAttr): PWebKitDOMElement; cdecl; external;
function webkit_dom_attr_get_specified(self: PWebKitDOMAttr): gboolean; cdecl; external;
function webkit_dom_attr_get_type: TGType; cdecl; external;
function webkit_dom_attr_get_value(self: PWebKitDOMAttr): Pgchar; cdecl; external;
function webkit_dom_bar_info_get_type: TGType; cdecl; external;
function webkit_dom_bar_info_get_visible(self: PWebKitDOMBarInfo): gboolean; cdecl; external;
function webkit_dom_blob_get_size(self: PWebKitDOMBlob): guint64; cdecl; external;
function webkit_dom_blob_get_type: TGType; cdecl; external;
function webkit_dom_blob_slice(self: PWebKitDOMBlob; start: gint64; end_: gint64; contentType: Pgchar): PWebKitDOMBlob; cdecl; external;
function webkit_dom_blob_webkit_slice(self: PWebKitDOMBlob; start: gint64; end_: gint64; content_type: Pgchar): PWebKitDOMBlob; cdecl; external;
function webkit_dom_cdata_section_get_type: TGType; cdecl; external;
function webkit_dom_character_data_get_data(self: PWebKitDOMCharacterData): Pgchar; cdecl; external;
function webkit_dom_character_data_get_length(self: PWebKitDOMCharacterData): gulong; cdecl; external;
function webkit_dom_character_data_get_type: TGType; cdecl; external;
function webkit_dom_character_data_substring_data(self: PWebKitDOMCharacterData; offset: gulong; length: gulong; error: PPGError): Pgchar; cdecl; external;
function webkit_dom_comment_get_type: TGType; cdecl; external;
function webkit_dom_console_get_memory(self: PWebKitDOMConsole): PWebKitDOMMemoryInfo; cdecl; external;
function webkit_dom_console_get_type: TGType; cdecl; external;
function webkit_dom_css_rule_get_css_text(self: PWebKitDOMCSSRule): Pgchar; cdecl; external;
function webkit_dom_css_rule_get_parent_rule(self: PWebKitDOMCSSRule): PWebKitDOMCSSRule; cdecl; external;
function webkit_dom_css_rule_get_parent_style_sheet(self: PWebKitDOMCSSRule): PWebKitDOMCSSStyleSheet; cdecl; external;
function webkit_dom_css_rule_get_type: TGType; cdecl; external;
function webkit_dom_css_rule_list_get_length(self: PWebKitDOMCSSRuleList): gulong; cdecl; external;
function webkit_dom_css_rule_list_get_type: TGType; cdecl; external;
function webkit_dom_css_rule_list_item(self: PWebKitDOMCSSRuleList; index: gulong): PWebKitDOMCSSRule; cdecl; external;
function webkit_dom_css_style_declaration_get_css_text(self: PWebKitDOMCSSStyleDeclaration): Pgchar; cdecl; external;
function webkit_dom_css_style_declaration_get_length(self: PWebKitDOMCSSStyleDeclaration): gulong; cdecl; external;
function webkit_dom_css_style_declaration_get_parent_rule(self: PWebKitDOMCSSStyleDeclaration): PWebKitDOMCSSRule; cdecl; external;
function webkit_dom_css_style_declaration_get_property_css_value(self: PWebKitDOMCSSStyleDeclaration; propertyName: Pgchar): PWebKitDOMCSSValue; cdecl; external;
function webkit_dom_css_style_declaration_get_property_priority(self: PWebKitDOMCSSStyleDeclaration; propertyName: Pgchar): Pgchar; cdecl; external;
function webkit_dom_css_style_declaration_get_property_shorthand(self: PWebKitDOMCSSStyleDeclaration; propertyName: Pgchar): Pgchar; cdecl; external;
function webkit_dom_css_style_declaration_get_property_value(self: PWebKitDOMCSSStyleDeclaration; propertyName: Pgchar): Pgchar; cdecl; external;
function webkit_dom_css_style_declaration_get_type: TGType; cdecl; external;
function webkit_dom_css_style_declaration_is_property_implicit(self: PWebKitDOMCSSStyleDeclaration; propertyName: Pgchar): gboolean; cdecl; external;
function webkit_dom_css_style_declaration_item(self: PWebKitDOMCSSStyleDeclaration; index: gulong): Pgchar; cdecl; external;
function webkit_dom_css_style_declaration_remove_property(self: PWebKitDOMCSSStyleDeclaration; propertyName: Pgchar; error: PPGError): Pgchar; cdecl; external;
function webkit_dom_css_style_sheet_add_rule(self: PWebKitDOMCSSStyleSheet; selector: Pgchar; style: Pgchar; index: gulong; error: PPGError): glong; cdecl; external;
function webkit_dom_css_style_sheet_get_css_rules(self: PWebKitDOMCSSStyleSheet): PWebKitDOMCSSRuleList; cdecl; external;
function webkit_dom_css_style_sheet_get_owner_rule(self: PWebKitDOMCSSStyleSheet): PWebKitDOMCSSRule; cdecl; external;
function webkit_dom_css_style_sheet_get_rules(self: PWebKitDOMCSSStyleSheet): PWebKitDOMCSSRuleList; cdecl; external;
function webkit_dom_css_style_sheet_get_type: TGType; cdecl; external;
function webkit_dom_css_style_sheet_insert_rule(self: PWebKitDOMCSSStyleSheet; rule: Pgchar; index: gulong; error: PPGError): gulong; cdecl; external;
function webkit_dom_css_value_get_css_text(self: PWebKitDOMCSSValue): Pgchar; cdecl; external;
function webkit_dom_css_value_get_css_value_type(self: PWebKitDOMCSSValue): gushort; cdecl; external;
function webkit_dom_css_value_get_type: TGType; cdecl; external;
function webkit_dom_database_get_type: TGType; cdecl; external;
function webkit_dom_database_get_version(self: PWebKitDOMDatabase): Pgchar; cdecl; external;
function webkit_dom_document_adopt_node(self: PWebKitDOMDocument; source: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_dom_document_caret_range_from_point(self: PWebKitDOMDocument; x: glong; y: glong): PWebKitDOMRange; cdecl; external;
function webkit_dom_document_create_attribute(self: PWebKitDOMDocument; name: Pgchar; error: PPGError): PWebKitDOMAttr; cdecl; external;
function webkit_dom_document_create_attribute_ns(self: PWebKitDOMDocument; namespaceURI: Pgchar; qualifiedName: Pgchar; error: PPGError): PWebKitDOMAttr; cdecl; external;
function webkit_dom_document_create_cdata_section(self: PWebKitDOMDocument; data: Pgchar; error: PPGError): PWebKitDOMCDATASection; cdecl; external;
function webkit_dom_document_create_comment(self: PWebKitDOMDocument; data: Pgchar): PWebKitDOMComment; cdecl; external;
function webkit_dom_document_create_css_style_declaration(self: PWebKitDOMDocument): PWebKitDOMCSSStyleDeclaration; cdecl; external;
function webkit_dom_document_create_document_fragment(self: PWebKitDOMDocument): PWebKitDOMDocumentFragment; cdecl; external;
function webkit_dom_document_create_element(self: PWebKitDOMDocument; tagName: Pgchar; error: PPGError): PWebKitDOMElement; cdecl; external;
function webkit_dom_document_create_element_ns(self: PWebKitDOMDocument; namespaceURI: Pgchar; qualifiedName: Pgchar; error: PPGError): PWebKitDOMElement; cdecl; external;
function webkit_dom_document_create_entity_reference(self: PWebKitDOMDocument; name: Pgchar; error: PPGError): PWebKitDOMEntityReference; cdecl; external;
function webkit_dom_document_create_event(self: PWebKitDOMDocument; eventType: Pgchar; error: PPGError): PWebKitDOMEvent; cdecl; external;
function webkit_dom_document_create_expression(self: PWebKitDOMDocument; expression: Pgchar; resolver: PWebKitDOMXPathNSResolver; error: PPGError): PWebKitDOMXPathExpression; cdecl; external;
function webkit_dom_document_create_node_iterator(self: PWebKitDOMDocument; root: PWebKitDOMNode; whatToShow: gulong; filter: PWebKitDOMNodeFilter; expandEntityReferences: gboolean; error: PPGError): PWebKitDOMNodeIterator; cdecl; external;
function webkit_dom_document_create_ns_resolver(self: PWebKitDOMDocument; nodeResolver: PWebKitDOMNode): PWebKitDOMXPathNSResolver; cdecl; external;
function webkit_dom_document_create_processing_instruction(self: PWebKitDOMDocument; target: Pgchar; data: Pgchar; error: PPGError): PWebKitDOMProcessingInstruction; cdecl; external;
function webkit_dom_document_create_range(self: PWebKitDOMDocument): PWebKitDOMRange; cdecl; external;
function webkit_dom_document_create_text_node(self: PWebKitDOMDocument; data: Pgchar): PWebKitDOMText; cdecl; external;
function webkit_dom_document_create_tree_walker(self: PWebKitDOMDocument; root: PWebKitDOMNode; whatToShow: gulong; filter: PWebKitDOMNodeFilter; expandEntityReferences: gboolean; error: PPGError): PWebKitDOMTreeWalker; cdecl; external;
function webkit_dom_document_element_from_point(self: PWebKitDOMDocument; x: glong; y: glong): PWebKitDOMElement; cdecl; external;
function webkit_dom_document_evaluate(self: PWebKitDOMDocument; expression: Pgchar; contextNode: PWebKitDOMNode; resolver: PWebKitDOMXPathNSResolver; type_: gushort; inResult: PWebKitDOMXPathResult; error: PPGError): PWebKitDOMXPathResult; cdecl; external;
function webkit_dom_document_exec_command(self: PWebKitDOMDocument; command: Pgchar; userInterface: gboolean; value: Pgchar): gboolean; cdecl; external;
function webkit_dom_document_fragment_get_type: TGType; cdecl; external;
function webkit_dom_document_fragment_query_selector(self: PWebKitDOMDocumentFragment; selectors: Pgchar; error: PPGError): PWebKitDOMElement; cdecl; external;
function webkit_dom_document_fragment_query_selector_all(self: PWebKitDOMDocumentFragment; selectors: Pgchar; error: PPGError): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_document_get_anchors(self: PWebKitDOMDocument): PWebKitDOMHTMLCollection; cdecl; external;
function webkit_dom_document_get_applets(self: PWebKitDOMDocument): PWebKitDOMHTMLCollection; cdecl; external;
function webkit_dom_document_get_body(self: PWebKitDOMDocument): PWebKitDOMHTMLElement; cdecl; external;
function webkit_dom_document_get_character_set(self: PWebKitDOMDocument): Pgchar; cdecl; external;
function webkit_dom_document_get_charset(self: PWebKitDOMDocument): Pgchar; cdecl; external;
function webkit_dom_document_get_compat_mode(self: PWebKitDOMDocument): Pgchar; cdecl; external;
function webkit_dom_document_get_cookie(self: PWebKitDOMDocument; error: PPGError): Pgchar; cdecl; external;
function webkit_dom_document_get_default_charset(self: PWebKitDOMDocument): Pgchar; cdecl; external;
function webkit_dom_document_get_default_view(self: PWebKitDOMDocument): PWebKitDOMDOMWindow; cdecl; external;
function webkit_dom_document_get_doctype(self: PWebKitDOMDocument): PWebKitDOMDocumentType; cdecl; external;
function webkit_dom_document_get_document_element(self: PWebKitDOMDocument): PWebKitDOMElement; cdecl; external;
function webkit_dom_document_get_document_uri(self: PWebKitDOMDocument): Pgchar; cdecl; external;
function webkit_dom_document_get_domain(self: PWebKitDOMDocument): Pgchar; cdecl; external;
function webkit_dom_document_get_element_by_id(self: PWebKitDOMDocument; elementId: Pgchar): PWebKitDOMElement; cdecl; external;
function webkit_dom_document_get_elements_by_class_name(self: PWebKitDOMDocument; tagname: Pgchar): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_document_get_elements_by_name(self: PWebKitDOMDocument; elementName: Pgchar): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_document_get_elements_by_tag_name(self: PWebKitDOMDocument; tagname: Pgchar): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_document_get_elements_by_tag_name_ns(self: PWebKitDOMDocument; namespaceURI: Pgchar; localName: Pgchar): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_document_get_forms(self: PWebKitDOMDocument): PWebKitDOMHTMLCollection; cdecl; external;
function webkit_dom_document_get_head(self: PWebKitDOMDocument): PWebKitDOMHTMLHeadElement; cdecl; external;
function webkit_dom_document_get_images(self: PWebKitDOMDocument): PWebKitDOMHTMLCollection; cdecl; external;
function webkit_dom_document_get_implementation(self: PWebKitDOMDocument): PWebKitDOMDOMImplementation; cdecl; external;
function webkit_dom_document_get_input_encoding(self: PWebKitDOMDocument): Pgchar; cdecl; external;
function webkit_dom_document_get_last_modified(self: PWebKitDOMDocument): Pgchar; cdecl; external;
function webkit_dom_document_get_links(self: PWebKitDOMDocument): PWebKitDOMHTMLCollection; cdecl; external;
function webkit_dom_document_get_override_style(self: PWebKitDOMDocument; element: PWebKitDOMElement; pseudoElement: Pgchar): PWebKitDOMCSSStyleDeclaration; cdecl; external;
function webkit_dom_document_get_preferred_stylesheet_set(self: PWebKitDOMDocument): Pgchar; cdecl; external;
function webkit_dom_document_get_ready_state(self: PWebKitDOMDocument): Pgchar; cdecl; external;
function webkit_dom_document_get_referrer(self: PWebKitDOMDocument): Pgchar; cdecl; external;
function webkit_dom_document_get_security_policy(self: PWebKitDOMDocument): PWebKitDOMDOMSecurityPolicy; cdecl; external;
function webkit_dom_document_get_selected_stylesheet_set(self: PWebKitDOMDocument): Pgchar; cdecl; external;
function webkit_dom_document_get_style_sheets(self: PWebKitDOMDocument): PWebKitDOMStyleSheetList; cdecl; external;
function webkit_dom_document_get_title(self: PWebKitDOMDocument): Pgchar; cdecl; external;
function webkit_dom_document_get_type: TGType; cdecl; external;
function webkit_dom_document_get_webkit_current_full_screen_element(self: PWebKitDOMDocument): PWebKitDOMElement; cdecl; external;
function webkit_dom_document_get_webkit_full_screen_keyboard_input_allowed(self: PWebKitDOMDocument): gboolean; cdecl; external;
function webkit_dom_document_get_webkit_fullscreen_element(self: PWebKitDOMDocument): PWebKitDOMElement; cdecl; external;
function webkit_dom_document_get_webkit_fullscreen_enabled(self: PWebKitDOMDocument): gboolean; cdecl; external;
function webkit_dom_document_get_webkit_hidden(self: PWebKitDOMDocument): gboolean; cdecl; external;
function webkit_dom_document_get_webkit_is_full_screen(self: PWebKitDOMDocument): gboolean; cdecl; external;
function webkit_dom_document_get_webkit_pointer_lock_element(self: PWebKitDOMDocument): PWebKitDOMElement; cdecl; external;
function webkit_dom_document_get_webkit_visibility_state(self: PWebKitDOMDocument): Pgchar; cdecl; external;
function webkit_dom_document_get_xml_encoding(self: PWebKitDOMDocument): Pgchar; cdecl; external;
function webkit_dom_document_get_xml_standalone(self: PWebKitDOMDocument): gboolean; cdecl; external;
function webkit_dom_document_get_xml_version(self: PWebKitDOMDocument): Pgchar; cdecl; external;
function webkit_dom_document_import_node(self: PWebKitDOMDocument; importedNode: PWebKitDOMNode; deep: gboolean; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_dom_document_query_command_enabled(self: PWebKitDOMDocument; command: Pgchar): gboolean; cdecl; external;
function webkit_dom_document_query_command_indeterm(self: PWebKitDOMDocument; command: Pgchar): gboolean; cdecl; external;
function webkit_dom_document_query_command_state(self: PWebKitDOMDocument; command: Pgchar): gboolean; cdecl; external;
function webkit_dom_document_query_command_supported(self: PWebKitDOMDocument; command: Pgchar): gboolean; cdecl; external;
function webkit_dom_document_query_command_value(self: PWebKitDOMDocument; command: Pgchar): Pgchar; cdecl; external;
function webkit_dom_document_query_selector(self: PWebKitDOMDocument; selectors: Pgchar; error: PPGError): PWebKitDOMElement; cdecl; external;
function webkit_dom_document_query_selector_all(self: PWebKitDOMDocument; selectors: Pgchar; error: PPGError): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_document_type_get_entities(self: PWebKitDOMDocumentType): PWebKitDOMNamedNodeMap; cdecl; external;
function webkit_dom_document_type_get_internal_subset(self: PWebKitDOMDocumentType): Pgchar; cdecl; external;
function webkit_dom_document_type_get_name(self: PWebKitDOMDocumentType): Pgchar; cdecl; external;
function webkit_dom_document_type_get_notations(self: PWebKitDOMDocumentType): PWebKitDOMNamedNodeMap; cdecl; external;
function webkit_dom_document_type_get_public_id(self: PWebKitDOMDocumentType): Pgchar; cdecl; external;
function webkit_dom_document_type_get_system_id(self: PWebKitDOMDocumentType): Pgchar; cdecl; external;
function webkit_dom_document_type_get_type: TGType; cdecl; external;
function webkit_dom_document_webkit_get_named_flows(self: PWebKitDOMDocument): PWebKitDOMDOMNamedFlowCollection; cdecl; external;
function webkit_dom_dom_application_cache_dispatch_event(self: PWebKitDOMDOMApplicationCache; evt: PWebKitDOMEvent; error: PPGError): gboolean; cdecl; external;
function webkit_dom_dom_application_cache_get_status(self: PWebKitDOMDOMApplicationCache): gushort; cdecl; external;
function webkit_dom_dom_application_cache_get_type: TGType; cdecl; external;
function webkit_dom_dom_implementation_create_css_style_sheet(self: PWebKitDOMDOMImplementation; title: Pgchar; media: Pgchar; error: PPGError): PWebKitDOMCSSStyleSheet; cdecl; external;
function webkit_dom_dom_implementation_create_document(self: PWebKitDOMDOMImplementation; namespaceURI: Pgchar; qualifiedName: Pgchar; doctype: PWebKitDOMDocumentType; error: PPGError): PWebKitDOMDocument; cdecl; external;
function webkit_dom_dom_implementation_create_document_type(self: PWebKitDOMDOMImplementation; qualifiedName: Pgchar; publicId: Pgchar; systemId: Pgchar; error: PPGError): PWebKitDOMDocumentType; cdecl; external;
function webkit_dom_dom_implementation_create_html_document(self: PWebKitDOMDOMImplementation; title: Pgchar): PWebKitDOMHTMLDocument; cdecl; external;
function webkit_dom_dom_implementation_get_type: TGType; cdecl; external;
function webkit_dom_dom_implementation_has_feature(self: PWebKitDOMDOMImplementation; feature: Pgchar; version: Pgchar): gboolean; cdecl; external;
function webkit_dom_dom_mime_type_array_get_length(self: PWebKitDOMDOMMimeTypeArray): gulong; cdecl; external;
function webkit_dom_dom_mime_type_array_get_type: TGType; cdecl; external;
function webkit_dom_dom_mime_type_array_item(self: PWebKitDOMDOMMimeTypeArray; index: gulong): PWebKitDOMDOMMimeType; cdecl; external;
function webkit_dom_dom_mime_type_array_named_item(self: PWebKitDOMDOMMimeTypeArray; name: Pgchar): PWebKitDOMDOMMimeType; cdecl; external;
function webkit_dom_dom_mime_type_get_description(self: PWebKitDOMDOMMimeType): Pgchar; cdecl; external;
function webkit_dom_dom_mime_type_get_enabled_plugin(self: PWebKitDOMDOMMimeType): PWebKitDOMDOMPlugin; cdecl; external;
function webkit_dom_dom_mime_type_get_suffixes(self: PWebKitDOMDOMMimeType): Pgchar; cdecl; external;
function webkit_dom_dom_mime_type_get_type: TGType; cdecl; external;
function webkit_dom_dom_named_flow_collection_get_length(self: PWebKitDOMDOMNamedFlowCollection): gulong; cdecl; external;
function webkit_dom_dom_named_flow_collection_get_type: TGType; cdecl; external;
function webkit_dom_dom_named_flow_collection_item(self: PWebKitDOMDOMNamedFlowCollection; index: gulong): PWebKitDOMWebKitNamedFlow; cdecl; external;
function webkit_dom_dom_named_flow_collection_named_item(self: PWebKitDOMDOMNamedFlowCollection; name: Pgchar): PWebKitDOMWebKitNamedFlow; cdecl; external;
function webkit_dom_dom_plugin_array_get_length(self: PWebKitDOMDOMPluginArray): gulong; cdecl; external;
function webkit_dom_dom_plugin_array_get_type: TGType; cdecl; external;
function webkit_dom_dom_plugin_array_item(self: PWebKitDOMDOMPluginArray; index: gulong): PWebKitDOMDOMPlugin; cdecl; external;
function webkit_dom_dom_plugin_array_named_item(self: PWebKitDOMDOMPluginArray; name: Pgchar): PWebKitDOMDOMPlugin; cdecl; external;
function webkit_dom_dom_plugin_get_description(self: PWebKitDOMDOMPlugin): Pgchar; cdecl; external;
function webkit_dom_dom_plugin_get_filename(self: PWebKitDOMDOMPlugin): Pgchar; cdecl; external;
function webkit_dom_dom_plugin_get_length(self: PWebKitDOMDOMPlugin): gulong; cdecl; external;
function webkit_dom_dom_plugin_get_name(self: PWebKitDOMDOMPlugin): Pgchar; cdecl; external;
function webkit_dom_dom_plugin_get_type: TGType; cdecl; external;
function webkit_dom_dom_plugin_item(self: PWebKitDOMDOMPlugin; index: gulong): PWebKitDOMDOMMimeType; cdecl; external;
function webkit_dom_dom_plugin_named_item(self: PWebKitDOMDOMPlugin; name: Pgchar): PWebKitDOMDOMMimeType; cdecl; external;
function webkit_dom_dom_security_policy_allows_connection_to(self: PWebKitDOMDOMSecurityPolicy; url: Pgchar): gboolean; cdecl; external;
function webkit_dom_dom_security_policy_allows_font_from(self: PWebKitDOMDOMSecurityPolicy; url: Pgchar): gboolean; cdecl; external;
function webkit_dom_dom_security_policy_allows_form_action(self: PWebKitDOMDOMSecurityPolicy; url: Pgchar): gboolean; cdecl; external;
function webkit_dom_dom_security_policy_allows_frame_from(self: PWebKitDOMDOMSecurityPolicy; url: Pgchar): gboolean; cdecl; external;
function webkit_dom_dom_security_policy_allows_image_from(self: PWebKitDOMDOMSecurityPolicy; url: Pgchar): gboolean; cdecl; external;
function webkit_dom_dom_security_policy_allows_media_from(self: PWebKitDOMDOMSecurityPolicy; url: Pgchar): gboolean; cdecl; external;
function webkit_dom_dom_security_policy_allows_object_from(self: PWebKitDOMDOMSecurityPolicy; url: Pgchar): gboolean; cdecl; external;
function webkit_dom_dom_security_policy_allows_plugin_type(self: PWebKitDOMDOMSecurityPolicy; type_: Pgchar): gboolean; cdecl; external;
function webkit_dom_dom_security_policy_allows_script_from(self: PWebKitDOMDOMSecurityPolicy; url: Pgchar): gboolean; cdecl; external;
function webkit_dom_dom_security_policy_allows_style_from(self: PWebKitDOMDOMSecurityPolicy; url: Pgchar): gboolean; cdecl; external;
function webkit_dom_dom_security_policy_get_allows_eval(self: PWebKitDOMDOMSecurityPolicy): gboolean; cdecl; external;
function webkit_dom_dom_security_policy_get_allows_inline_script(self: PWebKitDOMDOMSecurityPolicy): gboolean; cdecl; external;
function webkit_dom_dom_security_policy_get_allows_inline_style(self: PWebKitDOMDOMSecurityPolicy): gboolean; cdecl; external;
function webkit_dom_dom_security_policy_get_is_active(self: PWebKitDOMDOMSecurityPolicy): gboolean; cdecl; external;
function webkit_dom_dom_security_policy_get_report_ur_is(self: PWebKitDOMDOMSecurityPolicy): PWebKitDOMDOMStringList; cdecl; external;
function webkit_dom_dom_security_policy_get_type: TGType; cdecl; external;
function webkit_dom_dom_selection_contains_node(self: PWebKitDOMDOMSelection; node: PWebKitDOMNode; allowPartial: gboolean): gboolean; cdecl; external;
function webkit_dom_dom_selection_get_anchor_node(self: PWebKitDOMDOMSelection): PWebKitDOMNode; cdecl; external;
function webkit_dom_dom_selection_get_anchor_offset(self: PWebKitDOMDOMSelection): glong; cdecl; external;
function webkit_dom_dom_selection_get_base_node(self: PWebKitDOMDOMSelection): PWebKitDOMNode; cdecl; external;
function webkit_dom_dom_selection_get_base_offset(self: PWebKitDOMDOMSelection): glong; cdecl; external;
function webkit_dom_dom_selection_get_extent_node(self: PWebKitDOMDOMSelection): PWebKitDOMNode; cdecl; external;
function webkit_dom_dom_selection_get_extent_offset(self: PWebKitDOMDOMSelection): glong; cdecl; external;
function webkit_dom_dom_selection_get_focus_node(self: PWebKitDOMDOMSelection): PWebKitDOMNode; cdecl; external;
function webkit_dom_dom_selection_get_focus_offset(self: PWebKitDOMDOMSelection): glong; cdecl; external;
function webkit_dom_dom_selection_get_is_collapsed(self: PWebKitDOMDOMSelection): gboolean; cdecl; external;
function webkit_dom_dom_selection_get_range_at(self: PWebKitDOMDOMSelection; index: glong; error: PPGError): PWebKitDOMRange; cdecl; external;
function webkit_dom_dom_selection_get_range_count(self: PWebKitDOMDOMSelection): glong; cdecl; external;
function webkit_dom_dom_selection_get_type: TGType; cdecl; external;
function webkit_dom_dom_settable_token_list_get_type: TGType; cdecl; external;
function webkit_dom_dom_settable_token_list_get_value(self: PWebKitDOMDOMSettableTokenList): Pgchar; cdecl; external;
function webkit_dom_dom_string_list_contains(self: PWebKitDOMDOMStringList; string_: Pgchar): gboolean; cdecl; external;
function webkit_dom_dom_string_list_get_length(self: PWebKitDOMDOMStringList): gulong; cdecl; external;
function webkit_dom_dom_string_list_get_type: TGType; cdecl; external;
function webkit_dom_dom_string_list_item(self: PWebKitDOMDOMStringList; index: gulong): Pgchar; cdecl; external;
function webkit_dom_dom_string_map_get_type: TGType; cdecl; external;
function webkit_dom_dom_token_list_contains(self: PWebKitDOMDOMTokenList; token: Pgchar; error: PPGError): gboolean; cdecl; external;
function webkit_dom_dom_token_list_get_length(self: PWebKitDOMDOMTokenList): gulong; cdecl; external;
function webkit_dom_dom_token_list_get_type: TGType; cdecl; external;
function webkit_dom_dom_token_list_item(self: PWebKitDOMDOMTokenList; index: gulong): Pgchar; cdecl; external;
function webkit_dom_dom_token_list_toggle(self: PWebKitDOMDOMTokenList; token: Pgchar; force: gboolean; error: PPGError): gboolean; cdecl; external;
function webkit_dom_dom_window_atob(self: PWebKitDOMDOMWindow; string_: Pgchar; error: PPGError): Pgchar; cdecl; external;
function webkit_dom_dom_window_btoa(self: PWebKitDOMDOMWindow; string_: Pgchar; error: PPGError): Pgchar; cdecl; external;
function webkit_dom_dom_window_confirm(self: PWebKitDOMDOMWindow; message: Pgchar): gboolean; cdecl; external;
function webkit_dom_dom_window_css_get_type: TGType; cdecl; external;
function webkit_dom_dom_window_css_supports(self: PWebKitDOMDOMWindowCSS; property_: Pgchar; value: Pgchar): gboolean; cdecl; external;
function webkit_dom_dom_window_dispatch_event(self: PWebKitDOMDOMWindow; evt: PWebKitDOMEvent; error: PPGError): gboolean; cdecl; external;
function webkit_dom_dom_window_find(self: PWebKitDOMDOMWindow; string_: Pgchar; caseSensitive: gboolean; backwards: gboolean; wrap: gboolean; wholeWord: gboolean; searchInFrames: gboolean; showDialog: gboolean): gboolean; cdecl; external;
function webkit_dom_dom_window_get_application_cache(self: PWebKitDOMDOMWindow): PWebKitDOMDOMApplicationCache; cdecl; external;
function webkit_dom_dom_window_get_client_information(self: PWebKitDOMDOMWindow): PWebKitDOMNavigator; cdecl; external;
function webkit_dom_dom_window_get_closed(self: PWebKitDOMDOMWindow): gboolean; cdecl; external;
function webkit_dom_dom_window_get_computed_style(self: PWebKitDOMDOMWindow; element: PWebKitDOMElement; pseudoElement: Pgchar): PWebKitDOMCSSStyleDeclaration; cdecl; external;
function webkit_dom_dom_window_get_console(self: PWebKitDOMDOMWindow): PWebKitDOMConsole; cdecl; external;
function webkit_dom_dom_window_get_css(self: PWebKitDOMDOMWindow): PWebKitDOMDOMWindowCSS; cdecl; external;
function webkit_dom_dom_window_get_default_status(self: PWebKitDOMDOMWindow): Pgchar; cdecl; external;
function webkit_dom_dom_window_get_device_pixel_ratio(self: PWebKitDOMDOMWindow): gdouble; cdecl; external;
function webkit_dom_dom_window_get_document(self: PWebKitDOMDOMWindow): PWebKitDOMDocument; cdecl; external;
function webkit_dom_dom_window_get_frame_element(self: PWebKitDOMDOMWindow): PWebKitDOMElement; cdecl; external;
function webkit_dom_dom_window_get_frames(self: PWebKitDOMDOMWindow): PWebKitDOMDOMWindow; cdecl; external;
function webkit_dom_dom_window_get_history(self: PWebKitDOMDOMWindow): PWebKitDOMHistory; cdecl; external;
function webkit_dom_dom_window_get_inner_height(self: PWebKitDOMDOMWindow): glong; cdecl; external;
function webkit_dom_dom_window_get_inner_width(self: PWebKitDOMDOMWindow): glong; cdecl; external;
function webkit_dom_dom_window_get_length(self: PWebKitDOMDOMWindow): gulong; cdecl; external;
function webkit_dom_dom_window_get_local_storage(self: PWebKitDOMDOMWindow; error: PPGError): PWebKitDOMStorage; cdecl; external;
function webkit_dom_dom_window_get_locationbar(self: PWebKitDOMDOMWindow): PWebKitDOMBarInfo; cdecl; external;
function webkit_dom_dom_window_get_menubar(self: PWebKitDOMDOMWindow): PWebKitDOMBarInfo; cdecl; external;
function webkit_dom_dom_window_get_name(self: PWebKitDOMDOMWindow): Pgchar; cdecl; external;
function webkit_dom_dom_window_get_navigator(self: PWebKitDOMDOMWindow): PWebKitDOMNavigator; cdecl; external;
function webkit_dom_dom_window_get_offscreen_buffering(self: PWebKitDOMDOMWindow): gboolean; cdecl; external;
function webkit_dom_dom_window_get_opener(self: PWebKitDOMDOMWindow): PWebKitDOMDOMWindow; cdecl; external;
function webkit_dom_dom_window_get_outer_height(self: PWebKitDOMDOMWindow): glong; cdecl; external;
function webkit_dom_dom_window_get_outer_width(self: PWebKitDOMDOMWindow): glong; cdecl; external;
function webkit_dom_dom_window_get_page_x_offset(self: PWebKitDOMDOMWindow): glong; cdecl; external;
function webkit_dom_dom_window_get_page_y_offset(self: PWebKitDOMDOMWindow): glong; cdecl; external;
function webkit_dom_dom_window_get_parent(self: PWebKitDOMDOMWindow): PWebKitDOMDOMWindow; cdecl; external;
function webkit_dom_dom_window_get_performance(self: PWebKitDOMDOMWindow): PWebKitDOMPerformance; cdecl; external;
function webkit_dom_dom_window_get_personalbar(self: PWebKitDOMDOMWindow): PWebKitDOMBarInfo; cdecl; external;
function webkit_dom_dom_window_get_screen(self: PWebKitDOMDOMWindow): PWebKitDOMScreen; cdecl; external;
function webkit_dom_dom_window_get_screen_left(self: PWebKitDOMDOMWindow): glong; cdecl; external;
function webkit_dom_dom_window_get_screen_top(self: PWebKitDOMDOMWindow): glong; cdecl; external;
function webkit_dom_dom_window_get_screen_x(self: PWebKitDOMDOMWindow): glong; cdecl; external;
function webkit_dom_dom_window_get_screen_y(self: PWebKitDOMDOMWindow): glong; cdecl; external;
function webkit_dom_dom_window_get_scroll_x(self: PWebKitDOMDOMWindow): glong; cdecl; external;
function webkit_dom_dom_window_get_scroll_y(self: PWebKitDOMDOMWindow): glong; cdecl; external;
function webkit_dom_dom_window_get_scrollbars(self: PWebKitDOMDOMWindow): PWebKitDOMBarInfo; cdecl; external;
function webkit_dom_dom_window_get_selection(self: PWebKitDOMDOMWindow): PWebKitDOMDOMSelection; cdecl; external;
function webkit_dom_dom_window_get_self(self: PWebKitDOMDOMWindow): PWebKitDOMDOMWindow; cdecl; external;
function webkit_dom_dom_window_get_session_storage(self: PWebKitDOMDOMWindow; error: PPGError): PWebKitDOMStorage; cdecl; external;
function webkit_dom_dom_window_get_status(self: PWebKitDOMDOMWindow): Pgchar; cdecl; external;
function webkit_dom_dom_window_get_statusbar(self: PWebKitDOMDOMWindow): PWebKitDOMBarInfo; cdecl; external;
function webkit_dom_dom_window_get_style_media(self: PWebKitDOMDOMWindow): PWebKitDOMStyleMedia; cdecl; external;
function webkit_dom_dom_window_get_toolbar(self: PWebKitDOMDOMWindow): PWebKitDOMBarInfo; cdecl; external;
function webkit_dom_dom_window_get_top(self: PWebKitDOMDOMWindow): PWebKitDOMDOMWindow; cdecl; external;
function webkit_dom_dom_window_get_type: TGType; cdecl; external;
function webkit_dom_dom_window_get_webkit_storage_info(self: PWebKitDOMDOMWindow): PWebKitDOMStorageInfo; cdecl; external;
function webkit_dom_dom_window_get_window(self: PWebKitDOMDOMWindow): PWebKitDOMDOMWindow; cdecl; external;
function webkit_dom_dom_window_match_media(self: PWebKitDOMDOMWindow; query: Pgchar): PWebKitDOMMediaQueryList; cdecl; external;
function webkit_dom_dom_window_prompt(self: PWebKitDOMDOMWindow; message: Pgchar; defaultValue: Pgchar): Pgchar; cdecl; external;
function webkit_dom_dom_window_webkit_convert_point_from_node_to_page(self: PWebKitDOMDOMWindow; node: PWebKitDOMNode; p: PWebKitDOMWebKitPoint): PWebKitDOMWebKitPoint; cdecl; external;
function webkit_dom_dom_window_webkit_convert_point_from_page_to_node(self: PWebKitDOMDOMWindow; node: PWebKitDOMNode; p: PWebKitDOMWebKitPoint): PWebKitDOMWebKitPoint; cdecl; external;
function webkit_dom_element_get_attribute(self: PWebKitDOMElement; name: Pgchar): Pgchar; cdecl; external;
function webkit_dom_element_get_attribute_node(self: PWebKitDOMElement; name: Pgchar): PWebKitDOMAttr; cdecl; external;
function webkit_dom_element_get_attribute_node_ns(self: PWebKitDOMElement; namespaceURI: Pgchar; localName: Pgchar): PWebKitDOMAttr; cdecl; external;
function webkit_dom_element_get_attribute_ns(self: PWebKitDOMElement; namespaceURI: Pgchar; localName: Pgchar): Pgchar; cdecl; external;
function webkit_dom_element_get_child_element_count(self: PWebKitDOMElement): gulong; cdecl; external;
function webkit_dom_element_get_class_list(self: PWebKitDOMElement): PWebKitDOMDOMTokenList; cdecl; external;
function webkit_dom_element_get_class_name(self: PWebKitDOMElement): Pgchar; cdecl; external;
function webkit_dom_element_get_client_height(self: PWebKitDOMElement): glong; cdecl; external;
function webkit_dom_element_get_client_left(self: PWebKitDOMElement): glong; cdecl; external;
function webkit_dom_element_get_client_top(self: PWebKitDOMElement): glong; cdecl; external;
function webkit_dom_element_get_client_width(self: PWebKitDOMElement): glong; cdecl; external;
function webkit_dom_element_get_elements_by_class_name(self: PWebKitDOMElement; name: Pgchar): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_element_get_elements_by_tag_name(self: PWebKitDOMElement; name: Pgchar): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_element_get_elements_by_tag_name_ns(self: PWebKitDOMElement; namespaceURI: Pgchar; localName: Pgchar): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_element_get_first_element_child(self: PWebKitDOMElement): PWebKitDOMElement; cdecl; external;
function webkit_dom_element_get_last_element_child(self: PWebKitDOMElement): PWebKitDOMElement; cdecl; external;
function webkit_dom_element_get_next_element_sibling(self: PWebKitDOMElement): PWebKitDOMElement; cdecl; external;
function webkit_dom_element_get_offset_height(self: PWebKitDOMElement): glong; cdecl; external;
function webkit_dom_element_get_offset_left(self: PWebKitDOMElement): glong; cdecl; external;
function webkit_dom_element_get_offset_parent(self: PWebKitDOMElement): PWebKitDOMElement; cdecl; external;
function webkit_dom_element_get_offset_top(self: PWebKitDOMElement): glong; cdecl; external;
function webkit_dom_element_get_offset_width(self: PWebKitDOMElement): glong; cdecl; external;
function webkit_dom_element_get_previous_element_sibling(self: PWebKitDOMElement): PWebKitDOMElement; cdecl; external;
function webkit_dom_element_get_scroll_height(self: PWebKitDOMElement): glong; cdecl; external;
function webkit_dom_element_get_scroll_left(self: PWebKitDOMElement): glong; cdecl; external;
function webkit_dom_element_get_scroll_top(self: PWebKitDOMElement): glong; cdecl; external;
function webkit_dom_element_get_scroll_width(self: PWebKitDOMElement): glong; cdecl; external;
function webkit_dom_element_get_style(self: PWebKitDOMElement): PWebKitDOMCSSStyleDeclaration; cdecl; external;
function webkit_dom_element_get_tag_name(self: PWebKitDOMElement): Pgchar; cdecl; external;
function webkit_dom_element_get_type: TGType; cdecl; external;
function webkit_dom_element_get_webkit_region_overflow(element: PWebKitDOMElement): Pgchar; cdecl; external;
function webkit_dom_element_get_webkit_region_overset(self: PWebKitDOMElement): Pgchar; cdecl; external;
function webkit_dom_element_has_attribute(self: PWebKitDOMElement; name: Pgchar): gboolean; cdecl; external;
function webkit_dom_element_has_attribute_ns(self: PWebKitDOMElement; namespaceURI: Pgchar; localName: Pgchar): gboolean; cdecl; external;
function webkit_dom_element_query_selector(self: PWebKitDOMElement; selectors: Pgchar; error: PPGError): PWebKitDOMElement; cdecl; external;
function webkit_dom_element_query_selector_all(self: PWebKitDOMElement; selectors: Pgchar; error: PPGError): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_element_remove_attribute_node(self: PWebKitDOMElement; oldAttr: PWebKitDOMAttr; error: PPGError): PWebKitDOMAttr; cdecl; external;
function webkit_dom_element_set_attribute_node(self: PWebKitDOMElement; newAttr: PWebKitDOMAttr; error: PPGError): PWebKitDOMAttr; cdecl; external;
function webkit_dom_element_set_attribute_node_ns(self: PWebKitDOMElement; newAttr: PWebKitDOMAttr; error: PPGError): PWebKitDOMAttr; cdecl; external;
function webkit_dom_element_webkit_matches_selector(self: PWebKitDOMElement; selectors: Pgchar; error: PPGError): gboolean; cdecl; external;
function webkit_dom_entity_reference_get_type: TGType; cdecl; external;
function webkit_dom_event_get_bubbles(self: PWebKitDOMEvent): gboolean; cdecl; external;
function webkit_dom_event_get_cancel_bubble(self: PWebKitDOMEvent): gboolean; cdecl; external;
function webkit_dom_event_get_cancelable(self: PWebKitDOMEvent): gboolean; cdecl; external;
function webkit_dom_event_get_current_target(self: PWebKitDOMEvent): PWebKitDOMEventTarget; cdecl; external;
function webkit_dom_event_get_default_prevented(self: PWebKitDOMEvent): gboolean; cdecl; external;
function webkit_dom_event_get_event_phase(self: PWebKitDOMEvent): gushort; cdecl; external;
function webkit_dom_event_get_return_value(self: PWebKitDOMEvent): gboolean; cdecl; external;
function webkit_dom_event_get_src_element(self: PWebKitDOMEvent): PWebKitDOMEventTarget; cdecl; external;
function webkit_dom_event_get_target(self: PWebKitDOMEvent): PWebKitDOMEventTarget; cdecl; external;
function webkit_dom_event_get_time_stamp(self: PWebKitDOMEvent): guint32; cdecl; external;
function webkit_dom_event_get_type: TGType; cdecl; external;
function webkit_dom_event_target_add_event_listener(target: PWebKitDOMEventTarget; eventName: Pgchar; handler: TGCallback; bubble: gboolean; userData: gpointer): gboolean; cdecl; external;
function webkit_dom_event_target_get_type: TGType; cdecl; external;
function webkit_dom_event_target_remove_event_listener(target: PWebKitDOMEventTarget; eventName: Pgchar; handler: TGCallback; bubble: gboolean): gboolean; cdecl; external;
function webkit_dom_file_get_name(self: PWebKitDOMFile): Pgchar; cdecl; external;
function webkit_dom_file_get_type: TGType; cdecl; external;
function webkit_dom_file_list_get_length(self: PWebKitDOMFileList): gulong; cdecl; external;
function webkit_dom_file_list_get_type: TGType; cdecl; external;
function webkit_dom_file_list_item(self: PWebKitDOMFileList; index: gulong): PWebKitDOMFile; cdecl; external;
function webkit_dom_gamepad_get_id(self: PWebKitDOMGamepad): Pgchar; cdecl; external;
function webkit_dom_gamepad_get_index(self: PWebKitDOMGamepad): gulong; cdecl; external;
function webkit_dom_gamepad_get_timestamp(self: PWebKitDOMGamepad): guint64; cdecl; external;
function webkit_dom_gamepad_get_type: TGType; cdecl; external;
function webkit_dom_gamepad_list_get_length(self: PWebKitDOMGamepadList): gulong; cdecl; external;
function webkit_dom_gamepad_list_get_type: TGType; cdecl; external;
function webkit_dom_gamepad_list_item(self: PWebKitDOMGamepadList; index: gulong): PWebKitDOMGamepad; cdecl; external;
function webkit_dom_geolocation_get_type: TGType; cdecl; external;
function webkit_dom_history_get_length(self: PWebKitDOMHistory): gulong; cdecl; external;
function webkit_dom_history_get_type: TGType; cdecl; external;
function webkit_dom_html_anchor_element_get_charset(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_coords(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_download(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_hash(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_host(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_hostname(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_href(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_hreflang(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_name(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_origin(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_pathname(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_ping(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_port(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_protocol(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_rel(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_rev(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_search(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_shape(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_target(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_text(self: PWebKitDOMHTMLAnchorElement): Pgchar; cdecl; external;
function webkit_dom_html_anchor_element_get_type: TGType; cdecl; external;
function webkit_dom_html_applet_element_get_align(self: PWebKitDOMHTMLAppletElement): Pgchar; cdecl; external;
function webkit_dom_html_applet_element_get_alt(self: PWebKitDOMHTMLAppletElement): Pgchar; cdecl; external;
function webkit_dom_html_applet_element_get_archive(self: PWebKitDOMHTMLAppletElement): Pgchar; cdecl; external;
function webkit_dom_html_applet_element_get_code(self: PWebKitDOMHTMLAppletElement): Pgchar; cdecl; external;
function webkit_dom_html_applet_element_get_code_base(self: PWebKitDOMHTMLAppletElement): Pgchar; cdecl; external;
function webkit_dom_html_applet_element_get_height(self: PWebKitDOMHTMLAppletElement): Pgchar; cdecl; external;
function webkit_dom_html_applet_element_get_hspace(self: PWebKitDOMHTMLAppletElement): glong; cdecl; external;
function webkit_dom_html_applet_element_get_name(self: PWebKitDOMHTMLAppletElement): Pgchar; cdecl; external;
function webkit_dom_html_applet_element_get_object(self: PWebKitDOMHTMLAppletElement): Pgchar; cdecl; external;
function webkit_dom_html_applet_element_get_type: TGType; cdecl; external;
function webkit_dom_html_applet_element_get_vspace(self: PWebKitDOMHTMLAppletElement): glong; cdecl; external;
function webkit_dom_html_applet_element_get_width(self: PWebKitDOMHTMLAppletElement): Pgchar; cdecl; external;
function webkit_dom_html_area_element_get_alt(self: PWebKitDOMHTMLAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_area_element_get_coords(self: PWebKitDOMHTMLAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_area_element_get_hash(self: PWebKitDOMHTMLAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_area_element_get_host(self: PWebKitDOMHTMLAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_area_element_get_hostname(self: PWebKitDOMHTMLAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_area_element_get_href(self: PWebKitDOMHTMLAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_area_element_get_no_href(self: PWebKitDOMHTMLAreaElement): gboolean; cdecl; external;
function webkit_dom_html_area_element_get_pathname(self: PWebKitDOMHTMLAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_area_element_get_ping(self: PWebKitDOMHTMLAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_area_element_get_port(self: PWebKitDOMHTMLAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_area_element_get_protocol(self: PWebKitDOMHTMLAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_area_element_get_search(self: PWebKitDOMHTMLAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_area_element_get_shape(self: PWebKitDOMHTMLAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_area_element_get_target(self: PWebKitDOMHTMLAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_area_element_get_type: TGType; cdecl; external;
function webkit_dom_html_audio_element_get_type: TGType; cdecl; external;
function webkit_dom_html_base_element_get_href(self: PWebKitDOMHTMLBaseElement): Pgchar; cdecl; external;
function webkit_dom_html_base_element_get_target(self: PWebKitDOMHTMLBaseElement): Pgchar; cdecl; external;
function webkit_dom_html_base_element_get_type: TGType; cdecl; external;
function webkit_dom_html_base_font_element_get_color(self: PWebKitDOMHTMLBaseFontElement): Pgchar; cdecl; external;
function webkit_dom_html_base_font_element_get_face(self: PWebKitDOMHTMLBaseFontElement): Pgchar; cdecl; external;
function webkit_dom_html_base_font_element_get_size(self: PWebKitDOMHTMLBaseFontElement): glong; cdecl; external;
function webkit_dom_html_base_font_element_get_type: TGType; cdecl; external;
function webkit_dom_html_body_element_get_a_link(self: PWebKitDOMHTMLBodyElement): Pgchar; cdecl; external;
function webkit_dom_html_body_element_get_background(self: PWebKitDOMHTMLBodyElement): Pgchar; cdecl; external;
function webkit_dom_html_body_element_get_bg_color(self: PWebKitDOMHTMLBodyElement): Pgchar; cdecl; external;
function webkit_dom_html_body_element_get_link(self: PWebKitDOMHTMLBodyElement): Pgchar; cdecl; external;
function webkit_dom_html_body_element_get_text(self: PWebKitDOMHTMLBodyElement): Pgchar; cdecl; external;
function webkit_dom_html_body_element_get_type: TGType; cdecl; external;
function webkit_dom_html_body_element_get_v_link(self: PWebKitDOMHTMLBodyElement): Pgchar; cdecl; external;
function webkit_dom_html_button_element_check_validity(self: PWebKitDOMHTMLButtonElement): gboolean; cdecl; external;
function webkit_dom_html_button_element_get_autofocus(self: PWebKitDOMHTMLButtonElement): gboolean; cdecl; external;
function webkit_dom_html_button_element_get_disabled(self: PWebKitDOMHTMLButtonElement): gboolean; cdecl; external;
function webkit_dom_html_button_element_get_form(self: PWebKitDOMHTMLButtonElement): PWebKitDOMHTMLFormElement; cdecl; external;
function webkit_dom_html_button_element_get_form_action(self: PWebKitDOMHTMLButtonElement): Pgchar; cdecl; external;
function webkit_dom_html_button_element_get_form_enctype(self: PWebKitDOMHTMLButtonElement): Pgchar; cdecl; external;
function webkit_dom_html_button_element_get_form_method(self: PWebKitDOMHTMLButtonElement): Pgchar; cdecl; external;
function webkit_dom_html_button_element_get_form_no_validate(self: PWebKitDOMHTMLButtonElement): gboolean; cdecl; external;
function webkit_dom_html_button_element_get_form_target(self: PWebKitDOMHTMLButtonElement): Pgchar; cdecl; external;
function webkit_dom_html_button_element_get_labels(self: PWebKitDOMHTMLButtonElement): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_html_button_element_get_name(self: PWebKitDOMHTMLButtonElement): Pgchar; cdecl; external;
function webkit_dom_html_button_element_get_type: TGType; cdecl; external;
function webkit_dom_html_button_element_get_validation_message(self: PWebKitDOMHTMLButtonElement): Pgchar; cdecl; external;
function webkit_dom_html_button_element_get_validity(self: PWebKitDOMHTMLButtonElement): PWebKitDOMValidityState; cdecl; external;
function webkit_dom_html_button_element_get_value(self: PWebKitDOMHTMLButtonElement): Pgchar; cdecl; external;
function webkit_dom_html_button_element_get_will_validate(self: PWebKitDOMHTMLButtonElement): gboolean; cdecl; external;
function webkit_dom_html_canvas_element_get_height(self: PWebKitDOMHTMLCanvasElement): glong; cdecl; external;
function webkit_dom_html_canvas_element_get_type: TGType; cdecl; external;
function webkit_dom_html_canvas_element_get_width(self: PWebKitDOMHTMLCanvasElement): glong; cdecl; external;
function webkit_dom_html_collection_get_length(self: PWebKitDOMHTMLCollection): gulong; cdecl; external;
function webkit_dom_html_collection_get_type: TGType; cdecl; external;
function webkit_dom_html_collection_item(self: PWebKitDOMHTMLCollection; index: gulong): PWebKitDOMNode; cdecl; external;
function webkit_dom_html_collection_named_item(self: PWebKitDOMHTMLCollection; name: Pgchar): PWebKitDOMNode; cdecl; external;
function webkit_dom_html_details_element_get_open(self: PWebKitDOMHTMLDetailsElement): gboolean; cdecl; external;
function webkit_dom_html_details_element_get_type: TGType; cdecl; external;
function webkit_dom_html_directory_element_get_compact(self: PWebKitDOMHTMLDirectoryElement): gboolean; cdecl; external;
function webkit_dom_html_directory_element_get_type: TGType; cdecl; external;
function webkit_dom_html_div_element_get_align(self: PWebKitDOMHTMLDivElement): Pgchar; cdecl; external;
function webkit_dom_html_div_element_get_type: TGType; cdecl; external;
function webkit_dom_html_document_get_active_element(self: PWebKitDOMHTMLDocument): PWebKitDOMElement; cdecl; external;
function webkit_dom_html_document_get_alink_color(self: PWebKitDOMHTMLDocument): Pgchar; cdecl; external;
function webkit_dom_html_document_get_bg_color(self: PWebKitDOMHTMLDocument): Pgchar; cdecl; external;
function webkit_dom_html_document_get_compat_mode(self: PWebKitDOMHTMLDocument): Pgchar; cdecl; external;
function webkit_dom_html_document_get_design_mode(self: PWebKitDOMHTMLDocument): Pgchar; cdecl; external;
function webkit_dom_html_document_get_dir(self: PWebKitDOMHTMLDocument): Pgchar; cdecl; external;
function webkit_dom_html_document_get_embeds(self: PWebKitDOMHTMLDocument): PWebKitDOMHTMLCollection; cdecl; external;
function webkit_dom_html_document_get_fg_color(self: PWebKitDOMHTMLDocument): Pgchar; cdecl; external;
function webkit_dom_html_document_get_height(self: PWebKitDOMHTMLDocument): glong; cdecl; external;
function webkit_dom_html_document_get_link_color(self: PWebKitDOMHTMLDocument): Pgchar; cdecl; external;
function webkit_dom_html_document_get_plugins(self: PWebKitDOMHTMLDocument): PWebKitDOMHTMLCollection; cdecl; external;
function webkit_dom_html_document_get_scripts(self: PWebKitDOMHTMLDocument): PWebKitDOMHTMLCollection; cdecl; external;
function webkit_dom_html_document_get_type: TGType; cdecl; external;
function webkit_dom_html_document_get_vlink_color(self: PWebKitDOMHTMLDocument): Pgchar; cdecl; external;
function webkit_dom_html_document_get_width(self: PWebKitDOMHTMLDocument): glong; cdecl; external;
function webkit_dom_html_document_has_focus(self: PWebKitDOMHTMLDocument): gboolean; cdecl; external;
function webkit_dom_html_element_get_access_key(self: PWebKitDOMHTMLElement): Pgchar; cdecl; external;
function webkit_dom_html_element_get_children(self: PWebKitDOMHTMLElement): PWebKitDOMHTMLCollection; cdecl; external;
function webkit_dom_html_element_get_class_list(element: PWebKitDOMHTMLElement): PWebKitDOMDOMTokenList; cdecl; external;
function webkit_dom_html_element_get_class_name(element: PWebKitDOMHTMLElement): Pgchar; cdecl; external;
function webkit_dom_html_element_get_content_editable(self: PWebKitDOMHTMLElement): Pgchar; cdecl; external;
function webkit_dom_html_element_get_dir(self: PWebKitDOMHTMLElement): Pgchar; cdecl; external;
function webkit_dom_html_element_get_draggable(self: PWebKitDOMHTMLElement): gboolean; cdecl; external;
function webkit_dom_html_element_get_hidden(self: PWebKitDOMHTMLElement): gboolean; cdecl; external;
function webkit_dom_html_element_get_id(self: PWebKitDOMHTMLElement): Pgchar; cdecl; external;
function webkit_dom_html_element_get_inner_html(self: PWebKitDOMHTMLElement): Pgchar; cdecl; external;
function webkit_dom_html_element_get_inner_text(self: PWebKitDOMHTMLElement): Pgchar; cdecl; external;
function webkit_dom_html_element_get_is_content_editable(self: PWebKitDOMHTMLElement): gboolean; cdecl; external;
function webkit_dom_html_element_get_item_id(self: PWebKitDOMHTMLElement): Pgchar; cdecl; external;
function webkit_dom_html_element_get_item_prop(self: PWebKitDOMHTMLElement): PWebKitDOMDOMSettableTokenList; cdecl; external;
function webkit_dom_html_element_get_item_ref(self: PWebKitDOMHTMLElement): PWebKitDOMDOMSettableTokenList; cdecl; external;
function webkit_dom_html_element_get_item_scope(self: PWebKitDOMHTMLElement): gboolean; cdecl; external;
function webkit_dom_html_element_get_item_type(self: PWebKitDOMHTMLElement): PWebKitDOMDOMSettableTokenList; cdecl; external;
function webkit_dom_html_element_get_lang(self: PWebKitDOMHTMLElement): Pgchar; cdecl; external;
function webkit_dom_html_element_get_outer_html(self: PWebKitDOMHTMLElement): Pgchar; cdecl; external;
function webkit_dom_html_element_get_outer_text(self: PWebKitDOMHTMLElement): Pgchar; cdecl; external;
function webkit_dom_html_element_get_spellcheck(self: PWebKitDOMHTMLElement): gboolean; cdecl; external;
function webkit_dom_html_element_get_tab_index(self: PWebKitDOMHTMLElement): glong; cdecl; external;
function webkit_dom_html_element_get_title(self: PWebKitDOMHTMLElement): Pgchar; cdecl; external;
function webkit_dom_html_element_get_translate(self: PWebKitDOMHTMLElement): gboolean; cdecl; external;
function webkit_dom_html_element_get_type: TGType; cdecl; external;
function webkit_dom_html_element_get_webkitdropzone(self: PWebKitDOMHTMLElement): Pgchar; cdecl; external;
function webkit_dom_html_element_insert_adjacent_element(self: PWebKitDOMHTMLElement; where: Pgchar; element: PWebKitDOMElement; error: PPGError): PWebKitDOMElement; cdecl; external;
function webkit_dom_html_embed_element_get_align(self: PWebKitDOMHTMLEmbedElement): Pgchar; cdecl; external;
function webkit_dom_html_embed_element_get_height(self: PWebKitDOMHTMLEmbedElement): glong; cdecl; external;
function webkit_dom_html_embed_element_get_name(self: PWebKitDOMHTMLEmbedElement): Pgchar; cdecl; external;
function webkit_dom_html_embed_element_get_src(self: PWebKitDOMHTMLEmbedElement): Pgchar; cdecl; external;
function webkit_dom_html_embed_element_get_type: TGType; cdecl; external;
function webkit_dom_html_embed_element_get_width(self: PWebKitDOMHTMLEmbedElement): glong; cdecl; external;
function webkit_dom_html_field_set_element_check_validity(self: PWebKitDOMHTMLFieldSetElement): gboolean; cdecl; external;
function webkit_dom_html_field_set_element_get_disabled(self: PWebKitDOMHTMLFieldSetElement): gboolean; cdecl; external;
function webkit_dom_html_field_set_element_get_elements(self: PWebKitDOMHTMLFieldSetElement): PWebKitDOMHTMLCollection; cdecl; external;
function webkit_dom_html_field_set_element_get_form(self: PWebKitDOMHTMLFieldSetElement): PWebKitDOMHTMLFormElement; cdecl; external;
function webkit_dom_html_field_set_element_get_name(self: PWebKitDOMHTMLFieldSetElement): Pgchar; cdecl; external;
function webkit_dom_html_field_set_element_get_type: TGType; cdecl; external;
function webkit_dom_html_field_set_element_get_validation_message(self: PWebKitDOMHTMLFieldSetElement): Pgchar; cdecl; external;
function webkit_dom_html_field_set_element_get_validity(self: PWebKitDOMHTMLFieldSetElement): PWebKitDOMValidityState; cdecl; external;
function webkit_dom_html_field_set_element_get_will_validate(self: PWebKitDOMHTMLFieldSetElement): gboolean; cdecl; external;
function webkit_dom_html_font_element_get_color(self: PWebKitDOMHTMLFontElement): Pgchar; cdecl; external;
function webkit_dom_html_font_element_get_face(self: PWebKitDOMHTMLFontElement): Pgchar; cdecl; external;
function webkit_dom_html_font_element_get_size(self: PWebKitDOMHTMLFontElement): Pgchar; cdecl; external;
function webkit_dom_html_font_element_get_type: TGType; cdecl; external;
function webkit_dom_html_form_element_check_validity(self: PWebKitDOMHTMLFormElement): gboolean; cdecl; external;
function webkit_dom_html_form_element_get_accept_charset(self: PWebKitDOMHTMLFormElement): Pgchar; cdecl; external;
function webkit_dom_html_form_element_get_action(self: PWebKitDOMHTMLFormElement): Pgchar; cdecl; external;
function webkit_dom_html_form_element_get_autocomplete(self: PWebKitDOMHTMLFormElement): Pgchar; cdecl; external;
function webkit_dom_html_form_element_get_elements(self: PWebKitDOMHTMLFormElement): PWebKitDOMHTMLCollection; cdecl; external;
function webkit_dom_html_form_element_get_encoding(self: PWebKitDOMHTMLFormElement): Pgchar; cdecl; external;
function webkit_dom_html_form_element_get_enctype(self: PWebKitDOMHTMLFormElement): Pgchar; cdecl; external;
function webkit_dom_html_form_element_get_length(self: PWebKitDOMHTMLFormElement): glong; cdecl; external;
function webkit_dom_html_form_element_get_method(self: PWebKitDOMHTMLFormElement): Pgchar; cdecl; external;
function webkit_dom_html_form_element_get_name(self: PWebKitDOMHTMLFormElement): Pgchar; cdecl; external;
function webkit_dom_html_form_element_get_no_validate(self: PWebKitDOMHTMLFormElement): gboolean; cdecl; external;
function webkit_dom_html_form_element_get_target(self: PWebKitDOMHTMLFormElement): Pgchar; cdecl; external;
function webkit_dom_html_form_element_get_type: TGType; cdecl; external;
function webkit_dom_html_frame_element_get_content_document(self: PWebKitDOMHTMLFrameElement): PWebKitDOMDocument; cdecl; external;
function webkit_dom_html_frame_element_get_content_window(self: PWebKitDOMHTMLFrameElement): PWebKitDOMDOMWindow; cdecl; external;
function webkit_dom_html_frame_element_get_frame_border(self: PWebKitDOMHTMLFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_frame_element_get_height(self: PWebKitDOMHTMLFrameElement): glong; cdecl; external;
function webkit_dom_html_frame_element_get_long_desc(self: PWebKitDOMHTMLFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_frame_element_get_margin_height(self: PWebKitDOMHTMLFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_frame_element_get_margin_width(self: PWebKitDOMHTMLFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_frame_element_get_name(self: PWebKitDOMHTMLFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_frame_element_get_no_resize(self: PWebKitDOMHTMLFrameElement): gboolean; cdecl; external;
function webkit_dom_html_frame_element_get_scrolling(self: PWebKitDOMHTMLFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_frame_element_get_src(self: PWebKitDOMHTMLFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_frame_element_get_type: TGType; cdecl; external;
function webkit_dom_html_frame_element_get_width(self: PWebKitDOMHTMLFrameElement): glong; cdecl; external;
function webkit_dom_html_frame_set_element_get_cols(self: PWebKitDOMHTMLFrameSetElement): Pgchar; cdecl; external;
function webkit_dom_html_frame_set_element_get_rows(self: PWebKitDOMHTMLFrameSetElement): Pgchar; cdecl; external;
function webkit_dom_html_frame_set_element_get_type: TGType; cdecl; external;
function webkit_dom_html_head_element_get_profile(self: PWebKitDOMHTMLHeadElement): Pgchar; cdecl; external;
function webkit_dom_html_head_element_get_type: TGType; cdecl; external;
function webkit_dom_html_heading_element_get_align(self: PWebKitDOMHTMLHeadingElement): Pgchar; cdecl; external;
function webkit_dom_html_heading_element_get_type: TGType; cdecl; external;
function webkit_dom_html_html_element_get_manifest(self: PWebKitDOMHTMLHtmlElement): Pgchar; cdecl; external;
function webkit_dom_html_html_element_get_type: TGType; cdecl; external;
function webkit_dom_html_html_element_get_version(self: PWebKitDOMHTMLHtmlElement): Pgchar; cdecl; external;
function webkit_dom_html_iframe_element_get_align(self: PWebKitDOMHTMLIFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_iframe_element_get_content_document(self: PWebKitDOMHTMLIFrameElement): PWebKitDOMDocument; cdecl; external;
function webkit_dom_html_iframe_element_get_content_window(self: PWebKitDOMHTMLIFrameElement): PWebKitDOMDOMWindow; cdecl; external;
function webkit_dom_html_iframe_element_get_frame_border(self: PWebKitDOMHTMLIFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_iframe_element_get_height(self: PWebKitDOMHTMLIFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_iframe_element_get_long_desc(self: PWebKitDOMHTMLIFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_iframe_element_get_margin_height(self: PWebKitDOMHTMLIFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_iframe_element_get_margin_width(self: PWebKitDOMHTMLIFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_iframe_element_get_name(self: PWebKitDOMHTMLIFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_iframe_element_get_sandbox(self: PWebKitDOMHTMLIFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_iframe_element_get_scrolling(self: PWebKitDOMHTMLIFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_iframe_element_get_seamless(self: PWebKitDOMHTMLIFrameElement): gboolean; cdecl; external;
function webkit_dom_html_iframe_element_get_src(self: PWebKitDOMHTMLIFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_iframe_element_get_srcdoc(self: PWebKitDOMHTMLIFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_iframe_element_get_type: TGType; cdecl; external;
function webkit_dom_html_iframe_element_get_width(self: PWebKitDOMHTMLIFrameElement): Pgchar; cdecl; external;
function webkit_dom_html_image_element_get_align(self: PWebKitDOMHTMLImageElement): Pgchar; cdecl; external;
function webkit_dom_html_image_element_get_alt(self: PWebKitDOMHTMLImageElement): Pgchar; cdecl; external;
function webkit_dom_html_image_element_get_border(self: PWebKitDOMHTMLImageElement): Pgchar; cdecl; external;
function webkit_dom_html_image_element_get_complete(self: PWebKitDOMHTMLImageElement): gboolean; cdecl; external;
function webkit_dom_html_image_element_get_cross_origin(self: PWebKitDOMHTMLImageElement): Pgchar; cdecl; external;
function webkit_dom_html_image_element_get_height(self: PWebKitDOMHTMLImageElement): glong; cdecl; external;
function webkit_dom_html_image_element_get_hspace(self: PWebKitDOMHTMLImageElement): glong; cdecl; external;
function webkit_dom_html_image_element_get_is_map(self: PWebKitDOMHTMLImageElement): gboolean; cdecl; external;
function webkit_dom_html_image_element_get_long_desc(self: PWebKitDOMHTMLImageElement): Pgchar; cdecl; external;
function webkit_dom_html_image_element_get_lowsrc(self: PWebKitDOMHTMLImageElement): Pgchar; cdecl; external;
function webkit_dom_html_image_element_get_name(self: PWebKitDOMHTMLImageElement): Pgchar; cdecl; external;
function webkit_dom_html_image_element_get_natural_height(self: PWebKitDOMHTMLImageElement): glong; cdecl; external;
function webkit_dom_html_image_element_get_natural_width(self: PWebKitDOMHTMLImageElement): glong; cdecl; external;
function webkit_dom_html_image_element_get_src(self: PWebKitDOMHTMLImageElement): Pgchar; cdecl; external;
function webkit_dom_html_image_element_get_type: TGType; cdecl; external;
function webkit_dom_html_image_element_get_use_map(self: PWebKitDOMHTMLImageElement): Pgchar; cdecl; external;
function webkit_dom_html_image_element_get_vspace(self: PWebKitDOMHTMLImageElement): glong; cdecl; external;
function webkit_dom_html_image_element_get_width(self: PWebKitDOMHTMLImageElement): glong; cdecl; external;
function webkit_dom_html_image_element_get_x(self: PWebKitDOMHTMLImageElement): glong; cdecl; external;
function webkit_dom_html_image_element_get_y(self: PWebKitDOMHTMLImageElement): glong; cdecl; external;
function webkit_dom_html_input_element_check_validity(self: PWebKitDOMHTMLInputElement): gboolean; cdecl; external;
function webkit_dom_html_input_element_get_accept(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_align(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_alt(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_autocomplete(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_autofocus(self: PWebKitDOMHTMLInputElement): gboolean; cdecl; external;
function webkit_dom_html_input_element_get_capture(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_checked(self: PWebKitDOMHTMLInputElement): gboolean; cdecl; external;
function webkit_dom_html_input_element_get_default_checked(self: PWebKitDOMHTMLInputElement): gboolean; cdecl; external;
function webkit_dom_html_input_element_get_default_value(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_dir_name(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_disabled(self: PWebKitDOMHTMLInputElement): gboolean; cdecl; external;
function webkit_dom_html_input_element_get_files(self: PWebKitDOMHTMLInputElement): PWebKitDOMFileList; cdecl; external;
function webkit_dom_html_input_element_get_form(self: PWebKitDOMHTMLInputElement): PWebKitDOMHTMLFormElement; cdecl; external;
function webkit_dom_html_input_element_get_form_action(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_form_enctype(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_form_method(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_form_no_validate(self: PWebKitDOMHTMLInputElement): gboolean; cdecl; external;
function webkit_dom_html_input_element_get_form_target(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_height(self: PWebKitDOMHTMLInputElement): gulong; cdecl; external;
function webkit_dom_html_input_element_get_incremental(self: PWebKitDOMHTMLInputElement): gboolean; cdecl; external;
function webkit_dom_html_input_element_get_indeterminate(self: PWebKitDOMHTMLInputElement): gboolean; cdecl; external;
function webkit_dom_html_input_element_get_labels(self: PWebKitDOMHTMLInputElement): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_html_input_element_get_list(self: PWebKitDOMHTMLInputElement): PWebKitDOMHTMLElement; cdecl; external;
function webkit_dom_html_input_element_get_max(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_max_length(self: PWebKitDOMHTMLInputElement): glong; cdecl; external;
function webkit_dom_html_input_element_get_min(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_multiple(self: PWebKitDOMHTMLInputElement): gboolean; cdecl; external;
function webkit_dom_html_input_element_get_name(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_pattern(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_placeholder(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_read_only(self: PWebKitDOMHTMLInputElement): gboolean; cdecl; external;
function webkit_dom_html_input_element_get_required(self: PWebKitDOMHTMLInputElement): gboolean; cdecl; external;
function webkit_dom_html_input_element_get_size(self: PWebKitDOMHTMLInputElement): gulong; cdecl; external;
function webkit_dom_html_input_element_get_src(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_step(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_type: TGType; cdecl; external;
function webkit_dom_html_input_element_get_use_map(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_validation_message(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_validity(self: PWebKitDOMHTMLInputElement): PWebKitDOMValidityState; cdecl; external;
function webkit_dom_html_input_element_get_value(self: PWebKitDOMHTMLInputElement): Pgchar; cdecl; external;
function webkit_dom_html_input_element_get_value_as_number(self: PWebKitDOMHTMLInputElement): gdouble; cdecl; external;
function webkit_dom_html_input_element_get_webkit_grammar(self: PWebKitDOMHTMLInputElement): gboolean; cdecl; external;
function webkit_dom_html_input_element_get_webkit_speech(self: PWebKitDOMHTMLInputElement): gboolean; cdecl; external;
function webkit_dom_html_input_element_get_webkitdirectory(self: PWebKitDOMHTMLInputElement): gboolean; cdecl; external;
function webkit_dom_html_input_element_get_width(self: PWebKitDOMHTMLInputElement): gulong; cdecl; external;
function webkit_dom_html_input_element_get_will_validate(self: PWebKitDOMHTMLInputElement): gboolean; cdecl; external;
function webkit_dom_html_input_element_is_edited(arg0: PWebKitDOMHTMLInputElement): gboolean; cdecl; external;
function webkit_dom_html_keygen_element_check_validity(self: PWebKitDOMHTMLKeygenElement): gboolean; cdecl; external;
function webkit_dom_html_keygen_element_get_autofocus(self: PWebKitDOMHTMLKeygenElement): gboolean; cdecl; external;
function webkit_dom_html_keygen_element_get_challenge(self: PWebKitDOMHTMLKeygenElement): Pgchar; cdecl; external;
function webkit_dom_html_keygen_element_get_disabled(self: PWebKitDOMHTMLKeygenElement): gboolean; cdecl; external;
function webkit_dom_html_keygen_element_get_form(self: PWebKitDOMHTMLKeygenElement): PWebKitDOMHTMLFormElement; cdecl; external;
function webkit_dom_html_keygen_element_get_keytype(self: PWebKitDOMHTMLKeygenElement): Pgchar; cdecl; external;
function webkit_dom_html_keygen_element_get_labels(self: PWebKitDOMHTMLKeygenElement): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_html_keygen_element_get_name(self: PWebKitDOMHTMLKeygenElement): Pgchar; cdecl; external;
function webkit_dom_html_keygen_element_get_type: TGType; cdecl; external;
function webkit_dom_html_keygen_element_get_validation_message(self: PWebKitDOMHTMLKeygenElement): Pgchar; cdecl; external;
function webkit_dom_html_keygen_element_get_validity(self: PWebKitDOMHTMLKeygenElement): PWebKitDOMValidityState; cdecl; external;
function webkit_dom_html_keygen_element_get_will_validate(self: PWebKitDOMHTMLKeygenElement): gboolean; cdecl; external;
function webkit_dom_html_label_element_get_control(self: PWebKitDOMHTMLLabelElement): PWebKitDOMHTMLElement; cdecl; external;
function webkit_dom_html_label_element_get_form(self: PWebKitDOMHTMLLabelElement): PWebKitDOMHTMLFormElement; cdecl; external;
function webkit_dom_html_label_element_get_html_for(self: PWebKitDOMHTMLLabelElement): Pgchar; cdecl; external;
function webkit_dom_html_label_element_get_type: TGType; cdecl; external;
function webkit_dom_html_legend_element_get_align(self: PWebKitDOMHTMLLegendElement): Pgchar; cdecl; external;
function webkit_dom_html_legend_element_get_form(self: PWebKitDOMHTMLLegendElement): PWebKitDOMHTMLFormElement; cdecl; external;
function webkit_dom_html_legend_element_get_type: TGType; cdecl; external;
function webkit_dom_html_link_element_get_charset(self: PWebKitDOMHTMLLinkElement): Pgchar; cdecl; external;
function webkit_dom_html_link_element_get_disabled(self: PWebKitDOMHTMLLinkElement): gboolean; cdecl; external;
function webkit_dom_html_link_element_get_href(self: PWebKitDOMHTMLLinkElement): Pgchar; cdecl; external;
function webkit_dom_html_link_element_get_hreflang(self: PWebKitDOMHTMLLinkElement): Pgchar; cdecl; external;
function webkit_dom_html_link_element_get_media(self: PWebKitDOMHTMLLinkElement): Pgchar; cdecl; external;
function webkit_dom_html_link_element_get_rel(self: PWebKitDOMHTMLLinkElement): Pgchar; cdecl; external;
function webkit_dom_html_link_element_get_rev(self: PWebKitDOMHTMLLinkElement): Pgchar; cdecl; external;
function webkit_dom_html_link_element_get_sheet(self: PWebKitDOMHTMLLinkElement): PWebKitDOMStyleSheet; cdecl; external;
function webkit_dom_html_link_element_get_target(self: PWebKitDOMHTMLLinkElement): Pgchar; cdecl; external;
function webkit_dom_html_link_element_get_type: TGType; cdecl; external;
function webkit_dom_html_map_element_get_areas(self: PWebKitDOMHTMLMapElement): PWebKitDOMHTMLCollection; cdecl; external;
function webkit_dom_html_map_element_get_name(self: PWebKitDOMHTMLMapElement): Pgchar; cdecl; external;
function webkit_dom_html_map_element_get_type: TGType; cdecl; external;
function webkit_dom_html_marquee_element_get_behavior(self: PWebKitDOMHTMLMarqueeElement): Pgchar; cdecl; external;
function webkit_dom_html_marquee_element_get_bg_color(self: PWebKitDOMHTMLMarqueeElement): Pgchar; cdecl; external;
function webkit_dom_html_marquee_element_get_direction(self: PWebKitDOMHTMLMarqueeElement): Pgchar; cdecl; external;
function webkit_dom_html_marquee_element_get_height(self: PWebKitDOMHTMLMarqueeElement): Pgchar; cdecl; external;
function webkit_dom_html_marquee_element_get_hspace(self: PWebKitDOMHTMLMarqueeElement): gulong; cdecl; external;
function webkit_dom_html_marquee_element_get_loop(self: PWebKitDOMHTMLMarqueeElement): glong; cdecl; external;
function webkit_dom_html_marquee_element_get_scroll_amount(self: PWebKitDOMHTMLMarqueeElement): glong; cdecl; external;
function webkit_dom_html_marquee_element_get_scroll_delay(self: PWebKitDOMHTMLMarqueeElement): glong; cdecl; external;
function webkit_dom_html_marquee_element_get_true_speed(self: PWebKitDOMHTMLMarqueeElement): gboolean; cdecl; external;
function webkit_dom_html_marquee_element_get_type: TGType; cdecl; external;
function webkit_dom_html_marquee_element_get_vspace(self: PWebKitDOMHTMLMarqueeElement): gulong; cdecl; external;
function webkit_dom_html_marquee_element_get_width(self: PWebKitDOMHTMLMarqueeElement): Pgchar; cdecl; external;
function webkit_dom_html_media_element_can_play_type(self: PWebKitDOMHTMLMediaElement; type_: Pgchar): Pgchar; cdecl; external;
function webkit_dom_html_media_element_get_autoplay(self: PWebKitDOMHTMLMediaElement): gboolean; cdecl; external;
function webkit_dom_html_media_element_get_buffered(self: PWebKitDOMHTMLMediaElement): PWebKitDOMTimeRanges; cdecl; external;
function webkit_dom_html_media_element_get_controls(self: PWebKitDOMHTMLMediaElement): gboolean; cdecl; external;
function webkit_dom_html_media_element_get_current_src(self: PWebKitDOMHTMLMediaElement): Pgchar; cdecl; external;
function webkit_dom_html_media_element_get_current_time(self: PWebKitDOMHTMLMediaElement): gfloat; cdecl; external;
function webkit_dom_html_media_element_get_default_muted(self: PWebKitDOMHTMLMediaElement): gboolean; cdecl; external;
function webkit_dom_html_media_element_get_default_playback_rate(self: PWebKitDOMHTMLMediaElement): gfloat; cdecl; external;
function webkit_dom_html_media_element_get_duration(self: PWebKitDOMHTMLMediaElement): gfloat; cdecl; external;
function webkit_dom_html_media_element_get_ended(self: PWebKitDOMHTMLMediaElement): gboolean; cdecl; external;
function webkit_dom_html_media_element_get_error(self: PWebKitDOMHTMLMediaElement): PWebKitDOMMediaError; cdecl; external;
function webkit_dom_html_media_element_get_initial_time(self: PWebKitDOMHTMLMediaElement): gdouble; cdecl; external;
function webkit_dom_html_media_element_get_loop(self: PWebKitDOMHTMLMediaElement): gboolean; cdecl; external;
function webkit_dom_html_media_element_get_media_group(self: PWebKitDOMHTMLMediaElement): Pgchar; cdecl; external;
function webkit_dom_html_media_element_get_muted(self: PWebKitDOMHTMLMediaElement): gboolean; cdecl; external;
function webkit_dom_html_media_element_get_network_state(self: PWebKitDOMHTMLMediaElement): gushort; cdecl; external;
function webkit_dom_html_media_element_get_paused(self: PWebKitDOMHTMLMediaElement): gboolean; cdecl; external;
function webkit_dom_html_media_element_get_playback_rate(self: PWebKitDOMHTMLMediaElement): gfloat; cdecl; external;
function webkit_dom_html_media_element_get_played(self: PWebKitDOMHTMLMediaElement): PWebKitDOMTimeRanges; cdecl; external;
function webkit_dom_html_media_element_get_preload(self: PWebKitDOMHTMLMediaElement): Pgchar; cdecl; external;
function webkit_dom_html_media_element_get_ready_state(self: PWebKitDOMHTMLMediaElement): gushort; cdecl; external;
function webkit_dom_html_media_element_get_seekable(self: PWebKitDOMHTMLMediaElement): PWebKitDOMTimeRanges; cdecl; external;
function webkit_dom_html_media_element_get_seeking(self: PWebKitDOMHTMLMediaElement): gboolean; cdecl; external;
function webkit_dom_html_media_element_get_src(self: PWebKitDOMHTMLMediaElement): Pgchar; cdecl; external;
function webkit_dom_html_media_element_get_start_time(self: PWebKitDOMHTMLMediaElement): gfloat; cdecl; external;
function webkit_dom_html_media_element_get_type: TGType; cdecl; external;
function webkit_dom_html_media_element_get_volume(self: PWebKitDOMHTMLMediaElement): gfloat; cdecl; external;
function webkit_dom_html_media_element_get_webkit_audio_decoded_byte_count(self: PWebKitDOMHTMLMediaElement): gulong; cdecl; external;
function webkit_dom_html_media_element_get_webkit_closed_captions_visible(self: PWebKitDOMHTMLMediaElement): gboolean; cdecl; external;
function webkit_dom_html_media_element_get_webkit_has_closed_captions(self: PWebKitDOMHTMLMediaElement): gboolean; cdecl; external;
function webkit_dom_html_media_element_get_webkit_preserves_pitch(self: PWebKitDOMHTMLMediaElement): gboolean; cdecl; external;
function webkit_dom_html_media_element_get_webkit_video_decoded_byte_count(self: PWebKitDOMHTMLMediaElement): gulong; cdecl; external;
function webkit_dom_html_menu_element_get_compact(self: PWebKitDOMHTMLMenuElement): gboolean; cdecl; external;
function webkit_dom_html_menu_element_get_type: TGType; cdecl; external;
function webkit_dom_html_meta_element_get_content(self: PWebKitDOMHTMLMetaElement): Pgchar; cdecl; external;
function webkit_dom_html_meta_element_get_http_equiv(self: PWebKitDOMHTMLMetaElement): Pgchar; cdecl; external;
function webkit_dom_html_meta_element_get_name(self: PWebKitDOMHTMLMetaElement): Pgchar; cdecl; external;
function webkit_dom_html_meta_element_get_scheme(self: PWebKitDOMHTMLMetaElement): Pgchar; cdecl; external;
function webkit_dom_html_meta_element_get_type: TGType; cdecl; external;
function webkit_dom_html_mod_element_get_cite(self: PWebKitDOMHTMLModElement): Pgchar; cdecl; external;
function webkit_dom_html_mod_element_get_date_time(self: PWebKitDOMHTMLModElement): Pgchar; cdecl; external;
function webkit_dom_html_mod_element_get_type: TGType; cdecl; external;
function webkit_dom_html_object_element_check_validity(self: PWebKitDOMHTMLObjectElement): gboolean; cdecl; external;
function webkit_dom_html_object_element_get_align(self: PWebKitDOMHTMLObjectElement): Pgchar; cdecl; external;
function webkit_dom_html_object_element_get_archive(self: PWebKitDOMHTMLObjectElement): Pgchar; cdecl; external;
function webkit_dom_html_object_element_get_border(self: PWebKitDOMHTMLObjectElement): Pgchar; cdecl; external;
function webkit_dom_html_object_element_get_code(self: PWebKitDOMHTMLObjectElement): Pgchar; cdecl; external;
function webkit_dom_html_object_element_get_code_base(self: PWebKitDOMHTMLObjectElement): Pgchar; cdecl; external;
function webkit_dom_html_object_element_get_code_type(self: PWebKitDOMHTMLObjectElement): Pgchar; cdecl; external;
function webkit_dom_html_object_element_get_content_document(self: PWebKitDOMHTMLObjectElement): PWebKitDOMDocument; cdecl; external;
function webkit_dom_html_object_element_get_data(self: PWebKitDOMHTMLObjectElement): Pgchar; cdecl; external;
function webkit_dom_html_object_element_get_declare(self: PWebKitDOMHTMLObjectElement): gboolean; cdecl; external;
function webkit_dom_html_object_element_get_form(self: PWebKitDOMHTMLObjectElement): PWebKitDOMHTMLFormElement; cdecl; external;
function webkit_dom_html_object_element_get_height(self: PWebKitDOMHTMLObjectElement): Pgchar; cdecl; external;
function webkit_dom_html_object_element_get_hspace(self: PWebKitDOMHTMLObjectElement): glong; cdecl; external;
function webkit_dom_html_object_element_get_name(self: PWebKitDOMHTMLObjectElement): Pgchar; cdecl; external;
function webkit_dom_html_object_element_get_standby(self: PWebKitDOMHTMLObjectElement): Pgchar; cdecl; external;
function webkit_dom_html_object_element_get_type: TGType; cdecl; external;
function webkit_dom_html_object_element_get_use_map(self: PWebKitDOMHTMLObjectElement): Pgchar; cdecl; external;
function webkit_dom_html_object_element_get_validation_message(self: PWebKitDOMHTMLObjectElement): Pgchar; cdecl; external;
function webkit_dom_html_object_element_get_validity(self: PWebKitDOMHTMLObjectElement): PWebKitDOMValidityState; cdecl; external;
function webkit_dom_html_object_element_get_vspace(self: PWebKitDOMHTMLObjectElement): glong; cdecl; external;
function webkit_dom_html_object_element_get_width(self: PWebKitDOMHTMLObjectElement): Pgchar; cdecl; external;
function webkit_dom_html_object_element_get_will_validate(self: PWebKitDOMHTMLObjectElement): gboolean; cdecl; external;
function webkit_dom_html_opt_group_element_get_disabled(self: PWebKitDOMHTMLOptGroupElement): gboolean; cdecl; external;
function webkit_dom_html_opt_group_element_get_label(self: PWebKitDOMHTMLOptGroupElement): Pgchar; cdecl; external;
function webkit_dom_html_opt_group_element_get_type: TGType; cdecl; external;
function webkit_dom_html_option_element_get_default_selected(self: PWebKitDOMHTMLOptionElement): gboolean; cdecl; external;
function webkit_dom_html_option_element_get_disabled(self: PWebKitDOMHTMLOptionElement): gboolean; cdecl; external;
function webkit_dom_html_option_element_get_form(self: PWebKitDOMHTMLOptionElement): PWebKitDOMHTMLFormElement; cdecl; external;
function webkit_dom_html_option_element_get_index(self: PWebKitDOMHTMLOptionElement): glong; cdecl; external;
function webkit_dom_html_option_element_get_label(self: PWebKitDOMHTMLOptionElement): Pgchar; cdecl; external;
function webkit_dom_html_option_element_get_selected(self: PWebKitDOMHTMLOptionElement): gboolean; cdecl; external;
function webkit_dom_html_option_element_get_text(self: PWebKitDOMHTMLOptionElement): Pgchar; cdecl; external;
function webkit_dom_html_option_element_get_type: TGType; cdecl; external;
function webkit_dom_html_option_element_get_value(self: PWebKitDOMHTMLOptionElement): Pgchar; cdecl; external;
function webkit_dom_html_options_collection_get_selected_index(self: PWebKitDOMHTMLOptionsCollection): glong; cdecl; external;
function webkit_dom_html_options_collection_get_type: TGType; cdecl; external;
function webkit_dom_html_paragraph_element_get_align(self: PWebKitDOMHTMLParagraphElement): Pgchar; cdecl; external;
function webkit_dom_html_paragraph_element_get_type: TGType; cdecl; external;
function webkit_dom_html_param_element_get_name(self: PWebKitDOMHTMLParamElement): Pgchar; cdecl; external;
function webkit_dom_html_param_element_get_type: TGType; cdecl; external;
function webkit_dom_html_param_element_get_value(self: PWebKitDOMHTMLParamElement): Pgchar; cdecl; external;
function webkit_dom_html_param_element_get_value_type(self: PWebKitDOMHTMLParamElement): Pgchar; cdecl; external;
function webkit_dom_html_pre_element_get_type: TGType; cdecl; external;
function webkit_dom_html_pre_element_get_width(self: PWebKitDOMHTMLPreElement): glong; cdecl; external;
function webkit_dom_html_pre_element_get_wrap(self: PWebKitDOMHTMLPreElement): gboolean; cdecl; external;
function webkit_dom_html_properties_collection_get_length(self: PWebKitDOMHTMLPropertiesCollection): gulong; cdecl; external;
function webkit_dom_html_properties_collection_get_names(self: PWebKitDOMHTMLPropertiesCollection): PWebKitDOMDOMStringList; cdecl; external;
function webkit_dom_html_properties_collection_get_type: TGType; cdecl; external;
function webkit_dom_html_properties_collection_item(self: PWebKitDOMHTMLPropertiesCollection; index: gulong): PWebKitDOMNode; cdecl; external;
function webkit_dom_html_properties_collection_named_item(self: PWebKitDOMHTMLPropertiesCollection; name: Pgchar): PWebKitDOMPropertyNodeList; cdecl; external;
function webkit_dom_html_quote_element_get_cite(self: PWebKitDOMHTMLQuoteElement): Pgchar; cdecl; external;
function webkit_dom_html_quote_element_get_type: TGType; cdecl; external;
function webkit_dom_html_script_element_get_async(self: PWebKitDOMHTMLScriptElement): gboolean; cdecl; external;
function webkit_dom_html_script_element_get_charset(self: PWebKitDOMHTMLScriptElement): Pgchar; cdecl; external;
function webkit_dom_html_script_element_get_cross_origin(self: PWebKitDOMHTMLScriptElement): Pgchar; cdecl; external;
function webkit_dom_html_script_element_get_defer(self: PWebKitDOMHTMLScriptElement): gboolean; cdecl; external;
function webkit_dom_html_script_element_get_event(self: PWebKitDOMHTMLScriptElement): Pgchar; cdecl; external;
function webkit_dom_html_script_element_get_html_for(self: PWebKitDOMHTMLScriptElement): Pgchar; cdecl; external;
function webkit_dom_html_script_element_get_nonce(self: PWebKitDOMHTMLScriptElement): Pgchar; cdecl; external;
function webkit_dom_html_script_element_get_src(self: PWebKitDOMHTMLScriptElement): Pgchar; cdecl; external;
function webkit_dom_html_script_element_get_text(self: PWebKitDOMHTMLScriptElement): Pgchar; cdecl; external;
function webkit_dom_html_script_element_get_type: TGType; cdecl; external;
function webkit_dom_html_select_element_check_validity(self: PWebKitDOMHTMLSelectElement): gboolean; cdecl; external;
function webkit_dom_html_select_element_get_autofocus(self: PWebKitDOMHTMLSelectElement): gboolean; cdecl; external;
function webkit_dom_html_select_element_get_disabled(self: PWebKitDOMHTMLSelectElement): gboolean; cdecl; external;
function webkit_dom_html_select_element_get_form(self: PWebKitDOMHTMLSelectElement): PWebKitDOMHTMLFormElement; cdecl; external;
function webkit_dom_html_select_element_get_labels(self: PWebKitDOMHTMLSelectElement): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_html_select_element_get_length(self: PWebKitDOMHTMLSelectElement): gulong; cdecl; external;
function webkit_dom_html_select_element_get_multiple(self: PWebKitDOMHTMLSelectElement): gboolean; cdecl; external;
function webkit_dom_html_select_element_get_name(self: PWebKitDOMHTMLSelectElement): Pgchar; cdecl; external;
function webkit_dom_html_select_element_get_options(self: PWebKitDOMHTMLSelectElement): PWebKitDOMHTMLOptionsCollection; cdecl; external;
function webkit_dom_html_select_element_get_required(self: PWebKitDOMHTMLSelectElement): gboolean; cdecl; external;
function webkit_dom_html_select_element_get_selected_index(self: PWebKitDOMHTMLSelectElement): glong; cdecl; external;
function webkit_dom_html_select_element_get_selected_options(self: PWebKitDOMHTMLSelectElement): PWebKitDOMHTMLCollection; cdecl; external;
function webkit_dom_html_select_element_get_size(self: PWebKitDOMHTMLSelectElement): glong; cdecl; external;
function webkit_dom_html_select_element_get_type: TGType; cdecl; external;
function webkit_dom_html_select_element_get_validation_message(self: PWebKitDOMHTMLSelectElement): Pgchar; cdecl; external;
function webkit_dom_html_select_element_get_validity(self: PWebKitDOMHTMLSelectElement): PWebKitDOMValidityState; cdecl; external;
function webkit_dom_html_select_element_get_value(self: PWebKitDOMHTMLSelectElement): Pgchar; cdecl; external;
function webkit_dom_html_select_element_get_will_validate(self: PWebKitDOMHTMLSelectElement): gboolean; cdecl; external;
function webkit_dom_html_select_element_item(self: PWebKitDOMHTMLSelectElement; index: gulong): PWebKitDOMNode; cdecl; external;
function webkit_dom_html_select_element_named_item(self: PWebKitDOMHTMLSelectElement; name: Pgchar): PWebKitDOMNode; cdecl; external;
function webkit_dom_html_style_element_get_disabled(self: PWebKitDOMHTMLStyleElement): gboolean; cdecl; external;
function webkit_dom_html_style_element_get_media(self: PWebKitDOMHTMLStyleElement): Pgchar; cdecl; external;
function webkit_dom_html_style_element_get_scoped(self: PWebKitDOMHTMLStyleElement): gboolean; cdecl; external;
function webkit_dom_html_style_element_get_sheet(self: PWebKitDOMHTMLStyleElement): PWebKitDOMStyleSheet; cdecl; external;
function webkit_dom_html_style_element_get_type: TGType; cdecl; external;
function webkit_dom_html_table_caption_element_get_align(self: PWebKitDOMHTMLTableCaptionElement): Pgchar; cdecl; external;
function webkit_dom_html_table_caption_element_get_type: TGType; cdecl; external;
function webkit_dom_html_table_cell_element_get_abbr(self: PWebKitDOMHTMLTableCellElement): Pgchar; cdecl; external;
function webkit_dom_html_table_cell_element_get_align(self: PWebKitDOMHTMLTableCellElement): Pgchar; cdecl; external;
function webkit_dom_html_table_cell_element_get_axis(self: PWebKitDOMHTMLTableCellElement): Pgchar; cdecl; external;
function webkit_dom_html_table_cell_element_get_bg_color(self: PWebKitDOMHTMLTableCellElement): Pgchar; cdecl; external;
function webkit_dom_html_table_cell_element_get_cell_index(self: PWebKitDOMHTMLTableCellElement): glong; cdecl; external;
function webkit_dom_html_table_cell_element_get_ch(self: PWebKitDOMHTMLTableCellElement): Pgchar; cdecl; external;
function webkit_dom_html_table_cell_element_get_ch_off(self: PWebKitDOMHTMLTableCellElement): Pgchar; cdecl; external;
function webkit_dom_html_table_cell_element_get_col_span(self: PWebKitDOMHTMLTableCellElement): glong; cdecl; external;
function webkit_dom_html_table_cell_element_get_headers(self: PWebKitDOMHTMLTableCellElement): Pgchar; cdecl; external;
function webkit_dom_html_table_cell_element_get_height(self: PWebKitDOMHTMLTableCellElement): Pgchar; cdecl; external;
function webkit_dom_html_table_cell_element_get_no_wrap(self: PWebKitDOMHTMLTableCellElement): gboolean; cdecl; external;
function webkit_dom_html_table_cell_element_get_row_span(self: PWebKitDOMHTMLTableCellElement): glong; cdecl; external;
function webkit_dom_html_table_cell_element_get_scope(self: PWebKitDOMHTMLTableCellElement): Pgchar; cdecl; external;
function webkit_dom_html_table_cell_element_get_type: TGType; cdecl; external;
function webkit_dom_html_table_cell_element_get_v_align(self: PWebKitDOMHTMLTableCellElement): Pgchar; cdecl; external;
function webkit_dom_html_table_cell_element_get_width(self: PWebKitDOMHTMLTableCellElement): Pgchar; cdecl; external;
function webkit_dom_html_table_col_element_get_align(self: PWebKitDOMHTMLTableColElement): Pgchar; cdecl; external;
function webkit_dom_html_table_col_element_get_ch(self: PWebKitDOMHTMLTableColElement): Pgchar; cdecl; external;
function webkit_dom_html_table_col_element_get_ch_off(self: PWebKitDOMHTMLTableColElement): Pgchar; cdecl; external;
function webkit_dom_html_table_col_element_get_span(self: PWebKitDOMHTMLTableColElement): glong; cdecl; external;
function webkit_dom_html_table_col_element_get_type: TGType; cdecl; external;
function webkit_dom_html_table_col_element_get_v_align(self: PWebKitDOMHTMLTableColElement): Pgchar; cdecl; external;
function webkit_dom_html_table_col_element_get_width(self: PWebKitDOMHTMLTableColElement): Pgchar; cdecl; external;
function webkit_dom_html_table_element_create_caption(self: PWebKitDOMHTMLTableElement): PWebKitDOMHTMLElement; cdecl; external;
function webkit_dom_html_table_element_create_t_body(self: PWebKitDOMHTMLTableElement): PWebKitDOMHTMLElement; cdecl; external;
function webkit_dom_html_table_element_create_t_foot(self: PWebKitDOMHTMLTableElement): PWebKitDOMHTMLElement; cdecl; external;
function webkit_dom_html_table_element_create_t_head(self: PWebKitDOMHTMLTableElement): PWebKitDOMHTMLElement; cdecl; external;
function webkit_dom_html_table_element_get_align(self: PWebKitDOMHTMLTableElement): Pgchar; cdecl; external;
function webkit_dom_html_table_element_get_bg_color(self: PWebKitDOMHTMLTableElement): Pgchar; cdecl; external;
function webkit_dom_html_table_element_get_border(self: PWebKitDOMHTMLTableElement): Pgchar; cdecl; external;
function webkit_dom_html_table_element_get_caption(self: PWebKitDOMHTMLTableElement): PWebKitDOMHTMLTableCaptionElement; cdecl; external;
function webkit_dom_html_table_element_get_cell_padding(self: PWebKitDOMHTMLTableElement): Pgchar; cdecl; external;
function webkit_dom_html_table_element_get_cell_spacing(self: PWebKitDOMHTMLTableElement): Pgchar; cdecl; external;
function webkit_dom_html_table_element_get_frame(self: PWebKitDOMHTMLTableElement): Pgchar; cdecl; external;
function webkit_dom_html_table_element_get_rows(self: PWebKitDOMHTMLTableElement): PWebKitDOMHTMLCollection; cdecl; external;
function webkit_dom_html_table_element_get_rules(self: PWebKitDOMHTMLTableElement): Pgchar; cdecl; external;
function webkit_dom_html_table_element_get_summary(self: PWebKitDOMHTMLTableElement): Pgchar; cdecl; external;
function webkit_dom_html_table_element_get_t_bodies(self: PWebKitDOMHTMLTableElement): PWebKitDOMHTMLCollection; cdecl; external;
function webkit_dom_html_table_element_get_t_foot(self: PWebKitDOMHTMLTableElement): PWebKitDOMHTMLTableSectionElement; cdecl; external;
function webkit_dom_html_table_element_get_t_head(self: PWebKitDOMHTMLTableElement): PWebKitDOMHTMLTableSectionElement; cdecl; external;
function webkit_dom_html_table_element_get_type: TGType; cdecl; external;
function webkit_dom_html_table_element_get_width(self: PWebKitDOMHTMLTableElement): Pgchar; cdecl; external;
function webkit_dom_html_table_element_insert_row(self: PWebKitDOMHTMLTableElement; index: glong; error: PPGError): PWebKitDOMHTMLElement; cdecl; external;
function webkit_dom_html_table_row_element_get_align(self: PWebKitDOMHTMLTableRowElement): Pgchar; cdecl; external;
function webkit_dom_html_table_row_element_get_bg_color(self: PWebKitDOMHTMLTableRowElement): Pgchar; cdecl; external;
function webkit_dom_html_table_row_element_get_cells(self: PWebKitDOMHTMLTableRowElement): PWebKitDOMHTMLCollection; cdecl; external;
function webkit_dom_html_table_row_element_get_ch(self: PWebKitDOMHTMLTableRowElement): Pgchar; cdecl; external;
function webkit_dom_html_table_row_element_get_ch_off(self: PWebKitDOMHTMLTableRowElement): Pgchar; cdecl; external;
function webkit_dom_html_table_row_element_get_row_index(self: PWebKitDOMHTMLTableRowElement): glong; cdecl; external;
function webkit_dom_html_table_row_element_get_section_row_index(self: PWebKitDOMHTMLTableRowElement): glong; cdecl; external;
function webkit_dom_html_table_row_element_get_type: TGType; cdecl; external;
function webkit_dom_html_table_row_element_get_v_align(self: PWebKitDOMHTMLTableRowElement): Pgchar; cdecl; external;
function webkit_dom_html_table_row_element_insert_cell(self: PWebKitDOMHTMLTableRowElement; index: glong; error: PPGError): PWebKitDOMHTMLElement; cdecl; external;
function webkit_dom_html_table_section_element_get_align(self: PWebKitDOMHTMLTableSectionElement): Pgchar; cdecl; external;
function webkit_dom_html_table_section_element_get_ch(self: PWebKitDOMHTMLTableSectionElement): Pgchar; cdecl; external;
function webkit_dom_html_table_section_element_get_ch_off(self: PWebKitDOMHTMLTableSectionElement): Pgchar; cdecl; external;
function webkit_dom_html_table_section_element_get_rows(self: PWebKitDOMHTMLTableSectionElement): PWebKitDOMHTMLCollection; cdecl; external;
function webkit_dom_html_table_section_element_get_type: TGType; cdecl; external;
function webkit_dom_html_table_section_element_get_v_align(self: PWebKitDOMHTMLTableSectionElement): Pgchar; cdecl; external;
function webkit_dom_html_table_section_element_insert_row(self: PWebKitDOMHTMLTableSectionElement; index: glong; error: PPGError): PWebKitDOMHTMLElement; cdecl; external;
function webkit_dom_html_text_area_element_check_validity(self: PWebKitDOMHTMLTextAreaElement): gboolean; cdecl; external;
function webkit_dom_html_text_area_element_get_autofocus(self: PWebKitDOMHTMLTextAreaElement): gboolean; cdecl; external;
function webkit_dom_html_text_area_element_get_cols(self: PWebKitDOMHTMLTextAreaElement): glong; cdecl; external;
function webkit_dom_html_text_area_element_get_default_value(self: PWebKitDOMHTMLTextAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_text_area_element_get_dir_name(self: PWebKitDOMHTMLTextAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_text_area_element_get_disabled(self: PWebKitDOMHTMLTextAreaElement): gboolean; cdecl; external;
function webkit_dom_html_text_area_element_get_form(self: PWebKitDOMHTMLTextAreaElement): PWebKitDOMHTMLFormElement; cdecl; external;
function webkit_dom_html_text_area_element_get_labels(self: PWebKitDOMHTMLTextAreaElement): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_html_text_area_element_get_max_length(self: PWebKitDOMHTMLTextAreaElement): glong; cdecl; external;
function webkit_dom_html_text_area_element_get_name(self: PWebKitDOMHTMLTextAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_text_area_element_get_placeholder(self: PWebKitDOMHTMLTextAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_text_area_element_get_read_only(self: PWebKitDOMHTMLTextAreaElement): gboolean; cdecl; external;
function webkit_dom_html_text_area_element_get_required(self: PWebKitDOMHTMLTextAreaElement): gboolean; cdecl; external;
function webkit_dom_html_text_area_element_get_rows(self: PWebKitDOMHTMLTextAreaElement): glong; cdecl; external;
function webkit_dom_html_text_area_element_get_selection_direction(self: PWebKitDOMHTMLTextAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_text_area_element_get_selection_end(self: PWebKitDOMHTMLTextAreaElement): glong; cdecl; external;
function webkit_dom_html_text_area_element_get_selection_start(self: PWebKitDOMHTMLTextAreaElement): glong; cdecl; external;
function webkit_dom_html_text_area_element_get_text_length(self: PWebKitDOMHTMLTextAreaElement): gulong; cdecl; external;
function webkit_dom_html_text_area_element_get_type: TGType; cdecl; external;
function webkit_dom_html_text_area_element_get_validation_message(self: PWebKitDOMHTMLTextAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_text_area_element_get_validity(self: PWebKitDOMHTMLTextAreaElement): PWebKitDOMValidityState; cdecl; external;
function webkit_dom_html_text_area_element_get_value(self: PWebKitDOMHTMLTextAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_text_area_element_get_will_validate(self: PWebKitDOMHTMLTextAreaElement): gboolean; cdecl; external;
function webkit_dom_html_text_area_element_get_wrap(self: PWebKitDOMHTMLTextAreaElement): Pgchar; cdecl; external;
function webkit_dom_html_text_area_element_is_edited(arg0: PWebKitDOMHTMLTextAreaElement): gboolean; cdecl; external;
function webkit_dom_html_title_element_get_text(self: PWebKitDOMHTMLTitleElement): Pgchar; cdecl; external;
function webkit_dom_html_title_element_get_type: TGType; cdecl; external;
function webkit_dom_html_video_element_get_height(self: PWebKitDOMHTMLVideoElement): gulong; cdecl; external;
function webkit_dom_html_video_element_get_poster(self: PWebKitDOMHTMLVideoElement): Pgchar; cdecl; external;
function webkit_dom_html_video_element_get_type: TGType; cdecl; external;
function webkit_dom_html_video_element_get_video_height(self: PWebKitDOMHTMLVideoElement): gulong; cdecl; external;
function webkit_dom_html_video_element_get_video_width(self: PWebKitDOMHTMLVideoElement): gulong; cdecl; external;
function webkit_dom_html_video_element_get_webkit_decoded_frame_count(self: PWebKitDOMHTMLVideoElement): gulong; cdecl; external;
function webkit_dom_html_video_element_get_webkit_displaying_fullscreen(self: PWebKitDOMHTMLVideoElement): gboolean; cdecl; external;
function webkit_dom_html_video_element_get_webkit_dropped_frame_count(self: PWebKitDOMHTMLVideoElement): gulong; cdecl; external;
function webkit_dom_html_video_element_get_webkit_supports_fullscreen(self: PWebKitDOMHTMLVideoElement): gboolean; cdecl; external;
function webkit_dom_html_video_element_get_width(self: PWebKitDOMHTMLVideoElement): gulong; cdecl; external;
function webkit_dom_htmlbr_element_get_clear(self: PWebKitDOMHTMLBRElement): Pgchar; cdecl; external;
function webkit_dom_htmlbr_element_get_type: TGType; cdecl; external;
function webkit_dom_htmld_list_element_get_compact(self: PWebKitDOMHTMLDListElement): gboolean; cdecl; external;
function webkit_dom_htmld_list_element_get_type: TGType; cdecl; external;
function webkit_dom_htmlhr_element_get_align(self: PWebKitDOMHTMLHRElement): Pgchar; cdecl; external;
function webkit_dom_htmlhr_element_get_no_shade(self: PWebKitDOMHTMLHRElement): gboolean; cdecl; external;
function webkit_dom_htmlhr_element_get_size(self: PWebKitDOMHTMLHRElement): Pgchar; cdecl; external;
function webkit_dom_htmlhr_element_get_type: TGType; cdecl; external;
function webkit_dom_htmlhr_element_get_width(self: PWebKitDOMHTMLHRElement): Pgchar; cdecl; external;
function webkit_dom_htmlli_element_get_type: TGType; cdecl; external;
function webkit_dom_htmlli_element_get_value(self: PWebKitDOMHTMLLIElement): glong; cdecl; external;
function webkit_dom_htmlo_list_element_get_compact(self: PWebKitDOMHTMLOListElement): gboolean; cdecl; external;
function webkit_dom_htmlo_list_element_get_reversed(self: PWebKitDOMHTMLOListElement): gboolean; cdecl; external;
function webkit_dom_htmlo_list_element_get_start(self: PWebKitDOMHTMLOListElement): glong; cdecl; external;
function webkit_dom_htmlo_list_element_get_type: TGType; cdecl; external;
function webkit_dom_htmlu_list_element_get_compact(self: PWebKitDOMHTMLUListElement): gboolean; cdecl; external;
function webkit_dom_htmlu_list_element_get_type: TGType; cdecl; external;
function webkit_dom_location_get_ancestor_origins(self: PWebKitDOMLocation): PWebKitDOMDOMStringList; cdecl; external;
function webkit_dom_location_get_origin(self: PWebKitDOMLocation): Pgchar; cdecl; external;
function webkit_dom_location_get_type: TGType; cdecl; external;
function webkit_dom_media_error_get_code(self: PWebKitDOMMediaError): gushort; cdecl; external;
function webkit_dom_media_error_get_type: TGType; cdecl; external;
function webkit_dom_media_list_get_length(self: PWebKitDOMMediaList): gulong; cdecl; external;
function webkit_dom_media_list_get_media_text(self: PWebKitDOMMediaList): Pgchar; cdecl; external;
function webkit_dom_media_list_get_type: TGType; cdecl; external;
function webkit_dom_media_list_item(self: PWebKitDOMMediaList; index: gulong): Pgchar; cdecl; external;
function webkit_dom_media_query_list_get_matches(self: PWebKitDOMMediaQueryList): gboolean; cdecl; external;
function webkit_dom_media_query_list_get_media(self: PWebKitDOMMediaQueryList): Pgchar; cdecl; external;
function webkit_dom_media_query_list_get_type: TGType; cdecl; external;
function webkit_dom_memory_info_get_js_heap_size_limit(self: PWebKitDOMMemoryInfo): gulong; cdecl; external;
function webkit_dom_memory_info_get_total_js_heap_size(self: PWebKitDOMMemoryInfo): gulong; cdecl; external;
function webkit_dom_memory_info_get_type: TGType; cdecl; external;
function webkit_dom_memory_info_get_used_js_heap_size(self: PWebKitDOMMemoryInfo): gulong; cdecl; external;
function webkit_dom_message_port_get_type: TGType; cdecl; external;
function webkit_dom_micro_data_item_value_get_type: TGType; cdecl; external;
function webkit_dom_mouse_event_get_alt_key(self: PWebKitDOMMouseEvent): gboolean; cdecl; external;
function webkit_dom_mouse_event_get_button(self: PWebKitDOMMouseEvent): gushort; cdecl; external;
function webkit_dom_mouse_event_get_client_x(self: PWebKitDOMMouseEvent): glong; cdecl; external;
function webkit_dom_mouse_event_get_client_y(self: PWebKitDOMMouseEvent): glong; cdecl; external;
function webkit_dom_mouse_event_get_ctrl_key(self: PWebKitDOMMouseEvent): gboolean; cdecl; external;
function webkit_dom_mouse_event_get_from_element(self: PWebKitDOMMouseEvent): PWebKitDOMNode; cdecl; external;
function webkit_dom_mouse_event_get_meta_key(self: PWebKitDOMMouseEvent): gboolean; cdecl; external;
function webkit_dom_mouse_event_get_offset_x(self: PWebKitDOMMouseEvent): glong; cdecl; external;
function webkit_dom_mouse_event_get_offset_y(self: PWebKitDOMMouseEvent): glong; cdecl; external;
function webkit_dom_mouse_event_get_related_target(self: PWebKitDOMMouseEvent): PWebKitDOMEventTarget; cdecl; external;
function webkit_dom_mouse_event_get_screen_x(self: PWebKitDOMMouseEvent): glong; cdecl; external;
function webkit_dom_mouse_event_get_screen_y(self: PWebKitDOMMouseEvent): glong; cdecl; external;
function webkit_dom_mouse_event_get_shift_key(self: PWebKitDOMMouseEvent): gboolean; cdecl; external;
function webkit_dom_mouse_event_get_to_element(self: PWebKitDOMMouseEvent): PWebKitDOMNode; cdecl; external;
function webkit_dom_mouse_event_get_type: TGType; cdecl; external;
function webkit_dom_mouse_event_get_webkit_movement_x(self: PWebKitDOMMouseEvent): glong; cdecl; external;
function webkit_dom_mouse_event_get_webkit_movement_y(self: PWebKitDOMMouseEvent): glong; cdecl; external;
function webkit_dom_mouse_event_get_x(self: PWebKitDOMMouseEvent): glong; cdecl; external;
function webkit_dom_mouse_event_get_y(self: PWebKitDOMMouseEvent): glong; cdecl; external;
function webkit_dom_named_node_map_get_length(self: PWebKitDOMNamedNodeMap): gulong; cdecl; external;
function webkit_dom_named_node_map_get_named_item(self: PWebKitDOMNamedNodeMap; name: Pgchar): PWebKitDOMNode; cdecl; external;
function webkit_dom_named_node_map_get_named_item_ns(self: PWebKitDOMNamedNodeMap; namespaceURI: Pgchar; localName: Pgchar): PWebKitDOMNode; cdecl; external;
function webkit_dom_named_node_map_get_type: TGType; cdecl; external;
function webkit_dom_named_node_map_item(self: PWebKitDOMNamedNodeMap; index: gulong): PWebKitDOMNode; cdecl; external;
function webkit_dom_named_node_map_remove_named_item(self: PWebKitDOMNamedNodeMap; name: Pgchar; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_dom_named_node_map_remove_named_item_ns(self: PWebKitDOMNamedNodeMap; namespaceURI: Pgchar; localName: Pgchar; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_dom_named_node_map_set_named_item(self: PWebKitDOMNamedNodeMap; node: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_dom_named_node_map_set_named_item_ns(self: PWebKitDOMNamedNodeMap; node: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_dom_navigator_get_app_code_name(self: PWebKitDOMNavigator): Pgchar; cdecl; external;
function webkit_dom_navigator_get_app_name(self: PWebKitDOMNavigator): Pgchar; cdecl; external;
function webkit_dom_navigator_get_app_version(self: PWebKitDOMNavigator): Pgchar; cdecl; external;
function webkit_dom_navigator_get_cookie_enabled(self: PWebKitDOMNavigator): gboolean; cdecl; external;
function webkit_dom_navigator_get_geolocation(self: PWebKitDOMNavigator): PWebKitDOMGeolocation; cdecl; external;
function webkit_dom_navigator_get_language(self: PWebKitDOMNavigator): Pgchar; cdecl; external;
function webkit_dom_navigator_get_mime_types(self: PWebKitDOMNavigator): PWebKitDOMDOMMimeTypeArray; cdecl; external;
function webkit_dom_navigator_get_on_line(self: PWebKitDOMNavigator): gboolean; cdecl; external;
function webkit_dom_navigator_get_platform(self: PWebKitDOMNavigator): Pgchar; cdecl; external;
function webkit_dom_navigator_get_plugins(self: PWebKitDOMNavigator): PWebKitDOMDOMPluginArray; cdecl; external;
function webkit_dom_navigator_get_product(self: PWebKitDOMNavigator): Pgchar; cdecl; external;
function webkit_dom_navigator_get_product_sub(self: PWebKitDOMNavigator): Pgchar; cdecl; external;
function webkit_dom_navigator_get_type: TGType; cdecl; external;
function webkit_dom_navigator_get_user_agent(self: PWebKitDOMNavigator): Pgchar; cdecl; external;
function webkit_dom_navigator_get_vendor(self: PWebKitDOMNavigator): Pgchar; cdecl; external;
function webkit_dom_navigator_get_vendor_sub(self: PWebKitDOMNavigator): Pgchar; cdecl; external;
function webkit_dom_navigator_is_protocol_handler_registered(self: PWebKitDOMNavigator; scheme: Pgchar; url: Pgchar; error: PPGError): Pgchar; cdecl; external;
function webkit_dom_navigator_java_enabled(self: PWebKitDOMNavigator): gboolean; cdecl; external;
function webkit_dom_navigator_webkit_get_gamepads(self: PWebKitDOMNavigator): PWebKitDOMGamepadList; cdecl; external;
function webkit_dom_node_append_child(self: PWebKitDOMNode; newChild: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_dom_node_clone_node(self: PWebKitDOMNode; deep: gboolean): PWebKitDOMNode; cdecl; external;
function webkit_dom_node_compare_document_position(self: PWebKitDOMNode; other: PWebKitDOMNode): gushort; cdecl; external;
function webkit_dom_node_contains(self: PWebKitDOMNode; other: PWebKitDOMNode): gboolean; cdecl; external;
function webkit_dom_node_dispatch_event(self: PWebKitDOMNode; event: PWebKitDOMEvent; error: PPGError): gboolean; cdecl; external;
function webkit_dom_node_filter_accept_node(self: PWebKitDOMNodeFilter; n: PWebKitDOMNode): gshort; cdecl; external;
function webkit_dom_node_filter_get_type: TGType; cdecl; external;
function webkit_dom_node_get_attributes(self: PWebKitDOMNode): PWebKitDOMNamedNodeMap; cdecl; external;
function webkit_dom_node_get_base_uri(self: PWebKitDOMNode): Pgchar; cdecl; external;
function webkit_dom_node_get_child_nodes(self: PWebKitDOMNode): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_node_get_first_child(self: PWebKitDOMNode): PWebKitDOMNode; cdecl; external;
function webkit_dom_node_get_last_child(self: PWebKitDOMNode): PWebKitDOMNode; cdecl; external;
function webkit_dom_node_get_local_name(self: PWebKitDOMNode): Pgchar; cdecl; external;
function webkit_dom_node_get_namespace_uri(self: PWebKitDOMNode): Pgchar; cdecl; external;
function webkit_dom_node_get_next_sibling(self: PWebKitDOMNode): PWebKitDOMNode; cdecl; external;
function webkit_dom_node_get_node_name(self: PWebKitDOMNode): Pgchar; cdecl; external;
function webkit_dom_node_get_node_type(self: PWebKitDOMNode): gushort; cdecl; external;
function webkit_dom_node_get_node_value(self: PWebKitDOMNode): Pgchar; cdecl; external;
function webkit_dom_node_get_owner_document(self: PWebKitDOMNode): PWebKitDOMDocument; cdecl; external;
function webkit_dom_node_get_parent_element(self: PWebKitDOMNode): PWebKitDOMElement; cdecl; external;
function webkit_dom_node_get_parent_node(self: PWebKitDOMNode): PWebKitDOMNode; cdecl; external;
function webkit_dom_node_get_prefix(self: PWebKitDOMNode): Pgchar; cdecl; external;
function webkit_dom_node_get_previous_sibling(self: PWebKitDOMNode): PWebKitDOMNode; cdecl; external;
function webkit_dom_node_get_text_content(self: PWebKitDOMNode): Pgchar; cdecl; external;
function webkit_dom_node_get_type: TGType; cdecl; external;
function webkit_dom_node_has_attributes(self: PWebKitDOMNode): gboolean; cdecl; external;
function webkit_dom_node_has_child_nodes(self: PWebKitDOMNode): gboolean; cdecl; external;
function webkit_dom_node_insert_before(self: PWebKitDOMNode; newChild: PWebKitDOMNode; refChild: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_dom_node_is_default_namespace(self: PWebKitDOMNode; namespaceURI: Pgchar): gboolean; cdecl; external;
function webkit_dom_node_is_equal_node(self: PWebKitDOMNode; other: PWebKitDOMNode): gboolean; cdecl; external;
function webkit_dom_node_is_same_node(self: PWebKitDOMNode; other: PWebKitDOMNode): gboolean; cdecl; external;
function webkit_dom_node_is_supported(self: PWebKitDOMNode; feature: Pgchar; version: Pgchar): gboolean; cdecl; external;
function webkit_dom_node_iterator_get_expand_entity_references(self: PWebKitDOMNodeIterator): gboolean; cdecl; external;
function webkit_dom_node_iterator_get_filter(self: PWebKitDOMNodeIterator): PWebKitDOMNodeFilter; cdecl; external;
function webkit_dom_node_iterator_get_pointer_before_reference_node(self: PWebKitDOMNodeIterator): gboolean; cdecl; external;
function webkit_dom_node_iterator_get_reference_node(self: PWebKitDOMNodeIterator): PWebKitDOMNode; cdecl; external;
function webkit_dom_node_iterator_get_root(self: PWebKitDOMNodeIterator): PWebKitDOMNode; cdecl; external;
function webkit_dom_node_iterator_get_type: TGType; cdecl; external;
function webkit_dom_node_iterator_get_what_to_show(self: PWebKitDOMNodeIterator): gulong; cdecl; external;
function webkit_dom_node_iterator_next_node(self: PWebKitDOMNodeIterator; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_dom_node_iterator_previous_node(self: PWebKitDOMNodeIterator; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_dom_node_list_get_length(self: PWebKitDOMNodeList): gulong; cdecl; external;
function webkit_dom_node_list_get_type: TGType; cdecl; external;
function webkit_dom_node_list_item(self: PWebKitDOMNodeList; index: gulong): PWebKitDOMNode; cdecl; external;
function webkit_dom_node_lookup_namespace_uri(self: PWebKitDOMNode; prefix: Pgchar): Pgchar; cdecl; external;
function webkit_dom_node_lookup_prefix(self: PWebKitDOMNode; namespaceURI: Pgchar): Pgchar; cdecl; external;
function webkit_dom_node_remove_child(self: PWebKitDOMNode; oldChild: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_dom_node_replace_child(self: PWebKitDOMNode; newChild: PWebKitDOMNode; oldChild: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_dom_object_get_type: TGType; cdecl; external;
function webkit_dom_performance_entry_get_duration(self: PWebKitDOMPerformanceEntry): gdouble; cdecl; external;
function webkit_dom_performance_entry_get_entry_type(self: PWebKitDOMPerformanceEntry): Pgchar; cdecl; external;
function webkit_dom_performance_entry_get_name(self: PWebKitDOMPerformanceEntry): Pgchar; cdecl; external;
function webkit_dom_performance_entry_get_start_time(self: PWebKitDOMPerformanceEntry): gdouble; cdecl; external;
function webkit_dom_performance_entry_get_type: TGType; cdecl; external;
function webkit_dom_performance_entry_list_get_length(self: PWebKitDOMPerformanceEntryList): gulong; cdecl; external;
function webkit_dom_performance_entry_list_get_type: TGType; cdecl; external;
function webkit_dom_performance_entry_list_item(self: PWebKitDOMPerformanceEntryList; index: gulong): PWebKitDOMPerformanceEntry; cdecl; external;
function webkit_dom_performance_get_memory(self: PWebKitDOMPerformance): PWebKitDOMMemoryInfo; cdecl; external;
function webkit_dom_performance_get_navigation(self: PWebKitDOMPerformance): PWebKitDOMPerformanceNavigation; cdecl; external;
function webkit_dom_performance_get_timing(self: PWebKitDOMPerformance): PWebKitDOMPerformanceTiming; cdecl; external;
function webkit_dom_performance_get_type: TGType; cdecl; external;
function webkit_dom_performance_navigation_get_redirect_count(self: PWebKitDOMPerformanceNavigation): gushort; cdecl; external;
function webkit_dom_performance_navigation_get_type: TGType; cdecl; external;
function webkit_dom_performance_now(self: PWebKitDOMPerformance): gdouble; cdecl; external;
function webkit_dom_performance_timing_get_connect_end(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_connect_start(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_dom_complete(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_dom_content_loaded_event_end(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_dom_content_loaded_event_start(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_dom_interactive(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_dom_loading(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_domain_lookup_end(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_domain_lookup_start(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_fetch_start(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_load_event_end(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_load_event_start(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_navigation_start(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_redirect_end(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_redirect_start(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_request_start(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_response_end(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_response_start(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_secure_connection_start(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_type: TGType; cdecl; external;
function webkit_dom_performance_timing_get_unload_event_end(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_performance_timing_get_unload_event_start(self: PWebKitDOMPerformanceTiming): guint64; cdecl; external;
function webkit_dom_processing_instruction_get_data(self: PWebKitDOMProcessingInstruction): Pgchar; cdecl; external;
function webkit_dom_processing_instruction_get_sheet(self: PWebKitDOMProcessingInstruction): PWebKitDOMStyleSheet; cdecl; external;
function webkit_dom_processing_instruction_get_target(self: PWebKitDOMProcessingInstruction): Pgchar; cdecl; external;
function webkit_dom_processing_instruction_get_type: TGType; cdecl; external;
function webkit_dom_property_node_list_get_length(self: PWebKitDOMPropertyNodeList): gulong; cdecl; external;
function webkit_dom_property_node_list_get_type: TGType; cdecl; external;
function webkit_dom_property_node_list_item(self: PWebKitDOMPropertyNodeList; index: gulong): PWebKitDOMNode; cdecl; external;
function webkit_dom_range_clone_contents(self: PWebKitDOMRange; error: PPGError): PWebKitDOMDocumentFragment; cdecl; external;
function webkit_dom_range_clone_range(self: PWebKitDOMRange; error: PPGError): PWebKitDOMRange; cdecl; external;
function webkit_dom_range_compare_boundary_points(self: PWebKitDOMRange; how: gushort; sourceRange: PWebKitDOMRange; error: PPGError): gshort; cdecl; external;
function webkit_dom_range_compare_node(self: PWebKitDOMRange; refNode: PWebKitDOMNode; error: PPGError): gshort; cdecl; external;
function webkit_dom_range_compare_point(self: PWebKitDOMRange; refNode: PWebKitDOMNode; offset: glong; error: PPGError): gshort; cdecl; external;
function webkit_dom_range_create_contextual_fragment(self: PWebKitDOMRange; html: Pgchar; error: PPGError): PWebKitDOMDocumentFragment; cdecl; external;
function webkit_dom_range_extract_contents(self: PWebKitDOMRange; error: PPGError): PWebKitDOMDocumentFragment; cdecl; external;
function webkit_dom_range_get_collapsed(self: PWebKitDOMRange; error: PPGError): gboolean; cdecl; external;
function webkit_dom_range_get_common_ancestor_container(self: PWebKitDOMRange; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_dom_range_get_end_container(self: PWebKitDOMRange; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_dom_range_get_end_offset(self: PWebKitDOMRange; error: PPGError): glong; cdecl; external;
function webkit_dom_range_get_start_container(self: PWebKitDOMRange; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_dom_range_get_start_offset(self: PWebKitDOMRange; error: PPGError): glong; cdecl; external;
function webkit_dom_range_get_text(self: PWebKitDOMRange): Pgchar; cdecl; external;
function webkit_dom_range_get_type: TGType; cdecl; external;
function webkit_dom_range_intersects_node(self: PWebKitDOMRange; refNode: PWebKitDOMNode; error: PPGError): gboolean; cdecl; external;
function webkit_dom_range_is_point_in_range(self: PWebKitDOMRange; refNode: PWebKitDOMNode; offset: glong; error: PPGError): gboolean; cdecl; external;
function webkit_dom_range_to_string(self: PWebKitDOMRange; error: PPGError): Pgchar; cdecl; external;
function webkit_dom_screen_get_avail_height(self: PWebKitDOMScreen): gulong; cdecl; external;
function webkit_dom_screen_get_avail_left(self: PWebKitDOMScreen): glong; cdecl; external;
function webkit_dom_screen_get_avail_top(self: PWebKitDOMScreen): glong; cdecl; external;
function webkit_dom_screen_get_avail_width(self: PWebKitDOMScreen): gulong; cdecl; external;
function webkit_dom_screen_get_color_depth(self: PWebKitDOMScreen): gulong; cdecl; external;
function webkit_dom_screen_get_height(self: PWebKitDOMScreen): gulong; cdecl; external;
function webkit_dom_screen_get_pixel_depth(self: PWebKitDOMScreen): gulong; cdecl; external;
function webkit_dom_screen_get_type: TGType; cdecl; external;
function webkit_dom_screen_get_width(self: PWebKitDOMScreen): gulong; cdecl; external;
function webkit_dom_shadow_root_element_from_point(self: PWebKitDOMShadowRoot; x: glong; y: glong): PWebKitDOMElement; cdecl; external;
function webkit_dom_shadow_root_get_active_element(self: PWebKitDOMShadowRoot): PWebKitDOMElement; cdecl; external;
function webkit_dom_shadow_root_get_apply_author_styles(self: PWebKitDOMShadowRoot): gboolean; cdecl; external;
function webkit_dom_shadow_root_get_element_by_id(self: PWebKitDOMShadowRoot; elementId: Pgchar): PWebKitDOMElement; cdecl; external;
function webkit_dom_shadow_root_get_elements_by_class_name(self: PWebKitDOMShadowRoot; className: Pgchar): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_shadow_root_get_elements_by_tag_name(self: PWebKitDOMShadowRoot; tagName: Pgchar): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_shadow_root_get_elements_by_tag_name_ns(self: PWebKitDOMShadowRoot; namespaceURI: Pgchar; localName: Pgchar): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_shadow_root_get_inner_html(self: PWebKitDOMShadowRoot): Pgchar; cdecl; external;
function webkit_dom_shadow_root_get_reset_style_inheritance(self: PWebKitDOMShadowRoot): gboolean; cdecl; external;
function webkit_dom_shadow_root_get_selection(self: PWebKitDOMShadowRoot): PWebKitDOMDOMSelection; cdecl; external;
function webkit_dom_shadow_root_get_type: TGType; cdecl; external;
function webkit_dom_storage_get_item(self: PWebKitDOMStorage; key: Pgchar; error: PPGError): Pgchar; cdecl; external;
function webkit_dom_storage_get_length(self: PWebKitDOMStorage; error: PPGError): gulong; cdecl; external;
function webkit_dom_storage_get_type: TGType; cdecl; external;
function webkit_dom_storage_info_get_type: TGType; cdecl; external;
function webkit_dom_storage_key(self: PWebKitDOMStorage; index: gulong; error: PPGError): Pgchar; cdecl; external;
function webkit_dom_style_media_get_type: TGType; cdecl; external;
function webkit_dom_style_media_match_medium(self: PWebKitDOMStyleMedia; mediaquery: Pgchar): gboolean; cdecl; external;
function webkit_dom_style_sheet_get_disabled(self: PWebKitDOMStyleSheet): gboolean; cdecl; external;
function webkit_dom_style_sheet_get_href(self: PWebKitDOMStyleSheet): Pgchar; cdecl; external;
function webkit_dom_style_sheet_get_media(self: PWebKitDOMStyleSheet): PWebKitDOMMediaList; cdecl; external;
function webkit_dom_style_sheet_get_owner_node(self: PWebKitDOMStyleSheet): PWebKitDOMNode; cdecl; external;
function webkit_dom_style_sheet_get_parent_style_sheet(self: PWebKitDOMStyleSheet): PWebKitDOMStyleSheet; cdecl; external;
function webkit_dom_style_sheet_get_title(self: PWebKitDOMStyleSheet): Pgchar; cdecl; external;
function webkit_dom_style_sheet_get_type: TGType; cdecl; external;
function webkit_dom_style_sheet_list_get_length(self: PWebKitDOMStyleSheetList): gulong; cdecl; external;
function webkit_dom_style_sheet_list_get_type: TGType; cdecl; external;
function webkit_dom_style_sheet_list_item(self: PWebKitDOMStyleSheetList; index: gulong): PWebKitDOMStyleSheet; cdecl; external;
function webkit_dom_text_get_type: TGType; cdecl; external;
function webkit_dom_text_get_whole_text(self: PWebKitDOMText): Pgchar; cdecl; external;
function webkit_dom_text_replace_whole_text(self: PWebKitDOMText; content: Pgchar; error: PPGError): PWebKitDOMText; cdecl; external;
function webkit_dom_text_split_text(self: PWebKitDOMText; offset: gulong; error: PPGError): PWebKitDOMText; cdecl; external;
function webkit_dom_text_track_cue_dispatch_event(self: PWebKitDOMTextTrackCue; evt: PWebKitDOMEvent; error: PPGError): gboolean; cdecl; external;
function webkit_dom_text_track_cue_get_align(self: PWebKitDOMTextTrackCue): Pgchar; cdecl; external;
function webkit_dom_text_track_cue_get_cue_as_html(self: PWebKitDOMTextTrackCue): PWebKitDOMDocumentFragment; cdecl; external;
function webkit_dom_text_track_cue_get_end_time(self: PWebKitDOMTextTrackCue): gdouble; cdecl; external;
function webkit_dom_text_track_cue_get_id(self: PWebKitDOMTextTrackCue): Pgchar; cdecl; external;
function webkit_dom_text_track_cue_get_line(self: PWebKitDOMTextTrackCue): glong; cdecl; external;
function webkit_dom_text_track_cue_get_pause_on_exit(self: PWebKitDOMTextTrackCue): gboolean; cdecl; external;
function webkit_dom_text_track_cue_get_position(self: PWebKitDOMTextTrackCue): glong; cdecl; external;
function webkit_dom_text_track_cue_get_size(self: PWebKitDOMTextTrackCue): glong; cdecl; external;
function webkit_dom_text_track_cue_get_snap_to_lines(self: PWebKitDOMTextTrackCue): gboolean; cdecl; external;
function webkit_dom_text_track_cue_get_start_time(self: PWebKitDOMTextTrackCue): gdouble; cdecl; external;
function webkit_dom_text_track_cue_get_text(self: PWebKitDOMTextTrackCue): Pgchar; cdecl; external;
function webkit_dom_text_track_cue_get_track(self: PWebKitDOMTextTrackCue): PWebKitDOMTextTrack; cdecl; external;
function webkit_dom_text_track_cue_get_type: TGType; cdecl; external;
function webkit_dom_text_track_cue_get_vertical(self: PWebKitDOMTextTrackCue): Pgchar; cdecl; external;
function webkit_dom_text_track_cue_list_get_cue_by_id(self: PWebKitDOMTextTrackCueList; id: Pgchar): PWebKitDOMTextTrackCue; cdecl; external;
function webkit_dom_text_track_cue_list_get_length(self: PWebKitDOMTextTrackCueList): gulong; cdecl; external;
function webkit_dom_text_track_cue_list_get_type: TGType; cdecl; external;
function webkit_dom_text_track_cue_list_item(self: PWebKitDOMTextTrackCueList; index: gulong): PWebKitDOMTextTrackCue; cdecl; external;
function webkit_dom_text_track_dispatch_event(self: PWebKitDOMTextTrack; evt: PWebKitDOMEvent; error: PPGError): gboolean; cdecl; external;
function webkit_dom_text_track_get_active_cues(self: PWebKitDOMTextTrack): PWebKitDOMTextTrackCueList; cdecl; external;
function webkit_dom_text_track_get_cues(self: PWebKitDOMTextTrack): PWebKitDOMTextTrackCueList; cdecl; external;
function webkit_dom_text_track_get_kind(self: PWebKitDOMTextTrack): Pgchar; cdecl; external;
function webkit_dom_text_track_get_label(self: PWebKitDOMTextTrack): Pgchar; cdecl; external;
function webkit_dom_text_track_get_language(self: PWebKitDOMTextTrack): Pgchar; cdecl; external;
function webkit_dom_text_track_get_mode(self: PWebKitDOMTextTrack): Pgchar; cdecl; external;
function webkit_dom_text_track_get_type: TGType; cdecl; external;
function webkit_dom_text_track_list_dispatch_event(self: PWebKitDOMTextTrackList; evt: PWebKitDOMEvent; error: PPGError): gboolean; cdecl; external;
function webkit_dom_text_track_list_get_length(self: PWebKitDOMTextTrackList): gulong; cdecl; external;
function webkit_dom_text_track_list_get_type: TGType; cdecl; external;
function webkit_dom_text_track_list_item(self: PWebKitDOMTextTrackList; index: gulong): PWebKitDOMTextTrack; cdecl; external;
function webkit_dom_time_ranges_end(self: PWebKitDOMTimeRanges; index: gulong; error: PPGError): gfloat; cdecl; external;
function webkit_dom_time_ranges_get_length(self: PWebKitDOMTimeRanges): gulong; cdecl; external;
function webkit_dom_time_ranges_get_type: TGType; cdecl; external;
function webkit_dom_time_ranges_start(self: PWebKitDOMTimeRanges; index: gulong; error: PPGError): gfloat; cdecl; external;
function webkit_dom_track_event_get_type: TGType; cdecl; external;
function webkit_dom_tree_walker_first_child(self: PWebKitDOMTreeWalker): PWebKitDOMNode; cdecl; external;
function webkit_dom_tree_walker_get_current_node(self: PWebKitDOMTreeWalker): PWebKitDOMNode; cdecl; external;
function webkit_dom_tree_walker_get_expand_entity_references(self: PWebKitDOMTreeWalker): gboolean; cdecl; external;
function webkit_dom_tree_walker_get_filter(self: PWebKitDOMTreeWalker): PWebKitDOMNodeFilter; cdecl; external;
function webkit_dom_tree_walker_get_root(self: PWebKitDOMTreeWalker): PWebKitDOMNode; cdecl; external;
function webkit_dom_tree_walker_get_type: TGType; cdecl; external;
function webkit_dom_tree_walker_get_what_to_show(self: PWebKitDOMTreeWalker): gulong; cdecl; external;
function webkit_dom_tree_walker_last_child(self: PWebKitDOMTreeWalker): PWebKitDOMNode; cdecl; external;
function webkit_dom_tree_walker_next_node(self: PWebKitDOMTreeWalker): PWebKitDOMNode; cdecl; external;
function webkit_dom_tree_walker_next_sibling(self: PWebKitDOMTreeWalker): PWebKitDOMNode; cdecl; external;
function webkit_dom_tree_walker_parent_node(self: PWebKitDOMTreeWalker): PWebKitDOMNode; cdecl; external;
function webkit_dom_tree_walker_previous_node(self: PWebKitDOMTreeWalker): PWebKitDOMNode; cdecl; external;
function webkit_dom_tree_walker_previous_sibling(self: PWebKitDOMTreeWalker): PWebKitDOMNode; cdecl; external;
function webkit_dom_ui_event_get_char_code(self: PWebKitDOMUIEvent): glong; cdecl; external;
function webkit_dom_ui_event_get_detail(self: PWebKitDOMUIEvent): glong; cdecl; external;
function webkit_dom_ui_event_get_key_code(self: PWebKitDOMUIEvent): glong; cdecl; external;
function webkit_dom_ui_event_get_layer_x(self: PWebKitDOMUIEvent): glong; cdecl; external;
function webkit_dom_ui_event_get_layer_y(self: PWebKitDOMUIEvent): glong; cdecl; external;
function webkit_dom_ui_event_get_page_x(self: PWebKitDOMUIEvent): glong; cdecl; external;
function webkit_dom_ui_event_get_page_y(self: PWebKitDOMUIEvent): glong; cdecl; external;
function webkit_dom_ui_event_get_type: TGType; cdecl; external;
function webkit_dom_ui_event_get_view(self: PWebKitDOMUIEvent): PWebKitDOMDOMWindow; cdecl; external;
function webkit_dom_ui_event_get_which(self: PWebKitDOMUIEvent): glong; cdecl; external;
function webkit_dom_validity_state_get_bad_input(self: PWebKitDOMValidityState): gboolean; cdecl; external;
function webkit_dom_validity_state_get_custom_error(self: PWebKitDOMValidityState): gboolean; cdecl; external;
function webkit_dom_validity_state_get_pattern_mismatch(self: PWebKitDOMValidityState): gboolean; cdecl; external;
function webkit_dom_validity_state_get_range_overflow(self: PWebKitDOMValidityState): gboolean; cdecl; external;
function webkit_dom_validity_state_get_range_underflow(self: PWebKitDOMValidityState): gboolean; cdecl; external;
function webkit_dom_validity_state_get_step_mismatch(self: PWebKitDOMValidityState): gboolean; cdecl; external;
function webkit_dom_validity_state_get_too_long(self: PWebKitDOMValidityState): gboolean; cdecl; external;
function webkit_dom_validity_state_get_type: TGType; cdecl; external;
function webkit_dom_validity_state_get_type_mismatch(self: PWebKitDOMValidityState): gboolean; cdecl; external;
function webkit_dom_validity_state_get_valid(self: PWebKitDOMValidityState): gboolean; cdecl; external;
function webkit_dom_validity_state_get_value_missing(self: PWebKitDOMValidityState): gboolean; cdecl; external;
function webkit_dom_webkit_named_flow_dispatch_event(self: PWebKitDOMWebKitNamedFlow; event: PWebKitDOMEvent; error: PPGError): gboolean; cdecl; external;
function webkit_dom_webkit_named_flow_get_content(self: PWebKitDOMWebKitNamedFlow): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_webkit_named_flow_get_content_nodes(namedFlow: PWebKitDOMWebKitNamedFlow): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_webkit_named_flow_get_first_empty_region_index(self: PWebKitDOMWebKitNamedFlow): glong; cdecl; external;
function webkit_dom_webkit_named_flow_get_name(self: PWebKitDOMWebKitNamedFlow): Pgchar; cdecl; external;
function webkit_dom_webkit_named_flow_get_overflow(flow: PWebKitDOMWebKitNamedFlow): gboolean; cdecl; external;
function webkit_dom_webkit_named_flow_get_overset(self: PWebKitDOMWebKitNamedFlow): gboolean; cdecl; external;
function webkit_dom_webkit_named_flow_get_regions(self: PWebKitDOMWebKitNamedFlow): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_webkit_named_flow_get_regions_by_content(self: PWebKitDOMWebKitNamedFlow; contentNode: PWebKitDOMNode): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_webkit_named_flow_get_regions_by_content_node(namedFlow: PWebKitDOMWebKitNamedFlow; contentNode: PWebKitDOMNode): PWebKitDOMNodeList; cdecl; external;
function webkit_dom_webkit_named_flow_get_type: TGType; cdecl; external;
function webkit_dom_webkit_point_get_type: TGType; cdecl; external;
function webkit_dom_webkit_point_get_x(self: PWebKitDOMWebKitPoint): gfloat; cdecl; external;
function webkit_dom_webkit_point_get_y(self: PWebKitDOMWebKitPoint): gfloat; cdecl; external;
function webkit_dom_xpath_expression_evaluate(self: PWebKitDOMXPathExpression; contextNode: PWebKitDOMNode; type_: gushort; inResult: PWebKitDOMXPathResult; error: PPGError): PWebKitDOMXPathResult; cdecl; external;
function webkit_dom_xpath_expression_get_type: TGType; cdecl; external;
function webkit_dom_xpath_ns_resolver_get_type: TGType; cdecl; external;
function webkit_dom_xpath_ns_resolver_lookup_namespace_uri(self: PWebKitDOMXPathNSResolver; prefix: Pgchar): Pgchar; cdecl; external;
function webkit_dom_xpath_result_get_boolean_value(self: PWebKitDOMXPathResult; error: PPGError): gboolean; cdecl; external;
function webkit_dom_xpath_result_get_invalid_iterator_state(self: PWebKitDOMXPathResult): gboolean; cdecl; external;
function webkit_dom_xpath_result_get_number_value(self: PWebKitDOMXPathResult; error: PPGError): gdouble; cdecl; external;
function webkit_dom_xpath_result_get_result_type(self: PWebKitDOMXPathResult): gushort; cdecl; external;
function webkit_dom_xpath_result_get_single_node_value(self: PWebKitDOMXPathResult; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_dom_xpath_result_get_snapshot_length(self: PWebKitDOMXPathResult; error: PPGError): gulong; cdecl; external;
function webkit_dom_xpath_result_get_string_value(self: PWebKitDOMXPathResult; error: PPGError): Pgchar; cdecl; external;
function webkit_dom_xpath_result_get_type: TGType; cdecl; external;
function webkit_dom_xpath_result_iterate_next(self: PWebKitDOMXPathResult; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_dom_xpath_result_snapshot_item(self: PWebKitDOMXPathResult; index: gulong; error: PPGError): PWebKitDOMNode; cdecl; external;
function webkit_download_get_current_size(download: PWebKitDownload): guint64; cdecl; external;
function webkit_download_get_destination_uri(download: PWebKitDownload): Pgchar; cdecl; external;
function webkit_download_get_elapsed_time(download: PWebKitDownload): gdouble; cdecl; external;
function webkit_download_get_network_request(download: PWebKitDownload): PWebKitNetworkRequest; cdecl; external;
function webkit_download_get_network_response(download: PWebKitDownload): PWebKitNetworkResponse; cdecl; external;
function webkit_download_get_progress(download: PWebKitDownload): gdouble; cdecl; external;
function webkit_download_get_status(download: PWebKitDownload): TWebKitDownloadStatus; cdecl; external;
function webkit_download_get_suggested_filename(download: PWebKitDownload): Pgchar; cdecl; external;
function webkit_download_get_total_size(download: PWebKitDownload): guint64; cdecl; external;
function webkit_download_get_type: TGType; cdecl; external;
function webkit_download_get_uri(download: PWebKitDownload): Pgchar; cdecl; external;
function webkit_download_new(request: PWebKitNetworkRequest): PWebKitDownload; cdecl; external;
function webkit_favicon_database_get_favicon_pixbuf_finish(database: PWebKitFaviconDatabase; result_: PGAsyncResult; error: PPGError): PGdkPixbuf; cdecl; external;
function webkit_favicon_database_get_favicon_uri(database: PWebKitFaviconDatabase; page_uri: Pgchar): Pgchar; cdecl; external;
function webkit_favicon_database_get_path(database: PWebKitFaviconDatabase): Pgchar; cdecl; external;
function webkit_favicon_database_get_type: TGType; cdecl; external;
function webkit_favicon_database_try_get_favicon_pixbuf(database: PWebKitFaviconDatabase; page_uri: Pgchar; width: guint; height: guint): PGdkPixbuf; cdecl; external;
function webkit_file_chooser_request_get_mime_types(request: PWebKitFileChooserRequest): PPgchar; cdecl; external;
function webkit_file_chooser_request_get_mime_types_filter(request: PWebKitFileChooserRequest): PGtkFileFilter; cdecl; external;
function webkit_file_chooser_request_get_select_multiple(request: PWebKitFileChooserRequest): gboolean; cdecl; external;
function webkit_file_chooser_request_get_selected_files(request: PWebKitFileChooserRequest): PPgchar; cdecl; external;
function webkit_file_chooser_request_get_type: TGType; cdecl; external;
function webkit_geolocation_policy_decision_get_type: TGType; cdecl; external;
function webkit_get_cache_model: TWebKitCacheModel; cdecl; external;
function webkit_get_default_session: PSoupSession; cdecl; external;
function webkit_get_default_web_database_quota: guint64; cdecl; external;
function webkit_get_favicon_database: PWebKitFaviconDatabase; cdecl; external;
function webkit_get_icon_database: PWebKitIconDatabase; cdecl; external;
function webkit_get_security_policy_for_uri_scheme(scheme: Pgchar): TWebKitSecurityPolicy; cdecl; external;
function webkit_get_text_checker: PGObject; cdecl; external;
function webkit_get_web_database_directory_path: Pgchar; cdecl; external;
function webkit_get_web_plugin_database: PWebKitWebPluginDatabase; cdecl; external;
function webkit_hit_test_result_get_type: TGType; cdecl; external;
function webkit_icon_database_get_type: TGType; cdecl; external;
function webkit_major_version: guint; cdecl; external;
function webkit_micro_version: guint; cdecl; external;
function webkit_minor_version: guint; cdecl; external;
function webkit_network_error_quark: TGQuark; cdecl; external;
function webkit_network_request_get_message(request: PWebKitNetworkRequest): PSoupMessage; cdecl; external;
function webkit_network_request_get_type: TGType; cdecl; external;
function webkit_network_request_get_uri(request: PWebKitNetworkRequest): Pgchar; cdecl; external;
function webkit_network_request_new(uri: Pgchar): PWebKitNetworkRequest; cdecl; external;
function webkit_network_response_get_message(response: PWebKitNetworkResponse): PSoupMessage; cdecl; external;
function webkit_network_response_get_suggested_filename(response: PWebKitNetworkResponse): Pgchar; cdecl; external;
function webkit_network_response_get_type: TGType; cdecl; external;
function webkit_network_response_get_uri(response: PWebKitNetworkResponse): Pgchar; cdecl; external;
function webkit_network_response_new(uri: Pgchar): PWebKitNetworkResponse; cdecl; external;
function webkit_plugin_error_quark: TGQuark; cdecl; external;
function webkit_policy_error_quark: TGQuark; cdecl; external;
function webkit_security_origin_get_all_web_databases(securityOrigin: PWebKitSecurityOrigin): PGList; cdecl; external;
function webkit_security_origin_get_host(securityOrigin: PWebKitSecurityOrigin): Pgchar; cdecl; external;
function webkit_security_origin_get_port(securityOrigin: PWebKitSecurityOrigin): guint; cdecl; external;
function webkit_security_origin_get_protocol(securityOrigin: PWebKitSecurityOrigin): Pgchar; cdecl; external;
function webkit_security_origin_get_type: TGType; cdecl; external;
function webkit_security_origin_get_web_database_quota(securityOrigin: PWebKitSecurityOrigin): guint64; cdecl; external;
function webkit_security_origin_get_web_database_usage(securityOrigin: PWebKitSecurityOrigin): guint64; cdecl; external;
function webkit_soup_auth_dialog_get_type: TGType; cdecl; external;
function webkit_spell_checker_get_autocorrect_suggestions_for_misspelled_word(checker: PWebKitSpellChecker; word: Pgchar): Pgchar; cdecl; external;
function webkit_spell_checker_get_guesses_for_word(checker: PWebKitSpellChecker; word: Pgchar; context: Pgchar): PPgchar; cdecl; external;
function webkit_spell_checker_get_type: TGType; cdecl; external;
function webkit_viewport_attributes_get_type: TGType; cdecl; external;
function webkit_web_back_forward_list_contains_item(web_back_forward_list: PWebKitWebBackForwardList; history_item: PWebKitWebHistoryItem): gboolean; cdecl; external;
function webkit_web_back_forward_list_get_back_item(web_back_forward_list: PWebKitWebBackForwardList): PWebKitWebHistoryItem; cdecl; external;
function webkit_web_back_forward_list_get_back_length(web_back_forward_list: PWebKitWebBackForwardList): gint; cdecl; external;
function webkit_web_back_forward_list_get_back_list_with_limit(web_back_forward_list: PWebKitWebBackForwardList; limit: gint): PGList; cdecl; external;
function webkit_web_back_forward_list_get_current_item(web_back_forward_list: PWebKitWebBackForwardList): PWebKitWebHistoryItem; cdecl; external;
function webkit_web_back_forward_list_get_forward_item(web_back_forward_list: PWebKitWebBackForwardList): PWebKitWebHistoryItem; cdecl; external;
function webkit_web_back_forward_list_get_forward_length(web_back_forward_list: PWebKitWebBackForwardList): gint; cdecl; external;
function webkit_web_back_forward_list_get_forward_list_with_limit(web_back_forward_list: PWebKitWebBackForwardList; limit: gint): PGList; cdecl; external;
function webkit_web_back_forward_list_get_limit(web_back_forward_list: PWebKitWebBackForwardList): gint; cdecl; external;
function webkit_web_back_forward_list_get_nth_item(web_back_forward_list: PWebKitWebBackForwardList; index: gint): PWebKitWebHistoryItem; cdecl; external;
function webkit_web_back_forward_list_get_type: TGType; cdecl; external;
function webkit_web_data_source_get_data(data_source: PWebKitWebDataSource): PGString; cdecl; external;
function webkit_web_data_source_get_encoding(data_source: PWebKitWebDataSource): Pgchar; cdecl; external;
function webkit_web_data_source_get_initial_request(data_source: PWebKitWebDataSource): PWebKitNetworkRequest; cdecl; external;
function webkit_web_data_source_get_main_resource(data_source: PWebKitWebDataSource): PWebKitWebResource; cdecl; external;
function webkit_web_data_source_get_request(data_source: PWebKitWebDataSource): PWebKitNetworkRequest; cdecl; external;
function webkit_web_data_source_get_subresources(data_source: PWebKitWebDataSource): PGList; cdecl; external;
function webkit_web_data_source_get_type: TGType; cdecl; external;
function webkit_web_data_source_get_unreachable_uri(data_source: PWebKitWebDataSource): Pgchar; cdecl; external;
function webkit_web_data_source_get_web_frame(data_source: PWebKitWebDataSource): PWebKitWebFrame; cdecl; external;
function webkit_web_data_source_is_loading(data_source: PWebKitWebDataSource): gboolean; cdecl; external;
function webkit_web_data_source_new: PWebKitWebDataSource; cdecl; external;
function webkit_web_data_source_new_with_request(request: PWebKitNetworkRequest): PWebKitWebDataSource; cdecl; external;
function webkit_web_database_get_display_name(webDatabase: PWebKitWebDatabase): Pgchar; cdecl; external;
function webkit_web_database_get_expected_size(webDatabase: PWebKitWebDatabase): guint64; cdecl; external;
function webkit_web_database_get_filename(webDatabase: PWebKitWebDatabase): Pgchar; cdecl; external;
function webkit_web_database_get_name(webDatabase: PWebKitWebDatabase): Pgchar; cdecl; external;
function webkit_web_database_get_security_origin(webDatabase: PWebKitWebDatabase): PWebKitSecurityOrigin; cdecl; external;
function webkit_web_database_get_size(webDatabase: PWebKitWebDatabase): guint64; cdecl; external;
function webkit_web_database_get_type: TGType; cdecl; external;
function webkit_web_frame_find_frame(frame: PWebKitWebFrame; name: Pgchar): PWebKitWebFrame; cdecl; external;
function webkit_web_frame_get_data_source(frame: PWebKitWebFrame): PWebKitWebDataSource; cdecl; external;
function webkit_web_frame_get_dom_document(frame: PWebKitWebFrame): PWebKitDOMDocument; cdecl; external;
function webkit_web_frame_get_global_context(frame: PWebKitWebFrame): TJSGlobalContextRef; cdecl; external;
function webkit_web_frame_get_horizontal_scrollbar_policy(frame: PWebKitWebFrame): TGtkPolicyType; cdecl; external;
function webkit_web_frame_get_load_status(frame: PWebKitWebFrame): TWebKitLoadStatus; cdecl; external;
function webkit_web_frame_get_name(frame: PWebKitWebFrame): Pgchar; cdecl; external;
function webkit_web_frame_get_network_response(frame: PWebKitWebFrame): PWebKitNetworkResponse; cdecl; external;
function webkit_web_frame_get_parent(frame: PWebKitWebFrame): PWebKitWebFrame; cdecl; external;
function webkit_web_frame_get_provisional_data_source(frame: PWebKitWebFrame): PWebKitWebDataSource; cdecl; external;
function webkit_web_frame_get_range_for_word_around_caret(frame: PWebKitWebFrame): PWebKitDOMRange; cdecl; external;
function webkit_web_frame_get_security_origin(frame: PWebKitWebFrame): PWebKitSecurityOrigin; cdecl; external;
function webkit_web_frame_get_title(frame: PWebKitWebFrame): Pgchar; cdecl; external;
function webkit_web_frame_get_type: TGType; cdecl; external;
function webkit_web_frame_get_uri(frame: PWebKitWebFrame): Pgchar; cdecl; external;
function webkit_web_frame_get_vertical_scrollbar_policy(frame: PWebKitWebFrame): TGtkPolicyType; cdecl; external;
function webkit_web_frame_get_web_view(frame: PWebKitWebFrame): PWebKitWebView; cdecl; external;
function webkit_web_frame_print_full(frame: PWebKitWebFrame; operation: PGtkPrintOperation; action: TGtkPrintOperationAction; error: PPGError): TGtkPrintOperationResult; cdecl; external;
function webkit_web_history_item_copy(web_history_item: PWebKitWebHistoryItem): PWebKitWebHistoryItem; cdecl; external;
function webkit_web_history_item_get_alternate_title(web_history_item: PWebKitWebHistoryItem): Pgchar; cdecl; external;
function webkit_web_history_item_get_last_visited_time(web_history_item: PWebKitWebHistoryItem): gdouble; cdecl; external;
function webkit_web_history_item_get_original_uri(web_history_item: PWebKitWebHistoryItem): Pgchar; cdecl; external;
function webkit_web_history_item_get_title(web_history_item: PWebKitWebHistoryItem): Pgchar; cdecl; external;
function webkit_web_history_item_get_type: TGType; cdecl; external;
function webkit_web_history_item_get_uri(web_history_item: PWebKitWebHistoryItem): Pgchar; cdecl; external;
function webkit_web_history_item_new: PWebKitWebHistoryItem; cdecl; external;
function webkit_web_history_item_new_with_data(uri: Pgchar; title: Pgchar): PWebKitWebHistoryItem; cdecl; external;
function webkit_web_inspector_get_inspected_uri(web_inspector: PWebKitWebInspector): Pgchar; cdecl; external;
function webkit_web_inspector_get_type: TGType; cdecl; external;
function webkit_web_inspector_get_web_view(web_inspector: PWebKitWebInspector): PWebKitWebView; cdecl; external;
function webkit_web_navigation_action_get_button(navigationAction: PWebKitWebNavigationAction): gint; cdecl; external;
function webkit_web_navigation_action_get_modifier_state(navigationAction: PWebKitWebNavigationAction): gint; cdecl; external;
function webkit_web_navigation_action_get_original_uri(navigationAction: PWebKitWebNavigationAction): Pgchar; cdecl; external;
function webkit_web_navigation_action_get_reason(navigationAction: PWebKitWebNavigationAction): TWebKitWebNavigationReason; cdecl; external;
function webkit_web_navigation_action_get_target_frame(navigationAction: PWebKitWebNavigationAction): Pgchar; cdecl; external;
function webkit_web_navigation_action_get_type: TGType; cdecl; external;
function webkit_web_plugin_database_get_plugin_for_mimetype(database: PWebKitWebPluginDatabase; mime_type: Pgchar): PWebKitWebPlugin; cdecl; external;
function webkit_web_plugin_database_get_plugins(database: PWebKitWebPluginDatabase): PGSList; cdecl; external;
function webkit_web_plugin_database_get_type: TGType; cdecl; external;
function webkit_web_plugin_get_description(plugin: PWebKitWebPlugin): Pgchar; cdecl; external;
function webkit_web_plugin_get_enabled(plugin: PWebKitWebPlugin): gboolean; cdecl; external;
function webkit_web_plugin_get_mimetypes(plugin: PWebKitWebPlugin): PGSList; cdecl; external;
function webkit_web_plugin_get_name(plugin: PWebKitWebPlugin): Pgchar; cdecl; external;
function webkit_web_plugin_get_path(plugin: PWebKitWebPlugin): Pgchar; cdecl; external;
function webkit_web_plugin_get_type: TGType; cdecl; external;
function webkit_web_policy_decision_get_type: TGType; cdecl; external;
function webkit_web_resource_get_data(web_resource: PWebKitWebResource): PGString; cdecl; external;
function webkit_web_resource_get_encoding(web_resource: PWebKitWebResource): Pgchar; cdecl; external;
function webkit_web_resource_get_frame_name(web_resource: PWebKitWebResource): Pgchar; cdecl; external;
function webkit_web_resource_get_mime_type(web_resource: PWebKitWebResource): Pgchar; cdecl; external;
function webkit_web_resource_get_type: TGType; cdecl; external;
function webkit_web_resource_get_uri(web_resource: PWebKitWebResource): Pgchar; cdecl; external;
function webkit_web_resource_new(data: Pgchar; size: gssize; uri: Pgchar; mime_type: Pgchar; encoding: Pgchar; frame_name: Pgchar): PWebKitWebResource; cdecl; external;
function webkit_web_settings_copy(web_settings: PWebKitWebSettings): PWebKitWebSettings; cdecl; external;
function webkit_web_settings_get_type: TGType; cdecl; external;
function webkit_web_settings_get_user_agent(web_settings: PWebKitWebSettings): Pgchar; cdecl; external;
function webkit_web_settings_new: PWebKitWebSettings; cdecl; external;
function webkit_web_view_can_copy_clipboard(web_view: PWebKitWebView): gboolean; cdecl; external;
function webkit_web_view_can_cut_clipboard(web_view: PWebKitWebView): gboolean; cdecl; external;
function webkit_web_view_can_go_back(web_view: PWebKitWebView): gboolean; cdecl; external;
function webkit_web_view_can_go_back_or_forward(web_view: PWebKitWebView; steps: gint): gboolean; cdecl; external;
function webkit_web_view_can_go_forward(web_view: PWebKitWebView): gboolean; cdecl; external;
function webkit_web_view_can_paste_clipboard(web_view: PWebKitWebView): gboolean; cdecl; external;
function webkit_web_view_can_redo(web_view: PWebKitWebView): gboolean; cdecl; external;
function webkit_web_view_can_show_mime_type(web_view: PWebKitWebView; mime_type: Pgchar): gboolean; cdecl; external;
function webkit_web_view_can_undo(web_view: PWebKitWebView): gboolean; cdecl; external;
function webkit_web_view_get_back_forward_list(web_view: PWebKitWebView): PWebKitWebBackForwardList; cdecl; external;
function webkit_web_view_get_copy_target_list(web_view: PWebKitWebView): PGtkTargetList; cdecl; external;
function webkit_web_view_get_custom_encoding(web_view: PWebKitWebView): Pgchar; cdecl; external;
function webkit_web_view_get_dom_document(web_view: PWebKitWebView): PWebKitDOMDocument; cdecl; external;
function webkit_web_view_get_editable(web_view: PWebKitWebView): gboolean; cdecl; external;
function webkit_web_view_get_encoding(web_view: PWebKitWebView): Pgchar; cdecl; external;
function webkit_web_view_get_focused_frame(web_view: PWebKitWebView): PWebKitWebFrame; cdecl; external;
function webkit_web_view_get_full_content_zoom(web_view: PWebKitWebView): gboolean; cdecl; external;
function webkit_web_view_get_hit_test_result(web_view: PWebKitWebView; event: PGdkEventButton): PWebKitHitTestResult; cdecl; external;
function webkit_web_view_get_icon_uri(web_view: PWebKitWebView): Pgchar; cdecl; external;
function webkit_web_view_get_inspector(web_view: PWebKitWebView): PWebKitWebInspector; cdecl; external;
function webkit_web_view_get_load_status(web_view: PWebKitWebView): TWebKitLoadStatus; cdecl; external;
function webkit_web_view_get_main_frame(web_view: PWebKitWebView): PWebKitWebFrame; cdecl; external;
function webkit_web_view_get_paste_target_list(web_view: PWebKitWebView): PGtkTargetList; cdecl; external;
function webkit_web_view_get_progress(web_view: PWebKitWebView): gdouble; cdecl; external;
function webkit_web_view_get_settings(web_view: PWebKitWebView): PWebKitWebSettings; cdecl; external;
function webkit_web_view_get_snapshot(web_view: PWebKitWebView): Pcairo_surface_t; cdecl; external;
function webkit_web_view_get_title(web_view: PWebKitWebView): Pgchar; cdecl; external;
function webkit_web_view_get_transparent(web_view: PWebKitWebView): gboolean; cdecl; external;
function webkit_web_view_get_type: TGType; cdecl; external;
function webkit_web_view_get_uri(web_view: PWebKitWebView): Pgchar; cdecl; external;
function webkit_web_view_get_view_mode(web_view: PWebKitWebView): TWebKitWebViewViewMode; cdecl; external;
function webkit_web_view_get_view_source_mode(web_view: PWebKitWebView): gboolean; cdecl; external;
function webkit_web_view_get_viewport_attributes(web_view: PWebKitWebView): PWebKitViewportAttributes; cdecl; external;
function webkit_web_view_get_window_features(web_view: PWebKitWebView): PWebKitWebWindowFeatures; cdecl; external;
function webkit_web_view_get_zoom_level(web_view: PWebKitWebView): gfloat; cdecl; external;
function webkit_web_view_go_to_back_forward_item(web_view: PWebKitWebView; item: PWebKitWebHistoryItem): gboolean; cdecl; external;
function webkit_web_view_has_selection(web_view: PWebKitWebView): gboolean; cdecl; external;
function webkit_web_view_mark_text_matches(web_view: PWebKitWebView; string_: Pgchar; case_sensitive: gboolean; limit: guint): guint; cdecl; external;
function webkit_web_view_new: PWebKitWebView; cdecl; external;
function webkit_web_view_search_text(web_view: PWebKitWebView; text: Pgchar; case_sensitive: gboolean; forward: gboolean; wrap: gboolean): gboolean; cdecl; external;
function webkit_web_view_try_get_favicon_pixbuf(web_view: PWebKitWebView; width: guint; height: guint): PGdkPixbuf; cdecl; external;
function webkit_web_window_features_equal(features1: PWebKitWebWindowFeatures; features2: PWebKitWebWindowFeatures): gboolean; cdecl; external;
function webkit_web_window_features_get_type: TGType; cdecl; external;
function webkit_web_window_features_new: PWebKitWebWindowFeatures; cdecl; external;
procedure webkit_application_cache_set_maximum_size(size: unsigned_long_long); cdecl; external;
procedure webkit_dom_attr_set_value(self: PWebKitDOMAttr; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_character_data_append_data(self: PWebKitDOMCharacterData; data: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_character_data_delete_data(self: PWebKitDOMCharacterData; offset: gulong; length: gulong; error: PPGError); cdecl; external;
procedure webkit_dom_character_data_insert_data(self: PWebKitDOMCharacterData; offset: gulong; data: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_character_data_remove(self: PWebKitDOMCharacterData; error: PPGError); cdecl; external;
procedure webkit_dom_character_data_replace_data(self: PWebKitDOMCharacterData; offset: gulong; length: gulong; data: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_character_data_set_data(self: PWebKitDOMCharacterData; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_console_group_end(self: PWebKitDOMConsole); cdecl; external;
procedure webkit_dom_console_time(self: PWebKitDOMConsole; title: Pgchar); cdecl; external;
procedure webkit_dom_css_rule_set_css_text(self: PWebKitDOMCSSRule; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_css_style_declaration_set_css_text(self: PWebKitDOMCSSStyleDeclaration; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_css_style_declaration_set_property(self: PWebKitDOMCSSStyleDeclaration; propertyName: Pgchar; value: Pgchar; priority: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_css_style_sheet_delete_rule(self: PWebKitDOMCSSStyleSheet; index: gulong; error: PPGError); cdecl; external;
procedure webkit_dom_css_style_sheet_remove_rule(self: PWebKitDOMCSSStyleSheet; index: gulong; error: PPGError); cdecl; external;
procedure webkit_dom_css_value_set_css_text(self: PWebKitDOMCSSValue; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_document_set_body(self: PWebKitDOMDocument; value: PWebKitDOMHTMLElement; error: PPGError); cdecl; external;
procedure webkit_dom_document_set_charset(self: PWebKitDOMDocument; value: Pgchar); cdecl; external;
procedure webkit_dom_document_set_cookie(self: PWebKitDOMDocument; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_document_set_document_uri(self: PWebKitDOMDocument; value: Pgchar); cdecl; external;
procedure webkit_dom_document_set_selected_stylesheet_set(self: PWebKitDOMDocument; value: Pgchar); cdecl; external;
procedure webkit_dom_document_set_title(self: PWebKitDOMDocument; value: Pgchar); cdecl; external;
procedure webkit_dom_document_set_xml_standalone(self: PWebKitDOMDocument; value: gboolean; error: PPGError); cdecl; external;
procedure webkit_dom_document_set_xml_version(self: PWebKitDOMDocument; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_document_type_remove(self: PWebKitDOMDocumentType; error: PPGError); cdecl; external;
procedure webkit_dom_document_webkit_cancel_full_screen(self: PWebKitDOMDocument); cdecl; external;
procedure webkit_dom_document_webkit_exit_fullscreen(self: PWebKitDOMDocument); cdecl; external;
procedure webkit_dom_document_webkit_exit_pointer_lock(self: PWebKitDOMDocument); cdecl; external;
procedure webkit_dom_dom_application_cache_abort(self: PWebKitDOMDOMApplicationCache); cdecl; external;
procedure webkit_dom_dom_application_cache_swap_cache(self: PWebKitDOMDOMApplicationCache; error: PPGError); cdecl; external;
procedure webkit_dom_dom_application_cache_update(self: PWebKitDOMDOMApplicationCache; error: PPGError); cdecl; external;
procedure webkit_dom_dom_plugin_array_refresh(self: PWebKitDOMDOMPluginArray; reload: gboolean); cdecl; external;
procedure webkit_dom_dom_selection_add_range(self: PWebKitDOMDOMSelection; range: PWebKitDOMRange); cdecl; external;
procedure webkit_dom_dom_selection_collapse(self: PWebKitDOMDOMSelection; node: PWebKitDOMNode; index: glong; error: PPGError); cdecl; external;
procedure webkit_dom_dom_selection_collapse_to_end(self: PWebKitDOMDOMSelection; error: PPGError); cdecl; external;
procedure webkit_dom_dom_selection_collapse_to_start(self: PWebKitDOMDOMSelection; error: PPGError); cdecl; external;
procedure webkit_dom_dom_selection_delete_from_document(self: PWebKitDOMDOMSelection); cdecl; external;
procedure webkit_dom_dom_selection_empty(self: PWebKitDOMDOMSelection); cdecl; external;
procedure webkit_dom_dom_selection_extend(self: PWebKitDOMDOMSelection; node: PWebKitDOMNode; offset: glong; error: PPGError); cdecl; external;
procedure webkit_dom_dom_selection_modify(self: PWebKitDOMDOMSelection; alter: Pgchar; direction: Pgchar; granularity: Pgchar); cdecl; external;
procedure webkit_dom_dom_selection_remove_all_ranges(self: PWebKitDOMDOMSelection); cdecl; external;
procedure webkit_dom_dom_selection_select_all_children(self: PWebKitDOMDOMSelection; node: PWebKitDOMNode; error: PPGError); cdecl; external;
procedure webkit_dom_dom_selection_set_base_and_extent(self: PWebKitDOMDOMSelection; baseNode: PWebKitDOMNode; baseOffset: glong; extentNode: PWebKitDOMNode; extentOffset: glong; error: PPGError); cdecl; external;
procedure webkit_dom_dom_selection_set_position(self: PWebKitDOMDOMSelection; node: PWebKitDOMNode; offset: glong; error: PPGError); cdecl; external;
procedure webkit_dom_dom_settable_token_list_set_value(self: PWebKitDOMDOMSettableTokenList; value: Pgchar); cdecl; external;
procedure webkit_dom_dom_token_list_add(self: PWebKitDOMDOMTokenList; tokens: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_dom_token_list_remove(self: PWebKitDOMDOMTokenList; tokens: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_dom_window_alert(self: PWebKitDOMDOMWindow; message: Pgchar); cdecl; external;
procedure webkit_dom_dom_window_blur(self: PWebKitDOMDOMWindow); cdecl; external;
procedure webkit_dom_dom_window_cancel_animation_frame(self: PWebKitDOMDOMWindow; id: glong); cdecl; external;
procedure webkit_dom_dom_window_capture_events(self: PWebKitDOMDOMWindow); cdecl; external;
procedure webkit_dom_dom_window_clear_interval(self: PWebKitDOMDOMWindow; handle: glong); cdecl; external;
procedure webkit_dom_dom_window_clear_timeout(self: PWebKitDOMDOMWindow; handle: glong); cdecl; external;
procedure webkit_dom_dom_window_close(self: PWebKitDOMDOMWindow); cdecl; external;
procedure webkit_dom_dom_window_focus(self: PWebKitDOMDOMWindow); cdecl; external;
procedure webkit_dom_dom_window_move_by(self: PWebKitDOMDOMWindow; x: gfloat; y: gfloat); cdecl; external;
procedure webkit_dom_dom_window_move_to(self: PWebKitDOMDOMWindow; x: gfloat; y: gfloat); cdecl; external;
procedure webkit_dom_dom_window_print(self: PWebKitDOMDOMWindow); cdecl; external;
procedure webkit_dom_dom_window_release_events(self: PWebKitDOMDOMWindow); cdecl; external;
procedure webkit_dom_dom_window_resize_by(self: PWebKitDOMDOMWindow; x: gfloat; y: gfloat); cdecl; external;
procedure webkit_dom_dom_window_resize_to(self: PWebKitDOMDOMWindow; width: gfloat; height: gfloat); cdecl; external;
procedure webkit_dom_dom_window_scroll(self: PWebKitDOMDOMWindow; x: glong; y: glong); cdecl; external;
procedure webkit_dom_dom_window_scroll_by(self: PWebKitDOMDOMWindow; x: glong; y: glong); cdecl; external;
procedure webkit_dom_dom_window_scroll_to(self: PWebKitDOMDOMWindow; x: glong; y: glong); cdecl; external;
procedure webkit_dom_dom_window_set_default_status(self: PWebKitDOMDOMWindow; value: Pgchar); cdecl; external;
procedure webkit_dom_dom_window_set_name(self: PWebKitDOMDOMWindow; value: Pgchar); cdecl; external;
procedure webkit_dom_dom_window_set_status(self: PWebKitDOMDOMWindow; value: Pgchar); cdecl; external;
procedure webkit_dom_dom_window_stop(self: PWebKitDOMDOMWindow); cdecl; external;
procedure webkit_dom_dom_window_webkit_cancel_animation_frame(self: PWebKitDOMDOMWindow; id: glong); cdecl; external;
procedure webkit_dom_dom_window_webkit_cancel_request_animation_frame(self: PWebKitDOMDOMWindow; id: glong); cdecl; external;
procedure webkit_dom_element_blur(self: PWebKitDOMElement); cdecl; external;
procedure webkit_dom_element_focus(self: PWebKitDOMElement); cdecl; external;
procedure webkit_dom_element_remove(self: PWebKitDOMElement; error: PPGError); cdecl; external;
procedure webkit_dom_element_remove_attribute(self: PWebKitDOMElement; name: Pgchar); cdecl; external;
procedure webkit_dom_element_remove_attribute_ns(self: PWebKitDOMElement; namespaceURI: Pgchar; localName: Pgchar); cdecl; external;
procedure webkit_dom_element_scroll_by_lines(self: PWebKitDOMElement; lines: glong); cdecl; external;
procedure webkit_dom_element_scroll_by_pages(self: PWebKitDOMElement; pages: glong); cdecl; external;
procedure webkit_dom_element_scroll_into_view(self: PWebKitDOMElement; alignWithTop: gboolean); cdecl; external;
procedure webkit_dom_element_scroll_into_view_if_needed(self: PWebKitDOMElement; centerIfNeeded: gboolean); cdecl; external;
procedure webkit_dom_element_set_attribute(self: PWebKitDOMElement; name: Pgchar; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_element_set_attribute_ns(self: PWebKitDOMElement; namespaceURI: Pgchar; qualifiedName: Pgchar; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_element_set_class_name(self: PWebKitDOMElement; value: Pgchar); cdecl; external;
procedure webkit_dom_element_set_scroll_left(self: PWebKitDOMElement; value: glong); cdecl; external;
procedure webkit_dom_element_set_scroll_top(self: PWebKitDOMElement; value: glong); cdecl; external;
procedure webkit_dom_element_webkit_request_full_screen(self: PWebKitDOMElement; flags: gushort); cdecl; external;
procedure webkit_dom_element_webkit_request_fullscreen(self: PWebKitDOMElement); cdecl; external;
procedure webkit_dom_element_webkit_request_pointer_lock(self: PWebKitDOMElement); cdecl; external;
procedure webkit_dom_event_init_event(self: PWebKitDOMEvent; eventTypeArg: Pgchar; canBubbleArg: gboolean; cancelableArg: gboolean); cdecl; external;
procedure webkit_dom_event_prevent_default(self: PWebKitDOMEvent); cdecl; external;
procedure webkit_dom_event_set_cancel_bubble(self: PWebKitDOMEvent; value: gboolean); cdecl; external;
procedure webkit_dom_event_set_return_value(self: PWebKitDOMEvent; value: gboolean); cdecl; external;
procedure webkit_dom_event_stop_immediate_propagation(self: PWebKitDOMEvent); cdecl; external;
procedure webkit_dom_event_stop_propagation(self: PWebKitDOMEvent); cdecl; external;
procedure webkit_dom_event_target_dispatch_event(target: PWebKitDOMEventTarget; event: PWebKitDOMEvent; error: PPGError); cdecl; external;
procedure webkit_dom_geolocation_clear_watch(self: PWebKitDOMGeolocation; watchID: glong); cdecl; external;
procedure webkit_dom_history_back(self: PWebKitDOMHistory); cdecl; external;
procedure webkit_dom_history_forward(self: PWebKitDOMHistory); cdecl; external;
procedure webkit_dom_history_go(self: PWebKitDOMHistory; distance: glong); cdecl; external;
procedure webkit_dom_html_anchor_element_set_charset(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_anchor_element_set_coords(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_anchor_element_set_download(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_anchor_element_set_hash(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_anchor_element_set_host(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_anchor_element_set_hostname(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_anchor_element_set_href(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_anchor_element_set_hreflang(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_anchor_element_set_name(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_anchor_element_set_pathname(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_anchor_element_set_ping(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_anchor_element_set_port(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_anchor_element_set_protocol(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_anchor_element_set_rel(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_anchor_element_set_rev(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_anchor_element_set_search(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_anchor_element_set_shape(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_anchor_element_set_target(self: PWebKitDOMHTMLAnchorElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_applet_element_set_align(self: PWebKitDOMHTMLAppletElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_applet_element_set_alt(self: PWebKitDOMHTMLAppletElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_applet_element_set_archive(self: PWebKitDOMHTMLAppletElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_applet_element_set_code(self: PWebKitDOMHTMLAppletElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_applet_element_set_code_base(self: PWebKitDOMHTMLAppletElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_applet_element_set_height(self: PWebKitDOMHTMLAppletElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_applet_element_set_hspace(self: PWebKitDOMHTMLAppletElement; value: glong); cdecl; external;
procedure webkit_dom_html_applet_element_set_name(self: PWebKitDOMHTMLAppletElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_applet_element_set_object(self: PWebKitDOMHTMLAppletElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_applet_element_set_vspace(self: PWebKitDOMHTMLAppletElement; value: glong); cdecl; external;
procedure webkit_dom_html_applet_element_set_width(self: PWebKitDOMHTMLAppletElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_area_element_set_alt(self: PWebKitDOMHTMLAreaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_area_element_set_coords(self: PWebKitDOMHTMLAreaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_area_element_set_href(self: PWebKitDOMHTMLAreaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_area_element_set_no_href(self: PWebKitDOMHTMLAreaElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_area_element_set_ping(self: PWebKitDOMHTMLAreaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_area_element_set_shape(self: PWebKitDOMHTMLAreaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_area_element_set_target(self: PWebKitDOMHTMLAreaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_base_element_set_href(self: PWebKitDOMHTMLBaseElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_base_element_set_target(self: PWebKitDOMHTMLBaseElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_base_font_element_set_color(self: PWebKitDOMHTMLBaseFontElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_base_font_element_set_face(self: PWebKitDOMHTMLBaseFontElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_base_font_element_set_size(self: PWebKitDOMHTMLBaseFontElement; value: glong); cdecl; external;
procedure webkit_dom_html_body_element_set_a_link(self: PWebKitDOMHTMLBodyElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_body_element_set_background(self: PWebKitDOMHTMLBodyElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_body_element_set_bg_color(self: PWebKitDOMHTMLBodyElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_body_element_set_link(self: PWebKitDOMHTMLBodyElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_body_element_set_text(self: PWebKitDOMHTMLBodyElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_body_element_set_v_link(self: PWebKitDOMHTMLBodyElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_button_element_set_autofocus(self: PWebKitDOMHTMLButtonElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_button_element_set_custom_validity(self: PWebKitDOMHTMLButtonElement; error: Pgchar); cdecl; external;
procedure webkit_dom_html_button_element_set_disabled(self: PWebKitDOMHTMLButtonElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_button_element_set_form_action(self: PWebKitDOMHTMLButtonElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_button_element_set_form_enctype(self: PWebKitDOMHTMLButtonElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_button_element_set_form_method(self: PWebKitDOMHTMLButtonElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_button_element_set_form_no_validate(self: PWebKitDOMHTMLButtonElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_button_element_set_form_target(self: PWebKitDOMHTMLButtonElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_button_element_set_name(self: PWebKitDOMHTMLButtonElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_button_element_set_value(self: PWebKitDOMHTMLButtonElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_canvas_element_set_height(self: PWebKitDOMHTMLCanvasElement; value: glong); cdecl; external;
procedure webkit_dom_html_canvas_element_set_width(self: PWebKitDOMHTMLCanvasElement; value: glong); cdecl; external;
procedure webkit_dom_html_details_element_set_open(self: PWebKitDOMHTMLDetailsElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_directory_element_set_compact(self: PWebKitDOMHTMLDirectoryElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_div_element_set_align(self: PWebKitDOMHTMLDivElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_document_capture_events(self: PWebKitDOMHTMLDocument); cdecl; external;
procedure webkit_dom_html_document_clear(self: PWebKitDOMHTMLDocument); cdecl; external;
procedure webkit_dom_html_document_close(self: PWebKitDOMHTMLDocument); cdecl; external;
procedure webkit_dom_html_document_open(self: PWebKitDOMHTMLDocument); cdecl; external;
procedure webkit_dom_html_document_release_events(self: PWebKitDOMHTMLDocument); cdecl; external;
procedure webkit_dom_html_document_set_alink_color(self: PWebKitDOMHTMLDocument; value: Pgchar); cdecl; external;
procedure webkit_dom_html_document_set_bg_color(self: PWebKitDOMHTMLDocument; value: Pgchar); cdecl; external;
procedure webkit_dom_html_document_set_design_mode(self: PWebKitDOMHTMLDocument; value: Pgchar); cdecl; external;
procedure webkit_dom_html_document_set_dir(self: PWebKitDOMHTMLDocument; value: Pgchar); cdecl; external;
procedure webkit_dom_html_document_set_fg_color(self: PWebKitDOMHTMLDocument; value: Pgchar); cdecl; external;
procedure webkit_dom_html_document_set_link_color(self: PWebKitDOMHTMLDocument; value: Pgchar); cdecl; external;
procedure webkit_dom_html_document_set_vlink_color(self: PWebKitDOMHTMLDocument; value: Pgchar); cdecl; external;
procedure webkit_dom_html_element_click(self: PWebKitDOMHTMLElement); cdecl; external;
procedure webkit_dom_html_element_insert_adjacent_html(self: PWebKitDOMHTMLElement; where: Pgchar; html: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_html_element_insert_adjacent_text(self: PWebKitDOMHTMLElement; where: Pgchar; text: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_html_element_set_access_key(self: PWebKitDOMHTMLElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_element_set_class_name(element: PWebKitDOMHTMLElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_element_set_content_editable(self: PWebKitDOMHTMLElement; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_html_element_set_dir(self: PWebKitDOMHTMLElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_element_set_draggable(self: PWebKitDOMHTMLElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_element_set_hidden(self: PWebKitDOMHTMLElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_element_set_id(self: PWebKitDOMHTMLElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_element_set_inner_html(self: PWebKitDOMHTMLElement; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_html_element_set_inner_text(self: PWebKitDOMHTMLElement; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_html_element_set_item_id(self: PWebKitDOMHTMLElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_element_set_item_scope(self: PWebKitDOMHTMLElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_element_set_lang(self: PWebKitDOMHTMLElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_element_set_outer_html(self: PWebKitDOMHTMLElement; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_html_element_set_outer_text(self: PWebKitDOMHTMLElement; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_html_element_set_spellcheck(self: PWebKitDOMHTMLElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_element_set_tab_index(self: PWebKitDOMHTMLElement; value: glong); cdecl; external;
procedure webkit_dom_html_element_set_title(self: PWebKitDOMHTMLElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_element_set_translate(self: PWebKitDOMHTMLElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_element_set_webkitdropzone(self: PWebKitDOMHTMLElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_embed_element_set_align(self: PWebKitDOMHTMLEmbedElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_embed_element_set_height(self: PWebKitDOMHTMLEmbedElement; value: glong); cdecl; external;
procedure webkit_dom_html_embed_element_set_name(self: PWebKitDOMHTMLEmbedElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_embed_element_set_src(self: PWebKitDOMHTMLEmbedElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_embed_element_set_width(self: PWebKitDOMHTMLEmbedElement; value: glong); cdecl; external;
procedure webkit_dom_html_field_set_element_set_custom_validity(self: PWebKitDOMHTMLFieldSetElement; error: Pgchar); cdecl; external;
procedure webkit_dom_html_field_set_element_set_disabled(self: PWebKitDOMHTMLFieldSetElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_field_set_element_set_name(self: PWebKitDOMHTMLFieldSetElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_font_element_set_color(self: PWebKitDOMHTMLFontElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_font_element_set_face(self: PWebKitDOMHTMLFontElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_font_element_set_size(self: PWebKitDOMHTMLFontElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_form_element_dispatch_form_change(self: PWebKitDOMHTMLFormElement); cdecl; external;
procedure webkit_dom_html_form_element_dispatch_form_input(self: PWebKitDOMHTMLFormElement); cdecl; external;
procedure webkit_dom_html_form_element_reset(self: PWebKitDOMHTMLFormElement); cdecl; external;
procedure webkit_dom_html_form_element_set_accept_charset(self: PWebKitDOMHTMLFormElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_form_element_set_action(self: PWebKitDOMHTMLFormElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_form_element_set_autocomplete(self: PWebKitDOMHTMLFormElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_form_element_set_encoding(self: PWebKitDOMHTMLFormElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_form_element_set_enctype(self: PWebKitDOMHTMLFormElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_form_element_set_method(self: PWebKitDOMHTMLFormElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_form_element_set_name(self: PWebKitDOMHTMLFormElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_form_element_set_no_validate(self: PWebKitDOMHTMLFormElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_form_element_set_target(self: PWebKitDOMHTMLFormElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_form_element_submit(self: PWebKitDOMHTMLFormElement); cdecl; external;
procedure webkit_dom_html_frame_element_set_frame_border(self: PWebKitDOMHTMLFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_frame_element_set_long_desc(self: PWebKitDOMHTMLFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_frame_element_set_margin_height(self: PWebKitDOMHTMLFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_frame_element_set_margin_width(self: PWebKitDOMHTMLFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_frame_element_set_name(self: PWebKitDOMHTMLFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_frame_element_set_no_resize(self: PWebKitDOMHTMLFrameElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_frame_element_set_scrolling(self: PWebKitDOMHTMLFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_frame_element_set_src(self: PWebKitDOMHTMLFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_frame_set_element_set_cols(self: PWebKitDOMHTMLFrameSetElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_frame_set_element_set_rows(self: PWebKitDOMHTMLFrameSetElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_head_element_set_profile(self: PWebKitDOMHTMLHeadElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_heading_element_set_align(self: PWebKitDOMHTMLHeadingElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_html_element_set_manifest(self: PWebKitDOMHTMLHtmlElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_html_element_set_version(self: PWebKitDOMHTMLHtmlElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_iframe_element_set_align(self: PWebKitDOMHTMLIFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_iframe_element_set_frame_border(self: PWebKitDOMHTMLIFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_iframe_element_set_height(self: PWebKitDOMHTMLIFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_iframe_element_set_long_desc(self: PWebKitDOMHTMLIFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_iframe_element_set_margin_height(self: PWebKitDOMHTMLIFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_iframe_element_set_margin_width(self: PWebKitDOMHTMLIFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_iframe_element_set_name(self: PWebKitDOMHTMLIFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_iframe_element_set_sandbox(self: PWebKitDOMHTMLIFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_iframe_element_set_scrolling(self: PWebKitDOMHTMLIFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_iframe_element_set_seamless(self: PWebKitDOMHTMLIFrameElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_iframe_element_set_src(self: PWebKitDOMHTMLIFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_iframe_element_set_srcdoc(self: PWebKitDOMHTMLIFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_iframe_element_set_width(self: PWebKitDOMHTMLIFrameElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_image_element_set_align(self: PWebKitDOMHTMLImageElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_image_element_set_alt(self: PWebKitDOMHTMLImageElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_image_element_set_border(self: PWebKitDOMHTMLImageElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_image_element_set_cross_origin(self: PWebKitDOMHTMLImageElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_image_element_set_height(self: PWebKitDOMHTMLImageElement; value: glong); cdecl; external;
procedure webkit_dom_html_image_element_set_hspace(self: PWebKitDOMHTMLImageElement; value: glong); cdecl; external;
procedure webkit_dom_html_image_element_set_is_map(self: PWebKitDOMHTMLImageElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_image_element_set_long_desc(self: PWebKitDOMHTMLImageElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_image_element_set_lowsrc(self: PWebKitDOMHTMLImageElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_image_element_set_name(self: PWebKitDOMHTMLImageElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_image_element_set_src(self: PWebKitDOMHTMLImageElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_image_element_set_use_map(self: PWebKitDOMHTMLImageElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_image_element_set_vspace(self: PWebKitDOMHTMLImageElement; value: glong); cdecl; external;
procedure webkit_dom_html_image_element_set_width(self: PWebKitDOMHTMLImageElement; value: glong); cdecl; external;
procedure webkit_dom_html_input_element_select(self: PWebKitDOMHTMLInputElement); cdecl; external;
procedure webkit_dom_html_input_element_set_accept(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_align(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_alt(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_autocomplete(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_autofocus(self: PWebKitDOMHTMLInputElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_input_element_set_capture(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_checked(self: PWebKitDOMHTMLInputElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_input_element_set_custom_validity(self: PWebKitDOMHTMLInputElement; error: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_default_checked(self: PWebKitDOMHTMLInputElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_input_element_set_default_value(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_dir_name(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_disabled(self: PWebKitDOMHTMLInputElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_input_element_set_files(self: PWebKitDOMHTMLInputElement; value: PWebKitDOMFileList); cdecl; external;
procedure webkit_dom_html_input_element_set_form_action(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_form_enctype(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_form_method(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_form_no_validate(self: PWebKitDOMHTMLInputElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_input_element_set_form_target(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_height(self: PWebKitDOMHTMLInputElement; value: gulong); cdecl; external;
procedure webkit_dom_html_input_element_set_incremental(self: PWebKitDOMHTMLInputElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_input_element_set_indeterminate(self: PWebKitDOMHTMLInputElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_input_element_set_max(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_max_length(self: PWebKitDOMHTMLInputElement; value: glong; error: PPGError); cdecl; external;
procedure webkit_dom_html_input_element_set_min(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_multiple(self: PWebKitDOMHTMLInputElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_input_element_set_name(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_pattern(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_placeholder(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_range_text(self: PWebKitDOMHTMLInputElement; replacement: Pgchar; start: gulong; end_: gulong; selectionMode: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_html_input_element_set_read_only(self: PWebKitDOMHTMLInputElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_input_element_set_required(self: PWebKitDOMHTMLInputElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_input_element_set_size(self: PWebKitDOMHTMLInputElement; value: gulong; error: PPGError); cdecl; external;
procedure webkit_dom_html_input_element_set_src(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_step(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_use_map(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_value(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_value_as_number(self: PWebKitDOMHTMLInputElement; value: gdouble; error: PPGError); cdecl; external;
procedure webkit_dom_html_input_element_set_value_for_user(self: PWebKitDOMHTMLInputElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_input_element_set_webkit_grammar(self: PWebKitDOMHTMLInputElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_input_element_set_webkit_speech(self: PWebKitDOMHTMLInputElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_input_element_set_webkitdirectory(self: PWebKitDOMHTMLInputElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_input_element_set_width(self: PWebKitDOMHTMLInputElement; value: gulong); cdecl; external;
procedure webkit_dom_html_input_element_step_down(self: PWebKitDOMHTMLInputElement; n: glong; error: PPGError); cdecl; external;
procedure webkit_dom_html_input_element_step_up(self: PWebKitDOMHTMLInputElement; n: glong; error: PPGError); cdecl; external;
procedure webkit_dom_html_keygen_element_set_autofocus(self: PWebKitDOMHTMLKeygenElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_keygen_element_set_challenge(self: PWebKitDOMHTMLKeygenElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_keygen_element_set_custom_validity(self: PWebKitDOMHTMLKeygenElement; error: Pgchar); cdecl; external;
procedure webkit_dom_html_keygen_element_set_disabled(self: PWebKitDOMHTMLKeygenElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_keygen_element_set_keytype(self: PWebKitDOMHTMLKeygenElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_keygen_element_set_name(self: PWebKitDOMHTMLKeygenElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_label_element_set_html_for(self: PWebKitDOMHTMLLabelElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_legend_element_set_align(self: PWebKitDOMHTMLLegendElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_link_element_set_charset(self: PWebKitDOMHTMLLinkElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_link_element_set_disabled(self: PWebKitDOMHTMLLinkElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_link_element_set_href(self: PWebKitDOMHTMLLinkElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_link_element_set_hreflang(self: PWebKitDOMHTMLLinkElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_link_element_set_media(self: PWebKitDOMHTMLLinkElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_link_element_set_rel(self: PWebKitDOMHTMLLinkElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_link_element_set_rev(self: PWebKitDOMHTMLLinkElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_link_element_set_target(self: PWebKitDOMHTMLLinkElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_map_element_set_name(self: PWebKitDOMHTMLMapElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_marquee_element_set_behavior(self: PWebKitDOMHTMLMarqueeElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_marquee_element_set_bg_color(self: PWebKitDOMHTMLMarqueeElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_marquee_element_set_direction(self: PWebKitDOMHTMLMarqueeElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_marquee_element_set_height(self: PWebKitDOMHTMLMarqueeElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_marquee_element_set_hspace(self: PWebKitDOMHTMLMarqueeElement; value: gulong); cdecl; external;
procedure webkit_dom_html_marquee_element_set_loop(self: PWebKitDOMHTMLMarqueeElement; value: glong; error: PPGError); cdecl; external;
procedure webkit_dom_html_marquee_element_set_scroll_amount(self: PWebKitDOMHTMLMarqueeElement; value: glong; error: PPGError); cdecl; external;
procedure webkit_dom_html_marquee_element_set_scroll_delay(self: PWebKitDOMHTMLMarqueeElement; value: glong; error: PPGError); cdecl; external;
procedure webkit_dom_html_marquee_element_set_true_speed(self: PWebKitDOMHTMLMarqueeElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_marquee_element_set_vspace(self: PWebKitDOMHTMLMarqueeElement; value: gulong); cdecl; external;
procedure webkit_dom_html_marquee_element_set_width(self: PWebKitDOMHTMLMarqueeElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_marquee_element_start(self: PWebKitDOMHTMLMarqueeElement); cdecl; external;
procedure webkit_dom_html_marquee_element_stop(self: PWebKitDOMHTMLMarqueeElement); cdecl; external;
procedure webkit_dom_html_media_element_load(self: PWebKitDOMHTMLMediaElement); cdecl; external;
procedure webkit_dom_html_media_element_pause(self: PWebKitDOMHTMLMediaElement); cdecl; external;
procedure webkit_dom_html_media_element_play(self: PWebKitDOMHTMLMediaElement); cdecl; external;
procedure webkit_dom_html_media_element_set_autoplay(self: PWebKitDOMHTMLMediaElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_media_element_set_controls(self: PWebKitDOMHTMLMediaElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_media_element_set_current_time(self: PWebKitDOMHTMLMediaElement; value: gfloat; error: PPGError); cdecl; external;
procedure webkit_dom_html_media_element_set_default_muted(self: PWebKitDOMHTMLMediaElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_media_element_set_default_playback_rate(self: PWebKitDOMHTMLMediaElement; value: gfloat); cdecl; external;
procedure webkit_dom_html_media_element_set_loop(self: PWebKitDOMHTMLMediaElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_media_element_set_media_group(self: PWebKitDOMHTMLMediaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_media_element_set_muted(self: PWebKitDOMHTMLMediaElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_media_element_set_playback_rate(self: PWebKitDOMHTMLMediaElement; value: gfloat); cdecl; external;
procedure webkit_dom_html_media_element_set_preload(self: PWebKitDOMHTMLMediaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_media_element_set_src(self: PWebKitDOMHTMLMediaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_media_element_set_volume(self: PWebKitDOMHTMLMediaElement; value: gfloat; error: PPGError); cdecl; external;
procedure webkit_dom_html_media_element_set_webkit_closed_captions_visible(self: PWebKitDOMHTMLMediaElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_media_element_set_webkit_preserves_pitch(self: PWebKitDOMHTMLMediaElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_menu_element_set_compact(self: PWebKitDOMHTMLMenuElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_meta_element_set_content(self: PWebKitDOMHTMLMetaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_meta_element_set_http_equiv(self: PWebKitDOMHTMLMetaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_meta_element_set_name(self: PWebKitDOMHTMLMetaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_meta_element_set_scheme(self: PWebKitDOMHTMLMetaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_mod_element_set_cite(self: PWebKitDOMHTMLModElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_mod_element_set_date_time(self: PWebKitDOMHTMLModElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_object_element_set_align(self: PWebKitDOMHTMLObjectElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_object_element_set_archive(self: PWebKitDOMHTMLObjectElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_object_element_set_border(self: PWebKitDOMHTMLObjectElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_object_element_set_code(self: PWebKitDOMHTMLObjectElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_object_element_set_code_base(self: PWebKitDOMHTMLObjectElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_object_element_set_code_type(self: PWebKitDOMHTMLObjectElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_object_element_set_custom_validity(self: PWebKitDOMHTMLObjectElement; error: Pgchar); cdecl; external;
procedure webkit_dom_html_object_element_set_data(self: PWebKitDOMHTMLObjectElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_object_element_set_declare(self: PWebKitDOMHTMLObjectElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_object_element_set_height(self: PWebKitDOMHTMLObjectElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_object_element_set_hspace(self: PWebKitDOMHTMLObjectElement; value: glong); cdecl; external;
procedure webkit_dom_html_object_element_set_name(self: PWebKitDOMHTMLObjectElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_object_element_set_standby(self: PWebKitDOMHTMLObjectElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_object_element_set_use_map(self: PWebKitDOMHTMLObjectElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_object_element_set_vspace(self: PWebKitDOMHTMLObjectElement; value: glong); cdecl; external;
procedure webkit_dom_html_object_element_set_width(self: PWebKitDOMHTMLObjectElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_opt_group_element_set_disabled(self: PWebKitDOMHTMLOptGroupElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_opt_group_element_set_label(self: PWebKitDOMHTMLOptGroupElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_option_element_set_default_selected(self: PWebKitDOMHTMLOptionElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_option_element_set_disabled(self: PWebKitDOMHTMLOptionElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_option_element_set_label(self: PWebKitDOMHTMLOptionElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_option_element_set_selected(self: PWebKitDOMHTMLOptionElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_option_element_set_value(self: PWebKitDOMHTMLOptionElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_options_collection_set_selected_index(self: PWebKitDOMHTMLOptionsCollection; value: glong); cdecl; external;
procedure webkit_dom_html_paragraph_element_set_align(self: PWebKitDOMHTMLParagraphElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_param_element_set_name(self: PWebKitDOMHTMLParamElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_param_element_set_value(self: PWebKitDOMHTMLParamElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_param_element_set_value_type(self: PWebKitDOMHTMLParamElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_pre_element_set_width(self: PWebKitDOMHTMLPreElement; value: glong); cdecl; external;
procedure webkit_dom_html_pre_element_set_wrap(self: PWebKitDOMHTMLPreElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_quote_element_set_cite(self: PWebKitDOMHTMLQuoteElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_script_element_set_async(self: PWebKitDOMHTMLScriptElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_script_element_set_charset(self: PWebKitDOMHTMLScriptElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_script_element_set_cross_origin(self: PWebKitDOMHTMLScriptElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_script_element_set_defer(self: PWebKitDOMHTMLScriptElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_script_element_set_event(self: PWebKitDOMHTMLScriptElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_script_element_set_html_for(self: PWebKitDOMHTMLScriptElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_script_element_set_nonce(self: PWebKitDOMHTMLScriptElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_script_element_set_src(self: PWebKitDOMHTMLScriptElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_script_element_set_text(self: PWebKitDOMHTMLScriptElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_select_element_add(self: PWebKitDOMHTMLSelectElement; element: PWebKitDOMHTMLElement; before: PWebKitDOMHTMLElement; error: PPGError); cdecl; external;
procedure webkit_dom_html_select_element_remove(self: PWebKitDOMHTMLSelectElement; index: glong); cdecl; external;
procedure webkit_dom_html_select_element_set_autofocus(self: PWebKitDOMHTMLSelectElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_select_element_set_custom_validity(self: PWebKitDOMHTMLSelectElement; error: Pgchar); cdecl; external;
procedure webkit_dom_html_select_element_set_disabled(self: PWebKitDOMHTMLSelectElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_select_element_set_length(self: PWebKitDOMHTMLSelectElement; value: gulong; error: PPGError); cdecl; external;
procedure webkit_dom_html_select_element_set_multiple(self: PWebKitDOMHTMLSelectElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_select_element_set_name(self: PWebKitDOMHTMLSelectElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_select_element_set_required(self: PWebKitDOMHTMLSelectElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_select_element_set_selected_index(self: PWebKitDOMHTMLSelectElement; value: glong); cdecl; external;
procedure webkit_dom_html_select_element_set_size(self: PWebKitDOMHTMLSelectElement; value: glong); cdecl; external;
procedure webkit_dom_html_select_element_set_value(self: PWebKitDOMHTMLSelectElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_style_element_set_disabled(self: PWebKitDOMHTMLStyleElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_style_element_set_media(self: PWebKitDOMHTMLStyleElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_style_element_set_scoped(self: PWebKitDOMHTMLStyleElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_table_caption_element_set_align(self: PWebKitDOMHTMLTableCaptionElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_cell_element_set_abbr(self: PWebKitDOMHTMLTableCellElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_cell_element_set_align(self: PWebKitDOMHTMLTableCellElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_cell_element_set_axis(self: PWebKitDOMHTMLTableCellElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_cell_element_set_bg_color(self: PWebKitDOMHTMLTableCellElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_cell_element_set_ch(self: PWebKitDOMHTMLTableCellElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_cell_element_set_ch_off(self: PWebKitDOMHTMLTableCellElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_cell_element_set_col_span(self: PWebKitDOMHTMLTableCellElement; value: glong); cdecl; external;
procedure webkit_dom_html_table_cell_element_set_headers(self: PWebKitDOMHTMLTableCellElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_cell_element_set_height(self: PWebKitDOMHTMLTableCellElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_cell_element_set_no_wrap(self: PWebKitDOMHTMLTableCellElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_table_cell_element_set_row_span(self: PWebKitDOMHTMLTableCellElement; value: glong); cdecl; external;
procedure webkit_dom_html_table_cell_element_set_scope(self: PWebKitDOMHTMLTableCellElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_cell_element_set_v_align(self: PWebKitDOMHTMLTableCellElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_cell_element_set_width(self: PWebKitDOMHTMLTableCellElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_col_element_set_align(self: PWebKitDOMHTMLTableColElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_col_element_set_ch(self: PWebKitDOMHTMLTableColElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_col_element_set_ch_off(self: PWebKitDOMHTMLTableColElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_col_element_set_span(self: PWebKitDOMHTMLTableColElement; value: glong); cdecl; external;
procedure webkit_dom_html_table_col_element_set_v_align(self: PWebKitDOMHTMLTableColElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_col_element_set_width(self: PWebKitDOMHTMLTableColElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_element_delete_caption(self: PWebKitDOMHTMLTableElement); cdecl; external;
procedure webkit_dom_html_table_element_delete_row(self: PWebKitDOMHTMLTableElement; index: glong; error: PPGError); cdecl; external;
procedure webkit_dom_html_table_element_delete_t_foot(self: PWebKitDOMHTMLTableElement); cdecl; external;
procedure webkit_dom_html_table_element_delete_t_head(self: PWebKitDOMHTMLTableElement); cdecl; external;
procedure webkit_dom_html_table_element_set_align(self: PWebKitDOMHTMLTableElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_element_set_bg_color(self: PWebKitDOMHTMLTableElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_element_set_border(self: PWebKitDOMHTMLTableElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_element_set_caption(self: PWebKitDOMHTMLTableElement; value: PWebKitDOMHTMLTableCaptionElement; error: PPGError); cdecl; external;
procedure webkit_dom_html_table_element_set_cell_padding(self: PWebKitDOMHTMLTableElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_element_set_cell_spacing(self: PWebKitDOMHTMLTableElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_element_set_frame(self: PWebKitDOMHTMLTableElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_element_set_rules(self: PWebKitDOMHTMLTableElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_element_set_summary(self: PWebKitDOMHTMLTableElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_element_set_t_foot(self: PWebKitDOMHTMLTableElement; value: PWebKitDOMHTMLTableSectionElement; error: PPGError); cdecl; external;
procedure webkit_dom_html_table_element_set_t_head(self: PWebKitDOMHTMLTableElement; value: PWebKitDOMHTMLTableSectionElement; error: PPGError); cdecl; external;
procedure webkit_dom_html_table_element_set_width(self: PWebKitDOMHTMLTableElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_row_element_delete_cell(self: PWebKitDOMHTMLTableRowElement; index: glong; error: PPGError); cdecl; external;
procedure webkit_dom_html_table_row_element_set_align(self: PWebKitDOMHTMLTableRowElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_row_element_set_bg_color(self: PWebKitDOMHTMLTableRowElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_row_element_set_ch(self: PWebKitDOMHTMLTableRowElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_row_element_set_ch_off(self: PWebKitDOMHTMLTableRowElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_row_element_set_v_align(self: PWebKitDOMHTMLTableRowElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_section_element_delete_row(self: PWebKitDOMHTMLTableSectionElement; index: glong; error: PPGError); cdecl; external;
procedure webkit_dom_html_table_section_element_set_align(self: PWebKitDOMHTMLTableSectionElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_section_element_set_ch(self: PWebKitDOMHTMLTableSectionElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_section_element_set_ch_off(self: PWebKitDOMHTMLTableSectionElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_table_section_element_set_v_align(self: PWebKitDOMHTMLTableSectionElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_text_area_element_select(self: PWebKitDOMHTMLTextAreaElement); cdecl; external;
procedure webkit_dom_html_text_area_element_set_autofocus(self: PWebKitDOMHTMLTextAreaElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_text_area_element_set_cols(self: PWebKitDOMHTMLTextAreaElement; value: glong); cdecl; external;
procedure webkit_dom_html_text_area_element_set_custom_validity(self: PWebKitDOMHTMLTextAreaElement; error: Pgchar); cdecl; external;
procedure webkit_dom_html_text_area_element_set_default_value(self: PWebKitDOMHTMLTextAreaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_text_area_element_set_dir_name(self: PWebKitDOMHTMLTextAreaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_text_area_element_set_disabled(self: PWebKitDOMHTMLTextAreaElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_text_area_element_set_max_length(self: PWebKitDOMHTMLTextAreaElement; value: glong; error: PPGError); cdecl; external;
procedure webkit_dom_html_text_area_element_set_name(self: PWebKitDOMHTMLTextAreaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_text_area_element_set_placeholder(self: PWebKitDOMHTMLTextAreaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_text_area_element_set_range_text(self: PWebKitDOMHTMLTextAreaElement; replacement: Pgchar; start: gulong; end_: gulong; selectionMode: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_html_text_area_element_set_read_only(self: PWebKitDOMHTMLTextAreaElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_text_area_element_set_required(self: PWebKitDOMHTMLTextAreaElement; value: gboolean); cdecl; external;
procedure webkit_dom_html_text_area_element_set_rows(self: PWebKitDOMHTMLTextAreaElement; value: glong); cdecl; external;
procedure webkit_dom_html_text_area_element_set_selection_direction(self: PWebKitDOMHTMLTextAreaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_text_area_element_set_selection_end(self: PWebKitDOMHTMLTextAreaElement; value: glong); cdecl; external;
procedure webkit_dom_html_text_area_element_set_selection_range(self: PWebKitDOMHTMLTextAreaElement; start: glong; end_: glong; direction: Pgchar); cdecl; external;
procedure webkit_dom_html_text_area_element_set_selection_start(self: PWebKitDOMHTMLTextAreaElement; value: glong); cdecl; external;
procedure webkit_dom_html_text_area_element_set_value(self: PWebKitDOMHTMLTextAreaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_text_area_element_set_wrap(self: PWebKitDOMHTMLTextAreaElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_title_element_set_text(self: PWebKitDOMHTMLTitleElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_video_element_set_height(self: PWebKitDOMHTMLVideoElement; value: gulong); cdecl; external;
procedure webkit_dom_html_video_element_set_poster(self: PWebKitDOMHTMLVideoElement; value: Pgchar); cdecl; external;
procedure webkit_dom_html_video_element_set_width(self: PWebKitDOMHTMLVideoElement; value: gulong); cdecl; external;
procedure webkit_dom_html_video_element_webkit_enter_full_screen(self: PWebKitDOMHTMLVideoElement; error: PPGError); cdecl; external;
procedure webkit_dom_html_video_element_webkit_enter_fullscreen(self: PWebKitDOMHTMLVideoElement; error: PPGError); cdecl; external;
procedure webkit_dom_html_video_element_webkit_exit_full_screen(self: PWebKitDOMHTMLVideoElement); cdecl; external;
procedure webkit_dom_html_video_element_webkit_exit_fullscreen(self: PWebKitDOMHTMLVideoElement); cdecl; external;
procedure webkit_dom_htmlbr_element_set_clear(self: PWebKitDOMHTMLBRElement; value: Pgchar); cdecl; external;
procedure webkit_dom_htmld_list_element_set_compact(self: PWebKitDOMHTMLDListElement; value: gboolean); cdecl; external;
procedure webkit_dom_htmlhr_element_set_align(self: PWebKitDOMHTMLHRElement; value: Pgchar); cdecl; external;
procedure webkit_dom_htmlhr_element_set_no_shade(self: PWebKitDOMHTMLHRElement; value: gboolean); cdecl; external;
procedure webkit_dom_htmlhr_element_set_size(self: PWebKitDOMHTMLHRElement; value: Pgchar); cdecl; external;
procedure webkit_dom_htmlhr_element_set_width(self: PWebKitDOMHTMLHRElement; value: Pgchar); cdecl; external;
procedure webkit_dom_htmlli_element_set_value(self: PWebKitDOMHTMLLIElement; value: glong); cdecl; external;
procedure webkit_dom_htmlo_list_element_set_compact(self: PWebKitDOMHTMLOListElement; value: gboolean); cdecl; external;
procedure webkit_dom_htmlo_list_element_set_reversed(self: PWebKitDOMHTMLOListElement; value: gboolean); cdecl; external;
procedure webkit_dom_htmlo_list_element_set_start(self: PWebKitDOMHTMLOListElement; value: glong); cdecl; external;
procedure webkit_dom_htmlu_list_element_set_compact(self: PWebKitDOMHTMLUListElement; value: gboolean); cdecl; external;
procedure webkit_dom_media_list_append_medium(self: PWebKitDOMMediaList; newMedium: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_media_list_delete_medium(self: PWebKitDOMMediaList; oldMedium: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_media_list_set_media_text(self: PWebKitDOMMediaList; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_mouse_event_init_mouse_event(self: PWebKitDOMMouseEvent; type_: Pgchar; canBubble: gboolean; cancelable: gboolean; view: PWebKitDOMDOMWindow; detail: glong; screenX: glong; screenY: glong; clientX: glong; clientY: glong; ctrlKey: gboolean; altKey: gboolean; shiftKey: gboolean; metaKey: gboolean; button: gushort; relatedTarget: PWebKitDOMEventTarget); cdecl; external;
procedure webkit_dom_navigator_get_storage_updates(self: PWebKitDOMNavigator); cdecl; external;
procedure webkit_dom_navigator_register_protocol_handler(self: PWebKitDOMNavigator; scheme: Pgchar; url: Pgchar; title: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_navigator_unregister_protocol_handler(self: PWebKitDOMNavigator; scheme: Pgchar; url: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_node_iterator_detach(self: PWebKitDOMNodeIterator); cdecl; external;
procedure webkit_dom_node_normalize(self: PWebKitDOMNode); cdecl; external;
procedure webkit_dom_node_set_node_value(self: PWebKitDOMNode; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_node_set_prefix(self: PWebKitDOMNode; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_node_set_text_content(self: PWebKitDOMNode; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_processing_instruction_set_data(self: PWebKitDOMProcessingInstruction; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_range_collapse(self: PWebKitDOMRange; toStart: gboolean; error: PPGError); cdecl; external;
procedure webkit_dom_range_delete_contents(self: PWebKitDOMRange; error: PPGError); cdecl; external;
procedure webkit_dom_range_detach(self: PWebKitDOMRange; error: PPGError); cdecl; external;
procedure webkit_dom_range_expand(self: PWebKitDOMRange; unit_: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_range_insert_node(self: PWebKitDOMRange; newNode: PWebKitDOMNode; error: PPGError); cdecl; external;
procedure webkit_dom_range_select_node(self: PWebKitDOMRange; refNode: PWebKitDOMNode; error: PPGError); cdecl; external;
procedure webkit_dom_range_select_node_contents(self: PWebKitDOMRange; refNode: PWebKitDOMNode; error: PPGError); cdecl; external;
procedure webkit_dom_range_set_end(self: PWebKitDOMRange; refNode: PWebKitDOMNode; offset: glong; error: PPGError); cdecl; external;
procedure webkit_dom_range_set_end_after(self: PWebKitDOMRange; refNode: PWebKitDOMNode; error: PPGError); cdecl; external;
procedure webkit_dom_range_set_end_before(self: PWebKitDOMRange; refNode: PWebKitDOMNode; error: PPGError); cdecl; external;
procedure webkit_dom_range_set_start(self: PWebKitDOMRange; refNode: PWebKitDOMNode; offset: glong; error: PPGError); cdecl; external;
procedure webkit_dom_range_set_start_after(self: PWebKitDOMRange; refNode: PWebKitDOMNode; error: PPGError); cdecl; external;
procedure webkit_dom_range_set_start_before(self: PWebKitDOMRange; refNode: PWebKitDOMNode; error: PPGError); cdecl; external;
procedure webkit_dom_range_surround_contents(self: PWebKitDOMRange; newParent: PWebKitDOMNode; error: PPGError); cdecl; external;
procedure webkit_dom_shadow_root_set_apply_author_styles(self: PWebKitDOMShadowRoot; value: gboolean); cdecl; external;
procedure webkit_dom_shadow_root_set_inner_html(self: PWebKitDOMShadowRoot; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_shadow_root_set_reset_style_inheritance(self: PWebKitDOMShadowRoot; value: gboolean); cdecl; external;
procedure webkit_dom_storage_clear(self: PWebKitDOMStorage; error: PPGError); cdecl; external;
procedure webkit_dom_storage_remove_item(self: PWebKitDOMStorage; key: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_storage_set_item(self: PWebKitDOMStorage; key: Pgchar; data: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_style_sheet_set_disabled(self: PWebKitDOMStyleSheet; value: gboolean); cdecl; external;
procedure webkit_dom_text_track_add_cue(self: PWebKitDOMTextTrack; cue: PWebKitDOMTextTrackCue); cdecl; external;
procedure webkit_dom_text_track_cue_set_align(self: PWebKitDOMTextTrackCue; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_text_track_cue_set_end_time(self: PWebKitDOMTextTrackCue; value: gdouble; error: PPGError); cdecl; external;
procedure webkit_dom_text_track_cue_set_id(self: PWebKitDOMTextTrackCue; value: Pgchar); cdecl; external;
procedure webkit_dom_text_track_cue_set_line(self: PWebKitDOMTextTrackCue; value: glong; error: PPGError); cdecl; external;
procedure webkit_dom_text_track_cue_set_pause_on_exit(self: PWebKitDOMTextTrackCue; value: gboolean); cdecl; external;
procedure webkit_dom_text_track_cue_set_position(self: PWebKitDOMTextTrackCue; value: glong; error: PPGError); cdecl; external;
procedure webkit_dom_text_track_cue_set_size(self: PWebKitDOMTextTrackCue; value: glong; error: PPGError); cdecl; external;
procedure webkit_dom_text_track_cue_set_snap_to_lines(self: PWebKitDOMTextTrackCue; value: gboolean); cdecl; external;
procedure webkit_dom_text_track_cue_set_start_time(self: PWebKitDOMTextTrackCue; value: gdouble; error: PPGError); cdecl; external;
procedure webkit_dom_text_track_cue_set_text(self: PWebKitDOMTextTrackCue; value: Pgchar); cdecl; external;
procedure webkit_dom_text_track_cue_set_vertical(self: PWebKitDOMTextTrackCue; value: Pgchar; error: PPGError); cdecl; external;
procedure webkit_dom_text_track_remove_cue(self: PWebKitDOMTextTrack; cue: PWebKitDOMTextTrackCue; error: PPGError); cdecl; external;
procedure webkit_dom_text_track_set_mode(self: PWebKitDOMTextTrack; value: Pgchar); cdecl; external;
procedure webkit_dom_tree_walker_set_current_node(self: PWebKitDOMTreeWalker; value: PWebKitDOMNode; error: PPGError); cdecl; external;
procedure webkit_dom_ui_event_init_ui_event(self: PWebKitDOMUIEvent; type_: Pgchar; canBubble: gboolean; cancelable: gboolean; view: PWebKitDOMDOMWindow; detail: glong); cdecl; external;
procedure webkit_dom_webkit_point_set_x(self: PWebKitDOMWebKitPoint; value: gfloat); cdecl; external;
procedure webkit_dom_webkit_point_set_y(self: PWebKitDOMWebKitPoint; value: gfloat); cdecl; external;
procedure webkit_download_cancel(download: PWebKitDownload); cdecl; external;
procedure webkit_download_set_destination_uri(download: PWebKitDownload; destination_uri: Pgchar); cdecl; external;
procedure webkit_download_start(download: PWebKitDownload); cdecl; external;
procedure webkit_favicon_database_clear(database: PWebKitFaviconDatabase); cdecl; external;
procedure webkit_favicon_database_get_favicon_pixbuf(database: PWebKitFaviconDatabase; page_uri: Pgchar; width: guint; height: guint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; external;
procedure webkit_favicon_database_set_path(database: PWebKitFaviconDatabase; path: Pgchar); cdecl; external;
procedure webkit_file_chooser_request_select_files(request: PWebKitFileChooserRequest; files: PPgchar); cdecl; external;
procedure webkit_geolocation_policy_allow(decision: PWebKitGeolocationPolicyDecision); cdecl; external;
procedure webkit_geolocation_policy_deny(decision: PWebKitGeolocationPolicyDecision); cdecl; external;
procedure webkit_network_request_set_uri(request: PWebKitNetworkRequest; uri: Pgchar); cdecl; external;
procedure webkit_network_response_set_uri(response: PWebKitNetworkResponse; uri: Pgchar); cdecl; external;
procedure webkit_remove_all_web_databases; cdecl; external;
procedure webkit_security_origin_set_web_database_quota(securityOrigin: PWebKitSecurityOrigin; quota: guint64); cdecl; external;
procedure webkit_set_cache_model(cache_model: TWebKitCacheModel); cdecl; external;
procedure webkit_set_default_web_database_quota(defaultQuota: guint64); cdecl; external;
procedure webkit_set_security_policy_for_uri_scheme(scheme: Pgchar; policy: TWebKitSecurityPolicy); cdecl; external;
procedure webkit_set_text_checker(checker: PGObject); cdecl; external;
procedure webkit_set_web_database_directory_path(path: Pgchar); cdecl; external;
procedure webkit_spell_checker_check_spelling_of_string(checker: PWebKitSpellChecker; string_: Pgchar; misspelling_location: Pgint; misspelling_length: Pgint); cdecl; external;
procedure webkit_spell_checker_ignore_word(checker: PWebKitSpellChecker; word: Pgchar); cdecl; external;
procedure webkit_spell_checker_learn_word(checker: PWebKitSpellChecker; word: Pgchar); cdecl; external;
procedure webkit_spell_checker_update_spell_checking_languages(checker: PWebKitSpellChecker; languages: Pgchar); cdecl; external;
procedure webkit_viewport_attributes_recompute(viewportAttributes: PWebKitViewportAttributes); cdecl; external;
procedure webkit_web_back_forward_list_add_item(web_back_forward_list: PWebKitWebBackForwardList; history_item: PWebKitWebHistoryItem); cdecl; external;
procedure webkit_web_back_forward_list_clear(web_back_forward_list: PWebKitWebBackForwardList); cdecl; external;
procedure webkit_web_back_forward_list_go_back(web_back_forward_list: PWebKitWebBackForwardList); cdecl; external;
procedure webkit_web_back_forward_list_go_forward(web_back_forward_list: PWebKitWebBackForwardList); cdecl; external;
procedure webkit_web_back_forward_list_go_to_item(web_back_forward_list: PWebKitWebBackForwardList; history_item: PWebKitWebHistoryItem); cdecl; external;
procedure webkit_web_back_forward_list_set_limit(web_back_forward_list: PWebKitWebBackForwardList; limit: gint); cdecl; external;
procedure webkit_web_database_remove(webDatabase: PWebKitWebDatabase); cdecl; external;
procedure webkit_web_frame_load_alternate_string(frame: PWebKitWebFrame; content: Pgchar; base_url: Pgchar; unreachable_url: Pgchar); cdecl; external;
procedure webkit_web_frame_load_request(frame: PWebKitWebFrame; request: PWebKitNetworkRequest); cdecl; external;
procedure webkit_web_frame_load_string(frame: PWebKitWebFrame; content: Pgchar; mime_type: Pgchar; encoding: Pgchar; base_uri: Pgchar); cdecl; external;
procedure webkit_web_frame_load_uri(frame: PWebKitWebFrame; uri: Pgchar); cdecl; external;
procedure webkit_web_frame_print(frame: PWebKitWebFrame); cdecl; external;
procedure webkit_web_frame_reload(frame: PWebKitWebFrame); cdecl; external;
procedure webkit_web_frame_replace_selection(frame: PWebKitWebFrame; text: Pgchar); cdecl; external;
procedure webkit_web_frame_stop_loading(frame: PWebKitWebFrame); cdecl; external;
procedure webkit_web_history_item_set_alternate_title(web_history_item: PWebKitWebHistoryItem; title: Pgchar); cdecl; external;
procedure webkit_web_inspector_close(web_inspector: PWebKitWebInspector); cdecl; external;
procedure webkit_web_inspector_inspect_coordinates(web_inspector: PWebKitWebInspector; x: gdouble; y: gdouble); cdecl; external;
procedure webkit_web_inspector_inspect_node(web_inspector: PWebKitWebInspector; node: PWebKitDOMNode); cdecl; external;
procedure webkit_web_inspector_show(web_inspector: PWebKitWebInspector); cdecl; external;
procedure webkit_web_navigation_action_set_original_uri(navigationAction: PWebKitWebNavigationAction; originalUri: Pgchar); cdecl; external;
procedure webkit_web_navigation_action_set_reason(navigationAction: PWebKitWebNavigationAction; reason: TWebKitWebNavigationReason); cdecl; external;
procedure webkit_web_plugin_database_plugins_list_free(list: PGSList); cdecl; external;
procedure webkit_web_plugin_database_refresh(database: PWebKitWebPluginDatabase); cdecl; external;
procedure webkit_web_plugin_set_enabled(plugin: PWebKitWebPlugin; enabled: gboolean); cdecl; external;
procedure webkit_web_policy_decision_download(decision: PWebKitWebPolicyDecision); cdecl; external;
procedure webkit_web_policy_decision_ignore(decision: PWebKitWebPolicyDecision); cdecl; external;
procedure webkit_web_policy_decision_use(decision: PWebKitWebPolicyDecision); cdecl; external;
procedure webkit_web_view_copy_clipboard(web_view: PWebKitWebView); cdecl; external;
procedure webkit_web_view_cut_clipboard(web_view: PWebKitWebView); cdecl; external;
procedure webkit_web_view_delete_selection(web_view: PWebKitWebView); cdecl; external;
procedure webkit_web_view_execute_script(web_view: PWebKitWebView; script: Pgchar); cdecl; external;
procedure webkit_web_view_go_back(web_view: PWebKitWebView); cdecl; external;
procedure webkit_web_view_go_back_or_forward(web_view: PWebKitWebView; steps: gint); cdecl; external;
procedure webkit_web_view_go_forward(web_view: PWebKitWebView); cdecl; external;
procedure webkit_web_view_load_request(web_view: PWebKitWebView; request: PWebKitNetworkRequest); cdecl; external;
procedure webkit_web_view_load_string(web_view: PWebKitWebView; content: Pgchar; mime_type: Pgchar; encoding: Pgchar; base_uri: Pgchar); cdecl; external;
procedure webkit_web_view_load_uri(web_view: PWebKitWebView; uri: Pgchar); cdecl; external;
procedure webkit_web_view_move_cursor(web_view: PWebKitWebView; step: TGtkMovementStep; count: gint); cdecl; external;
procedure webkit_web_view_paste_clipboard(web_view: PWebKitWebView); cdecl; external;
procedure webkit_web_view_redo(web_view: PWebKitWebView); cdecl; external;
procedure webkit_web_view_reload(web_view: PWebKitWebView); cdecl; external;
procedure webkit_web_view_reload_bypass_cache(web_view: PWebKitWebView); cdecl; external;
procedure webkit_web_view_select_all(web_view: PWebKitWebView); cdecl; external;
procedure webkit_web_view_set_custom_encoding(web_view: PWebKitWebView; encoding: Pgchar); cdecl; external;
procedure webkit_web_view_set_editable(web_view: PWebKitWebView; flag: gboolean); cdecl; external;
procedure webkit_web_view_set_full_content_zoom(web_view: PWebKitWebView; full_content_zoom: gboolean); cdecl; external;
procedure webkit_web_view_set_highlight_text_matches(web_view: PWebKitWebView; highlight: gboolean); cdecl; external;
procedure webkit_web_view_set_maintains_back_forward_list(web_view: PWebKitWebView; flag: gboolean); cdecl; external;
procedure webkit_web_view_set_settings(web_view: PWebKitWebView; settings: PWebKitWebSettings); cdecl; external;
procedure webkit_web_view_set_transparent(web_view: PWebKitWebView; flag: gboolean); cdecl; external;
procedure webkit_web_view_set_view_mode(web_view: PWebKitWebView; mode: TWebKitWebViewViewMode); cdecl; external;
procedure webkit_web_view_set_view_source_mode(web_view: PWebKitWebView; view_source_mode: gboolean); cdecl; external;
procedure webkit_web_view_set_zoom_level(web_view: PWebKitWebView; zoom_level: gfloat); cdecl; external;
procedure webkit_web_view_stop_loading(web_view: PWebKitWebView); cdecl; external;
procedure webkit_web_view_undo(web_view: PWebKitWebView); cdecl; external;
procedure webkit_web_view_unmark_text_matches(web_view: PWebKitWebView); cdecl; external;
procedure webkit_web_view_zoom_in(web_view: PWebKitWebView); cdecl; external;
procedure webkit_web_view_zoom_out(web_view: PWebKitWebView); cdecl; external;
implementation
function TWebKitDOMEventTarget.add_event_listener(eventName: Pgchar; handler: TGCallback; bubble: gboolean; userData: gpointer): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_event_target_add_event_listener(@self, eventName, handler, bubble, userData);
end;

procedure TWebKitDOMEventTarget.dispatch_event(event: PWebKitDOMEvent; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_event_target_dispatch_event(@self, event, error);
end;

function TWebKitDOMEventTarget.remove_event_listener(eventName: Pgchar; handler: TGCallback; bubble: gboolean): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_event_target_remove_event_listener(@self, eventName, handler, bubble);
end;

function TWebKitDOMNode.append_child(newChild: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_append_child(@self, newChild, error);
end;

function TWebKitDOMNode.clone_node(deep: gboolean): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_clone_node(@self, deep);
end;

function TWebKitDOMNode.compare_document_position(other: PWebKitDOMNode): gushort; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_compare_document_position(@self, other);
end;

function TWebKitDOMNode.contains(other: PWebKitDOMNode): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_contains(@self, other);
end;

function TWebKitDOMNode.dispatch_event(event: PWebKitDOMEvent; error: PPGError): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_dispatch_event(@self, event, error);
end;

function TWebKitDOMNode.get_attributes: PWebKitDOMNamedNodeMap; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_get_attributes(@self);
end;

function TWebKitDOMNode.get_base_uri: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_get_base_uri(@self);
end;

function TWebKitDOMNode.get_child_nodes: PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_get_child_nodes(@self);
end;

function TWebKitDOMNode.get_first_child: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_get_first_child(@self);
end;

function TWebKitDOMNode.get_last_child: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_get_last_child(@self);
end;

function TWebKitDOMNode.get_local_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_get_local_name(@self);
end;

function TWebKitDOMNode.get_namespace_uri: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_get_namespace_uri(@self);
end;

function TWebKitDOMNode.get_next_sibling: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_get_next_sibling(@self);
end;

function TWebKitDOMNode.get_node_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_get_node_name(@self);
end;

function TWebKitDOMNode.get_node_type: gushort; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_get_node_type(@self);
end;

function TWebKitDOMNode.get_node_value: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_get_node_value(@self);
end;

function TWebKitDOMNode.get_owner_document: PWebKitDOMDocument; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_get_owner_document(@self);
end;

function TWebKitDOMNode.get_parent_element: PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_get_parent_element(@self);
end;

function TWebKitDOMNode.get_parent_node: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_get_parent_node(@self);
end;

function TWebKitDOMNode.get_prefix: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_get_prefix(@self);
end;

function TWebKitDOMNode.get_previous_sibling: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_get_previous_sibling(@self);
end;

function TWebKitDOMNode.get_text_content: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_get_text_content(@self);
end;

function TWebKitDOMNode.has_attributes: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_has_attributes(@self);
end;

function TWebKitDOMNode.has_child_nodes: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_has_child_nodes(@self);
end;

function TWebKitDOMNode.insert_before(newChild: PWebKitDOMNode; refChild: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_insert_before(@self, newChild, refChild, error);
end;

function TWebKitDOMNode.is_default_namespace(namespaceURI: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_is_default_namespace(@self, namespaceURI);
end;

function TWebKitDOMNode.is_equal_node(other: PWebKitDOMNode): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_is_equal_node(@self, other);
end;

function TWebKitDOMNode.is_same_node(other: PWebKitDOMNode): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_is_same_node(@self, other);
end;

function TWebKitDOMNode.is_supported(feature: Pgchar; version: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_is_supported(@self, feature, version);
end;

function TWebKitDOMNode.lookup_namespace_uri(prefix: Pgchar): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_lookup_namespace_uri(@self, prefix);
end;

function TWebKitDOMNode.lookup_prefix(namespaceURI: Pgchar): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_lookup_prefix(@self, namespaceURI);
end;

procedure TWebKitDOMNode.normalize; cdecl;
begin
  LazWebKit3.webkit_dom_node_normalize(@self);
end;

function TWebKitDOMNode.remove_child(oldChild: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_remove_child(@self, oldChild, error);
end;

function TWebKitDOMNode.replace_child(newChild: PWebKitDOMNode; oldChild: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_replace_child(@self, newChild, oldChild, error);
end;

procedure TWebKitDOMNode.set_node_value(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_node_set_node_value(@self, value, error);
end;

procedure TWebKitDOMNode.set_prefix(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_node_set_prefix(@self, value, error);
end;

procedure TWebKitDOMNode.set_text_content(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_node_set_text_content(@self, value, error);
end;

function TWebKitDOMAttr.get_is_id: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_attr_get_is_id(@self);
end;

function TWebKitDOMAttr.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_attr_get_name(@self);
end;

function TWebKitDOMAttr.get_owner_element: PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_attr_get_owner_element(@self);
end;

function TWebKitDOMAttr.get_specified: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_attr_get_specified(@self);
end;

function TWebKitDOMAttr.get_value: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_attr_get_value(@self);
end;

procedure TWebKitDOMAttr.set_value(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_attr_set_value(@self, value, error);
end;

procedure TWebKitDOMElement.blur; cdecl;
begin
  LazWebKit3.webkit_dom_element_blur(@self);
end;

procedure TWebKitDOMElement.focus; cdecl;
begin
  LazWebKit3.webkit_dom_element_focus(@self);
end;

function TWebKitDOMElement.get_attribute(name: Pgchar): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_attribute(@self, name);
end;

function TWebKitDOMElement.get_attribute_node(name: Pgchar): PWebKitDOMAttr; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_attribute_node(@self, name);
end;

function TWebKitDOMElement.get_attribute_node_ns(namespaceURI: Pgchar; localName: Pgchar): PWebKitDOMAttr; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_attribute_node_ns(@self, namespaceURI, localName);
end;

function TWebKitDOMElement.get_attribute_ns(namespaceURI: Pgchar; localName: Pgchar): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_attribute_ns(@self, namespaceURI, localName);
end;

function TWebKitDOMElement.get_child_element_count: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_child_element_count(@self);
end;

function TWebKitDOMElement.get_class_list: PWebKitDOMDOMTokenList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_class_list(@self);
end;

function TWebKitDOMElement.get_class_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_class_name(@self);
end;

function TWebKitDOMElement.get_client_height: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_client_height(@self);
end;

function TWebKitDOMElement.get_client_left: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_client_left(@self);
end;

function TWebKitDOMElement.get_client_top: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_client_top(@self);
end;

function TWebKitDOMElement.get_client_width: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_client_width(@self);
end;

function TWebKitDOMElement.get_elements_by_class_name(name: Pgchar): PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_elements_by_class_name(@self, name);
end;

function TWebKitDOMElement.get_elements_by_tag_name(name: Pgchar): PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_elements_by_tag_name(@self, name);
end;

function TWebKitDOMElement.get_elements_by_tag_name_ns(namespaceURI: Pgchar; localName: Pgchar): PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_elements_by_tag_name_ns(@self, namespaceURI, localName);
end;

function TWebKitDOMElement.get_first_element_child: PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_first_element_child(@self);
end;

function TWebKitDOMElement.get_last_element_child: PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_last_element_child(@self);
end;

function TWebKitDOMElement.get_next_element_sibling: PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_next_element_sibling(@self);
end;

function TWebKitDOMElement.get_offset_height: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_offset_height(@self);
end;

function TWebKitDOMElement.get_offset_left: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_offset_left(@self);
end;

function TWebKitDOMElement.get_offset_parent: PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_offset_parent(@self);
end;

function TWebKitDOMElement.get_offset_top: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_offset_top(@self);
end;

function TWebKitDOMElement.get_offset_width: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_offset_width(@self);
end;

function TWebKitDOMElement.get_previous_element_sibling: PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_previous_element_sibling(@self);
end;

function TWebKitDOMElement.get_scroll_height: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_scroll_height(@self);
end;

function TWebKitDOMElement.get_scroll_left: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_scroll_left(@self);
end;

function TWebKitDOMElement.get_scroll_top: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_scroll_top(@self);
end;

function TWebKitDOMElement.get_scroll_width: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_scroll_width(@self);
end;

function TWebKitDOMElement.get_style: PWebKitDOMCSSStyleDeclaration; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_style(@self);
end;

function TWebKitDOMElement.get_tag_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_tag_name(@self);
end;

function TWebKitDOMElement.get_webkit_region_overflow: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_webkit_region_overflow(@self);
end;

function TWebKitDOMElement.get_webkit_region_overset: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_get_webkit_region_overset(@self);
end;

function TWebKitDOMElement.has_attribute(name: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_has_attribute(@self, name);
end;

function TWebKitDOMElement.has_attribute_ns(namespaceURI: Pgchar; localName: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_has_attribute_ns(@self, namespaceURI, localName);
end;

function TWebKitDOMElement.query_selector(selectors: Pgchar; error: PPGError): PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_query_selector(@self, selectors, error);
end;

function TWebKitDOMElement.query_selector_all(selectors: Pgchar; error: PPGError): PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_query_selector_all(@self, selectors, error);
end;

procedure TWebKitDOMElement.remove(error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_element_remove(@self, error);
end;

procedure TWebKitDOMElement.remove_attribute(name: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_element_remove_attribute(@self, name);
end;

function TWebKitDOMElement.remove_attribute_node(oldAttr: PWebKitDOMAttr; error: PPGError): PWebKitDOMAttr; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_remove_attribute_node(@self, oldAttr, error);
end;

procedure TWebKitDOMElement.remove_attribute_ns(namespaceURI: Pgchar; localName: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_element_remove_attribute_ns(@self, namespaceURI, localName);
end;

procedure TWebKitDOMElement.scroll_by_lines(lines: glong); cdecl;
begin
  LazWebKit3.webkit_dom_element_scroll_by_lines(@self, lines);
end;

procedure TWebKitDOMElement.scroll_by_pages(pages: glong); cdecl;
begin
  LazWebKit3.webkit_dom_element_scroll_by_pages(@self, pages);
end;

procedure TWebKitDOMElement.scroll_into_view(alignWithTop: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_element_scroll_into_view(@self, alignWithTop);
end;

procedure TWebKitDOMElement.scroll_into_view_if_needed(centerIfNeeded: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_element_scroll_into_view_if_needed(@self, centerIfNeeded);
end;

procedure TWebKitDOMElement.set_attribute(name: Pgchar; value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_element_set_attribute(@self, name, value, error);
end;

function TWebKitDOMElement.set_attribute_node(newAttr: PWebKitDOMAttr; error: PPGError): PWebKitDOMAttr; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_set_attribute_node(@self, newAttr, error);
end;

function TWebKitDOMElement.set_attribute_node_ns(newAttr: PWebKitDOMAttr; error: PPGError): PWebKitDOMAttr; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_set_attribute_node_ns(@self, newAttr, error);
end;

procedure TWebKitDOMElement.set_attribute_ns(namespaceURI: Pgchar; qualifiedName: Pgchar; value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_element_set_attribute_ns(@self, namespaceURI, qualifiedName, value, error);
end;

procedure TWebKitDOMElement.set_class_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_element_set_class_name(@self, value);
end;

procedure TWebKitDOMElement.set_scroll_left(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_element_set_scroll_left(@self, value);
end;

procedure TWebKitDOMElement.set_scroll_top(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_element_set_scroll_top(@self, value);
end;

function TWebKitDOMElement.webkit_matches_selector(selectors: Pgchar; error: PPGError): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_element_webkit_matches_selector(@self, selectors, error);
end;

procedure TWebKitDOMElement.webkit_request_full_screen(flags: gushort); cdecl;
begin
  LazWebKit3.webkit_dom_element_webkit_request_full_screen(@self, flags);
end;

procedure TWebKitDOMElement.webkit_request_fullscreen; cdecl;
begin
  LazWebKit3.webkit_dom_element_webkit_request_fullscreen(@self);
end;

procedure TWebKitDOMElement.webkit_request_pointer_lock; cdecl;
begin
  LazWebKit3.webkit_dom_element_webkit_request_pointer_lock(@self);
end;

function TWebKitDOMBarInfo.get_visible: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_bar_info_get_visible(@self);
end;

function TWebKitDOMBlob.get_size: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_blob_get_size(@self);
end;

function TWebKitDOMBlob.slice(start: gint64; end_: gint64; contentType: Pgchar): PWebKitDOMBlob; cdecl;
begin
  Result := LazWebKit3.webkit_dom_blob_slice(@self, start, end_, contentType);
end;

function TWebKitDOMBlob.webkit_slice(start: gint64; end_: gint64; content_type: Pgchar): PWebKitDOMBlob; cdecl;
begin
  Result := LazWebKit3.webkit_dom_blob_webkit_slice(@self, start, end_, content_type);
end;

procedure TWebKitDOMCharacterData.append_data(data: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_character_data_append_data(@self, data, error);
end;

procedure TWebKitDOMCharacterData.delete_data(offset: gulong; length: gulong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_character_data_delete_data(@self, offset, length, error);
end;

function TWebKitDOMCharacterData.get_data: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_character_data_get_data(@self);
end;

function TWebKitDOMCharacterData.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_character_data_get_length(@self);
end;

procedure TWebKitDOMCharacterData.insert_data(offset: gulong; data: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_character_data_insert_data(@self, offset, data, error);
end;

procedure TWebKitDOMCharacterData.remove(error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_character_data_remove(@self, error);
end;

procedure TWebKitDOMCharacterData.replace_data(offset: gulong; length: gulong; data: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_character_data_replace_data(@self, offset, length, data, error);
end;

procedure TWebKitDOMCharacterData.set_data(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_character_data_set_data(@self, value, error);
end;

function TWebKitDOMCharacterData.substring_data(offset: gulong; length: gulong; error: PPGError): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_character_data_substring_data(@self, offset, length, error);
end;

function TWebKitDOMText.get_whole_text: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_get_whole_text(@self);
end;

function TWebKitDOMText.replace_whole_text(content: Pgchar; error: PPGError): PWebKitDOMText; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_replace_whole_text(@self, content, error);
end;

function TWebKitDOMText.split_text(offset: gulong; error: PPGError): PWebKitDOMText; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_split_text(@self, offset, error);
end;

function TWebKitDOMCSSRule.get_css_text: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_rule_get_css_text(@self);
end;

function TWebKitDOMCSSRule.get_parent_rule: PWebKitDOMCSSRule; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_rule_get_parent_rule(@self);
end;

function TWebKitDOMCSSRule.get_parent_style_sheet: PWebKitDOMCSSStyleSheet; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_rule_get_parent_style_sheet(@self);
end;

procedure TWebKitDOMCSSRule.set_css_text(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_css_rule_set_css_text(@self, value, error);
end;

function TWebKitDOMStyleSheet.get_disabled: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_style_sheet_get_disabled(@self);
end;

function TWebKitDOMStyleSheet.get_href: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_style_sheet_get_href(@self);
end;

function TWebKitDOMStyleSheet.get_media: PWebKitDOMMediaList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_style_sheet_get_media(@self);
end;

function TWebKitDOMStyleSheet.get_owner_node: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_style_sheet_get_owner_node(@self);
end;

function TWebKitDOMStyleSheet.get_parent_style_sheet: PWebKitDOMStyleSheet; cdecl;
begin
  Result := LazWebKit3.webkit_dom_style_sheet_get_parent_style_sheet(@self);
end;

function TWebKitDOMStyleSheet.get_title: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_style_sheet_get_title(@self);
end;

procedure TWebKitDOMStyleSheet.set_disabled(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_style_sheet_set_disabled(@self, value);
end;

function TWebKitDOMCSSStyleSheet.add_rule(selector: Pgchar; style: Pgchar; index: gulong; error: PPGError): glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_style_sheet_add_rule(@self, selector, style, index, error);
end;

procedure TWebKitDOMCSSStyleSheet.delete_rule(index: gulong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_css_style_sheet_delete_rule(@self, index, error);
end;

function TWebKitDOMCSSStyleSheet.get_css_rules: PWebKitDOMCSSRuleList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_style_sheet_get_css_rules(@self);
end;

function TWebKitDOMCSSStyleSheet.get_owner_rule: PWebKitDOMCSSRule; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_style_sheet_get_owner_rule(@self);
end;

function TWebKitDOMCSSStyleSheet.get_rules: PWebKitDOMCSSRuleList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_style_sheet_get_rules(@self);
end;

function TWebKitDOMCSSStyleSheet.insert_rule(rule: Pgchar; index: gulong; error: PPGError): gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_style_sheet_insert_rule(@self, rule, index, error);
end;

procedure TWebKitDOMCSSStyleSheet.remove_rule(index: gulong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_css_style_sheet_remove_rule(@self, index, error);
end;

function TWebKitDOMCSSRuleList.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_rule_list_get_length(@self);
end;

function TWebKitDOMCSSRuleList.item(index: gulong): PWebKitDOMCSSRule; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_rule_list_item(@self, index);
end;

function TWebKitDOMCSSStyleDeclaration.get_css_text: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_style_declaration_get_css_text(@self);
end;

function TWebKitDOMCSSStyleDeclaration.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_style_declaration_get_length(@self);
end;

function TWebKitDOMCSSStyleDeclaration.get_parent_rule: PWebKitDOMCSSRule; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_style_declaration_get_parent_rule(@self);
end;

function TWebKitDOMCSSStyleDeclaration.get_property_css_value(propertyName: Pgchar): PWebKitDOMCSSValue; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_style_declaration_get_property_css_value(@self, propertyName);
end;

function TWebKitDOMCSSStyleDeclaration.get_property_priority(propertyName: Pgchar): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_style_declaration_get_property_priority(@self, propertyName);
end;

function TWebKitDOMCSSStyleDeclaration.get_property_shorthand(propertyName: Pgchar): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_style_declaration_get_property_shorthand(@self, propertyName);
end;

function TWebKitDOMCSSStyleDeclaration.get_property_value(propertyName: Pgchar): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_style_declaration_get_property_value(@self, propertyName);
end;

function TWebKitDOMCSSStyleDeclaration.is_property_implicit(propertyName: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_style_declaration_is_property_implicit(@self, propertyName);
end;

function TWebKitDOMCSSStyleDeclaration.item(index: gulong): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_style_declaration_item(@self, index);
end;

function TWebKitDOMCSSStyleDeclaration.remove_property(propertyName: Pgchar; error: PPGError): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_style_declaration_remove_property(@self, propertyName, error);
end;

procedure TWebKitDOMCSSStyleDeclaration.set_css_text(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_css_style_declaration_set_css_text(@self, value, error);
end;

procedure TWebKitDOMCSSStyleDeclaration.set_property(propertyName: Pgchar; value: Pgchar; priority: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_css_style_declaration_set_property(@self, propertyName, value, priority, error);
end;

function TWebKitDOMCSSValue.get_css_text: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_value_get_css_text(@self);
end;

function TWebKitDOMCSSValue.get_css_value_type: gushort; cdecl;
begin
  Result := LazWebKit3.webkit_dom_css_value_get_css_value_type(@self);
end;

procedure TWebKitDOMCSSValue.set_css_text(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_css_value_set_css_text(@self, value, error);
end;

function TWebKitDOMMemoryInfo.get_js_heap_size_limit: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_memory_info_get_js_heap_size_limit(@self);
end;

function TWebKitDOMMemoryInfo.get_total_js_heap_size: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_memory_info_get_total_js_heap_size(@self);
end;

function TWebKitDOMMemoryInfo.get_used_js_heap_size: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_memory_info_get_used_js_heap_size(@self);
end;

function TWebKitDOMConsole.get_memory: PWebKitDOMMemoryInfo; cdecl;
begin
  Result := LazWebKit3.webkit_dom_console_get_memory(@self);
end;

procedure TWebKitDOMConsole.group_end; cdecl;
begin
  LazWebKit3.webkit_dom_console_group_end(@self);
end;

procedure TWebKitDOMConsole.time(title: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_console_time(@self, title);
end;

procedure TWebKitDOMDOMApplicationCache.abort; cdecl;
begin
  LazWebKit3.webkit_dom_dom_application_cache_abort(@self);
end;

function TWebKitDOMDOMApplicationCache.dispatch_event(evt: PWebKitDOMEvent; error: PPGError): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_application_cache_dispatch_event(@self, evt, error);
end;

function TWebKitDOMDOMApplicationCache.get_status: gushort; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_application_cache_get_status(@self);
end;

procedure TWebKitDOMDOMApplicationCache.swap_cache(error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_dom_application_cache_swap_cache(@self, error);
end;

procedure TWebKitDOMDOMApplicationCache.update(error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_dom_application_cache_update(@self, error);
end;

function TWebKitDOMEvent.get_bubbles: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_event_get_bubbles(@self);
end;

function TWebKitDOMEvent.get_cancel_bubble: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_event_get_cancel_bubble(@self);
end;

function TWebKitDOMEvent.get_cancelable: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_event_get_cancelable(@self);
end;

function TWebKitDOMEvent.get_current_target: PWebKitDOMEventTarget; cdecl;
begin
  Result := LazWebKit3.webkit_dom_event_get_current_target(@self);
end;

function TWebKitDOMEvent.get_default_prevented: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_event_get_default_prevented(@self);
end;

function TWebKitDOMEvent.get_event_phase: gushort; cdecl;
begin
  Result := LazWebKit3.webkit_dom_event_get_event_phase(@self);
end;

function TWebKitDOMEvent.get_return_value: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_event_get_return_value(@self);
end;

function TWebKitDOMEvent.get_src_element: PWebKitDOMEventTarget; cdecl;
begin
  Result := LazWebKit3.webkit_dom_event_get_src_element(@self);
end;

function TWebKitDOMEvent.get_target: PWebKitDOMEventTarget; cdecl;
begin
  Result := LazWebKit3.webkit_dom_event_get_target(@self);
end;

function TWebKitDOMEvent.get_time_stamp: guint32; cdecl;
begin
  Result := LazWebKit3.webkit_dom_event_get_time_stamp(@self);
end;

procedure TWebKitDOMEvent.init_event(eventTypeArg: Pgchar; canBubbleArg: gboolean; cancelableArg: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_event_init_event(@self, eventTypeArg, canBubbleArg, cancelableArg);
end;

procedure TWebKitDOMEvent.prevent_default; cdecl;
begin
  LazWebKit3.webkit_dom_event_prevent_default(@self);
end;

procedure TWebKitDOMEvent.set_cancel_bubble(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_event_set_cancel_bubble(@self, value);
end;

procedure TWebKitDOMEvent.set_return_value(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_event_set_return_value(@self, value);
end;

procedure TWebKitDOMEvent.stop_immediate_propagation; cdecl;
begin
  LazWebKit3.webkit_dom_event_stop_immediate_propagation(@self);
end;

procedure TWebKitDOMEvent.stop_propagation; cdecl;
begin
  LazWebKit3.webkit_dom_event_stop_propagation(@self);
end;

function TWebKitDOMDOMImplementation.create_css_style_sheet(title: Pgchar; media: Pgchar; error: PPGError): PWebKitDOMCSSStyleSheet; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_implementation_create_css_style_sheet(@self, title, media, error);
end;

function TWebKitDOMDOMImplementation.create_document(namespaceURI: Pgchar; qualifiedName: Pgchar; doctype: PWebKitDOMDocumentType; error: PPGError): PWebKitDOMDocument; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_implementation_create_document(@self, namespaceURI, qualifiedName, doctype, error);
end;

function TWebKitDOMDOMImplementation.create_document_type(qualifiedName: Pgchar; publicId: Pgchar; systemId: Pgchar; error: PPGError): PWebKitDOMDocumentType; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_implementation_create_document_type(@self, qualifiedName, publicId, systemId, error);
end;

function TWebKitDOMDOMImplementation.create_html_document(title: Pgchar): PWebKitDOMHTMLDocument; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_implementation_create_html_document(@self, title);
end;

function TWebKitDOMDOMImplementation.has_feature(feature: Pgchar; version: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_implementation_has_feature(@self, feature, version);
end;

function TWebKitDOMDocument.adopt_node(source: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_adopt_node(@self, source, error);
end;

function TWebKitDOMDocument.caret_range_from_point(x: glong; y: glong): PWebKitDOMRange; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_caret_range_from_point(@self, x, y);
end;

function TWebKitDOMDocument.create_attribute(name: Pgchar; error: PPGError): PWebKitDOMAttr; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_create_attribute(@self, name, error);
end;

function TWebKitDOMDocument.create_attribute_ns(namespaceURI: Pgchar; qualifiedName: Pgchar; error: PPGError): PWebKitDOMAttr; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_create_attribute_ns(@self, namespaceURI, qualifiedName, error);
end;

function TWebKitDOMDocument.create_cdata_section(data: Pgchar; error: PPGError): PWebKitDOMCDATASection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_create_cdata_section(@self, data, error);
end;

function TWebKitDOMDocument.create_comment(data: Pgchar): PWebKitDOMComment; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_create_comment(@self, data);
end;

function TWebKitDOMDocument.create_css_style_declaration: PWebKitDOMCSSStyleDeclaration; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_create_css_style_declaration(@self);
end;

function TWebKitDOMDocument.create_document_fragment: PWebKitDOMDocumentFragment; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_create_document_fragment(@self);
end;

function TWebKitDOMDocument.create_element(tagName: Pgchar; error: PPGError): PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_create_element(@self, tagName, error);
end;

function TWebKitDOMDocument.create_element_ns(namespaceURI: Pgchar; qualifiedName: Pgchar; error: PPGError): PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_create_element_ns(@self, namespaceURI, qualifiedName, error);
end;

function TWebKitDOMDocument.create_entity_reference(name: Pgchar; error: PPGError): PWebKitDOMEntityReference; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_create_entity_reference(@self, name, error);
end;

function TWebKitDOMDocument.create_event(eventType: Pgchar; error: PPGError): PWebKitDOMEvent; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_create_event(@self, eventType, error);
end;

function TWebKitDOMDocument.create_expression(expression: Pgchar; resolver: PWebKitDOMXPathNSResolver; error: PPGError): PWebKitDOMXPathExpression; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_create_expression(@self, expression, resolver, error);
end;

function TWebKitDOMDocument.create_node_iterator(root: PWebKitDOMNode; whatToShow: gulong; filter: PWebKitDOMNodeFilter; expandEntityReferences: gboolean; error: PPGError): PWebKitDOMNodeIterator; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_create_node_iterator(@self, root, whatToShow, filter, expandEntityReferences, error);
end;

function TWebKitDOMDocument.create_ns_resolver(nodeResolver: PWebKitDOMNode): PWebKitDOMXPathNSResolver; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_create_ns_resolver(@self, nodeResolver);
end;

function TWebKitDOMDocument.create_processing_instruction(target: Pgchar; data: Pgchar; error: PPGError): PWebKitDOMProcessingInstruction; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_create_processing_instruction(@self, target, data, error);
end;

function TWebKitDOMDocument.create_range: PWebKitDOMRange; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_create_range(@self);
end;

function TWebKitDOMDocument.create_text_node(data: Pgchar): PWebKitDOMText; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_create_text_node(@self, data);
end;

function TWebKitDOMDocument.create_tree_walker(root: PWebKitDOMNode; whatToShow: gulong; filter: PWebKitDOMNodeFilter; expandEntityReferences: gboolean; error: PPGError): PWebKitDOMTreeWalker; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_create_tree_walker(@self, root, whatToShow, filter, expandEntityReferences, error);
end;

function TWebKitDOMDocument.element_from_point(x: glong; y: glong): PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_element_from_point(@self, x, y);
end;

function TWebKitDOMDocument.evaluate(expression: Pgchar; contextNode: PWebKitDOMNode; resolver: PWebKitDOMXPathNSResolver; type_: gushort; inResult: PWebKitDOMXPathResult; error: PPGError): PWebKitDOMXPathResult; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_evaluate(@self, expression, contextNode, resolver, type_, inResult, error);
end;

function TWebKitDOMDocument.exec_command(command: Pgchar; userInterface: gboolean; value: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_exec_command(@self, command, userInterface, value);
end;

function TWebKitDOMDocument.get_anchors: PWebKitDOMHTMLCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_anchors(@self);
end;

function TWebKitDOMDocument.get_applets: PWebKitDOMHTMLCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_applets(@self);
end;

function TWebKitDOMDocument.get_body: PWebKitDOMHTMLElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_body(@self);
end;

function TWebKitDOMDocument.get_character_set: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_character_set(@self);
end;

function TWebKitDOMDocument.get_charset: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_charset(@self);
end;

function TWebKitDOMDocument.get_compat_mode: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_compat_mode(@self);
end;

function TWebKitDOMDocument.get_cookie(error: PPGError): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_cookie(@self, error);
end;

function TWebKitDOMDocument.get_default_charset: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_default_charset(@self);
end;

function TWebKitDOMDocument.get_default_view: PWebKitDOMDOMWindow; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_default_view(@self);
end;

function TWebKitDOMDocument.get_doctype: PWebKitDOMDocumentType; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_doctype(@self);
end;

function TWebKitDOMDocument.get_document_element: PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_document_element(@self);
end;

function TWebKitDOMDocument.get_document_uri: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_document_uri(@self);
end;

function TWebKitDOMDocument.get_domain: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_domain(@self);
end;

function TWebKitDOMDocument.get_element_by_id(elementId: Pgchar): PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_element_by_id(@self, elementId);
end;

function TWebKitDOMDocument.get_elements_by_class_name(tagname: Pgchar): PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_elements_by_class_name(@self, tagname);
end;

function TWebKitDOMDocument.get_elements_by_name(elementName: Pgchar): PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_elements_by_name(@self, elementName);
end;

function TWebKitDOMDocument.get_elements_by_tag_name(tagname: Pgchar): PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_elements_by_tag_name(@self, tagname);
end;

function TWebKitDOMDocument.get_elements_by_tag_name_ns(namespaceURI: Pgchar; localName: Pgchar): PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_elements_by_tag_name_ns(@self, namespaceURI, localName);
end;

function TWebKitDOMDocument.get_forms: PWebKitDOMHTMLCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_forms(@self);
end;

function TWebKitDOMDocument.get_head: PWebKitDOMHTMLHeadElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_head(@self);
end;

function TWebKitDOMDocument.get_images: PWebKitDOMHTMLCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_images(@self);
end;

function TWebKitDOMDocument.get_implementation: PWebKitDOMDOMImplementation; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_implementation(@self);
end;

function TWebKitDOMDocument.get_input_encoding: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_input_encoding(@self);
end;

function TWebKitDOMDocument.get_last_modified: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_last_modified(@self);
end;

function TWebKitDOMDocument.get_links: PWebKitDOMHTMLCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_links(@self);
end;

function TWebKitDOMDocument.get_override_style(element: PWebKitDOMElement; pseudoElement: Pgchar): PWebKitDOMCSSStyleDeclaration; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_override_style(@self, element, pseudoElement);
end;

function TWebKitDOMDocument.get_preferred_stylesheet_set: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_preferred_stylesheet_set(@self);
end;

function TWebKitDOMDocument.get_ready_state: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_ready_state(@self);
end;

function TWebKitDOMDocument.get_referrer: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_referrer(@self);
end;

function TWebKitDOMDocument.get_security_policy: PWebKitDOMDOMSecurityPolicy; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_security_policy(@self);
end;

function TWebKitDOMDocument.get_selected_stylesheet_set: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_selected_stylesheet_set(@self);
end;

function TWebKitDOMDocument.get_style_sheets: PWebKitDOMStyleSheetList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_style_sheets(@self);
end;

function TWebKitDOMDocument.get_title: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_title(@self);
end;

function TWebKitDOMDocument.get_webkit_current_full_screen_element: PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_webkit_current_full_screen_element(@self);
end;

function TWebKitDOMDocument.get_webkit_full_screen_keyboard_input_allowed: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_webkit_full_screen_keyboard_input_allowed(@self);
end;

function TWebKitDOMDocument.get_webkit_fullscreen_element: PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_webkit_fullscreen_element(@self);
end;

function TWebKitDOMDocument.get_webkit_fullscreen_enabled: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_webkit_fullscreen_enabled(@self);
end;

function TWebKitDOMDocument.get_webkit_hidden: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_webkit_hidden(@self);
end;

function TWebKitDOMDocument.get_webkit_is_full_screen: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_webkit_is_full_screen(@self);
end;

function TWebKitDOMDocument.get_webkit_pointer_lock_element: PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_webkit_pointer_lock_element(@self);
end;

function TWebKitDOMDocument.get_webkit_visibility_state: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_webkit_visibility_state(@self);
end;

function TWebKitDOMDocument.get_xml_encoding: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_xml_encoding(@self);
end;

function TWebKitDOMDocument.get_xml_standalone: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_xml_standalone(@self);
end;

function TWebKitDOMDocument.get_xml_version: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_get_xml_version(@self);
end;

function TWebKitDOMDocument.import_node(importedNode: PWebKitDOMNode; deep: gboolean; error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_import_node(@self, importedNode, deep, error);
end;

function TWebKitDOMDocument.query_command_enabled(command: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_query_command_enabled(@self, command);
end;

function TWebKitDOMDocument.query_command_indeterm(command: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_query_command_indeterm(@self, command);
end;

function TWebKitDOMDocument.query_command_state(command: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_query_command_state(@self, command);
end;

function TWebKitDOMDocument.query_command_supported(command: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_query_command_supported(@self, command);
end;

function TWebKitDOMDocument.query_command_value(command: Pgchar): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_query_command_value(@self, command);
end;

function TWebKitDOMDocument.query_selector(selectors: Pgchar; error: PPGError): PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_query_selector(@self, selectors, error);
end;

function TWebKitDOMDocument.query_selector_all(selectors: Pgchar; error: PPGError): PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_query_selector_all(@self, selectors, error);
end;

procedure TWebKitDOMDocument.set_body(value: PWebKitDOMHTMLElement; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_document_set_body(@self, value, error);
end;

procedure TWebKitDOMDocument.set_charset(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_document_set_charset(@self, value);
end;

procedure TWebKitDOMDocument.set_cookie(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_document_set_cookie(@self, value, error);
end;

procedure TWebKitDOMDocument.set_document_uri(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_document_set_document_uri(@self, value);
end;

procedure TWebKitDOMDocument.set_selected_stylesheet_set(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_document_set_selected_stylesheet_set(@self, value);
end;

procedure TWebKitDOMDocument.set_title(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_document_set_title(@self, value);
end;

procedure TWebKitDOMDocument.set_xml_standalone(value: gboolean; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_document_set_xml_standalone(@self, value, error);
end;

procedure TWebKitDOMDocument.set_xml_version(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_document_set_xml_version(@self, value, error);
end;

procedure TWebKitDOMDocument.webkit_cancel_full_screen; cdecl;
begin
  LazWebKit3.webkit_dom_document_webkit_cancel_full_screen(@self);
end;

procedure TWebKitDOMDocument.webkit_exit_fullscreen; cdecl;
begin
  LazWebKit3.webkit_dom_document_webkit_exit_fullscreen(@self);
end;

procedure TWebKitDOMDocument.webkit_exit_pointer_lock; cdecl;
begin
  LazWebKit3.webkit_dom_document_webkit_exit_pointer_lock(@self);
end;

function TWebKitDOMDocument.webkit_get_named_flows: PWebKitDOMDOMNamedFlowCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_webkit_get_named_flows(@self);
end;

function TWebKitDOMDocumentType.get_entities: PWebKitDOMNamedNodeMap; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_type_get_entities(@self);
end;

function TWebKitDOMDocumentType.get_internal_subset: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_type_get_internal_subset(@self);
end;

function TWebKitDOMDocumentType.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_type_get_name(@self);
end;

function TWebKitDOMDocumentType.get_notations: PWebKitDOMNamedNodeMap; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_type_get_notations(@self);
end;

function TWebKitDOMDocumentType.get_public_id: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_type_get_public_id(@self);
end;

function TWebKitDOMDocumentType.get_system_id: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_type_get_system_id(@self);
end;

procedure TWebKitDOMDocumentType.remove(error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_document_type_remove(@self, error);
end;

procedure TWebKitDOMHTMLDocument.capture_events; cdecl;
begin
  LazWebKit3.webkit_dom_html_document_capture_events(@self);
end;

procedure TWebKitDOMHTMLDocument.clear; cdecl;
begin
  LazWebKit3.webkit_dom_html_document_clear(@self);
end;

procedure TWebKitDOMHTMLDocument.close; cdecl;
begin
  LazWebKit3.webkit_dom_html_document_close(@self);
end;

function TWebKitDOMHTMLDocument.get_active_element: PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_document_get_active_element(@self);
end;

function TWebKitDOMHTMLDocument.get_alink_color: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_document_get_alink_color(@self);
end;

function TWebKitDOMHTMLDocument.get_bg_color: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_document_get_bg_color(@self);
end;

function TWebKitDOMHTMLDocument.get_compat_mode: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_document_get_compat_mode(@self);
end;

function TWebKitDOMHTMLDocument.get_design_mode: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_document_get_design_mode(@self);
end;

function TWebKitDOMHTMLDocument.get_dir: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_document_get_dir(@self);
end;

function TWebKitDOMHTMLDocument.get_embeds: PWebKitDOMHTMLCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_document_get_embeds(@self);
end;

function TWebKitDOMHTMLDocument.get_fg_color: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_document_get_fg_color(@self);
end;

function TWebKitDOMHTMLDocument.get_height: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_document_get_height(@self);
end;

function TWebKitDOMHTMLDocument.get_link_color: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_document_get_link_color(@self);
end;

function TWebKitDOMHTMLDocument.get_plugins: PWebKitDOMHTMLCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_document_get_plugins(@self);
end;

function TWebKitDOMHTMLDocument.get_scripts: PWebKitDOMHTMLCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_document_get_scripts(@self);
end;

function TWebKitDOMHTMLDocument.get_vlink_color: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_document_get_vlink_color(@self);
end;

function TWebKitDOMHTMLDocument.get_width: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_document_get_width(@self);
end;

function TWebKitDOMHTMLDocument.has_focus: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_document_has_focus(@self);
end;

procedure TWebKitDOMHTMLDocument.open; cdecl;
begin
  LazWebKit3.webkit_dom_html_document_open(@self);
end;

procedure TWebKitDOMHTMLDocument.release_events; cdecl;
begin
  LazWebKit3.webkit_dom_html_document_release_events(@self);
end;

procedure TWebKitDOMHTMLDocument.set_alink_color(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_document_set_alink_color(@self, value);
end;

procedure TWebKitDOMHTMLDocument.set_bg_color(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_document_set_bg_color(@self, value);
end;

procedure TWebKitDOMHTMLDocument.set_design_mode(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_document_set_design_mode(@self, value);
end;

procedure TWebKitDOMHTMLDocument.set_dir(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_document_set_dir(@self, value);
end;

procedure TWebKitDOMHTMLDocument.set_fg_color(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_document_set_fg_color(@self, value);
end;

procedure TWebKitDOMHTMLDocument.set_link_color(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_document_set_link_color(@self, value);
end;

procedure TWebKitDOMHTMLDocument.set_vlink_color(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_document_set_vlink_color(@self, value);
end;

function TWebKitDOMDOMMimeType.get_description: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_mime_type_get_description(@self);
end;

function TWebKitDOMDOMMimeType.get_enabled_plugin: PWebKitDOMDOMPlugin; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_mime_type_get_enabled_plugin(@self);
end;

function TWebKitDOMDOMMimeType.get_suffixes: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_mime_type_get_suffixes(@self);
end;

function TWebKitDOMDOMPlugin.get_description: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_plugin_get_description(@self);
end;

function TWebKitDOMDOMPlugin.get_filename: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_plugin_get_filename(@self);
end;

function TWebKitDOMDOMPlugin.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_plugin_get_length(@self);
end;

function TWebKitDOMDOMPlugin.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_plugin_get_name(@self);
end;

function TWebKitDOMDOMPlugin.item(index: gulong): PWebKitDOMDOMMimeType; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_plugin_item(@self, index);
end;

function TWebKitDOMDOMPlugin.named_item(name: Pgchar): PWebKitDOMDOMMimeType; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_plugin_named_item(@self, name);
end;

function TWebKitDOMDOMMimeTypeArray.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_mime_type_array_get_length(@self);
end;

function TWebKitDOMDOMMimeTypeArray.item(index: gulong): PWebKitDOMDOMMimeType; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_mime_type_array_item(@self, index);
end;

function TWebKitDOMDOMMimeTypeArray.named_item(name: Pgchar): PWebKitDOMDOMMimeType; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_mime_type_array_named_item(@self, name);
end;

function TWebKitDOMDOMNamedFlowCollection.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_named_flow_collection_get_length(@self);
end;

function TWebKitDOMDOMNamedFlowCollection.item(index: gulong): PWebKitDOMWebKitNamedFlow; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_named_flow_collection_item(@self, index);
end;

function TWebKitDOMDOMNamedFlowCollection.named_item(name: Pgchar): PWebKitDOMWebKitNamedFlow; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_named_flow_collection_named_item(@self, name);
end;

function TWebKitDOMWebKitNamedFlow.dispatch_event(event: PWebKitDOMEvent; error: PPGError): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_webkit_named_flow_dispatch_event(@self, event, error);
end;

function TWebKitDOMWebKitNamedFlow.get_content: PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_webkit_named_flow_get_content(@self);
end;

function TWebKitDOMWebKitNamedFlow.get_content_nodes: PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_webkit_named_flow_get_content_nodes(@self);
end;

function TWebKitDOMWebKitNamedFlow.get_first_empty_region_index: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_webkit_named_flow_get_first_empty_region_index(@self);
end;

function TWebKitDOMWebKitNamedFlow.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_webkit_named_flow_get_name(@self);
end;

function TWebKitDOMWebKitNamedFlow.get_overflow: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_webkit_named_flow_get_overflow(@self);
end;

function TWebKitDOMWebKitNamedFlow.get_overset: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_webkit_named_flow_get_overset(@self);
end;

function TWebKitDOMWebKitNamedFlow.get_regions: PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_webkit_named_flow_get_regions(@self);
end;

function TWebKitDOMWebKitNamedFlow.get_regions_by_content(contentNode: PWebKitDOMNode): PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_webkit_named_flow_get_regions_by_content(@self, contentNode);
end;

function TWebKitDOMWebKitNamedFlow.get_regions_by_content_node(contentNode: PWebKitDOMNode): PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_webkit_named_flow_get_regions_by_content_node(@self, contentNode);
end;

function TWebKitDOMDOMPluginArray.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_plugin_array_get_length(@self);
end;

function TWebKitDOMDOMPluginArray.item(index: gulong): PWebKitDOMDOMPlugin; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_plugin_array_item(@self, index);
end;

function TWebKitDOMDOMPluginArray.named_item(name: Pgchar): PWebKitDOMDOMPlugin; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_plugin_array_named_item(@self, name);
end;

procedure TWebKitDOMDOMPluginArray.refresh(reload: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_dom_plugin_array_refresh(@self, reload);
end;

function TWebKitDOMDOMSecurityPolicy.allows_connection_to(url: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_security_policy_allows_connection_to(@self, url);
end;

function TWebKitDOMDOMSecurityPolicy.allows_font_from(url: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_security_policy_allows_font_from(@self, url);
end;

function TWebKitDOMDOMSecurityPolicy.allows_form_action(url: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_security_policy_allows_form_action(@self, url);
end;

function TWebKitDOMDOMSecurityPolicy.allows_frame_from(url: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_security_policy_allows_frame_from(@self, url);
end;

function TWebKitDOMDOMSecurityPolicy.allows_image_from(url: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_security_policy_allows_image_from(@self, url);
end;

function TWebKitDOMDOMSecurityPolicy.allows_media_from(url: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_security_policy_allows_media_from(@self, url);
end;

function TWebKitDOMDOMSecurityPolicy.allows_object_from(url: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_security_policy_allows_object_from(@self, url);
end;

function TWebKitDOMDOMSecurityPolicy.allows_plugin_type(type_: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_security_policy_allows_plugin_type(@self, type_);
end;

function TWebKitDOMDOMSecurityPolicy.allows_script_from(url: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_security_policy_allows_script_from(@self, url);
end;

function TWebKitDOMDOMSecurityPolicy.allows_style_from(url: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_security_policy_allows_style_from(@self, url);
end;

function TWebKitDOMDOMSecurityPolicy.get_allows_eval: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_security_policy_get_allows_eval(@self);
end;

function TWebKitDOMDOMSecurityPolicy.get_allows_inline_script: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_security_policy_get_allows_inline_script(@self);
end;

function TWebKitDOMDOMSecurityPolicy.get_allows_inline_style: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_security_policy_get_allows_inline_style(@self);
end;

function TWebKitDOMDOMSecurityPolicy.get_is_active: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_security_policy_get_is_active(@self);
end;

function TWebKitDOMDOMSecurityPolicy.get_report_ur_is: PWebKitDOMDOMStringList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_security_policy_get_report_ur_is(@self);
end;

function TWebKitDOMDOMStringList.contains(string_: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_string_list_contains(@self, string_);
end;

function TWebKitDOMDOMStringList.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_string_list_get_length(@self);
end;

function TWebKitDOMDOMStringList.item(index: gulong): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_string_list_item(@self, index);
end;

procedure TWebKitDOMDOMSelection.add_range(range: PWebKitDOMRange); cdecl;
begin
  LazWebKit3.webkit_dom_dom_selection_add_range(@self, range);
end;

procedure TWebKitDOMDOMSelection.collapse(node: PWebKitDOMNode; index: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_dom_selection_collapse(@self, node, index, error);
end;

procedure TWebKitDOMDOMSelection.collapse_to_end(error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_dom_selection_collapse_to_end(@self, error);
end;

procedure TWebKitDOMDOMSelection.collapse_to_start(error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_dom_selection_collapse_to_start(@self, error);
end;

function TWebKitDOMDOMSelection.contains_node(node: PWebKitDOMNode; allowPartial: gboolean): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_selection_contains_node(@self, node, allowPartial);
end;

procedure TWebKitDOMDOMSelection.delete_from_document; cdecl;
begin
  LazWebKit3.webkit_dom_dom_selection_delete_from_document(@self);
end;

procedure TWebKitDOMDOMSelection.empty; cdecl;
begin
  LazWebKit3.webkit_dom_dom_selection_empty(@self);
end;

procedure TWebKitDOMDOMSelection.extend(node: PWebKitDOMNode; offset: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_dom_selection_extend(@self, node, offset, error);
end;

function TWebKitDOMDOMSelection.get_anchor_node: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_selection_get_anchor_node(@self);
end;

function TWebKitDOMDOMSelection.get_anchor_offset: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_selection_get_anchor_offset(@self);
end;

function TWebKitDOMDOMSelection.get_base_node: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_selection_get_base_node(@self);
end;

function TWebKitDOMDOMSelection.get_base_offset: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_selection_get_base_offset(@self);
end;

function TWebKitDOMDOMSelection.get_extent_node: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_selection_get_extent_node(@self);
end;

function TWebKitDOMDOMSelection.get_extent_offset: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_selection_get_extent_offset(@self);
end;

function TWebKitDOMDOMSelection.get_focus_node: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_selection_get_focus_node(@self);
end;

function TWebKitDOMDOMSelection.get_focus_offset: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_selection_get_focus_offset(@self);
end;

function TWebKitDOMDOMSelection.get_is_collapsed: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_selection_get_is_collapsed(@self);
end;

function TWebKitDOMDOMSelection.get_range_at(index: glong; error: PPGError): PWebKitDOMRange; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_selection_get_range_at(@self, index, error);
end;

function TWebKitDOMDOMSelection.get_range_count: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_selection_get_range_count(@self);
end;

procedure TWebKitDOMDOMSelection.modify(alter: Pgchar; direction: Pgchar; granularity: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_dom_selection_modify(@self, alter, direction, granularity);
end;

procedure TWebKitDOMDOMSelection.remove_all_ranges; cdecl;
begin
  LazWebKit3.webkit_dom_dom_selection_remove_all_ranges(@self);
end;

procedure TWebKitDOMDOMSelection.select_all_children(node: PWebKitDOMNode; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_dom_selection_select_all_children(@self, node, error);
end;

procedure TWebKitDOMDOMSelection.set_base_and_extent(baseNode: PWebKitDOMNode; baseOffset: glong; extentNode: PWebKitDOMNode; extentOffset: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_dom_selection_set_base_and_extent(@self, baseNode, baseOffset, extentNode, extentOffset, error);
end;

procedure TWebKitDOMDOMSelection.set_position(node: PWebKitDOMNode; offset: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_dom_selection_set_position(@self, node, offset, error);
end;

function TWebKitDOMRange.clone_contents(error: PPGError): PWebKitDOMDocumentFragment; cdecl;
begin
  Result := LazWebKit3.webkit_dom_range_clone_contents(@self, error);
end;

function TWebKitDOMRange.clone_range(error: PPGError): PWebKitDOMRange; cdecl;
begin
  Result := LazWebKit3.webkit_dom_range_clone_range(@self, error);
end;

procedure TWebKitDOMRange.collapse(toStart: gboolean; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_range_collapse(@self, toStart, error);
end;

function TWebKitDOMRange.compare_boundary_points(how: gushort; sourceRange: PWebKitDOMRange; error: PPGError): gshort; cdecl;
begin
  Result := LazWebKit3.webkit_dom_range_compare_boundary_points(@self, how, sourceRange, error);
end;

function TWebKitDOMRange.compare_node(refNode: PWebKitDOMNode; error: PPGError): gshort; cdecl;
begin
  Result := LazWebKit3.webkit_dom_range_compare_node(@self, refNode, error);
end;

function TWebKitDOMRange.compare_point(refNode: PWebKitDOMNode; offset: glong; error: PPGError): gshort; cdecl;
begin
  Result := LazWebKit3.webkit_dom_range_compare_point(@self, refNode, offset, error);
end;

function TWebKitDOMRange.create_contextual_fragment(html: Pgchar; error: PPGError): PWebKitDOMDocumentFragment; cdecl;
begin
  Result := LazWebKit3.webkit_dom_range_create_contextual_fragment(@self, html, error);
end;

procedure TWebKitDOMRange.delete_contents(error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_range_delete_contents(@self, error);
end;

procedure TWebKitDOMRange.detach(error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_range_detach(@self, error);
end;

procedure TWebKitDOMRange.expand(unit_: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_range_expand(@self, unit_, error);
end;

function TWebKitDOMRange.extract_contents(error: PPGError): PWebKitDOMDocumentFragment; cdecl;
begin
  Result := LazWebKit3.webkit_dom_range_extract_contents(@self, error);
end;

function TWebKitDOMRange.get_collapsed(error: PPGError): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_range_get_collapsed(@self, error);
end;

function TWebKitDOMRange.get_common_ancestor_container(error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_range_get_common_ancestor_container(@self, error);
end;

function TWebKitDOMRange.get_end_container(error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_range_get_end_container(@self, error);
end;

function TWebKitDOMRange.get_end_offset(error: PPGError): glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_range_get_end_offset(@self, error);
end;

function TWebKitDOMRange.get_start_container(error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_range_get_start_container(@self, error);
end;

function TWebKitDOMRange.get_start_offset(error: PPGError): glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_range_get_start_offset(@self, error);
end;

function TWebKitDOMRange.get_text: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_range_get_text(@self);
end;

procedure TWebKitDOMRange.insert_node(newNode: PWebKitDOMNode; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_range_insert_node(@self, newNode, error);
end;

function TWebKitDOMRange.intersects_node(refNode: PWebKitDOMNode; error: PPGError): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_range_intersects_node(@self, refNode, error);
end;

function TWebKitDOMRange.is_point_in_range(refNode: PWebKitDOMNode; offset: glong; error: PPGError): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_range_is_point_in_range(@self, refNode, offset, error);
end;

procedure TWebKitDOMRange.select_node(refNode: PWebKitDOMNode; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_range_select_node(@self, refNode, error);
end;

procedure TWebKitDOMRange.select_node_contents(refNode: PWebKitDOMNode; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_range_select_node_contents(@self, refNode, error);
end;

procedure TWebKitDOMRange.set_end(refNode: PWebKitDOMNode; offset: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_range_set_end(@self, refNode, offset, error);
end;

procedure TWebKitDOMRange.set_end_after(refNode: PWebKitDOMNode; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_range_set_end_after(@self, refNode, error);
end;

procedure TWebKitDOMRange.set_end_before(refNode: PWebKitDOMNode; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_range_set_end_before(@self, refNode, error);
end;

procedure TWebKitDOMRange.set_start(refNode: PWebKitDOMNode; offset: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_range_set_start(@self, refNode, offset, error);
end;

procedure TWebKitDOMRange.set_start_after(refNode: PWebKitDOMNode; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_range_set_start_after(@self, refNode, error);
end;

procedure TWebKitDOMRange.set_start_before(refNode: PWebKitDOMNode; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_range_set_start_before(@self, refNode, error);
end;

procedure TWebKitDOMRange.surround_contents(newParent: PWebKitDOMNode; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_range_surround_contents(@self, newParent, error);
end;

function TWebKitDOMRange.to_string(error: PPGError): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_range_to_string(@self, error);
end;

procedure TWebKitDOMDOMTokenList.add(tokens: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_dom_token_list_add(@self, tokens, error);
end;

function TWebKitDOMDOMTokenList.contains(token: Pgchar; error: PPGError): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_token_list_contains(@self, token, error);
end;

function TWebKitDOMDOMTokenList.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_token_list_get_length(@self);
end;

function TWebKitDOMDOMTokenList.item(index: gulong): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_token_list_item(@self, index);
end;

procedure TWebKitDOMDOMTokenList.remove(tokens: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_dom_token_list_remove(@self, tokens, error);
end;

function TWebKitDOMDOMTokenList.toggle(token: Pgchar; force: gboolean; error: PPGError): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_token_list_toggle(@self, token, force, error);
end;

function TWebKitDOMDOMSettableTokenList.get_value: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_settable_token_list_get_value(@self);
end;

procedure TWebKitDOMDOMSettableTokenList.set_value(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_dom_settable_token_list_set_value(@self, value);
end;

procedure TWebKitDOMDOMWindow.alert(message: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_alert(@self, message);
end;

function TWebKitDOMDOMWindow.atob(string_: Pgchar; error: PPGError): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_atob(@self, string_, error);
end;

procedure TWebKitDOMDOMWindow.blur; cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_blur(@self);
end;

function TWebKitDOMDOMWindow.btoa(string_: Pgchar; error: PPGError): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_btoa(@self, string_, error);
end;

procedure TWebKitDOMDOMWindow.cancel_animation_frame(id: glong); cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_cancel_animation_frame(@self, id);
end;

procedure TWebKitDOMDOMWindow.capture_events; cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_capture_events(@self);
end;

procedure TWebKitDOMDOMWindow.clear_interval(handle: glong); cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_clear_interval(@self, handle);
end;

procedure TWebKitDOMDOMWindow.clear_timeout(handle: glong); cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_clear_timeout(@self, handle);
end;

procedure TWebKitDOMDOMWindow.close; cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_close(@self);
end;

function TWebKitDOMDOMWindow.confirm(message: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_confirm(@self, message);
end;

function TWebKitDOMDOMWindow.dispatch_event(evt: PWebKitDOMEvent; error: PPGError): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_dispatch_event(@self, evt, error);
end;

function TWebKitDOMDOMWindow.find(string_: Pgchar; caseSensitive: gboolean; backwards: gboolean; wrap: gboolean; wholeWord: gboolean; searchInFrames: gboolean; showDialog: gboolean): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_find(@self, string_, caseSensitive, backwards, wrap, wholeWord, searchInFrames, showDialog);
end;

procedure TWebKitDOMDOMWindow.focus; cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_focus(@self);
end;

function TWebKitDOMDOMWindow.get_application_cache: PWebKitDOMDOMApplicationCache; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_application_cache(@self);
end;

function TWebKitDOMDOMWindow.get_client_information: PWebKitDOMNavigator; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_client_information(@self);
end;

function TWebKitDOMDOMWindow.get_closed: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_closed(@self);
end;

function TWebKitDOMDOMWindow.get_computed_style(element: PWebKitDOMElement; pseudoElement: Pgchar): PWebKitDOMCSSStyleDeclaration; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_computed_style(@self, element, pseudoElement);
end;

function TWebKitDOMDOMWindow.get_console: PWebKitDOMConsole; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_console(@self);
end;

function TWebKitDOMDOMWindow.get_css: PWebKitDOMDOMWindowCSS; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_css(@self);
end;

function TWebKitDOMDOMWindow.get_default_status: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_default_status(@self);
end;

function TWebKitDOMDOMWindow.get_device_pixel_ratio: gdouble; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_device_pixel_ratio(@self);
end;

function TWebKitDOMDOMWindow.get_document: PWebKitDOMDocument; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_document(@self);
end;

function TWebKitDOMDOMWindow.get_frame_element: PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_frame_element(@self);
end;

function TWebKitDOMDOMWindow.get_frames: PWebKitDOMDOMWindow; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_frames(@self);
end;

function TWebKitDOMDOMWindow.get_history: PWebKitDOMHistory; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_history(@self);
end;

function TWebKitDOMDOMWindow.get_inner_height: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_inner_height(@self);
end;

function TWebKitDOMDOMWindow.get_inner_width: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_inner_width(@self);
end;

function TWebKitDOMDOMWindow.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_length(@self);
end;

function TWebKitDOMDOMWindow.get_local_storage(error: PPGError): PWebKitDOMStorage; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_local_storage(@self, error);
end;

function TWebKitDOMDOMWindow.get_locationbar: PWebKitDOMBarInfo; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_locationbar(@self);
end;

function TWebKitDOMDOMWindow.get_menubar: PWebKitDOMBarInfo; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_menubar(@self);
end;

function TWebKitDOMDOMWindow.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_name(@self);
end;

function TWebKitDOMDOMWindow.get_navigator: PWebKitDOMNavigator; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_navigator(@self);
end;

function TWebKitDOMDOMWindow.get_offscreen_buffering: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_offscreen_buffering(@self);
end;

function TWebKitDOMDOMWindow.get_opener: PWebKitDOMDOMWindow; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_opener(@self);
end;

function TWebKitDOMDOMWindow.get_outer_height: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_outer_height(@self);
end;

function TWebKitDOMDOMWindow.get_outer_width: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_outer_width(@self);
end;

function TWebKitDOMDOMWindow.get_page_x_offset: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_page_x_offset(@self);
end;

function TWebKitDOMDOMWindow.get_page_y_offset: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_page_y_offset(@self);
end;

function TWebKitDOMDOMWindow.get_parent: PWebKitDOMDOMWindow; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_parent(@self);
end;

function TWebKitDOMDOMWindow.get_performance: PWebKitDOMPerformance; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_performance(@self);
end;

function TWebKitDOMDOMWindow.get_personalbar: PWebKitDOMBarInfo; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_personalbar(@self);
end;

function TWebKitDOMDOMWindow.get_screen: PWebKitDOMScreen; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_screen(@self);
end;

function TWebKitDOMDOMWindow.get_screen_left: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_screen_left(@self);
end;

function TWebKitDOMDOMWindow.get_screen_top: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_screen_top(@self);
end;

function TWebKitDOMDOMWindow.get_screen_x: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_screen_x(@self);
end;

function TWebKitDOMDOMWindow.get_screen_y: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_screen_y(@self);
end;

function TWebKitDOMDOMWindow.get_scroll_x: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_scroll_x(@self);
end;

function TWebKitDOMDOMWindow.get_scroll_y: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_scroll_y(@self);
end;

function TWebKitDOMDOMWindow.get_scrollbars: PWebKitDOMBarInfo; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_scrollbars(@self);
end;

function TWebKitDOMDOMWindow.get_selection: PWebKitDOMDOMSelection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_selection(@self);
end;

function TWebKitDOMDOMWindow.get_self: PWebKitDOMDOMWindow; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_self(@self);
end;

function TWebKitDOMDOMWindow.get_session_storage(error: PPGError): PWebKitDOMStorage; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_session_storage(@self, error);
end;

function TWebKitDOMDOMWindow.get_status: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_status(@self);
end;

function TWebKitDOMDOMWindow.get_statusbar: PWebKitDOMBarInfo; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_statusbar(@self);
end;

function TWebKitDOMDOMWindow.get_style_media: PWebKitDOMStyleMedia; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_style_media(@self);
end;

function TWebKitDOMDOMWindow.get_toolbar: PWebKitDOMBarInfo; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_toolbar(@self);
end;

function TWebKitDOMDOMWindow.get_top: PWebKitDOMDOMWindow; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_top(@self);
end;

function TWebKitDOMDOMWindow.get_webkit_storage_info: PWebKitDOMStorageInfo; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_webkit_storage_info(@self);
end;

function TWebKitDOMDOMWindow.get_window: PWebKitDOMDOMWindow; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_get_window(@self);
end;

function TWebKitDOMDOMWindow.match_media(query: Pgchar): PWebKitDOMMediaQueryList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_match_media(@self, query);
end;

procedure TWebKitDOMDOMWindow.move_by(x: gfloat; y: gfloat); cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_move_by(@self, x, y);
end;

procedure TWebKitDOMDOMWindow.move_to(x: gfloat; y: gfloat); cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_move_to(@self, x, y);
end;

procedure TWebKitDOMDOMWindow.print; cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_print(@self);
end;

function TWebKitDOMDOMWindow.prompt(message: Pgchar; defaultValue: Pgchar): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_prompt(@self, message, defaultValue);
end;

procedure TWebKitDOMDOMWindow.release_events; cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_release_events(@self);
end;

procedure TWebKitDOMDOMWindow.resize_by(x: gfloat; y: gfloat); cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_resize_by(@self, x, y);
end;

procedure TWebKitDOMDOMWindow.resize_to(width: gfloat; height: gfloat); cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_resize_to(@self, width, height);
end;

procedure TWebKitDOMDOMWindow.scroll(x: glong; y: glong); cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_scroll(@self, x, y);
end;

procedure TWebKitDOMDOMWindow.scroll_by(x: glong; y: glong); cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_scroll_by(@self, x, y);
end;

procedure TWebKitDOMDOMWindow.scroll_to(x: glong; y: glong); cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_scroll_to(@self, x, y);
end;

procedure TWebKitDOMDOMWindow.set_default_status(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_set_default_status(@self, value);
end;

procedure TWebKitDOMDOMWindow.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_set_name(@self, value);
end;

procedure TWebKitDOMDOMWindow.set_status(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_set_status(@self, value);
end;

procedure TWebKitDOMDOMWindow.stop; cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_stop(@self);
end;

procedure TWebKitDOMDOMWindow.webkit_cancel_animation_frame(id: glong); cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_webkit_cancel_animation_frame(@self, id);
end;

procedure TWebKitDOMDOMWindow.webkit_cancel_request_animation_frame(id: glong); cdecl;
begin
  LazWebKit3.webkit_dom_dom_window_webkit_cancel_request_animation_frame(@self, id);
end;

function TWebKitDOMDOMWindow.webkit_convert_point_from_node_to_page(node: PWebKitDOMNode; p: PWebKitDOMWebKitPoint): PWebKitDOMWebKitPoint; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_webkit_convert_point_from_node_to_page(@self, node, p);
end;

function TWebKitDOMDOMWindow.webkit_convert_point_from_page_to_node(node: PWebKitDOMNode; p: PWebKitDOMWebKitPoint): PWebKitDOMWebKitPoint; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_webkit_convert_point_from_page_to_node(@self, node, p);
end;

function TWebKitDOMNavigator.get_app_code_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_get_app_code_name(@self);
end;

function TWebKitDOMNavigator.get_app_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_get_app_name(@self);
end;

function TWebKitDOMNavigator.get_app_version: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_get_app_version(@self);
end;

function TWebKitDOMNavigator.get_cookie_enabled: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_get_cookie_enabled(@self);
end;

function TWebKitDOMNavigator.get_geolocation: PWebKitDOMGeolocation; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_get_geolocation(@self);
end;

function TWebKitDOMNavigator.get_language: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_get_language(@self);
end;

function TWebKitDOMNavigator.get_mime_types: PWebKitDOMDOMMimeTypeArray; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_get_mime_types(@self);
end;

function TWebKitDOMNavigator.get_on_line: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_get_on_line(@self);
end;

function TWebKitDOMNavigator.get_platform: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_get_platform(@self);
end;

function TWebKitDOMNavigator.get_plugins: PWebKitDOMDOMPluginArray; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_get_plugins(@self);
end;

function TWebKitDOMNavigator.get_product: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_get_product(@self);
end;

function TWebKitDOMNavigator.get_product_sub: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_get_product_sub(@self);
end;

procedure TWebKitDOMNavigator.get_storage_updates; cdecl;
begin
  LazWebKit3.webkit_dom_navigator_get_storage_updates(@self);
end;

function TWebKitDOMNavigator.get_user_agent: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_get_user_agent(@self);
end;

function TWebKitDOMNavigator.get_vendor: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_get_vendor(@self);
end;

function TWebKitDOMNavigator.get_vendor_sub: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_get_vendor_sub(@self);
end;

function TWebKitDOMNavigator.is_protocol_handler_registered(scheme: Pgchar; url: Pgchar; error: PPGError): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_is_protocol_handler_registered(@self, scheme, url, error);
end;

function TWebKitDOMNavigator.java_enabled: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_java_enabled(@self);
end;

procedure TWebKitDOMNavigator.register_protocol_handler(scheme: Pgchar; url: Pgchar; title: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_navigator_register_protocol_handler(@self, scheme, url, title, error);
end;

procedure TWebKitDOMNavigator.unregister_protocol_handler(scheme: Pgchar; url: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_navigator_unregister_protocol_handler(@self, scheme, url, error);
end;

function TWebKitDOMNavigator.webkit_get_gamepads: PWebKitDOMGamepadList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_navigator_webkit_get_gamepads(@self);
end;

function TWebKitDOMDOMWindowCSS.supports(property_: Pgchar; value: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_dom_window_css_supports(@self, property_, value);
end;

procedure TWebKitDOMHistory.back; cdecl;
begin
  LazWebKit3.webkit_dom_history_back(@self);
end;

procedure TWebKitDOMHistory.forward; cdecl;
begin
  LazWebKit3.webkit_dom_history_forward(@self);
end;

function TWebKitDOMHistory.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_history_get_length(@self);
end;

procedure TWebKitDOMHistory.go(distance: glong); cdecl;
begin
  LazWebKit3.webkit_dom_history_go(@self, distance);
end;

procedure TWebKitDOMStorage.clear(error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_storage_clear(@self, error);
end;

function TWebKitDOMStorage.get_item(key: Pgchar; error: PPGError): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_storage_get_item(@self, key, error);
end;

function TWebKitDOMStorage.get_length(error: PPGError): gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_storage_get_length(@self, error);
end;

function TWebKitDOMStorage.key(index: gulong; error: PPGError): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_storage_key(@self, index, error);
end;

procedure TWebKitDOMStorage.remove_item(key: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_storage_remove_item(@self, key, error);
end;

procedure TWebKitDOMStorage.set_item(key: Pgchar; data: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_storage_set_item(@self, key, data, error);
end;

function TWebKitDOMPerformance.get_memory: PWebKitDOMMemoryInfo; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_get_memory(@self);
end;

function TWebKitDOMPerformance.get_navigation: PWebKitDOMPerformanceNavigation; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_get_navigation(@self);
end;

function TWebKitDOMPerformance.get_timing: PWebKitDOMPerformanceTiming; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_get_timing(@self);
end;

function TWebKitDOMPerformance.now: gdouble; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_now(@self);
end;

function TWebKitDOMScreen.get_avail_height: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_screen_get_avail_height(@self);
end;

function TWebKitDOMScreen.get_avail_left: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_screen_get_avail_left(@self);
end;

function TWebKitDOMScreen.get_avail_top: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_screen_get_avail_top(@self);
end;

function TWebKitDOMScreen.get_avail_width: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_screen_get_avail_width(@self);
end;

function TWebKitDOMScreen.get_color_depth: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_screen_get_color_depth(@self);
end;

function TWebKitDOMScreen.get_height: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_screen_get_height(@self);
end;

function TWebKitDOMScreen.get_pixel_depth: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_screen_get_pixel_depth(@self);
end;

function TWebKitDOMScreen.get_width: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_screen_get_width(@self);
end;

function TWebKitDOMStyleMedia.match_medium(mediaquery: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_style_media_match_medium(@self, mediaquery);
end;

function TWebKitDOMMediaQueryList.get_matches: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_media_query_list_get_matches(@self);
end;

function TWebKitDOMMediaQueryList.get_media: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_media_query_list_get_media(@self);
end;

function TWebKitDOMWebKitPoint.get_x: gfloat; cdecl;
begin
  Result := LazWebKit3.webkit_dom_webkit_point_get_x(@self);
end;

function TWebKitDOMWebKitPoint.get_y: gfloat; cdecl;
begin
  Result := LazWebKit3.webkit_dom_webkit_point_get_y(@self);
end;

procedure TWebKitDOMWebKitPoint.set_x(value: gfloat); cdecl;
begin
  LazWebKit3.webkit_dom_webkit_point_set_x(@self, value);
end;

procedure TWebKitDOMWebKitPoint.set_y(value: gfloat); cdecl;
begin
  LazWebKit3.webkit_dom_webkit_point_set_y(@self, value);
end;

function TWebKitDOMDatabase.get_version: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_database_get_version(@self);
end;

function TWebKitDOMDocumentFragment.query_selector(selectors: Pgchar; error: PPGError): PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_fragment_query_selector(@self, selectors, error);
end;

function TWebKitDOMDocumentFragment.query_selector_all(selectors: Pgchar; error: PPGError): PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_document_fragment_query_selector_all(@self, selectors, error);
end;

function TWebKitDOMXPathExpression.evaluate(contextNode: PWebKitDOMNode; type_: gushort; inResult: PWebKitDOMXPathResult; error: PPGError): PWebKitDOMXPathResult; cdecl;
begin
  Result := LazWebKit3.webkit_dom_xpath_expression_evaluate(@self, contextNode, type_, inResult, error);
end;

function TWebKitDOMXPathNSResolver.lookup_namespace_uri(prefix: Pgchar): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_xpath_ns_resolver_lookup_namespace_uri(@self, prefix);
end;

procedure TWebKitDOMNodeIterator.detach; cdecl;
begin
  LazWebKit3.webkit_dom_node_iterator_detach(@self);
end;

function TWebKitDOMNodeIterator.get_expand_entity_references: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_iterator_get_expand_entity_references(@self);
end;

function TWebKitDOMNodeIterator.get_filter: PWebKitDOMNodeFilter; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_iterator_get_filter(@self);
end;

function TWebKitDOMNodeIterator.get_pointer_before_reference_node: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_iterator_get_pointer_before_reference_node(@self);
end;

function TWebKitDOMNodeIterator.get_reference_node: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_iterator_get_reference_node(@self);
end;

function TWebKitDOMNodeIterator.get_root: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_iterator_get_root(@self);
end;

function TWebKitDOMNodeIterator.get_what_to_show: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_iterator_get_what_to_show(@self);
end;

function TWebKitDOMNodeIterator.next_node(error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_iterator_next_node(@self, error);
end;

function TWebKitDOMNodeIterator.previous_node(error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_iterator_previous_node(@self, error);
end;

function TWebKitDOMNodeFilter.accept_node(n: PWebKitDOMNode): gshort; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_filter_accept_node(@self, n);
end;

function TWebKitDOMProcessingInstruction.get_data: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_processing_instruction_get_data(@self);
end;

function TWebKitDOMProcessingInstruction.get_sheet: PWebKitDOMStyleSheet; cdecl;
begin
  Result := LazWebKit3.webkit_dom_processing_instruction_get_sheet(@self);
end;

function TWebKitDOMProcessingInstruction.get_target: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_processing_instruction_get_target(@self);
end;

procedure TWebKitDOMProcessingInstruction.set_data(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_processing_instruction_set_data(@self, value, error);
end;

function TWebKitDOMTreeWalker.first_child: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_tree_walker_first_child(@self);
end;

function TWebKitDOMTreeWalker.get_current_node: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_tree_walker_get_current_node(@self);
end;

function TWebKitDOMTreeWalker.get_expand_entity_references: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_tree_walker_get_expand_entity_references(@self);
end;

function TWebKitDOMTreeWalker.get_filter: PWebKitDOMNodeFilter; cdecl;
begin
  Result := LazWebKit3.webkit_dom_tree_walker_get_filter(@self);
end;

function TWebKitDOMTreeWalker.get_root: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_tree_walker_get_root(@self);
end;

function TWebKitDOMTreeWalker.get_what_to_show: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_tree_walker_get_what_to_show(@self);
end;

function TWebKitDOMTreeWalker.last_child: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_tree_walker_last_child(@self);
end;

function TWebKitDOMTreeWalker.next_node: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_tree_walker_next_node(@self);
end;

function TWebKitDOMTreeWalker.next_sibling: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_tree_walker_next_sibling(@self);
end;

function TWebKitDOMTreeWalker.parent_node: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_tree_walker_parent_node(@self);
end;

function TWebKitDOMTreeWalker.previous_node: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_tree_walker_previous_node(@self);
end;

function TWebKitDOMTreeWalker.previous_sibling: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_tree_walker_previous_sibling(@self);
end;

procedure TWebKitDOMTreeWalker.set_current_node(value: PWebKitDOMNode; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_tree_walker_set_current_node(@self, value, error);
end;

function TWebKitDOMXPathResult.get_boolean_value(error: PPGError): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_xpath_result_get_boolean_value(@self, error);
end;

function TWebKitDOMXPathResult.get_invalid_iterator_state: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_xpath_result_get_invalid_iterator_state(@self);
end;

function TWebKitDOMXPathResult.get_number_value(error: PPGError): gdouble; cdecl;
begin
  Result := LazWebKit3.webkit_dom_xpath_result_get_number_value(@self, error);
end;

function TWebKitDOMXPathResult.get_result_type: gushort; cdecl;
begin
  Result := LazWebKit3.webkit_dom_xpath_result_get_result_type(@self);
end;

function TWebKitDOMXPathResult.get_single_node_value(error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_xpath_result_get_single_node_value(@self, error);
end;

function TWebKitDOMXPathResult.get_snapshot_length(error: PPGError): gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_xpath_result_get_snapshot_length(@self, error);
end;

function TWebKitDOMXPathResult.get_string_value(error: PPGError): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_xpath_result_get_string_value(@self, error);
end;

function TWebKitDOMXPathResult.iterate_next(error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_xpath_result_iterate_next(@self, error);
end;

function TWebKitDOMXPathResult.snapshot_item(index: gulong; error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_xpath_result_snapshot_item(@self, index, error);
end;

function TWebKitDOMHTMLCollection.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_collection_get_length(@self);
end;

function TWebKitDOMHTMLCollection.item(index: gulong): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_collection_item(@self, index);
end;

function TWebKitDOMHTMLCollection.named_item(name: Pgchar): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_collection_named_item(@self, name);
end;

procedure TWebKitDOMHTMLElement.click; cdecl;
begin
  LazWebKit3.webkit_dom_html_element_click(@self);
end;

function TWebKitDOMHTMLElement.get_access_key: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_access_key(@self);
end;

function TWebKitDOMHTMLElement.get_children: PWebKitDOMHTMLCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_children(@self);
end;

function TWebKitDOMHTMLElement.get_class_list: PWebKitDOMDOMTokenList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_class_list(@self);
end;

function TWebKitDOMHTMLElement.get_class_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_class_name(@self);
end;

function TWebKitDOMHTMLElement.get_content_editable: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_content_editable(@self);
end;

function TWebKitDOMHTMLElement.get_dir: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_dir(@self);
end;

function TWebKitDOMHTMLElement.get_draggable: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_draggable(@self);
end;

function TWebKitDOMHTMLElement.get_hidden: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_hidden(@self);
end;

function TWebKitDOMHTMLElement.get_id: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_id(@self);
end;

function TWebKitDOMHTMLElement.get_inner_html: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_inner_html(@self);
end;

function TWebKitDOMHTMLElement.get_inner_text: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_inner_text(@self);
end;

function TWebKitDOMHTMLElement.get_is_content_editable: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_is_content_editable(@self);
end;

function TWebKitDOMHTMLElement.get_item_id: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_item_id(@self);
end;

function TWebKitDOMHTMLElement.get_item_prop: PWebKitDOMDOMSettableTokenList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_item_prop(@self);
end;

function TWebKitDOMHTMLElement.get_item_ref: PWebKitDOMDOMSettableTokenList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_item_ref(@self);
end;

function TWebKitDOMHTMLElement.get_item_scope: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_item_scope(@self);
end;

function TWebKitDOMHTMLElement.get_item_type: PWebKitDOMDOMSettableTokenList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_item_type(@self);
end;

function TWebKitDOMHTMLElement.get_lang: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_lang(@self);
end;

function TWebKitDOMHTMLElement.get_outer_html: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_outer_html(@self);
end;

function TWebKitDOMHTMLElement.get_outer_text: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_outer_text(@self);
end;

function TWebKitDOMHTMLElement.get_spellcheck: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_spellcheck(@self);
end;

function TWebKitDOMHTMLElement.get_tab_index: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_tab_index(@self);
end;

function TWebKitDOMHTMLElement.get_title: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_title(@self);
end;

function TWebKitDOMHTMLElement.get_translate: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_translate(@self);
end;

function TWebKitDOMHTMLElement.get_webkitdropzone: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_get_webkitdropzone(@self);
end;

function TWebKitDOMHTMLElement.insert_adjacent_element(where: Pgchar; element: PWebKitDOMElement; error: PPGError): PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_element_insert_adjacent_element(@self, where, element, error);
end;

procedure TWebKitDOMHTMLElement.insert_adjacent_html(where: Pgchar; html: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_insert_adjacent_html(@self, where, html, error);
end;

procedure TWebKitDOMHTMLElement.insert_adjacent_text(where: Pgchar; text: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_insert_adjacent_text(@self, where, text, error);
end;

procedure TWebKitDOMHTMLElement.set_access_key(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_access_key(@self, value);
end;

procedure TWebKitDOMHTMLElement.set_class_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_class_name(@self, value);
end;

procedure TWebKitDOMHTMLElement.set_content_editable(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_content_editable(@self, value, error);
end;

procedure TWebKitDOMHTMLElement.set_dir(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_dir(@self, value);
end;

procedure TWebKitDOMHTMLElement.set_draggable(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_draggable(@self, value);
end;

procedure TWebKitDOMHTMLElement.set_hidden(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_hidden(@self, value);
end;

procedure TWebKitDOMHTMLElement.set_id(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_id(@self, value);
end;

procedure TWebKitDOMHTMLElement.set_inner_html(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_inner_html(@self, value, error);
end;

procedure TWebKitDOMHTMLElement.set_inner_text(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_inner_text(@self, value, error);
end;

procedure TWebKitDOMHTMLElement.set_item_id(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_item_id(@self, value);
end;

procedure TWebKitDOMHTMLElement.set_item_scope(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_item_scope(@self, value);
end;

procedure TWebKitDOMHTMLElement.set_lang(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_lang(@self, value);
end;

procedure TWebKitDOMHTMLElement.set_outer_html(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_outer_html(@self, value, error);
end;

procedure TWebKitDOMHTMLElement.set_outer_text(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_outer_text(@self, value, error);
end;

procedure TWebKitDOMHTMLElement.set_spellcheck(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_spellcheck(@self, value);
end;

procedure TWebKitDOMHTMLElement.set_tab_index(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_tab_index(@self, value);
end;

procedure TWebKitDOMHTMLElement.set_title(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_title(@self, value);
end;

procedure TWebKitDOMHTMLElement.set_translate(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_translate(@self, value);
end;

procedure TWebKitDOMHTMLElement.set_webkitdropzone(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_element_set_webkitdropzone(@self, value);
end;

function TWebKitDOMNodeList.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_list_get_length(@self);
end;

function TWebKitDOMNodeList.item(index: gulong): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_node_list_item(@self, index);
end;

function TWebKitDOMHTMLHeadElement.get_profile: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_head_element_get_profile(@self);
end;

procedure TWebKitDOMHTMLHeadElement.set_profile(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_head_element_set_profile(@self, value);
end;

function TWebKitDOMStyleSheetList.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_style_sheet_list_get_length(@self);
end;

function TWebKitDOMStyleSheetList.item(index: gulong): PWebKitDOMStyleSheet; cdecl;
begin
  Result := LazWebKit3.webkit_dom_style_sheet_list_item(@self, index);
end;

function TWebKitDOMNamedNodeMap.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_named_node_map_get_length(@self);
end;

function TWebKitDOMNamedNodeMap.get_named_item(name: Pgchar): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_named_node_map_get_named_item(@self, name);
end;

function TWebKitDOMNamedNodeMap.get_named_item_ns(namespaceURI: Pgchar; localName: Pgchar): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_named_node_map_get_named_item_ns(@self, namespaceURI, localName);
end;

function TWebKitDOMNamedNodeMap.item(index: gulong): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_named_node_map_item(@self, index);
end;

function TWebKitDOMNamedNodeMap.remove_named_item(name: Pgchar; error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_named_node_map_remove_named_item(@self, name, error);
end;

function TWebKitDOMNamedNodeMap.remove_named_item_ns(namespaceURI: Pgchar; localName: Pgchar; error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_named_node_map_remove_named_item_ns(@self, namespaceURI, localName, error);
end;

function TWebKitDOMNamedNodeMap.set_named_item(node: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_named_node_map_set_named_item(@self, node, error);
end;

function TWebKitDOMNamedNodeMap.set_named_item_ns(node: PWebKitDOMNode; error: PPGError): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_named_node_map_set_named_item_ns(@self, node, error);
end;

function TWebKitDOMFile.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_file_get_name(@self);
end;

function TWebKitDOMFileList.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_file_list_get_length(@self);
end;

function TWebKitDOMFileList.item(index: gulong): PWebKitDOMFile; cdecl;
begin
  Result := LazWebKit3.webkit_dom_file_list_item(@self, index);
end;

function TWebKitDOMGamepad.get_id: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_gamepad_get_id(@self);
end;

function TWebKitDOMGamepad.get_index: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_gamepad_get_index(@self);
end;

function TWebKitDOMGamepad.get_timestamp: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_gamepad_get_timestamp(@self);
end;

function TWebKitDOMGamepadList.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_gamepad_list_get_length(@self);
end;

function TWebKitDOMGamepadList.item(index: gulong): PWebKitDOMGamepad; cdecl;
begin
  Result := LazWebKit3.webkit_dom_gamepad_list_item(@self, index);
end;

procedure TWebKitDOMGeolocation.clear_watch(watchID: glong); cdecl;
begin
  LazWebKit3.webkit_dom_geolocation_clear_watch(@self, watchID);
end;

function TWebKitDOMHTMLAnchorElement.get_charset: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_charset(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_coords: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_coords(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_download: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_download(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_hash: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_hash(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_host: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_host(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_hostname: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_hostname(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_href: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_href(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_hreflang: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_hreflang(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_name(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_origin: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_origin(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_pathname: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_pathname(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_ping: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_ping(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_port: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_port(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_protocol: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_protocol(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_rel: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_rel(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_rev: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_rev(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_search: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_search(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_shape: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_shape(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_target: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_target(@self);
end;

function TWebKitDOMHTMLAnchorElement.get_text: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_anchor_element_get_text(@self);
end;

procedure TWebKitDOMHTMLAnchorElement.set_charset(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_charset(@self, value);
end;

procedure TWebKitDOMHTMLAnchorElement.set_coords(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_coords(@self, value);
end;

procedure TWebKitDOMHTMLAnchorElement.set_download(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_download(@self, value);
end;

procedure TWebKitDOMHTMLAnchorElement.set_hash(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_hash(@self, value);
end;

procedure TWebKitDOMHTMLAnchorElement.set_host(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_host(@self, value);
end;

procedure TWebKitDOMHTMLAnchorElement.set_hostname(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_hostname(@self, value);
end;

procedure TWebKitDOMHTMLAnchorElement.set_href(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_href(@self, value);
end;

procedure TWebKitDOMHTMLAnchorElement.set_hreflang(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_hreflang(@self, value);
end;

procedure TWebKitDOMHTMLAnchorElement.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_name(@self, value);
end;

procedure TWebKitDOMHTMLAnchorElement.set_pathname(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_pathname(@self, value);
end;

procedure TWebKitDOMHTMLAnchorElement.set_ping(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_ping(@self, value);
end;

procedure TWebKitDOMHTMLAnchorElement.set_port(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_port(@self, value);
end;

procedure TWebKitDOMHTMLAnchorElement.set_protocol(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_protocol(@self, value);
end;

procedure TWebKitDOMHTMLAnchorElement.set_rel(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_rel(@self, value);
end;

procedure TWebKitDOMHTMLAnchorElement.set_rev(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_rev(@self, value);
end;

procedure TWebKitDOMHTMLAnchorElement.set_search(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_search(@self, value);
end;

procedure TWebKitDOMHTMLAnchorElement.set_shape(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_shape(@self, value);
end;

procedure TWebKitDOMHTMLAnchorElement.set_target(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_anchor_element_set_target(@self, value);
end;

function TWebKitDOMHTMLAppletElement.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_applet_element_get_align(@self);
end;

function TWebKitDOMHTMLAppletElement.get_alt: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_applet_element_get_alt(@self);
end;

function TWebKitDOMHTMLAppletElement.get_archive: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_applet_element_get_archive(@self);
end;

function TWebKitDOMHTMLAppletElement.get_code: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_applet_element_get_code(@self);
end;

function TWebKitDOMHTMLAppletElement.get_code_base: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_applet_element_get_code_base(@self);
end;

function TWebKitDOMHTMLAppletElement.get_height: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_applet_element_get_height(@self);
end;

function TWebKitDOMHTMLAppletElement.get_hspace: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_applet_element_get_hspace(@self);
end;

function TWebKitDOMHTMLAppletElement.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_applet_element_get_name(@self);
end;

function TWebKitDOMHTMLAppletElement.get_object: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_applet_element_get_object(@self);
end;

function TWebKitDOMHTMLAppletElement.get_vspace: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_applet_element_get_vspace(@self);
end;

function TWebKitDOMHTMLAppletElement.get_width: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_applet_element_get_width(@self);
end;

procedure TWebKitDOMHTMLAppletElement.set_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_applet_element_set_align(@self, value);
end;

procedure TWebKitDOMHTMLAppletElement.set_alt(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_applet_element_set_alt(@self, value);
end;

procedure TWebKitDOMHTMLAppletElement.set_archive(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_applet_element_set_archive(@self, value);
end;

procedure TWebKitDOMHTMLAppletElement.set_code(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_applet_element_set_code(@self, value);
end;

procedure TWebKitDOMHTMLAppletElement.set_code_base(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_applet_element_set_code_base(@self, value);
end;

procedure TWebKitDOMHTMLAppletElement.set_height(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_applet_element_set_height(@self, value);
end;

procedure TWebKitDOMHTMLAppletElement.set_hspace(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_applet_element_set_hspace(@self, value);
end;

procedure TWebKitDOMHTMLAppletElement.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_applet_element_set_name(@self, value);
end;

procedure TWebKitDOMHTMLAppletElement.set_object(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_applet_element_set_object(@self, value);
end;

procedure TWebKitDOMHTMLAppletElement.set_vspace(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_applet_element_set_vspace(@self, value);
end;

procedure TWebKitDOMHTMLAppletElement.set_width(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_applet_element_set_width(@self, value);
end;

function TWebKitDOMHTMLAreaElement.get_alt: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_area_element_get_alt(@self);
end;

function TWebKitDOMHTMLAreaElement.get_coords: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_area_element_get_coords(@self);
end;

function TWebKitDOMHTMLAreaElement.get_hash: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_area_element_get_hash(@self);
end;

function TWebKitDOMHTMLAreaElement.get_host: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_area_element_get_host(@self);
end;

function TWebKitDOMHTMLAreaElement.get_hostname: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_area_element_get_hostname(@self);
end;

function TWebKitDOMHTMLAreaElement.get_href: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_area_element_get_href(@self);
end;

function TWebKitDOMHTMLAreaElement.get_no_href: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_area_element_get_no_href(@self);
end;

function TWebKitDOMHTMLAreaElement.get_pathname: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_area_element_get_pathname(@self);
end;

function TWebKitDOMHTMLAreaElement.get_ping: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_area_element_get_ping(@self);
end;

function TWebKitDOMHTMLAreaElement.get_port: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_area_element_get_port(@self);
end;

function TWebKitDOMHTMLAreaElement.get_protocol: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_area_element_get_protocol(@self);
end;

function TWebKitDOMHTMLAreaElement.get_search: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_area_element_get_search(@self);
end;

function TWebKitDOMHTMLAreaElement.get_shape: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_area_element_get_shape(@self);
end;

function TWebKitDOMHTMLAreaElement.get_target: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_area_element_get_target(@self);
end;

procedure TWebKitDOMHTMLAreaElement.set_alt(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_area_element_set_alt(@self, value);
end;

procedure TWebKitDOMHTMLAreaElement.set_coords(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_area_element_set_coords(@self, value);
end;

procedure TWebKitDOMHTMLAreaElement.set_href(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_area_element_set_href(@self, value);
end;

procedure TWebKitDOMHTMLAreaElement.set_no_href(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_area_element_set_no_href(@self, value);
end;

procedure TWebKitDOMHTMLAreaElement.set_ping(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_area_element_set_ping(@self, value);
end;

procedure TWebKitDOMHTMLAreaElement.set_shape(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_area_element_set_shape(@self, value);
end;

procedure TWebKitDOMHTMLAreaElement.set_target(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_area_element_set_target(@self, value);
end;

function TWebKitDOMHTMLMediaElement.can_play_type(type_: Pgchar): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_can_play_type(@self, type_);
end;

function TWebKitDOMHTMLMediaElement.get_autoplay: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_autoplay(@self);
end;

function TWebKitDOMHTMLMediaElement.get_buffered: PWebKitDOMTimeRanges; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_buffered(@self);
end;

function TWebKitDOMHTMLMediaElement.get_controls: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_controls(@self);
end;

function TWebKitDOMHTMLMediaElement.get_current_src: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_current_src(@self);
end;

function TWebKitDOMHTMLMediaElement.get_current_time: gfloat; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_current_time(@self);
end;

function TWebKitDOMHTMLMediaElement.get_default_muted: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_default_muted(@self);
end;

function TWebKitDOMHTMLMediaElement.get_default_playback_rate: gfloat; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_default_playback_rate(@self);
end;

function TWebKitDOMHTMLMediaElement.get_duration: gfloat; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_duration(@self);
end;

function TWebKitDOMHTMLMediaElement.get_ended: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_ended(@self);
end;

function TWebKitDOMHTMLMediaElement.get_error: PWebKitDOMMediaError; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_error(@self);
end;

function TWebKitDOMHTMLMediaElement.get_initial_time: gdouble; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_initial_time(@self);
end;

function TWebKitDOMHTMLMediaElement.get_loop: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_loop(@self);
end;

function TWebKitDOMHTMLMediaElement.get_media_group: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_media_group(@self);
end;

function TWebKitDOMHTMLMediaElement.get_muted: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_muted(@self);
end;

function TWebKitDOMHTMLMediaElement.get_network_state: gushort; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_network_state(@self);
end;

function TWebKitDOMHTMLMediaElement.get_paused: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_paused(@self);
end;

function TWebKitDOMHTMLMediaElement.get_playback_rate: gfloat; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_playback_rate(@self);
end;

function TWebKitDOMHTMLMediaElement.get_played: PWebKitDOMTimeRanges; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_played(@self);
end;

function TWebKitDOMHTMLMediaElement.get_preload: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_preload(@self);
end;

function TWebKitDOMHTMLMediaElement.get_ready_state: gushort; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_ready_state(@self);
end;

function TWebKitDOMHTMLMediaElement.get_seekable: PWebKitDOMTimeRanges; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_seekable(@self);
end;

function TWebKitDOMHTMLMediaElement.get_seeking: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_seeking(@self);
end;

function TWebKitDOMHTMLMediaElement.get_src: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_src(@self);
end;

function TWebKitDOMHTMLMediaElement.get_start_time: gfloat; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_start_time(@self);
end;

function TWebKitDOMHTMLMediaElement.get_volume: gfloat; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_volume(@self);
end;

function TWebKitDOMHTMLMediaElement.get_webkit_audio_decoded_byte_count: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_webkit_audio_decoded_byte_count(@self);
end;

function TWebKitDOMHTMLMediaElement.get_webkit_closed_captions_visible: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_webkit_closed_captions_visible(@self);
end;

function TWebKitDOMHTMLMediaElement.get_webkit_has_closed_captions: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_webkit_has_closed_captions(@self);
end;

function TWebKitDOMHTMLMediaElement.get_webkit_preserves_pitch: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_webkit_preserves_pitch(@self);
end;

function TWebKitDOMHTMLMediaElement.get_webkit_video_decoded_byte_count: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_media_element_get_webkit_video_decoded_byte_count(@self);
end;

procedure TWebKitDOMHTMLMediaElement.load; cdecl;
begin
  LazWebKit3.webkit_dom_html_media_element_load(@self);
end;

procedure TWebKitDOMHTMLMediaElement.pause; cdecl;
begin
  LazWebKit3.webkit_dom_html_media_element_pause(@self);
end;

procedure TWebKitDOMHTMLMediaElement.play; cdecl;
begin
  LazWebKit3.webkit_dom_html_media_element_play(@self);
end;

procedure TWebKitDOMHTMLMediaElement.set_autoplay(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_media_element_set_autoplay(@self, value);
end;

procedure TWebKitDOMHTMLMediaElement.set_controls(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_media_element_set_controls(@self, value);
end;

procedure TWebKitDOMHTMLMediaElement.set_current_time(value: gfloat; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_media_element_set_current_time(@self, value, error);
end;

procedure TWebKitDOMHTMLMediaElement.set_default_muted(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_media_element_set_default_muted(@self, value);
end;

procedure TWebKitDOMHTMLMediaElement.set_default_playback_rate(value: gfloat); cdecl;
begin
  LazWebKit3.webkit_dom_html_media_element_set_default_playback_rate(@self, value);
end;

procedure TWebKitDOMHTMLMediaElement.set_loop(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_media_element_set_loop(@self, value);
end;

procedure TWebKitDOMHTMLMediaElement.set_media_group(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_media_element_set_media_group(@self, value);
end;

procedure TWebKitDOMHTMLMediaElement.set_muted(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_media_element_set_muted(@self, value);
end;

procedure TWebKitDOMHTMLMediaElement.set_playback_rate(value: gfloat); cdecl;
begin
  LazWebKit3.webkit_dom_html_media_element_set_playback_rate(@self, value);
end;

procedure TWebKitDOMHTMLMediaElement.set_preload(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_media_element_set_preload(@self, value);
end;

procedure TWebKitDOMHTMLMediaElement.set_src(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_media_element_set_src(@self, value);
end;

procedure TWebKitDOMHTMLMediaElement.set_volume(value: gfloat; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_media_element_set_volume(@self, value, error);
end;

procedure TWebKitDOMHTMLMediaElement.set_webkit_closed_captions_visible(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_media_element_set_webkit_closed_captions_visible(@self, value);
end;

procedure TWebKitDOMHTMLMediaElement.set_webkit_preserves_pitch(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_media_element_set_webkit_preserves_pitch(@self, value);
end;

function TWebKitDOMHTMLBRElement.get_clear: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_htmlbr_element_get_clear(@self);
end;

procedure TWebKitDOMHTMLBRElement.set_clear(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_htmlbr_element_set_clear(@self, value);
end;

function TWebKitDOMHTMLBaseElement.get_href: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_base_element_get_href(@self);
end;

function TWebKitDOMHTMLBaseElement.get_target: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_base_element_get_target(@self);
end;

procedure TWebKitDOMHTMLBaseElement.set_href(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_base_element_set_href(@self, value);
end;

procedure TWebKitDOMHTMLBaseElement.set_target(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_base_element_set_target(@self, value);
end;

function TWebKitDOMHTMLBaseFontElement.get_color: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_base_font_element_get_color(@self);
end;

function TWebKitDOMHTMLBaseFontElement.get_face: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_base_font_element_get_face(@self);
end;

function TWebKitDOMHTMLBaseFontElement.get_size: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_base_font_element_get_size(@self);
end;

procedure TWebKitDOMHTMLBaseFontElement.set_color(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_base_font_element_set_color(@self, value);
end;

procedure TWebKitDOMHTMLBaseFontElement.set_face(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_base_font_element_set_face(@self, value);
end;

procedure TWebKitDOMHTMLBaseFontElement.set_size(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_base_font_element_set_size(@self, value);
end;

function TWebKitDOMHTMLBodyElement.get_a_link: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_body_element_get_a_link(@self);
end;

function TWebKitDOMHTMLBodyElement.get_background: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_body_element_get_background(@self);
end;

function TWebKitDOMHTMLBodyElement.get_bg_color: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_body_element_get_bg_color(@self);
end;

function TWebKitDOMHTMLBodyElement.get_link: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_body_element_get_link(@self);
end;

function TWebKitDOMHTMLBodyElement.get_text: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_body_element_get_text(@self);
end;

function TWebKitDOMHTMLBodyElement.get_v_link: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_body_element_get_v_link(@self);
end;

procedure TWebKitDOMHTMLBodyElement.set_a_link(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_body_element_set_a_link(@self, value);
end;

procedure TWebKitDOMHTMLBodyElement.set_background(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_body_element_set_background(@self, value);
end;

procedure TWebKitDOMHTMLBodyElement.set_bg_color(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_body_element_set_bg_color(@self, value);
end;

procedure TWebKitDOMHTMLBodyElement.set_link(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_body_element_set_link(@self, value);
end;

procedure TWebKitDOMHTMLBodyElement.set_text(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_body_element_set_text(@self, value);
end;

procedure TWebKitDOMHTMLBodyElement.set_v_link(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_body_element_set_v_link(@self, value);
end;

function TWebKitDOMHTMLButtonElement.check_validity: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_button_element_check_validity(@self);
end;

function TWebKitDOMHTMLButtonElement.get_autofocus: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_button_element_get_autofocus(@self);
end;

function TWebKitDOMHTMLButtonElement.get_disabled: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_button_element_get_disabled(@self);
end;

function TWebKitDOMHTMLButtonElement.get_form: PWebKitDOMHTMLFormElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_button_element_get_form(@self);
end;

function TWebKitDOMHTMLButtonElement.get_form_action: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_button_element_get_form_action(@self);
end;

function TWebKitDOMHTMLButtonElement.get_form_enctype: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_button_element_get_form_enctype(@self);
end;

function TWebKitDOMHTMLButtonElement.get_form_method: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_button_element_get_form_method(@self);
end;

function TWebKitDOMHTMLButtonElement.get_form_no_validate: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_button_element_get_form_no_validate(@self);
end;

function TWebKitDOMHTMLButtonElement.get_form_target: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_button_element_get_form_target(@self);
end;

function TWebKitDOMHTMLButtonElement.get_labels: PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_button_element_get_labels(@self);
end;

function TWebKitDOMHTMLButtonElement.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_button_element_get_name(@self);
end;

function TWebKitDOMHTMLButtonElement.get_validation_message: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_button_element_get_validation_message(@self);
end;

function TWebKitDOMHTMLButtonElement.get_validity: PWebKitDOMValidityState; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_button_element_get_validity(@self);
end;

function TWebKitDOMHTMLButtonElement.get_value: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_button_element_get_value(@self);
end;

function TWebKitDOMHTMLButtonElement.get_will_validate: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_button_element_get_will_validate(@self);
end;

procedure TWebKitDOMHTMLButtonElement.set_autofocus(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_button_element_set_autofocus(@self, value);
end;

procedure TWebKitDOMHTMLButtonElement.set_custom_validity(error: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_button_element_set_custom_validity(@self, error);
end;

procedure TWebKitDOMHTMLButtonElement.set_disabled(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_button_element_set_disabled(@self, value);
end;

procedure TWebKitDOMHTMLButtonElement.set_form_action(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_button_element_set_form_action(@self, value);
end;

procedure TWebKitDOMHTMLButtonElement.set_form_enctype(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_button_element_set_form_enctype(@self, value);
end;

procedure TWebKitDOMHTMLButtonElement.set_form_method(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_button_element_set_form_method(@self, value);
end;

procedure TWebKitDOMHTMLButtonElement.set_form_no_validate(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_button_element_set_form_no_validate(@self, value);
end;

procedure TWebKitDOMHTMLButtonElement.set_form_target(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_button_element_set_form_target(@self, value);
end;

procedure TWebKitDOMHTMLButtonElement.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_button_element_set_name(@self, value);
end;

procedure TWebKitDOMHTMLButtonElement.set_value(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_button_element_set_value(@self, value);
end;

function TWebKitDOMHTMLFormElement.check_validity: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_form_element_check_validity(@self);
end;

procedure TWebKitDOMHTMLFormElement.dispatch_form_change; cdecl;
begin
  LazWebKit3.webkit_dom_html_form_element_dispatch_form_change(@self);
end;

procedure TWebKitDOMHTMLFormElement.dispatch_form_input; cdecl;
begin
  LazWebKit3.webkit_dom_html_form_element_dispatch_form_input(@self);
end;

function TWebKitDOMHTMLFormElement.get_accept_charset: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_form_element_get_accept_charset(@self);
end;

function TWebKitDOMHTMLFormElement.get_action: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_form_element_get_action(@self);
end;

function TWebKitDOMHTMLFormElement.get_autocomplete: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_form_element_get_autocomplete(@self);
end;

function TWebKitDOMHTMLFormElement.get_elements: PWebKitDOMHTMLCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_form_element_get_elements(@self);
end;

function TWebKitDOMHTMLFormElement.get_encoding: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_form_element_get_encoding(@self);
end;

function TWebKitDOMHTMLFormElement.get_enctype: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_form_element_get_enctype(@self);
end;

function TWebKitDOMHTMLFormElement.get_length: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_form_element_get_length(@self);
end;

function TWebKitDOMHTMLFormElement.get_method: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_form_element_get_method(@self);
end;

function TWebKitDOMHTMLFormElement.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_form_element_get_name(@self);
end;

function TWebKitDOMHTMLFormElement.get_no_validate: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_form_element_get_no_validate(@self);
end;

function TWebKitDOMHTMLFormElement.get_target: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_form_element_get_target(@self);
end;

procedure TWebKitDOMHTMLFormElement.reset; cdecl;
begin
  LazWebKit3.webkit_dom_html_form_element_reset(@self);
end;

procedure TWebKitDOMHTMLFormElement.set_accept_charset(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_form_element_set_accept_charset(@self, value);
end;

procedure TWebKitDOMHTMLFormElement.set_action(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_form_element_set_action(@self, value);
end;

procedure TWebKitDOMHTMLFormElement.set_autocomplete(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_form_element_set_autocomplete(@self, value);
end;

procedure TWebKitDOMHTMLFormElement.set_encoding(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_form_element_set_encoding(@self, value);
end;

procedure TWebKitDOMHTMLFormElement.set_enctype(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_form_element_set_enctype(@self, value);
end;

procedure TWebKitDOMHTMLFormElement.set_method(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_form_element_set_method(@self, value);
end;

procedure TWebKitDOMHTMLFormElement.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_form_element_set_name(@self, value);
end;

procedure TWebKitDOMHTMLFormElement.set_no_validate(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_form_element_set_no_validate(@self, value);
end;

procedure TWebKitDOMHTMLFormElement.set_target(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_form_element_set_target(@self, value);
end;

procedure TWebKitDOMHTMLFormElement.submit; cdecl;
begin
  LazWebKit3.webkit_dom_html_form_element_submit(@self);
end;

function TWebKitDOMValidityState.get_bad_input: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_validity_state_get_bad_input(@self);
end;

function TWebKitDOMValidityState.get_custom_error: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_validity_state_get_custom_error(@self);
end;

function TWebKitDOMValidityState.get_pattern_mismatch: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_validity_state_get_pattern_mismatch(@self);
end;

function TWebKitDOMValidityState.get_range_overflow: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_validity_state_get_range_overflow(@self);
end;

function TWebKitDOMValidityState.get_range_underflow: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_validity_state_get_range_underflow(@self);
end;

function TWebKitDOMValidityState.get_step_mismatch: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_validity_state_get_step_mismatch(@self);
end;

function TWebKitDOMValidityState.get_too_long: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_validity_state_get_too_long(@self);
end;

function TWebKitDOMValidityState.get_type_mismatch: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_validity_state_get_type_mismatch(@self);
end;

function TWebKitDOMValidityState.get_valid: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_validity_state_get_valid(@self);
end;

function TWebKitDOMValidityState.get_value_missing: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_validity_state_get_value_missing(@self);
end;

function TWebKitDOMHTMLCanvasElement.get_height: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_canvas_element_get_height(@self);
end;

function TWebKitDOMHTMLCanvasElement.get_width: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_canvas_element_get_width(@self);
end;

procedure TWebKitDOMHTMLCanvasElement.set_height(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_canvas_element_set_height(@self, value);
end;

procedure TWebKitDOMHTMLCanvasElement.set_width(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_canvas_element_set_width(@self, value);
end;

function TWebKitDOMHTMLDListElement.get_compact: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_htmld_list_element_get_compact(@self);
end;

procedure TWebKitDOMHTMLDListElement.set_compact(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_htmld_list_element_set_compact(@self, value);
end;

function TWebKitDOMHTMLDetailsElement.get_open: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_details_element_get_open(@self);
end;

procedure TWebKitDOMHTMLDetailsElement.set_open(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_details_element_set_open(@self, value);
end;

function TWebKitDOMHTMLDirectoryElement.get_compact: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_directory_element_get_compact(@self);
end;

procedure TWebKitDOMHTMLDirectoryElement.set_compact(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_directory_element_set_compact(@self, value);
end;

function TWebKitDOMHTMLDivElement.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_div_element_get_align(@self);
end;

procedure TWebKitDOMHTMLDivElement.set_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_div_element_set_align(@self, value);
end;

function TWebKitDOMHTMLEmbedElement.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_embed_element_get_align(@self);
end;

function TWebKitDOMHTMLEmbedElement.get_height: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_embed_element_get_height(@self);
end;

function TWebKitDOMHTMLEmbedElement.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_embed_element_get_name(@self);
end;

function TWebKitDOMHTMLEmbedElement.get_src: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_embed_element_get_src(@self);
end;

function TWebKitDOMHTMLEmbedElement.get_width: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_embed_element_get_width(@self);
end;

procedure TWebKitDOMHTMLEmbedElement.set_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_embed_element_set_align(@self, value);
end;

procedure TWebKitDOMHTMLEmbedElement.set_height(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_embed_element_set_height(@self, value);
end;

procedure TWebKitDOMHTMLEmbedElement.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_embed_element_set_name(@self, value);
end;

procedure TWebKitDOMHTMLEmbedElement.set_src(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_embed_element_set_src(@self, value);
end;

procedure TWebKitDOMHTMLEmbedElement.set_width(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_embed_element_set_width(@self, value);
end;

function TWebKitDOMHTMLFieldSetElement.check_validity: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_field_set_element_check_validity(@self);
end;

function TWebKitDOMHTMLFieldSetElement.get_disabled: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_field_set_element_get_disabled(@self);
end;

function TWebKitDOMHTMLFieldSetElement.get_elements: PWebKitDOMHTMLCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_field_set_element_get_elements(@self);
end;

function TWebKitDOMHTMLFieldSetElement.get_form: PWebKitDOMHTMLFormElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_field_set_element_get_form(@self);
end;

function TWebKitDOMHTMLFieldSetElement.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_field_set_element_get_name(@self);
end;

function TWebKitDOMHTMLFieldSetElement.get_validation_message: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_field_set_element_get_validation_message(@self);
end;

function TWebKitDOMHTMLFieldSetElement.get_validity: PWebKitDOMValidityState; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_field_set_element_get_validity(@self);
end;

function TWebKitDOMHTMLFieldSetElement.get_will_validate: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_field_set_element_get_will_validate(@self);
end;

procedure TWebKitDOMHTMLFieldSetElement.set_custom_validity(error: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_field_set_element_set_custom_validity(@self, error);
end;

procedure TWebKitDOMHTMLFieldSetElement.set_disabled(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_field_set_element_set_disabled(@self, value);
end;

procedure TWebKitDOMHTMLFieldSetElement.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_field_set_element_set_name(@self, value);
end;

function TWebKitDOMHTMLFontElement.get_color: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_font_element_get_color(@self);
end;

function TWebKitDOMHTMLFontElement.get_face: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_font_element_get_face(@self);
end;

function TWebKitDOMHTMLFontElement.get_size: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_font_element_get_size(@self);
end;

procedure TWebKitDOMHTMLFontElement.set_color(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_font_element_set_color(@self, value);
end;

procedure TWebKitDOMHTMLFontElement.set_face(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_font_element_set_face(@self, value);
end;

procedure TWebKitDOMHTMLFontElement.set_size(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_font_element_set_size(@self, value);
end;

function TWebKitDOMHTMLFrameElement.get_content_document: PWebKitDOMDocument; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_frame_element_get_content_document(@self);
end;

function TWebKitDOMHTMLFrameElement.get_content_window: PWebKitDOMDOMWindow; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_frame_element_get_content_window(@self);
end;

function TWebKitDOMHTMLFrameElement.get_frame_border: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_frame_element_get_frame_border(@self);
end;

function TWebKitDOMHTMLFrameElement.get_height: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_frame_element_get_height(@self);
end;

function TWebKitDOMHTMLFrameElement.get_long_desc: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_frame_element_get_long_desc(@self);
end;

function TWebKitDOMHTMLFrameElement.get_margin_height: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_frame_element_get_margin_height(@self);
end;

function TWebKitDOMHTMLFrameElement.get_margin_width: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_frame_element_get_margin_width(@self);
end;

function TWebKitDOMHTMLFrameElement.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_frame_element_get_name(@self);
end;

function TWebKitDOMHTMLFrameElement.get_no_resize: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_frame_element_get_no_resize(@self);
end;

function TWebKitDOMHTMLFrameElement.get_scrolling: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_frame_element_get_scrolling(@self);
end;

function TWebKitDOMHTMLFrameElement.get_src: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_frame_element_get_src(@self);
end;

function TWebKitDOMHTMLFrameElement.get_width: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_frame_element_get_width(@self);
end;

procedure TWebKitDOMHTMLFrameElement.set_frame_border(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_frame_element_set_frame_border(@self, value);
end;

procedure TWebKitDOMHTMLFrameElement.set_long_desc(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_frame_element_set_long_desc(@self, value);
end;

procedure TWebKitDOMHTMLFrameElement.set_margin_height(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_frame_element_set_margin_height(@self, value);
end;

procedure TWebKitDOMHTMLFrameElement.set_margin_width(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_frame_element_set_margin_width(@self, value);
end;

procedure TWebKitDOMHTMLFrameElement.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_frame_element_set_name(@self, value);
end;

procedure TWebKitDOMHTMLFrameElement.set_no_resize(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_frame_element_set_no_resize(@self, value);
end;

procedure TWebKitDOMHTMLFrameElement.set_scrolling(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_frame_element_set_scrolling(@self, value);
end;

procedure TWebKitDOMHTMLFrameElement.set_src(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_frame_element_set_src(@self, value);
end;

function TWebKitDOMHTMLFrameSetElement.get_cols: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_frame_set_element_get_cols(@self);
end;

function TWebKitDOMHTMLFrameSetElement.get_rows: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_frame_set_element_get_rows(@self);
end;

procedure TWebKitDOMHTMLFrameSetElement.set_cols(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_frame_set_element_set_cols(@self, value);
end;

procedure TWebKitDOMHTMLFrameSetElement.set_rows(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_frame_set_element_set_rows(@self, value);
end;

function TWebKitDOMHTMLHRElement.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_htmlhr_element_get_align(@self);
end;

function TWebKitDOMHTMLHRElement.get_no_shade: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_htmlhr_element_get_no_shade(@self);
end;

function TWebKitDOMHTMLHRElement.get_size: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_htmlhr_element_get_size(@self);
end;

function TWebKitDOMHTMLHRElement.get_width: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_htmlhr_element_get_width(@self);
end;

procedure TWebKitDOMHTMLHRElement.set_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_htmlhr_element_set_align(@self, value);
end;

procedure TWebKitDOMHTMLHRElement.set_no_shade(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_htmlhr_element_set_no_shade(@self, value);
end;

procedure TWebKitDOMHTMLHRElement.set_size(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_htmlhr_element_set_size(@self, value);
end;

procedure TWebKitDOMHTMLHRElement.set_width(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_htmlhr_element_set_width(@self, value);
end;

function TWebKitDOMHTMLHeadingElement.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_heading_element_get_align(@self);
end;

procedure TWebKitDOMHTMLHeadingElement.set_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_heading_element_set_align(@self, value);
end;

function TWebKitDOMHTMLHtmlElement.get_manifest: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_html_element_get_manifest(@self);
end;

function TWebKitDOMHTMLHtmlElement.get_version: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_html_element_get_version(@self);
end;

procedure TWebKitDOMHTMLHtmlElement.set_manifest(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_html_element_set_manifest(@self, value);
end;

procedure TWebKitDOMHTMLHtmlElement.set_version(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_html_element_set_version(@self, value);
end;

function TWebKitDOMHTMLIFrameElement.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_iframe_element_get_align(@self);
end;

function TWebKitDOMHTMLIFrameElement.get_content_document: PWebKitDOMDocument; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_iframe_element_get_content_document(@self);
end;

function TWebKitDOMHTMLIFrameElement.get_content_window: PWebKitDOMDOMWindow; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_iframe_element_get_content_window(@self);
end;

function TWebKitDOMHTMLIFrameElement.get_frame_border: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_iframe_element_get_frame_border(@self);
end;

function TWebKitDOMHTMLIFrameElement.get_height: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_iframe_element_get_height(@self);
end;

function TWebKitDOMHTMLIFrameElement.get_long_desc: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_iframe_element_get_long_desc(@self);
end;

function TWebKitDOMHTMLIFrameElement.get_margin_height: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_iframe_element_get_margin_height(@self);
end;

function TWebKitDOMHTMLIFrameElement.get_margin_width: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_iframe_element_get_margin_width(@self);
end;

function TWebKitDOMHTMLIFrameElement.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_iframe_element_get_name(@self);
end;

function TWebKitDOMHTMLIFrameElement.get_sandbox: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_iframe_element_get_sandbox(@self);
end;

function TWebKitDOMHTMLIFrameElement.get_scrolling: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_iframe_element_get_scrolling(@self);
end;

function TWebKitDOMHTMLIFrameElement.get_seamless: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_iframe_element_get_seamless(@self);
end;

function TWebKitDOMHTMLIFrameElement.get_src: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_iframe_element_get_src(@self);
end;

function TWebKitDOMHTMLIFrameElement.get_srcdoc: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_iframe_element_get_srcdoc(@self);
end;

function TWebKitDOMHTMLIFrameElement.get_width: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_iframe_element_get_width(@self);
end;

procedure TWebKitDOMHTMLIFrameElement.set_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_iframe_element_set_align(@self, value);
end;

procedure TWebKitDOMHTMLIFrameElement.set_frame_border(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_iframe_element_set_frame_border(@self, value);
end;

procedure TWebKitDOMHTMLIFrameElement.set_height(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_iframe_element_set_height(@self, value);
end;

procedure TWebKitDOMHTMLIFrameElement.set_long_desc(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_iframe_element_set_long_desc(@self, value);
end;

procedure TWebKitDOMHTMLIFrameElement.set_margin_height(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_iframe_element_set_margin_height(@self, value);
end;

procedure TWebKitDOMHTMLIFrameElement.set_margin_width(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_iframe_element_set_margin_width(@self, value);
end;

procedure TWebKitDOMHTMLIFrameElement.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_iframe_element_set_name(@self, value);
end;

procedure TWebKitDOMHTMLIFrameElement.set_sandbox(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_iframe_element_set_sandbox(@self, value);
end;

procedure TWebKitDOMHTMLIFrameElement.set_scrolling(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_iframe_element_set_scrolling(@self, value);
end;

procedure TWebKitDOMHTMLIFrameElement.set_seamless(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_iframe_element_set_seamless(@self, value);
end;

procedure TWebKitDOMHTMLIFrameElement.set_src(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_iframe_element_set_src(@self, value);
end;

procedure TWebKitDOMHTMLIFrameElement.set_srcdoc(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_iframe_element_set_srcdoc(@self, value);
end;

procedure TWebKitDOMHTMLIFrameElement.set_width(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_iframe_element_set_width(@self, value);
end;

function TWebKitDOMHTMLImageElement.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_align(@self);
end;

function TWebKitDOMHTMLImageElement.get_alt: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_alt(@self);
end;

function TWebKitDOMHTMLImageElement.get_border: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_border(@self);
end;

function TWebKitDOMHTMLImageElement.get_complete: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_complete(@self);
end;

function TWebKitDOMHTMLImageElement.get_cross_origin: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_cross_origin(@self);
end;

function TWebKitDOMHTMLImageElement.get_height: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_height(@self);
end;

function TWebKitDOMHTMLImageElement.get_hspace: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_hspace(@self);
end;

function TWebKitDOMHTMLImageElement.get_is_map: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_is_map(@self);
end;

function TWebKitDOMHTMLImageElement.get_long_desc: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_long_desc(@self);
end;

function TWebKitDOMHTMLImageElement.get_lowsrc: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_lowsrc(@self);
end;

function TWebKitDOMHTMLImageElement.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_name(@self);
end;

function TWebKitDOMHTMLImageElement.get_natural_height: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_natural_height(@self);
end;

function TWebKitDOMHTMLImageElement.get_natural_width: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_natural_width(@self);
end;

function TWebKitDOMHTMLImageElement.get_src: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_src(@self);
end;

function TWebKitDOMHTMLImageElement.get_use_map: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_use_map(@self);
end;

function TWebKitDOMHTMLImageElement.get_vspace: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_vspace(@self);
end;

function TWebKitDOMHTMLImageElement.get_width: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_width(@self);
end;

function TWebKitDOMHTMLImageElement.get_x: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_x(@self);
end;

function TWebKitDOMHTMLImageElement.get_y: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_image_element_get_y(@self);
end;

procedure TWebKitDOMHTMLImageElement.set_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_image_element_set_align(@self, value);
end;

procedure TWebKitDOMHTMLImageElement.set_alt(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_image_element_set_alt(@self, value);
end;

procedure TWebKitDOMHTMLImageElement.set_border(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_image_element_set_border(@self, value);
end;

procedure TWebKitDOMHTMLImageElement.set_cross_origin(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_image_element_set_cross_origin(@self, value);
end;

procedure TWebKitDOMHTMLImageElement.set_height(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_image_element_set_height(@self, value);
end;

procedure TWebKitDOMHTMLImageElement.set_hspace(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_image_element_set_hspace(@self, value);
end;

procedure TWebKitDOMHTMLImageElement.set_is_map(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_image_element_set_is_map(@self, value);
end;

procedure TWebKitDOMHTMLImageElement.set_long_desc(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_image_element_set_long_desc(@self, value);
end;

procedure TWebKitDOMHTMLImageElement.set_lowsrc(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_image_element_set_lowsrc(@self, value);
end;

procedure TWebKitDOMHTMLImageElement.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_image_element_set_name(@self, value);
end;

procedure TWebKitDOMHTMLImageElement.set_src(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_image_element_set_src(@self, value);
end;

procedure TWebKitDOMHTMLImageElement.set_use_map(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_image_element_set_use_map(@self, value);
end;

procedure TWebKitDOMHTMLImageElement.set_vspace(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_image_element_set_vspace(@self, value);
end;

procedure TWebKitDOMHTMLImageElement.set_width(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_image_element_set_width(@self, value);
end;

function TWebKitDOMHTMLInputElement.check_validity: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_check_validity(@self);
end;

function TWebKitDOMHTMLInputElement.get_accept: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_accept(@self);
end;

function TWebKitDOMHTMLInputElement.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_align(@self);
end;

function TWebKitDOMHTMLInputElement.get_alt: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_alt(@self);
end;

function TWebKitDOMHTMLInputElement.get_autocomplete: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_autocomplete(@self);
end;

function TWebKitDOMHTMLInputElement.get_autofocus: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_autofocus(@self);
end;

function TWebKitDOMHTMLInputElement.get_capture: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_capture(@self);
end;

function TWebKitDOMHTMLInputElement.get_checked: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_checked(@self);
end;

function TWebKitDOMHTMLInputElement.get_default_checked: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_default_checked(@self);
end;

function TWebKitDOMHTMLInputElement.get_default_value: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_default_value(@self);
end;

function TWebKitDOMHTMLInputElement.get_dir_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_dir_name(@self);
end;

function TWebKitDOMHTMLInputElement.get_disabled: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_disabled(@self);
end;

function TWebKitDOMHTMLInputElement.get_files: PWebKitDOMFileList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_files(@self);
end;

function TWebKitDOMHTMLInputElement.get_form: PWebKitDOMHTMLFormElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_form(@self);
end;

function TWebKitDOMHTMLInputElement.get_form_action: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_form_action(@self);
end;

function TWebKitDOMHTMLInputElement.get_form_enctype: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_form_enctype(@self);
end;

function TWebKitDOMHTMLInputElement.get_form_method: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_form_method(@self);
end;

function TWebKitDOMHTMLInputElement.get_form_no_validate: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_form_no_validate(@self);
end;

function TWebKitDOMHTMLInputElement.get_form_target: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_form_target(@self);
end;

function TWebKitDOMHTMLInputElement.get_height: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_height(@self);
end;

function TWebKitDOMHTMLInputElement.get_incremental: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_incremental(@self);
end;

function TWebKitDOMHTMLInputElement.get_indeterminate: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_indeterminate(@self);
end;

function TWebKitDOMHTMLInputElement.get_labels: PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_labels(@self);
end;

function TWebKitDOMHTMLInputElement.get_list: PWebKitDOMHTMLElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_list(@self);
end;

function TWebKitDOMHTMLInputElement.get_max: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_max(@self);
end;

function TWebKitDOMHTMLInputElement.get_max_length: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_max_length(@self);
end;

function TWebKitDOMHTMLInputElement.get_min: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_min(@self);
end;

function TWebKitDOMHTMLInputElement.get_multiple: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_multiple(@self);
end;

function TWebKitDOMHTMLInputElement.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_name(@self);
end;

function TWebKitDOMHTMLInputElement.get_pattern: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_pattern(@self);
end;

function TWebKitDOMHTMLInputElement.get_placeholder: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_placeholder(@self);
end;

function TWebKitDOMHTMLInputElement.get_read_only: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_read_only(@self);
end;

function TWebKitDOMHTMLInputElement.get_required: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_required(@self);
end;

function TWebKitDOMHTMLInputElement.get_size: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_size(@self);
end;

function TWebKitDOMHTMLInputElement.get_src: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_src(@self);
end;

function TWebKitDOMHTMLInputElement.get_step: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_step(@self);
end;

function TWebKitDOMHTMLInputElement.get_use_map: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_use_map(@self);
end;

function TWebKitDOMHTMLInputElement.get_validation_message: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_validation_message(@self);
end;

function TWebKitDOMHTMLInputElement.get_validity: PWebKitDOMValidityState; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_validity(@self);
end;

function TWebKitDOMHTMLInputElement.get_value: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_value(@self);
end;

function TWebKitDOMHTMLInputElement.get_value_as_number: gdouble; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_value_as_number(@self);
end;

function TWebKitDOMHTMLInputElement.get_webkit_grammar: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_webkit_grammar(@self);
end;

function TWebKitDOMHTMLInputElement.get_webkit_speech: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_webkit_speech(@self);
end;

function TWebKitDOMHTMLInputElement.get_webkitdirectory: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_webkitdirectory(@self);
end;

function TWebKitDOMHTMLInputElement.get_width: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_width(@self);
end;

function TWebKitDOMHTMLInputElement.get_will_validate: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_get_will_validate(@self);
end;

function TWebKitDOMHTMLInputElement.is_edited: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_input_element_is_edited(@self);
end;

procedure TWebKitDOMHTMLInputElement.select; cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_select(@self);
end;

procedure TWebKitDOMHTMLInputElement.set_accept(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_accept(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_align(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_alt(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_alt(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_autocomplete(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_autocomplete(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_autofocus(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_autofocus(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_capture(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_capture(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_checked(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_checked(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_custom_validity(error: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_custom_validity(@self, error);
end;

procedure TWebKitDOMHTMLInputElement.set_default_checked(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_default_checked(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_default_value(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_default_value(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_dir_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_dir_name(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_disabled(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_disabled(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_files(value: PWebKitDOMFileList); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_files(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_form_action(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_form_action(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_form_enctype(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_form_enctype(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_form_method(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_form_method(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_form_no_validate(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_form_no_validate(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_form_target(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_form_target(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_height(value: gulong); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_height(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_incremental(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_incremental(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_indeterminate(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_indeterminate(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_max(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_max(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_max_length(value: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_max_length(@self, value, error);
end;

procedure TWebKitDOMHTMLInputElement.set_min(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_min(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_multiple(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_multiple(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_name(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_pattern(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_pattern(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_placeholder(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_placeholder(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_range_text(replacement: Pgchar; start: gulong; end_: gulong; selectionMode: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_range_text(@self, replacement, start, end_, selectionMode, error);
end;

procedure TWebKitDOMHTMLInputElement.set_read_only(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_read_only(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_required(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_required(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_size(value: gulong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_size(@self, value, error);
end;

procedure TWebKitDOMHTMLInputElement.set_src(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_src(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_step(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_step(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_use_map(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_use_map(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_value(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_value(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_value_as_number(value: gdouble; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_value_as_number(@self, value, error);
end;

procedure TWebKitDOMHTMLInputElement.set_value_for_user(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_value_for_user(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_webkit_grammar(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_webkit_grammar(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_webkit_speech(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_webkit_speech(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_webkitdirectory(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_webkitdirectory(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.set_width(value: gulong); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_set_width(@self, value);
end;

procedure TWebKitDOMHTMLInputElement.step_down(n: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_step_down(@self, n, error);
end;

procedure TWebKitDOMHTMLInputElement.step_up(n: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_input_element_step_up(@self, n, error);
end;

function TWebKitDOMHTMLKeygenElement.check_validity: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_keygen_element_check_validity(@self);
end;

function TWebKitDOMHTMLKeygenElement.get_autofocus: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_keygen_element_get_autofocus(@self);
end;

function TWebKitDOMHTMLKeygenElement.get_challenge: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_keygen_element_get_challenge(@self);
end;

function TWebKitDOMHTMLKeygenElement.get_disabled: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_keygen_element_get_disabled(@self);
end;

function TWebKitDOMHTMLKeygenElement.get_form: PWebKitDOMHTMLFormElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_keygen_element_get_form(@self);
end;

function TWebKitDOMHTMLKeygenElement.get_keytype: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_keygen_element_get_keytype(@self);
end;

function TWebKitDOMHTMLKeygenElement.get_labels: PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_keygen_element_get_labels(@self);
end;

function TWebKitDOMHTMLKeygenElement.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_keygen_element_get_name(@self);
end;

function TWebKitDOMHTMLKeygenElement.get_validation_message: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_keygen_element_get_validation_message(@self);
end;

function TWebKitDOMHTMLKeygenElement.get_validity: PWebKitDOMValidityState; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_keygen_element_get_validity(@self);
end;

function TWebKitDOMHTMLKeygenElement.get_will_validate: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_keygen_element_get_will_validate(@self);
end;

procedure TWebKitDOMHTMLKeygenElement.set_autofocus(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_keygen_element_set_autofocus(@self, value);
end;

procedure TWebKitDOMHTMLKeygenElement.set_challenge(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_keygen_element_set_challenge(@self, value);
end;

procedure TWebKitDOMHTMLKeygenElement.set_custom_validity(error: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_keygen_element_set_custom_validity(@self, error);
end;

procedure TWebKitDOMHTMLKeygenElement.set_disabled(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_keygen_element_set_disabled(@self, value);
end;

procedure TWebKitDOMHTMLKeygenElement.set_keytype(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_keygen_element_set_keytype(@self, value);
end;

procedure TWebKitDOMHTMLKeygenElement.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_keygen_element_set_name(@self, value);
end;

function TWebKitDOMHTMLLIElement.get_value: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_htmlli_element_get_value(@self);
end;

procedure TWebKitDOMHTMLLIElement.set_value(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_htmlli_element_set_value(@self, value);
end;

function TWebKitDOMHTMLLabelElement.get_control: PWebKitDOMHTMLElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_label_element_get_control(@self);
end;

function TWebKitDOMHTMLLabelElement.get_form: PWebKitDOMHTMLFormElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_label_element_get_form(@self);
end;

function TWebKitDOMHTMLLabelElement.get_html_for: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_label_element_get_html_for(@self);
end;

procedure TWebKitDOMHTMLLabelElement.set_html_for(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_label_element_set_html_for(@self, value);
end;

function TWebKitDOMHTMLLegendElement.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_legend_element_get_align(@self);
end;

function TWebKitDOMHTMLLegendElement.get_form: PWebKitDOMHTMLFormElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_legend_element_get_form(@self);
end;

procedure TWebKitDOMHTMLLegendElement.set_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_legend_element_set_align(@self, value);
end;

function TWebKitDOMHTMLLinkElement.get_charset: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_link_element_get_charset(@self);
end;

function TWebKitDOMHTMLLinkElement.get_disabled: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_link_element_get_disabled(@self);
end;

function TWebKitDOMHTMLLinkElement.get_href: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_link_element_get_href(@self);
end;

function TWebKitDOMHTMLLinkElement.get_hreflang: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_link_element_get_hreflang(@self);
end;

function TWebKitDOMHTMLLinkElement.get_media: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_link_element_get_media(@self);
end;

function TWebKitDOMHTMLLinkElement.get_rel: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_link_element_get_rel(@self);
end;

function TWebKitDOMHTMLLinkElement.get_rev: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_link_element_get_rev(@self);
end;

function TWebKitDOMHTMLLinkElement.get_sheet: PWebKitDOMStyleSheet; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_link_element_get_sheet(@self);
end;

function TWebKitDOMHTMLLinkElement.get_target: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_link_element_get_target(@self);
end;

procedure TWebKitDOMHTMLLinkElement.set_charset(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_link_element_set_charset(@self, value);
end;

procedure TWebKitDOMHTMLLinkElement.set_disabled(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_link_element_set_disabled(@self, value);
end;

procedure TWebKitDOMHTMLLinkElement.set_href(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_link_element_set_href(@self, value);
end;

procedure TWebKitDOMHTMLLinkElement.set_hreflang(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_link_element_set_hreflang(@self, value);
end;

procedure TWebKitDOMHTMLLinkElement.set_media(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_link_element_set_media(@self, value);
end;

procedure TWebKitDOMHTMLLinkElement.set_rel(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_link_element_set_rel(@self, value);
end;

procedure TWebKitDOMHTMLLinkElement.set_rev(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_link_element_set_rev(@self, value);
end;

procedure TWebKitDOMHTMLLinkElement.set_target(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_link_element_set_target(@self, value);
end;

function TWebKitDOMHTMLMapElement.get_areas: PWebKitDOMHTMLCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_map_element_get_areas(@self);
end;

function TWebKitDOMHTMLMapElement.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_map_element_get_name(@self);
end;

procedure TWebKitDOMHTMLMapElement.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_map_element_set_name(@self, value);
end;

function TWebKitDOMHTMLMarqueeElement.get_behavior: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_marquee_element_get_behavior(@self);
end;

function TWebKitDOMHTMLMarqueeElement.get_bg_color: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_marquee_element_get_bg_color(@self);
end;

function TWebKitDOMHTMLMarqueeElement.get_direction: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_marquee_element_get_direction(@self);
end;

function TWebKitDOMHTMLMarqueeElement.get_height: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_marquee_element_get_height(@self);
end;

function TWebKitDOMHTMLMarqueeElement.get_hspace: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_marquee_element_get_hspace(@self);
end;

function TWebKitDOMHTMLMarqueeElement.get_loop: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_marquee_element_get_loop(@self);
end;

function TWebKitDOMHTMLMarqueeElement.get_scroll_amount: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_marquee_element_get_scroll_amount(@self);
end;

function TWebKitDOMHTMLMarqueeElement.get_scroll_delay: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_marquee_element_get_scroll_delay(@self);
end;

function TWebKitDOMHTMLMarqueeElement.get_true_speed: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_marquee_element_get_true_speed(@self);
end;

function TWebKitDOMHTMLMarqueeElement.get_vspace: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_marquee_element_get_vspace(@self);
end;

function TWebKitDOMHTMLMarqueeElement.get_width: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_marquee_element_get_width(@self);
end;

procedure TWebKitDOMHTMLMarqueeElement.set_behavior(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_marquee_element_set_behavior(@self, value);
end;

procedure TWebKitDOMHTMLMarqueeElement.set_bg_color(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_marquee_element_set_bg_color(@self, value);
end;

procedure TWebKitDOMHTMLMarqueeElement.set_direction(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_marquee_element_set_direction(@self, value);
end;

procedure TWebKitDOMHTMLMarqueeElement.set_height(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_marquee_element_set_height(@self, value);
end;

procedure TWebKitDOMHTMLMarqueeElement.set_hspace(value: gulong); cdecl;
begin
  LazWebKit3.webkit_dom_html_marquee_element_set_hspace(@self, value);
end;

procedure TWebKitDOMHTMLMarqueeElement.set_loop(value: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_marquee_element_set_loop(@self, value, error);
end;

procedure TWebKitDOMHTMLMarqueeElement.set_scroll_amount(value: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_marquee_element_set_scroll_amount(@self, value, error);
end;

procedure TWebKitDOMHTMLMarqueeElement.set_scroll_delay(value: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_marquee_element_set_scroll_delay(@self, value, error);
end;

procedure TWebKitDOMHTMLMarqueeElement.set_true_speed(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_marquee_element_set_true_speed(@self, value);
end;

procedure TWebKitDOMHTMLMarqueeElement.set_vspace(value: gulong); cdecl;
begin
  LazWebKit3.webkit_dom_html_marquee_element_set_vspace(@self, value);
end;

procedure TWebKitDOMHTMLMarqueeElement.set_width(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_marquee_element_set_width(@self, value);
end;

procedure TWebKitDOMHTMLMarqueeElement.start; cdecl;
begin
  LazWebKit3.webkit_dom_html_marquee_element_start(@self);
end;

procedure TWebKitDOMHTMLMarqueeElement.stop; cdecl;
begin
  LazWebKit3.webkit_dom_html_marquee_element_stop(@self);
end;

function TWebKitDOMTimeRanges.end_(index: gulong; error: PPGError): gfloat; cdecl;
begin
  Result := LazWebKit3.webkit_dom_time_ranges_end(@self, index, error);
end;

function TWebKitDOMTimeRanges.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_time_ranges_get_length(@self);
end;

function TWebKitDOMTimeRanges.start(index: gulong; error: PPGError): gfloat; cdecl;
begin
  Result := LazWebKit3.webkit_dom_time_ranges_start(@self, index, error);
end;

function TWebKitDOMMediaError.get_code: gushort; cdecl;
begin
  Result := LazWebKit3.webkit_dom_media_error_get_code(@self);
end;

function TWebKitDOMHTMLMenuElement.get_compact: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_menu_element_get_compact(@self);
end;

procedure TWebKitDOMHTMLMenuElement.set_compact(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_menu_element_set_compact(@self, value);
end;

function TWebKitDOMHTMLMetaElement.get_content: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_meta_element_get_content(@self);
end;

function TWebKitDOMHTMLMetaElement.get_http_equiv: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_meta_element_get_http_equiv(@self);
end;

function TWebKitDOMHTMLMetaElement.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_meta_element_get_name(@self);
end;

function TWebKitDOMHTMLMetaElement.get_scheme: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_meta_element_get_scheme(@self);
end;

procedure TWebKitDOMHTMLMetaElement.set_content(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_meta_element_set_content(@self, value);
end;

procedure TWebKitDOMHTMLMetaElement.set_http_equiv(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_meta_element_set_http_equiv(@self, value);
end;

procedure TWebKitDOMHTMLMetaElement.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_meta_element_set_name(@self, value);
end;

procedure TWebKitDOMHTMLMetaElement.set_scheme(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_meta_element_set_scheme(@self, value);
end;

function TWebKitDOMHTMLModElement.get_cite: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_mod_element_get_cite(@self);
end;

function TWebKitDOMHTMLModElement.get_date_time: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_mod_element_get_date_time(@self);
end;

procedure TWebKitDOMHTMLModElement.set_cite(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_mod_element_set_cite(@self, value);
end;

procedure TWebKitDOMHTMLModElement.set_date_time(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_mod_element_set_date_time(@self, value);
end;

function TWebKitDOMHTMLOListElement.get_compact: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_htmlo_list_element_get_compact(@self);
end;

function TWebKitDOMHTMLOListElement.get_reversed: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_htmlo_list_element_get_reversed(@self);
end;

function TWebKitDOMHTMLOListElement.get_start: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_htmlo_list_element_get_start(@self);
end;

procedure TWebKitDOMHTMLOListElement.set_compact(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_htmlo_list_element_set_compact(@self, value);
end;

procedure TWebKitDOMHTMLOListElement.set_reversed(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_htmlo_list_element_set_reversed(@self, value);
end;

procedure TWebKitDOMHTMLOListElement.set_start(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_htmlo_list_element_set_start(@self, value);
end;

function TWebKitDOMHTMLObjectElement.check_validity: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_check_validity(@self);
end;

function TWebKitDOMHTMLObjectElement.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_align(@self);
end;

function TWebKitDOMHTMLObjectElement.get_archive: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_archive(@self);
end;

function TWebKitDOMHTMLObjectElement.get_border: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_border(@self);
end;

function TWebKitDOMHTMLObjectElement.get_code: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_code(@self);
end;

function TWebKitDOMHTMLObjectElement.get_code_base: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_code_base(@self);
end;

function TWebKitDOMHTMLObjectElement.get_code_type: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_code_type(@self);
end;

function TWebKitDOMHTMLObjectElement.get_content_document: PWebKitDOMDocument; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_content_document(@self);
end;

function TWebKitDOMHTMLObjectElement.get_data: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_data(@self);
end;

function TWebKitDOMHTMLObjectElement.get_declare: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_declare(@self);
end;

function TWebKitDOMHTMLObjectElement.get_form: PWebKitDOMHTMLFormElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_form(@self);
end;

function TWebKitDOMHTMLObjectElement.get_height: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_height(@self);
end;

function TWebKitDOMHTMLObjectElement.get_hspace: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_hspace(@self);
end;

function TWebKitDOMHTMLObjectElement.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_name(@self);
end;

function TWebKitDOMHTMLObjectElement.get_standby: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_standby(@self);
end;

function TWebKitDOMHTMLObjectElement.get_use_map: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_use_map(@self);
end;

function TWebKitDOMHTMLObjectElement.get_validation_message: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_validation_message(@self);
end;

function TWebKitDOMHTMLObjectElement.get_validity: PWebKitDOMValidityState; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_validity(@self);
end;

function TWebKitDOMHTMLObjectElement.get_vspace: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_vspace(@self);
end;

function TWebKitDOMHTMLObjectElement.get_width: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_width(@self);
end;

function TWebKitDOMHTMLObjectElement.get_will_validate: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_object_element_get_will_validate(@self);
end;

procedure TWebKitDOMHTMLObjectElement.set_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_object_element_set_align(@self, value);
end;

procedure TWebKitDOMHTMLObjectElement.set_archive(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_object_element_set_archive(@self, value);
end;

procedure TWebKitDOMHTMLObjectElement.set_border(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_object_element_set_border(@self, value);
end;

procedure TWebKitDOMHTMLObjectElement.set_code(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_object_element_set_code(@self, value);
end;

procedure TWebKitDOMHTMLObjectElement.set_code_base(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_object_element_set_code_base(@self, value);
end;

procedure TWebKitDOMHTMLObjectElement.set_code_type(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_object_element_set_code_type(@self, value);
end;

procedure TWebKitDOMHTMLObjectElement.set_custom_validity(error: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_object_element_set_custom_validity(@self, error);
end;

procedure TWebKitDOMHTMLObjectElement.set_data(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_object_element_set_data(@self, value);
end;

procedure TWebKitDOMHTMLObjectElement.set_declare(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_object_element_set_declare(@self, value);
end;

procedure TWebKitDOMHTMLObjectElement.set_height(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_object_element_set_height(@self, value);
end;

procedure TWebKitDOMHTMLObjectElement.set_hspace(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_object_element_set_hspace(@self, value);
end;

procedure TWebKitDOMHTMLObjectElement.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_object_element_set_name(@self, value);
end;

procedure TWebKitDOMHTMLObjectElement.set_standby(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_object_element_set_standby(@self, value);
end;

procedure TWebKitDOMHTMLObjectElement.set_use_map(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_object_element_set_use_map(@self, value);
end;

procedure TWebKitDOMHTMLObjectElement.set_vspace(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_object_element_set_vspace(@self, value);
end;

procedure TWebKitDOMHTMLObjectElement.set_width(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_object_element_set_width(@self, value);
end;

function TWebKitDOMHTMLOptGroupElement.get_disabled: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_opt_group_element_get_disabled(@self);
end;

function TWebKitDOMHTMLOptGroupElement.get_label: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_opt_group_element_get_label(@self);
end;

procedure TWebKitDOMHTMLOptGroupElement.set_disabled(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_opt_group_element_set_disabled(@self, value);
end;

procedure TWebKitDOMHTMLOptGroupElement.set_label(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_opt_group_element_set_label(@self, value);
end;

function TWebKitDOMHTMLOptionElement.get_default_selected: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_option_element_get_default_selected(@self);
end;

function TWebKitDOMHTMLOptionElement.get_disabled: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_option_element_get_disabled(@self);
end;

function TWebKitDOMHTMLOptionElement.get_form: PWebKitDOMHTMLFormElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_option_element_get_form(@self);
end;

function TWebKitDOMHTMLOptionElement.get_index: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_option_element_get_index(@self);
end;

function TWebKitDOMHTMLOptionElement.get_label: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_option_element_get_label(@self);
end;

function TWebKitDOMHTMLOptionElement.get_selected: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_option_element_get_selected(@self);
end;

function TWebKitDOMHTMLOptionElement.get_text: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_option_element_get_text(@self);
end;

function TWebKitDOMHTMLOptionElement.get_value: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_option_element_get_value(@self);
end;

procedure TWebKitDOMHTMLOptionElement.set_default_selected(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_option_element_set_default_selected(@self, value);
end;

procedure TWebKitDOMHTMLOptionElement.set_disabled(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_option_element_set_disabled(@self, value);
end;

procedure TWebKitDOMHTMLOptionElement.set_label(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_option_element_set_label(@self, value);
end;

procedure TWebKitDOMHTMLOptionElement.set_selected(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_option_element_set_selected(@self, value);
end;

procedure TWebKitDOMHTMLOptionElement.set_value(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_option_element_set_value(@self, value);
end;

function TWebKitDOMHTMLOptionsCollection.get_selected_index: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_options_collection_get_selected_index(@self);
end;

procedure TWebKitDOMHTMLOptionsCollection.set_selected_index(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_options_collection_set_selected_index(@self, value);
end;

function TWebKitDOMHTMLParagraphElement.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_paragraph_element_get_align(@self);
end;

procedure TWebKitDOMHTMLParagraphElement.set_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_paragraph_element_set_align(@self, value);
end;

function TWebKitDOMHTMLParamElement.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_param_element_get_name(@self);
end;

function TWebKitDOMHTMLParamElement.get_value: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_param_element_get_value(@self);
end;

function TWebKitDOMHTMLParamElement.get_value_type: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_param_element_get_value_type(@self);
end;

procedure TWebKitDOMHTMLParamElement.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_param_element_set_name(@self, value);
end;

procedure TWebKitDOMHTMLParamElement.set_value(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_param_element_set_value(@self, value);
end;

procedure TWebKitDOMHTMLParamElement.set_value_type(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_param_element_set_value_type(@self, value);
end;

function TWebKitDOMHTMLPreElement.get_width: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_pre_element_get_width(@self);
end;

function TWebKitDOMHTMLPreElement.get_wrap: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_pre_element_get_wrap(@self);
end;

procedure TWebKitDOMHTMLPreElement.set_width(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_pre_element_set_width(@self, value);
end;

procedure TWebKitDOMHTMLPreElement.set_wrap(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_pre_element_set_wrap(@self, value);
end;

function TWebKitDOMHTMLPropertiesCollection.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_properties_collection_get_length(@self);
end;

function TWebKitDOMHTMLPropertiesCollection.get_names: PWebKitDOMDOMStringList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_properties_collection_get_names(@self);
end;

function TWebKitDOMHTMLPropertiesCollection.item(index: gulong): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_properties_collection_item(@self, index);
end;

function TWebKitDOMHTMLPropertiesCollection.named_item(name: Pgchar): PWebKitDOMPropertyNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_properties_collection_named_item(@self, name);
end;

function TWebKitDOMPropertyNodeList.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_property_node_list_get_length(@self);
end;

function TWebKitDOMPropertyNodeList.item(index: gulong): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_property_node_list_item(@self, index);
end;

function TWebKitDOMHTMLQuoteElement.get_cite: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_quote_element_get_cite(@self);
end;

procedure TWebKitDOMHTMLQuoteElement.set_cite(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_quote_element_set_cite(@self, value);
end;

function TWebKitDOMHTMLScriptElement.get_async: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_script_element_get_async(@self);
end;

function TWebKitDOMHTMLScriptElement.get_charset: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_script_element_get_charset(@self);
end;

function TWebKitDOMHTMLScriptElement.get_cross_origin: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_script_element_get_cross_origin(@self);
end;

function TWebKitDOMHTMLScriptElement.get_defer: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_script_element_get_defer(@self);
end;

function TWebKitDOMHTMLScriptElement.get_event: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_script_element_get_event(@self);
end;

function TWebKitDOMHTMLScriptElement.get_html_for: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_script_element_get_html_for(@self);
end;

function TWebKitDOMHTMLScriptElement.get_nonce: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_script_element_get_nonce(@self);
end;

function TWebKitDOMHTMLScriptElement.get_src: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_script_element_get_src(@self);
end;

function TWebKitDOMHTMLScriptElement.get_text: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_script_element_get_text(@self);
end;

procedure TWebKitDOMHTMLScriptElement.set_async(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_script_element_set_async(@self, value);
end;

procedure TWebKitDOMHTMLScriptElement.set_charset(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_script_element_set_charset(@self, value);
end;

procedure TWebKitDOMHTMLScriptElement.set_cross_origin(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_script_element_set_cross_origin(@self, value);
end;

procedure TWebKitDOMHTMLScriptElement.set_defer(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_script_element_set_defer(@self, value);
end;

procedure TWebKitDOMHTMLScriptElement.set_event(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_script_element_set_event(@self, value);
end;

procedure TWebKitDOMHTMLScriptElement.set_html_for(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_script_element_set_html_for(@self, value);
end;

procedure TWebKitDOMHTMLScriptElement.set_nonce(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_script_element_set_nonce(@self, value);
end;

procedure TWebKitDOMHTMLScriptElement.set_src(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_script_element_set_src(@self, value);
end;

procedure TWebKitDOMHTMLScriptElement.set_text(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_script_element_set_text(@self, value);
end;

procedure TWebKitDOMHTMLSelectElement.add(element: PWebKitDOMHTMLElement; before: PWebKitDOMHTMLElement; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_select_element_add(@self, element, before, error);
end;

function TWebKitDOMHTMLSelectElement.check_validity: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_check_validity(@self);
end;

function TWebKitDOMHTMLSelectElement.get_autofocus: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_get_autofocus(@self);
end;

function TWebKitDOMHTMLSelectElement.get_disabled: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_get_disabled(@self);
end;

function TWebKitDOMHTMLSelectElement.get_form: PWebKitDOMHTMLFormElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_get_form(@self);
end;

function TWebKitDOMHTMLSelectElement.get_labels: PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_get_labels(@self);
end;

function TWebKitDOMHTMLSelectElement.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_get_length(@self);
end;

function TWebKitDOMHTMLSelectElement.get_multiple: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_get_multiple(@self);
end;

function TWebKitDOMHTMLSelectElement.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_get_name(@self);
end;

function TWebKitDOMHTMLSelectElement.get_options: PWebKitDOMHTMLOptionsCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_get_options(@self);
end;

function TWebKitDOMHTMLSelectElement.get_required: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_get_required(@self);
end;

function TWebKitDOMHTMLSelectElement.get_selected_index: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_get_selected_index(@self);
end;

function TWebKitDOMHTMLSelectElement.get_selected_options: PWebKitDOMHTMLCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_get_selected_options(@self);
end;

function TWebKitDOMHTMLSelectElement.get_size: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_get_size(@self);
end;

function TWebKitDOMHTMLSelectElement.get_validation_message: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_get_validation_message(@self);
end;

function TWebKitDOMHTMLSelectElement.get_validity: PWebKitDOMValidityState; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_get_validity(@self);
end;

function TWebKitDOMHTMLSelectElement.get_value: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_get_value(@self);
end;

function TWebKitDOMHTMLSelectElement.get_will_validate: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_get_will_validate(@self);
end;

function TWebKitDOMHTMLSelectElement.item(index: gulong): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_item(@self, index);
end;

function TWebKitDOMHTMLSelectElement.named_item(name: Pgchar): PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_select_element_named_item(@self, name);
end;

procedure TWebKitDOMHTMLSelectElement.remove(index: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_select_element_remove(@self, index);
end;

procedure TWebKitDOMHTMLSelectElement.set_autofocus(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_select_element_set_autofocus(@self, value);
end;

procedure TWebKitDOMHTMLSelectElement.set_custom_validity(error: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_select_element_set_custom_validity(@self, error);
end;

procedure TWebKitDOMHTMLSelectElement.set_disabled(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_select_element_set_disabled(@self, value);
end;

procedure TWebKitDOMHTMLSelectElement.set_length(value: gulong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_select_element_set_length(@self, value, error);
end;

procedure TWebKitDOMHTMLSelectElement.set_multiple(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_select_element_set_multiple(@self, value);
end;

procedure TWebKitDOMHTMLSelectElement.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_select_element_set_name(@self, value);
end;

procedure TWebKitDOMHTMLSelectElement.set_required(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_select_element_set_required(@self, value);
end;

procedure TWebKitDOMHTMLSelectElement.set_selected_index(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_select_element_set_selected_index(@self, value);
end;

procedure TWebKitDOMHTMLSelectElement.set_size(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_select_element_set_size(@self, value);
end;

procedure TWebKitDOMHTMLSelectElement.set_value(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_select_element_set_value(@self, value);
end;

function TWebKitDOMHTMLStyleElement.get_disabled: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_style_element_get_disabled(@self);
end;

function TWebKitDOMHTMLStyleElement.get_media: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_style_element_get_media(@self);
end;

function TWebKitDOMHTMLStyleElement.get_scoped: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_style_element_get_scoped(@self);
end;

function TWebKitDOMHTMLStyleElement.get_sheet: PWebKitDOMStyleSheet; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_style_element_get_sheet(@self);
end;

procedure TWebKitDOMHTMLStyleElement.set_disabled(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_style_element_set_disabled(@self, value);
end;

procedure TWebKitDOMHTMLStyleElement.set_media(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_style_element_set_media(@self, value);
end;

procedure TWebKitDOMHTMLStyleElement.set_scoped(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_style_element_set_scoped(@self, value);
end;

function TWebKitDOMHTMLTableCaptionElement.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_caption_element_get_align(@self);
end;

procedure TWebKitDOMHTMLTableCaptionElement.set_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_caption_element_set_align(@self, value);
end;

function TWebKitDOMHTMLTableCellElement.get_abbr: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_cell_element_get_abbr(@self);
end;

function TWebKitDOMHTMLTableCellElement.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_cell_element_get_align(@self);
end;

function TWebKitDOMHTMLTableCellElement.get_axis: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_cell_element_get_axis(@self);
end;

function TWebKitDOMHTMLTableCellElement.get_bg_color: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_cell_element_get_bg_color(@self);
end;

function TWebKitDOMHTMLTableCellElement.get_cell_index: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_cell_element_get_cell_index(@self);
end;

function TWebKitDOMHTMLTableCellElement.get_ch: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_cell_element_get_ch(@self);
end;

function TWebKitDOMHTMLTableCellElement.get_ch_off: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_cell_element_get_ch_off(@self);
end;

function TWebKitDOMHTMLTableCellElement.get_col_span: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_cell_element_get_col_span(@self);
end;

function TWebKitDOMHTMLTableCellElement.get_headers: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_cell_element_get_headers(@self);
end;

function TWebKitDOMHTMLTableCellElement.get_height: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_cell_element_get_height(@self);
end;

function TWebKitDOMHTMLTableCellElement.get_no_wrap: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_cell_element_get_no_wrap(@self);
end;

function TWebKitDOMHTMLTableCellElement.get_row_span: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_cell_element_get_row_span(@self);
end;

function TWebKitDOMHTMLTableCellElement.get_scope: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_cell_element_get_scope(@self);
end;

function TWebKitDOMHTMLTableCellElement.get_v_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_cell_element_get_v_align(@self);
end;

function TWebKitDOMHTMLTableCellElement.get_width: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_cell_element_get_width(@self);
end;

procedure TWebKitDOMHTMLTableCellElement.set_abbr(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_cell_element_set_abbr(@self, value);
end;

procedure TWebKitDOMHTMLTableCellElement.set_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_cell_element_set_align(@self, value);
end;

procedure TWebKitDOMHTMLTableCellElement.set_axis(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_cell_element_set_axis(@self, value);
end;

procedure TWebKitDOMHTMLTableCellElement.set_bg_color(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_cell_element_set_bg_color(@self, value);
end;

procedure TWebKitDOMHTMLTableCellElement.set_ch(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_cell_element_set_ch(@self, value);
end;

procedure TWebKitDOMHTMLTableCellElement.set_ch_off(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_cell_element_set_ch_off(@self, value);
end;

procedure TWebKitDOMHTMLTableCellElement.set_col_span(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_cell_element_set_col_span(@self, value);
end;

procedure TWebKitDOMHTMLTableCellElement.set_headers(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_cell_element_set_headers(@self, value);
end;

procedure TWebKitDOMHTMLTableCellElement.set_height(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_cell_element_set_height(@self, value);
end;

procedure TWebKitDOMHTMLTableCellElement.set_no_wrap(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_cell_element_set_no_wrap(@self, value);
end;

procedure TWebKitDOMHTMLTableCellElement.set_row_span(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_cell_element_set_row_span(@self, value);
end;

procedure TWebKitDOMHTMLTableCellElement.set_scope(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_cell_element_set_scope(@self, value);
end;

procedure TWebKitDOMHTMLTableCellElement.set_v_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_cell_element_set_v_align(@self, value);
end;

procedure TWebKitDOMHTMLTableCellElement.set_width(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_cell_element_set_width(@self, value);
end;

function TWebKitDOMHTMLTableColElement.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_col_element_get_align(@self);
end;

function TWebKitDOMHTMLTableColElement.get_ch: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_col_element_get_ch(@self);
end;

function TWebKitDOMHTMLTableColElement.get_ch_off: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_col_element_get_ch_off(@self);
end;

function TWebKitDOMHTMLTableColElement.get_span: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_col_element_get_span(@self);
end;

function TWebKitDOMHTMLTableColElement.get_v_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_col_element_get_v_align(@self);
end;

function TWebKitDOMHTMLTableColElement.get_width: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_col_element_get_width(@self);
end;

procedure TWebKitDOMHTMLTableColElement.set_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_col_element_set_align(@self, value);
end;

procedure TWebKitDOMHTMLTableColElement.set_ch(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_col_element_set_ch(@self, value);
end;

procedure TWebKitDOMHTMLTableColElement.set_ch_off(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_col_element_set_ch_off(@self, value);
end;

procedure TWebKitDOMHTMLTableColElement.set_span(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_col_element_set_span(@self, value);
end;

procedure TWebKitDOMHTMLTableColElement.set_v_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_col_element_set_v_align(@self, value);
end;

procedure TWebKitDOMHTMLTableColElement.set_width(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_col_element_set_width(@self, value);
end;

function TWebKitDOMHTMLTableElement.create_caption: PWebKitDOMHTMLElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_create_caption(@self);
end;

function TWebKitDOMHTMLTableElement.create_t_body: PWebKitDOMHTMLElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_create_t_body(@self);
end;

function TWebKitDOMHTMLTableElement.create_t_foot: PWebKitDOMHTMLElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_create_t_foot(@self);
end;

function TWebKitDOMHTMLTableElement.create_t_head: PWebKitDOMHTMLElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_create_t_head(@self);
end;

procedure TWebKitDOMHTMLTableElement.delete_caption; cdecl;
begin
  LazWebKit3.webkit_dom_html_table_element_delete_caption(@self);
end;

procedure TWebKitDOMHTMLTableElement.delete_row(index: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_element_delete_row(@self, index, error);
end;

procedure TWebKitDOMHTMLTableElement.delete_t_foot; cdecl;
begin
  LazWebKit3.webkit_dom_html_table_element_delete_t_foot(@self);
end;

procedure TWebKitDOMHTMLTableElement.delete_t_head; cdecl;
begin
  LazWebKit3.webkit_dom_html_table_element_delete_t_head(@self);
end;

function TWebKitDOMHTMLTableElement.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_get_align(@self);
end;

function TWebKitDOMHTMLTableElement.get_bg_color: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_get_bg_color(@self);
end;

function TWebKitDOMHTMLTableElement.get_border: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_get_border(@self);
end;

function TWebKitDOMHTMLTableElement.get_caption: PWebKitDOMHTMLTableCaptionElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_get_caption(@self);
end;

function TWebKitDOMHTMLTableElement.get_cell_padding: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_get_cell_padding(@self);
end;

function TWebKitDOMHTMLTableElement.get_cell_spacing: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_get_cell_spacing(@self);
end;

function TWebKitDOMHTMLTableElement.get_frame: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_get_frame(@self);
end;

function TWebKitDOMHTMLTableElement.get_rows: PWebKitDOMHTMLCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_get_rows(@self);
end;

function TWebKitDOMHTMLTableElement.get_rules: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_get_rules(@self);
end;

function TWebKitDOMHTMLTableElement.get_summary: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_get_summary(@self);
end;

function TWebKitDOMHTMLTableElement.get_t_bodies: PWebKitDOMHTMLCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_get_t_bodies(@self);
end;

function TWebKitDOMHTMLTableElement.get_t_foot: PWebKitDOMHTMLTableSectionElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_get_t_foot(@self);
end;

function TWebKitDOMHTMLTableElement.get_t_head: PWebKitDOMHTMLTableSectionElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_get_t_head(@self);
end;

function TWebKitDOMHTMLTableElement.get_width: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_get_width(@self);
end;

function TWebKitDOMHTMLTableElement.insert_row(index: glong; error: PPGError): PWebKitDOMHTMLElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_element_insert_row(@self, index, error);
end;

procedure TWebKitDOMHTMLTableElement.set_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_element_set_align(@self, value);
end;

procedure TWebKitDOMHTMLTableElement.set_bg_color(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_element_set_bg_color(@self, value);
end;

procedure TWebKitDOMHTMLTableElement.set_border(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_element_set_border(@self, value);
end;

procedure TWebKitDOMHTMLTableElement.set_caption(value: PWebKitDOMHTMLTableCaptionElement; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_element_set_caption(@self, value, error);
end;

procedure TWebKitDOMHTMLTableElement.set_cell_padding(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_element_set_cell_padding(@self, value);
end;

procedure TWebKitDOMHTMLTableElement.set_cell_spacing(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_element_set_cell_spacing(@self, value);
end;

procedure TWebKitDOMHTMLTableElement.set_frame(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_element_set_frame(@self, value);
end;

procedure TWebKitDOMHTMLTableElement.set_rules(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_element_set_rules(@self, value);
end;

procedure TWebKitDOMHTMLTableElement.set_summary(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_element_set_summary(@self, value);
end;

procedure TWebKitDOMHTMLTableElement.set_t_foot(value: PWebKitDOMHTMLTableSectionElement; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_element_set_t_foot(@self, value, error);
end;

procedure TWebKitDOMHTMLTableElement.set_t_head(value: PWebKitDOMHTMLTableSectionElement; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_element_set_t_head(@self, value, error);
end;

procedure TWebKitDOMHTMLTableElement.set_width(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_element_set_width(@self, value);
end;

procedure TWebKitDOMHTMLTableSectionElement.delete_row(index: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_section_element_delete_row(@self, index, error);
end;

function TWebKitDOMHTMLTableSectionElement.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_section_element_get_align(@self);
end;

function TWebKitDOMHTMLTableSectionElement.get_ch: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_section_element_get_ch(@self);
end;

function TWebKitDOMHTMLTableSectionElement.get_ch_off: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_section_element_get_ch_off(@self);
end;

function TWebKitDOMHTMLTableSectionElement.get_rows: PWebKitDOMHTMLCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_section_element_get_rows(@self);
end;

function TWebKitDOMHTMLTableSectionElement.get_v_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_section_element_get_v_align(@self);
end;

function TWebKitDOMHTMLTableSectionElement.insert_row(index: glong; error: PPGError): PWebKitDOMHTMLElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_section_element_insert_row(@self, index, error);
end;

procedure TWebKitDOMHTMLTableSectionElement.set_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_section_element_set_align(@self, value);
end;

procedure TWebKitDOMHTMLTableSectionElement.set_ch(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_section_element_set_ch(@self, value);
end;

procedure TWebKitDOMHTMLTableSectionElement.set_ch_off(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_section_element_set_ch_off(@self, value);
end;

procedure TWebKitDOMHTMLTableSectionElement.set_v_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_section_element_set_v_align(@self, value);
end;

procedure TWebKitDOMHTMLTableRowElement.delete_cell(index: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_row_element_delete_cell(@self, index, error);
end;

function TWebKitDOMHTMLTableRowElement.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_row_element_get_align(@self);
end;

function TWebKitDOMHTMLTableRowElement.get_bg_color: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_row_element_get_bg_color(@self);
end;

function TWebKitDOMHTMLTableRowElement.get_cells: PWebKitDOMHTMLCollection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_row_element_get_cells(@self);
end;

function TWebKitDOMHTMLTableRowElement.get_ch: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_row_element_get_ch(@self);
end;

function TWebKitDOMHTMLTableRowElement.get_ch_off: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_row_element_get_ch_off(@self);
end;

function TWebKitDOMHTMLTableRowElement.get_row_index: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_row_element_get_row_index(@self);
end;

function TWebKitDOMHTMLTableRowElement.get_section_row_index: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_row_element_get_section_row_index(@self);
end;

function TWebKitDOMHTMLTableRowElement.get_v_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_row_element_get_v_align(@self);
end;

function TWebKitDOMHTMLTableRowElement.insert_cell(index: glong; error: PPGError): PWebKitDOMHTMLElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_table_row_element_insert_cell(@self, index, error);
end;

procedure TWebKitDOMHTMLTableRowElement.set_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_row_element_set_align(@self, value);
end;

procedure TWebKitDOMHTMLTableRowElement.set_bg_color(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_row_element_set_bg_color(@self, value);
end;

procedure TWebKitDOMHTMLTableRowElement.set_ch(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_row_element_set_ch(@self, value);
end;

procedure TWebKitDOMHTMLTableRowElement.set_ch_off(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_row_element_set_ch_off(@self, value);
end;

procedure TWebKitDOMHTMLTableRowElement.set_v_align(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_table_row_element_set_v_align(@self, value);
end;

function TWebKitDOMHTMLTextAreaElement.check_validity: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_check_validity(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_autofocus: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_autofocus(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_cols: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_cols(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_default_value: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_default_value(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_dir_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_dir_name(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_disabled: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_disabled(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_form: PWebKitDOMHTMLFormElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_form(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_labels: PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_labels(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_max_length: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_max_length(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_name(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_placeholder: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_placeholder(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_read_only: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_read_only(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_required: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_required(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_rows: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_rows(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_selection_direction: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_selection_direction(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_selection_end: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_selection_end(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_selection_start: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_selection_start(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_text_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_text_length(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_validation_message: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_validation_message(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_validity: PWebKitDOMValidityState; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_validity(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_value: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_value(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_will_validate: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_will_validate(@self);
end;

function TWebKitDOMHTMLTextAreaElement.get_wrap: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_get_wrap(@self);
end;

function TWebKitDOMHTMLTextAreaElement.is_edited: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_text_area_element_is_edited(@self);
end;

procedure TWebKitDOMHTMLTextAreaElement.select; cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_select(@self);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_autofocus(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_autofocus(@self, value);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_cols(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_cols(@self, value);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_custom_validity(error: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_custom_validity(@self, error);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_default_value(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_default_value(@self, value);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_dir_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_dir_name(@self, value);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_disabled(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_disabled(@self, value);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_max_length(value: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_max_length(@self, value, error);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_name(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_name(@self, value);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_placeholder(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_placeholder(@self, value);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_range_text(replacement: Pgchar; start: gulong; end_: gulong; selectionMode: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_range_text(@self, replacement, start, end_, selectionMode, error);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_read_only(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_read_only(@self, value);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_required(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_required(@self, value);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_rows(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_rows(@self, value);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_selection_direction(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_selection_direction(@self, value);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_selection_end(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_selection_end(@self, value);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_selection_range(start: glong; end_: glong; direction: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_selection_range(@self, start, end_, direction);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_selection_start(value: glong); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_selection_start(@self, value);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_value(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_value(@self, value);
end;

procedure TWebKitDOMHTMLTextAreaElement.set_wrap(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_text_area_element_set_wrap(@self, value);
end;

function TWebKitDOMHTMLTitleElement.get_text: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_title_element_get_text(@self);
end;

procedure TWebKitDOMHTMLTitleElement.set_text(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_title_element_set_text(@self, value);
end;

function TWebKitDOMHTMLUListElement.get_compact: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_htmlu_list_element_get_compact(@self);
end;

procedure TWebKitDOMHTMLUListElement.set_compact(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_htmlu_list_element_set_compact(@self, value);
end;

function TWebKitDOMHTMLVideoElement.get_height: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_video_element_get_height(@self);
end;

function TWebKitDOMHTMLVideoElement.get_poster: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_video_element_get_poster(@self);
end;

function TWebKitDOMHTMLVideoElement.get_video_height: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_video_element_get_video_height(@self);
end;

function TWebKitDOMHTMLVideoElement.get_video_width: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_video_element_get_video_width(@self);
end;

function TWebKitDOMHTMLVideoElement.get_webkit_decoded_frame_count: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_video_element_get_webkit_decoded_frame_count(@self);
end;

function TWebKitDOMHTMLVideoElement.get_webkit_displaying_fullscreen: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_video_element_get_webkit_displaying_fullscreen(@self);
end;

function TWebKitDOMHTMLVideoElement.get_webkit_dropped_frame_count: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_video_element_get_webkit_dropped_frame_count(@self);
end;

function TWebKitDOMHTMLVideoElement.get_webkit_supports_fullscreen: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_video_element_get_webkit_supports_fullscreen(@self);
end;

function TWebKitDOMHTMLVideoElement.get_width: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_html_video_element_get_width(@self);
end;

procedure TWebKitDOMHTMLVideoElement.set_height(value: gulong); cdecl;
begin
  LazWebKit3.webkit_dom_html_video_element_set_height(@self, value);
end;

procedure TWebKitDOMHTMLVideoElement.set_poster(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_html_video_element_set_poster(@self, value);
end;

procedure TWebKitDOMHTMLVideoElement.set_width(value: gulong); cdecl;
begin
  LazWebKit3.webkit_dom_html_video_element_set_width(@self, value);
end;

procedure TWebKitDOMHTMLVideoElement.webkit_enter_full_screen(error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_video_element_webkit_enter_full_screen(@self, error);
end;

procedure TWebKitDOMHTMLVideoElement.webkit_enter_fullscreen(error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_html_video_element_webkit_enter_fullscreen(@self, error);
end;

procedure TWebKitDOMHTMLVideoElement.webkit_exit_full_screen; cdecl;
begin
  LazWebKit3.webkit_dom_html_video_element_webkit_exit_full_screen(@self);
end;

procedure TWebKitDOMHTMLVideoElement.webkit_exit_fullscreen; cdecl;
begin
  LazWebKit3.webkit_dom_html_video_element_webkit_exit_fullscreen(@self);
end;

function TWebKitDOMLocation.get_ancestor_origins: PWebKitDOMDOMStringList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_location_get_ancestor_origins(@self);
end;

function TWebKitDOMLocation.get_origin: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_location_get_origin(@self);
end;

procedure TWebKitDOMMediaList.append_medium(newMedium: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_media_list_append_medium(@self, newMedium, error);
end;

procedure TWebKitDOMMediaList.delete_medium(oldMedium: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_media_list_delete_medium(@self, oldMedium, error);
end;

function TWebKitDOMMediaList.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_media_list_get_length(@self);
end;

function TWebKitDOMMediaList.get_media_text: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_media_list_get_media_text(@self);
end;

function TWebKitDOMMediaList.item(index: gulong): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_media_list_item(@self, index);
end;

procedure TWebKitDOMMediaList.set_media_text(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_media_list_set_media_text(@self, value, error);
end;

function TWebKitDOMUIEvent.get_char_code: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_ui_event_get_char_code(@self);
end;

function TWebKitDOMUIEvent.get_detail: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_ui_event_get_detail(@self);
end;

function TWebKitDOMUIEvent.get_key_code: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_ui_event_get_key_code(@self);
end;

function TWebKitDOMUIEvent.get_layer_x: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_ui_event_get_layer_x(@self);
end;

function TWebKitDOMUIEvent.get_layer_y: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_ui_event_get_layer_y(@self);
end;

function TWebKitDOMUIEvent.get_page_x: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_ui_event_get_page_x(@self);
end;

function TWebKitDOMUIEvent.get_page_y: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_ui_event_get_page_y(@self);
end;

function TWebKitDOMUIEvent.get_view: PWebKitDOMDOMWindow; cdecl;
begin
  Result := LazWebKit3.webkit_dom_ui_event_get_view(@self);
end;

function TWebKitDOMUIEvent.get_which: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_ui_event_get_which(@self);
end;

procedure TWebKitDOMUIEvent.init_ui_event(type_: Pgchar; canBubble: gboolean; cancelable: gboolean; view: PWebKitDOMDOMWindow; detail: glong); cdecl;
begin
  LazWebKit3.webkit_dom_ui_event_init_ui_event(@self, type_, canBubble, cancelable, view, detail);
end;

function TWebKitDOMMouseEvent.get_alt_key: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_alt_key(@self);
end;

function TWebKitDOMMouseEvent.get_button: gushort; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_button(@self);
end;

function TWebKitDOMMouseEvent.get_client_x: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_client_x(@self);
end;

function TWebKitDOMMouseEvent.get_client_y: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_client_y(@self);
end;

function TWebKitDOMMouseEvent.get_ctrl_key: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_ctrl_key(@self);
end;

function TWebKitDOMMouseEvent.get_from_element: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_from_element(@self);
end;

function TWebKitDOMMouseEvent.get_meta_key: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_meta_key(@self);
end;

function TWebKitDOMMouseEvent.get_offset_x: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_offset_x(@self);
end;

function TWebKitDOMMouseEvent.get_offset_y: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_offset_y(@self);
end;

function TWebKitDOMMouseEvent.get_related_target: PWebKitDOMEventTarget; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_related_target(@self);
end;

function TWebKitDOMMouseEvent.get_screen_x: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_screen_x(@self);
end;

function TWebKitDOMMouseEvent.get_screen_y: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_screen_y(@self);
end;

function TWebKitDOMMouseEvent.get_shift_key: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_shift_key(@self);
end;

function TWebKitDOMMouseEvent.get_to_element: PWebKitDOMNode; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_to_element(@self);
end;

function TWebKitDOMMouseEvent.get_webkit_movement_x: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_webkit_movement_x(@self);
end;

function TWebKitDOMMouseEvent.get_webkit_movement_y: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_webkit_movement_y(@self);
end;

function TWebKitDOMMouseEvent.get_x: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_x(@self);
end;

function TWebKitDOMMouseEvent.get_y: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_mouse_event_get_y(@self);
end;

procedure TWebKitDOMMouseEvent.init_mouse_event(type_: Pgchar; canBubble: gboolean; cancelable: gboolean; view: PWebKitDOMDOMWindow; detail: glong; screenX: glong; screenY: glong; clientX: glong; clientY: glong; ctrlKey: gboolean; altKey: gboolean; shiftKey: gboolean; metaKey: gboolean; button: gushort; relatedTarget: PWebKitDOMEventTarget); cdecl;
begin
  LazWebKit3.webkit_dom_mouse_event_init_mouse_event(@self, type_, canBubble, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, relatedTarget);
end;

function TWebKitDOMPerformanceNavigation.get_redirect_count: gushort; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_navigation_get_redirect_count(@self);
end;

function TWebKitDOMPerformanceTiming.get_connect_end: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_connect_end(@self);
end;

function TWebKitDOMPerformanceTiming.get_connect_start: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_connect_start(@self);
end;

function TWebKitDOMPerformanceTiming.get_dom_complete: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_dom_complete(@self);
end;

function TWebKitDOMPerformanceTiming.get_dom_content_loaded_event_end: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_dom_content_loaded_event_end(@self);
end;

function TWebKitDOMPerformanceTiming.get_dom_content_loaded_event_start: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_dom_content_loaded_event_start(@self);
end;

function TWebKitDOMPerformanceTiming.get_dom_interactive: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_dom_interactive(@self);
end;

function TWebKitDOMPerformanceTiming.get_dom_loading: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_dom_loading(@self);
end;

function TWebKitDOMPerformanceTiming.get_domain_lookup_end: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_domain_lookup_end(@self);
end;

function TWebKitDOMPerformanceTiming.get_domain_lookup_start: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_domain_lookup_start(@self);
end;

function TWebKitDOMPerformanceTiming.get_fetch_start: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_fetch_start(@self);
end;

function TWebKitDOMPerformanceTiming.get_load_event_end: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_load_event_end(@self);
end;

function TWebKitDOMPerformanceTiming.get_load_event_start: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_load_event_start(@self);
end;

function TWebKitDOMPerformanceTiming.get_navigation_start: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_navigation_start(@self);
end;

function TWebKitDOMPerformanceTiming.get_redirect_end: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_redirect_end(@self);
end;

function TWebKitDOMPerformanceTiming.get_redirect_start: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_redirect_start(@self);
end;

function TWebKitDOMPerformanceTiming.get_request_start: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_request_start(@self);
end;

function TWebKitDOMPerformanceTiming.get_response_end: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_response_end(@self);
end;

function TWebKitDOMPerformanceTiming.get_response_start: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_response_start(@self);
end;

function TWebKitDOMPerformanceTiming.get_secure_connection_start: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_secure_connection_start(@self);
end;

function TWebKitDOMPerformanceTiming.get_unload_event_end: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_unload_event_end(@self);
end;

function TWebKitDOMPerformanceTiming.get_unload_event_start: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_timing_get_unload_event_start(@self);
end;

function TWebKitDOMPerformanceEntry.get_duration: gdouble; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_entry_get_duration(@self);
end;

function TWebKitDOMPerformanceEntry.get_entry_type: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_entry_get_entry_type(@self);
end;

function TWebKitDOMPerformanceEntry.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_entry_get_name(@self);
end;

function TWebKitDOMPerformanceEntry.get_start_time: gdouble; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_entry_get_start_time(@self);
end;

function TWebKitDOMPerformanceEntryList.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_entry_list_get_length(@self);
end;

function TWebKitDOMPerformanceEntryList.item(index: gulong): PWebKitDOMPerformanceEntry; cdecl;
begin
  Result := LazWebKit3.webkit_dom_performance_entry_list_item(@self, index);
end;

function TWebKitDOMShadowRoot.element_from_point(x: glong; y: glong): PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_shadow_root_element_from_point(@self, x, y);
end;

function TWebKitDOMShadowRoot.get_active_element: PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_shadow_root_get_active_element(@self);
end;

function TWebKitDOMShadowRoot.get_apply_author_styles: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_shadow_root_get_apply_author_styles(@self);
end;

function TWebKitDOMShadowRoot.get_element_by_id(elementId: Pgchar): PWebKitDOMElement; cdecl;
begin
  Result := LazWebKit3.webkit_dom_shadow_root_get_element_by_id(@self, elementId);
end;

function TWebKitDOMShadowRoot.get_elements_by_class_name(className: Pgchar): PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_shadow_root_get_elements_by_class_name(@self, className);
end;

function TWebKitDOMShadowRoot.get_elements_by_tag_name(tagName: Pgchar): PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_shadow_root_get_elements_by_tag_name(@self, tagName);
end;

function TWebKitDOMShadowRoot.get_elements_by_tag_name_ns(namespaceURI: Pgchar; localName: Pgchar): PWebKitDOMNodeList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_shadow_root_get_elements_by_tag_name_ns(@self, namespaceURI, localName);
end;

function TWebKitDOMShadowRoot.get_inner_html: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_shadow_root_get_inner_html(@self);
end;

function TWebKitDOMShadowRoot.get_reset_style_inheritance: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_shadow_root_get_reset_style_inheritance(@self);
end;

function TWebKitDOMShadowRoot.get_selection: PWebKitDOMDOMSelection; cdecl;
begin
  Result := LazWebKit3.webkit_dom_shadow_root_get_selection(@self);
end;

procedure TWebKitDOMShadowRoot.set_apply_author_styles(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_shadow_root_set_apply_author_styles(@self, value);
end;

procedure TWebKitDOMShadowRoot.set_inner_html(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_shadow_root_set_inner_html(@self, value, error);
end;

procedure TWebKitDOMShadowRoot.set_reset_style_inheritance(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_shadow_root_set_reset_style_inheritance(@self, value);
end;

procedure TWebKitDOMTextTrack.add_cue(cue: PWebKitDOMTextTrackCue); cdecl;
begin
  LazWebKit3.webkit_dom_text_track_add_cue(@self, cue);
end;

function TWebKitDOMTextTrack.dispatch_event(evt: PWebKitDOMEvent; error: PPGError): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_dispatch_event(@self, evt, error);
end;

function TWebKitDOMTextTrack.get_active_cues: PWebKitDOMTextTrackCueList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_get_active_cues(@self);
end;

function TWebKitDOMTextTrack.get_cues: PWebKitDOMTextTrackCueList; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_get_cues(@self);
end;

function TWebKitDOMTextTrack.get_kind: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_get_kind(@self);
end;

function TWebKitDOMTextTrack.get_label: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_get_label(@self);
end;

function TWebKitDOMTextTrack.get_language: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_get_language(@self);
end;

function TWebKitDOMTextTrack.get_mode: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_get_mode(@self);
end;

procedure TWebKitDOMTextTrack.remove_cue(cue: PWebKitDOMTextTrackCue; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_text_track_remove_cue(@self, cue, error);
end;

procedure TWebKitDOMTextTrack.set_mode(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_text_track_set_mode(@self, value);
end;

function TWebKitDOMTextTrackCue.dispatch_event(evt: PWebKitDOMEvent; error: PPGError): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_cue_dispatch_event(@self, evt, error);
end;

function TWebKitDOMTextTrackCue.get_align: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_cue_get_align(@self);
end;

function TWebKitDOMTextTrackCue.get_cue_as_html: PWebKitDOMDocumentFragment; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_cue_get_cue_as_html(@self);
end;

function TWebKitDOMTextTrackCue.get_end_time: gdouble; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_cue_get_end_time(@self);
end;

function TWebKitDOMTextTrackCue.get_id: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_cue_get_id(@self);
end;

function TWebKitDOMTextTrackCue.get_line: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_cue_get_line(@self);
end;

function TWebKitDOMTextTrackCue.get_pause_on_exit: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_cue_get_pause_on_exit(@self);
end;

function TWebKitDOMTextTrackCue.get_position: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_cue_get_position(@self);
end;

function TWebKitDOMTextTrackCue.get_size: glong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_cue_get_size(@self);
end;

function TWebKitDOMTextTrackCue.get_snap_to_lines: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_cue_get_snap_to_lines(@self);
end;

function TWebKitDOMTextTrackCue.get_start_time: gdouble; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_cue_get_start_time(@self);
end;

function TWebKitDOMTextTrackCue.get_text: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_cue_get_text(@self);
end;

function TWebKitDOMTextTrackCue.get_track: PWebKitDOMTextTrack; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_cue_get_track(@self);
end;

function TWebKitDOMTextTrackCue.get_vertical: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_cue_get_vertical(@self);
end;

procedure TWebKitDOMTextTrackCue.set_align(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_text_track_cue_set_align(@self, value, error);
end;

procedure TWebKitDOMTextTrackCue.set_end_time(value: gdouble; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_text_track_cue_set_end_time(@self, value, error);
end;

procedure TWebKitDOMTextTrackCue.set_id(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_text_track_cue_set_id(@self, value);
end;

procedure TWebKitDOMTextTrackCue.set_line(value: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_text_track_cue_set_line(@self, value, error);
end;

procedure TWebKitDOMTextTrackCue.set_pause_on_exit(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_text_track_cue_set_pause_on_exit(@self, value);
end;

procedure TWebKitDOMTextTrackCue.set_position(value: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_text_track_cue_set_position(@self, value, error);
end;

procedure TWebKitDOMTextTrackCue.set_size(value: glong; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_text_track_cue_set_size(@self, value, error);
end;

procedure TWebKitDOMTextTrackCue.set_snap_to_lines(value: gboolean); cdecl;
begin
  LazWebKit3.webkit_dom_text_track_cue_set_snap_to_lines(@self, value);
end;

procedure TWebKitDOMTextTrackCue.set_start_time(value: gdouble; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_text_track_cue_set_start_time(@self, value, error);
end;

procedure TWebKitDOMTextTrackCue.set_text(value: Pgchar); cdecl;
begin
  LazWebKit3.webkit_dom_text_track_cue_set_text(@self, value);
end;

procedure TWebKitDOMTextTrackCue.set_vertical(value: Pgchar; error: PPGError); cdecl;
begin
  LazWebKit3.webkit_dom_text_track_cue_set_vertical(@self, value, error);
end;

function TWebKitDOMTextTrackCueList.get_cue_by_id(id: Pgchar): PWebKitDOMTextTrackCue; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_cue_list_get_cue_by_id(@self, id);
end;

function TWebKitDOMTextTrackCueList.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_cue_list_get_length(@self);
end;

function TWebKitDOMTextTrackCueList.item(index: gulong): PWebKitDOMTextTrackCue; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_cue_list_item(@self, index);
end;

function TWebKitDOMTextTrackList.dispatch_event(evt: PWebKitDOMEvent; error: PPGError): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_list_dispatch_event(@self, evt, error);
end;

function TWebKitDOMTextTrackList.get_length: gulong; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_list_get_length(@self);
end;

function TWebKitDOMTextTrackList.item(index: gulong): PWebKitDOMTextTrack; cdecl;
begin
  Result := LazWebKit3.webkit_dom_text_track_list_item(@self, index);
end;

function TWebKitDownload.new(request: PWebKitNetworkRequest): PWebKitDownload; cdecl;
begin
  Result := LazWebKit3.webkit_download_new(request);
end;

procedure TWebKitDownload.cancel; cdecl;
begin
  LazWebKit3.webkit_download_cancel(@self);
end;

function TWebKitDownload.get_current_size: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_download_get_current_size(@self);
end;

function TWebKitDownload.get_destination_uri: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_download_get_destination_uri(@self);
end;

function TWebKitDownload.get_elapsed_time: gdouble; cdecl;
begin
  Result := LazWebKit3.webkit_download_get_elapsed_time(@self);
end;

function TWebKitDownload.get_network_request: PWebKitNetworkRequest; cdecl;
begin
  Result := LazWebKit3.webkit_download_get_network_request(@self);
end;

function TWebKitDownload.get_network_response: PWebKitNetworkResponse; cdecl;
begin
  Result := LazWebKit3.webkit_download_get_network_response(@self);
end;

function TWebKitDownload.get_progress: gdouble; cdecl;
begin
  Result := LazWebKit3.webkit_download_get_progress(@self);
end;

function TWebKitDownload.get_status: TWebKitDownloadStatus; cdecl;
begin
  Result := LazWebKit3.webkit_download_get_status(@self);
end;

function TWebKitDownload.get_suggested_filename: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_download_get_suggested_filename(@self);
end;

function TWebKitDownload.get_total_size: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_download_get_total_size(@self);
end;

function TWebKitDownload.get_uri: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_download_get_uri(@self);
end;

procedure TWebKitDownload.set_destination_uri(destination_uri: Pgchar); cdecl;
begin
  LazWebKit3.webkit_download_set_destination_uri(@self, destination_uri);
end;

procedure TWebKitDownload.start; cdecl;
begin
  LazWebKit3.webkit_download_start(@self);
end;

function TWebKitNetworkRequest.new(uri: Pgchar): PWebKitNetworkRequest; cdecl;
begin
  Result := LazWebKit3.webkit_network_request_new(uri);
end;

function TWebKitNetworkRequest.get_message: PSoupMessage; cdecl;
begin
  Result := LazWebKit3.webkit_network_request_get_message(@self);
end;

function TWebKitNetworkRequest.get_uri: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_network_request_get_uri(@self);
end;

procedure TWebKitNetworkRequest.set_uri(uri: Pgchar); cdecl;
begin
  LazWebKit3.webkit_network_request_set_uri(@self, uri);
end;

function TWebKitNetworkResponse.new(uri: Pgchar): PWebKitNetworkResponse; cdecl;
begin
  Result := LazWebKit3.webkit_network_response_new(uri);
end;

function TWebKitNetworkResponse.get_message: PSoupMessage; cdecl;
begin
  Result := LazWebKit3.webkit_network_response_get_message(@self);
end;

function TWebKitNetworkResponse.get_suggested_filename: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_network_response_get_suggested_filename(@self);
end;

function TWebKitNetworkResponse.get_uri: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_network_response_get_uri(@self);
end;

procedure TWebKitNetworkResponse.set_uri(uri: Pgchar); cdecl;
begin
  LazWebKit3.webkit_network_response_set_uri(@self, uri);
end;

procedure TWebKitFaviconDatabase.clear; cdecl;
begin
  LazWebKit3.webkit_favicon_database_clear(@self);
end;

procedure TWebKitFaviconDatabase.get_favicon_pixbuf(page_uri: Pgchar; width: guint; height: guint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
begin
  LazWebKit3.webkit_favicon_database_get_favicon_pixbuf(@self, page_uri, width, height, cancellable, callback, user_data);
end;

function TWebKitFaviconDatabase.get_favicon_pixbuf_finish(result_: PGAsyncResult; error: PPGError): PGdkPixbuf; cdecl;
begin
  Result := LazWebKit3.webkit_favicon_database_get_favicon_pixbuf_finish(@self, result_, error);
end;

function TWebKitFaviconDatabase.get_favicon_uri(page_uri: Pgchar): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_favicon_database_get_favicon_uri(@self, page_uri);
end;

function TWebKitFaviconDatabase.get_path: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_favicon_database_get_path(@self);
end;

procedure TWebKitFaviconDatabase.set_path(path: Pgchar); cdecl;
begin
  LazWebKit3.webkit_favicon_database_set_path(@self, path);
end;

function TWebKitFaviconDatabase.try_get_favicon_pixbuf(page_uri: Pgchar; width: guint; height: guint): PGdkPixbuf; cdecl;
begin
  Result := LazWebKit3.webkit_favicon_database_try_get_favicon_pixbuf(@self, page_uri, width, height);
end;

function TWebKitFileChooserRequest.get_mime_types: PPgchar; cdecl;
begin
  Result := LazWebKit3.webkit_file_chooser_request_get_mime_types(@self);
end;

function TWebKitFileChooserRequest.get_mime_types_filter: PGtkFileFilter; cdecl;
begin
  Result := LazWebKit3.webkit_file_chooser_request_get_mime_types_filter(@self);
end;

function TWebKitFileChooserRequest.get_select_multiple: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_file_chooser_request_get_select_multiple(@self);
end;

function TWebKitFileChooserRequest.get_selected_files: PPgchar; cdecl;
begin
  Result := LazWebKit3.webkit_file_chooser_request_get_selected_files(@self);
end;

procedure TWebKitFileChooserRequest.select_files(files: PPgchar); cdecl;
begin
  LazWebKit3.webkit_file_chooser_request_select_files(@self, files);
end;

function TWebKitWebFrame.find_frame(name: Pgchar): PWebKitWebFrame; cdecl;
begin
  Result := LazWebKit3.webkit_web_frame_find_frame(@self, name);
end;

function TWebKitWebFrame.get_data_source: PWebKitWebDataSource; cdecl;
begin
  Result := LazWebKit3.webkit_web_frame_get_data_source(@self);
end;

function TWebKitWebFrame.get_dom_document: PWebKitDOMDocument; cdecl;
begin
  Result := LazWebKit3.webkit_web_frame_get_dom_document(@self);
end;

function TWebKitWebFrame.get_global_context: TJSGlobalContextRef; cdecl;
begin
  Result := LazWebKit3.webkit_web_frame_get_global_context(@self);
end;

function TWebKitWebFrame.get_horizontal_scrollbar_policy: TGtkPolicyType; cdecl;
begin
  Result := LazWebKit3.webkit_web_frame_get_horizontal_scrollbar_policy(@self);
end;

function TWebKitWebFrame.get_load_status: TWebKitLoadStatus; cdecl;
begin
  Result := LazWebKit3.webkit_web_frame_get_load_status(@self);
end;

function TWebKitWebFrame.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_frame_get_name(@self);
end;

function TWebKitWebFrame.get_network_response: PWebKitNetworkResponse; cdecl;
begin
  Result := LazWebKit3.webkit_web_frame_get_network_response(@self);
end;

function TWebKitWebFrame.get_parent: PWebKitWebFrame; cdecl;
begin
  Result := LazWebKit3.webkit_web_frame_get_parent(@self);
end;

function TWebKitWebFrame.get_provisional_data_source: PWebKitWebDataSource; cdecl;
begin
  Result := LazWebKit3.webkit_web_frame_get_provisional_data_source(@self);
end;

function TWebKitWebFrame.get_range_for_word_around_caret: PWebKitDOMRange; cdecl;
begin
  Result := LazWebKit3.webkit_web_frame_get_range_for_word_around_caret(@self);
end;

function TWebKitWebFrame.get_security_origin: PWebKitSecurityOrigin; cdecl;
begin
  Result := LazWebKit3.webkit_web_frame_get_security_origin(@self);
end;

function TWebKitWebFrame.get_title: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_frame_get_title(@self);
end;

function TWebKitWebFrame.get_uri: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_frame_get_uri(@self);
end;

function TWebKitWebFrame.get_vertical_scrollbar_policy: TGtkPolicyType; cdecl;
begin
  Result := LazWebKit3.webkit_web_frame_get_vertical_scrollbar_policy(@self);
end;

function TWebKitWebFrame.get_web_view: PWebKitWebView; cdecl;
begin
  Result := LazWebKit3.webkit_web_frame_get_web_view(@self);
end;

procedure TWebKitWebFrame.load_alternate_string(content: Pgchar; base_url: Pgchar; unreachable_url: Pgchar); cdecl;
begin
  LazWebKit3.webkit_web_frame_load_alternate_string(@self, content, base_url, unreachable_url);
end;

procedure TWebKitWebFrame.load_request(request: PWebKitNetworkRequest); cdecl;
begin
  LazWebKit3.webkit_web_frame_load_request(@self, request);
end;

procedure TWebKitWebFrame.load_string(content: Pgchar; mime_type: Pgchar; encoding: Pgchar; base_uri: Pgchar); cdecl;
begin
  LazWebKit3.webkit_web_frame_load_string(@self, content, mime_type, encoding, base_uri);
end;

procedure TWebKitWebFrame.load_uri(uri: Pgchar); cdecl;
begin
  LazWebKit3.webkit_web_frame_load_uri(@self, uri);
end;

procedure TWebKitWebFrame.print; cdecl;
begin
  LazWebKit3.webkit_web_frame_print(@self);
end;

function TWebKitWebFrame.print_full(operation: PGtkPrintOperation; action: TGtkPrintOperationAction; error: PPGError): TGtkPrintOperationResult; cdecl;
begin
  Result := LazWebKit3.webkit_web_frame_print_full(@self, operation, action, error);
end;

procedure TWebKitWebFrame.reload; cdecl;
begin
  LazWebKit3.webkit_web_frame_reload(@self);
end;

procedure TWebKitWebFrame.replace_selection(text: Pgchar); cdecl;
begin
  LazWebKit3.webkit_web_frame_replace_selection(@self, text);
end;

procedure TWebKitWebFrame.stop_loading; cdecl;
begin
  LazWebKit3.webkit_web_frame_stop_loading(@self);
end;

function TWebKitSecurityOrigin.get_all_web_databases: PGList; cdecl;
begin
  Result := LazWebKit3.webkit_security_origin_get_all_web_databases(@self);
end;

function TWebKitSecurityOrigin.get_host: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_security_origin_get_host(@self);
end;

function TWebKitSecurityOrigin.get_port: guint; cdecl;
begin
  Result := LazWebKit3.webkit_security_origin_get_port(@self);
end;

function TWebKitSecurityOrigin.get_protocol: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_security_origin_get_protocol(@self);
end;

function TWebKitSecurityOrigin.get_web_database_quota: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_security_origin_get_web_database_quota(@self);
end;

function TWebKitSecurityOrigin.get_web_database_usage: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_security_origin_get_web_database_usage(@self);
end;

procedure TWebKitSecurityOrigin.set_web_database_quota(quota: guint64); cdecl;
begin
  LazWebKit3.webkit_security_origin_set_web_database_quota(@self, quota);
end;

procedure TWebKitSpellChecker.check_spelling_of_string(string_: Pgchar; misspelling_location: Pgint; misspelling_length: Pgint); cdecl;
begin
  LazWebKit3.webkit_spell_checker_check_spelling_of_string(@self, string_, misspelling_location, misspelling_length);
end;

function TWebKitSpellChecker.get_autocorrect_suggestions_for_misspelled_word(word: Pgchar): Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_spell_checker_get_autocorrect_suggestions_for_misspelled_word(@self, word);
end;

function TWebKitSpellChecker.get_guesses_for_word(word: Pgchar; context: Pgchar): PPgchar; cdecl;
begin
  Result := LazWebKit3.webkit_spell_checker_get_guesses_for_word(@self, word, context);
end;

procedure TWebKitSpellChecker.ignore_word(word: Pgchar); cdecl;
begin
  LazWebKit3.webkit_spell_checker_ignore_word(@self, word);
end;

procedure TWebKitSpellChecker.learn_word(word: Pgchar); cdecl;
begin
  LazWebKit3.webkit_spell_checker_learn_word(@self, word);
end;

procedure TWebKitSpellChecker.update_spell_checking_languages(languages: Pgchar); cdecl;
begin
  LazWebKit3.webkit_spell_checker_update_spell_checking_languages(@self, languages);
end;

procedure TWebKitViewportAttributes.recompute; cdecl;
begin
  LazWebKit3.webkit_viewport_attributes_recompute(@self);
end;

procedure TWebKitWebBackForwardList.add_item(history_item: PWebKitWebHistoryItem); cdecl;
begin
  LazWebKit3.webkit_web_back_forward_list_add_item(@self, history_item);
end;

procedure TWebKitWebBackForwardList.clear; cdecl;
begin
  LazWebKit3.webkit_web_back_forward_list_clear(@self);
end;

function TWebKitWebBackForwardList.contains_item(history_item: PWebKitWebHistoryItem): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_back_forward_list_contains_item(@self, history_item);
end;

function TWebKitWebBackForwardList.get_back_item: PWebKitWebHistoryItem; cdecl;
begin
  Result := LazWebKit3.webkit_web_back_forward_list_get_back_item(@self);
end;

function TWebKitWebBackForwardList.get_back_length: gint; cdecl;
begin
  Result := LazWebKit3.webkit_web_back_forward_list_get_back_length(@self);
end;

function TWebKitWebBackForwardList.get_back_list_with_limit(limit: gint): PGList; cdecl;
begin
  Result := LazWebKit3.webkit_web_back_forward_list_get_back_list_with_limit(@self, limit);
end;

function TWebKitWebBackForwardList.get_current_item: PWebKitWebHistoryItem; cdecl;
begin
  Result := LazWebKit3.webkit_web_back_forward_list_get_current_item(@self);
end;

function TWebKitWebBackForwardList.get_forward_item: PWebKitWebHistoryItem; cdecl;
begin
  Result := LazWebKit3.webkit_web_back_forward_list_get_forward_item(@self);
end;

function TWebKitWebBackForwardList.get_forward_length: gint; cdecl;
begin
  Result := LazWebKit3.webkit_web_back_forward_list_get_forward_length(@self);
end;

function TWebKitWebBackForwardList.get_forward_list_with_limit(limit: gint): PGList; cdecl;
begin
  Result := LazWebKit3.webkit_web_back_forward_list_get_forward_list_with_limit(@self, limit);
end;

function TWebKitWebBackForwardList.get_limit: gint; cdecl;
begin
  Result := LazWebKit3.webkit_web_back_forward_list_get_limit(@self);
end;

function TWebKitWebBackForwardList.get_nth_item(index: gint): PWebKitWebHistoryItem; cdecl;
begin
  Result := LazWebKit3.webkit_web_back_forward_list_get_nth_item(@self, index);
end;

procedure TWebKitWebBackForwardList.go_back; cdecl;
begin
  LazWebKit3.webkit_web_back_forward_list_go_back(@self);
end;

procedure TWebKitWebBackForwardList.go_forward; cdecl;
begin
  LazWebKit3.webkit_web_back_forward_list_go_forward(@self);
end;

procedure TWebKitWebBackForwardList.go_to_item(history_item: PWebKitWebHistoryItem); cdecl;
begin
  LazWebKit3.webkit_web_back_forward_list_go_to_item(@self, history_item);
end;

procedure TWebKitWebBackForwardList.set_limit(limit: gint); cdecl;
begin
  LazWebKit3.webkit_web_back_forward_list_set_limit(@self, limit);
end;

function TWebKitWebView.new: PWebKitWebView; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_new();
end;

function TWebKitWebView.can_copy_clipboard: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_can_copy_clipboard(@self);
end;

function TWebKitWebView.can_cut_clipboard: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_can_cut_clipboard(@self);
end;

function TWebKitWebView.can_go_back: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_can_go_back(@self);
end;

function TWebKitWebView.can_go_back_or_forward(steps: gint): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_can_go_back_or_forward(@self, steps);
end;

function TWebKitWebView.can_go_forward: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_can_go_forward(@self);
end;

function TWebKitWebView.can_paste_clipboard: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_can_paste_clipboard(@self);
end;

function TWebKitWebView.can_redo: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_can_redo(@self);
end;

function TWebKitWebView.can_show_mime_type(mime_type: Pgchar): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_can_show_mime_type(@self, mime_type);
end;

function TWebKitWebView.can_undo: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_can_undo(@self);
end;

procedure TWebKitWebView.copy_clipboard; cdecl;
begin
  LazWebKit3.webkit_web_view_copy_clipboard(@self);
end;

procedure TWebKitWebView.cut_clipboard; cdecl;
begin
  LazWebKit3.webkit_web_view_cut_clipboard(@self);
end;

procedure TWebKitWebView.delete_selection; cdecl;
begin
  LazWebKit3.webkit_web_view_delete_selection(@self);
end;

procedure TWebKitWebView.execute_script(script: Pgchar); cdecl;
begin
  LazWebKit3.webkit_web_view_execute_script(@self, script);
end;

function TWebKitWebView.get_back_forward_list: PWebKitWebBackForwardList; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_back_forward_list(@self);
end;

function TWebKitWebView.get_copy_target_list: PGtkTargetList; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_copy_target_list(@self);
end;

function TWebKitWebView.get_custom_encoding: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_custom_encoding(@self);
end;

function TWebKitWebView.get_dom_document: PWebKitDOMDocument; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_dom_document(@self);
end;

function TWebKitWebView.get_editable: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_editable(@self);
end;

function TWebKitWebView.get_encoding: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_encoding(@self);
end;

function TWebKitWebView.get_focused_frame: PWebKitWebFrame; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_focused_frame(@self);
end;

function TWebKitWebView.get_full_content_zoom: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_full_content_zoom(@self);
end;

function TWebKitWebView.get_hit_test_result(event: PGdkEventButton): PWebKitHitTestResult; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_hit_test_result(@self, event);
end;

function TWebKitWebView.get_icon_uri: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_icon_uri(@self);
end;

function TWebKitWebView.get_inspector: PWebKitWebInspector; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_inspector(@self);
end;

function TWebKitWebView.get_load_status: TWebKitLoadStatus; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_load_status(@self);
end;

function TWebKitWebView.get_main_frame: PWebKitWebFrame; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_main_frame(@self);
end;

function TWebKitWebView.get_paste_target_list: PGtkTargetList; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_paste_target_list(@self);
end;

function TWebKitWebView.get_progress: gdouble; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_progress(@self);
end;

function TWebKitWebView.get_settings: PWebKitWebSettings; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_settings(@self);
end;

function TWebKitWebView.get_snapshot: Pcairo_surface_t; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_snapshot(@self);
end;

function TWebKitWebView.get_title: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_title(@self);
end;

function TWebKitWebView.get_transparent: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_transparent(@self);
end;

function TWebKitWebView.get_uri: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_uri(@self);
end;

function TWebKitWebView.get_view_mode: TWebKitWebViewViewMode; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_view_mode(@self);
end;

function TWebKitWebView.get_view_source_mode: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_view_source_mode(@self);
end;

function TWebKitWebView.get_viewport_attributes: PWebKitViewportAttributes; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_viewport_attributes(@self);
end;

function TWebKitWebView.get_window_features: PWebKitWebWindowFeatures; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_window_features(@self);
end;

function TWebKitWebView.get_zoom_level: gfloat; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_get_zoom_level(@self);
end;

procedure TWebKitWebView.go_back; cdecl;
begin
  LazWebKit3.webkit_web_view_go_back(@self);
end;

procedure TWebKitWebView.go_back_or_forward(steps: gint); cdecl;
begin
  LazWebKit3.webkit_web_view_go_back_or_forward(@self, steps);
end;

procedure TWebKitWebView.go_forward; cdecl;
begin
  LazWebKit3.webkit_web_view_go_forward(@self);
end;

function TWebKitWebView.go_to_back_forward_item(item: PWebKitWebHistoryItem): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_go_to_back_forward_item(@self, item);
end;

function TWebKitWebView.has_selection: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_has_selection(@self);
end;

procedure TWebKitWebView.load_request(request: PWebKitNetworkRequest); cdecl;
begin
  LazWebKit3.webkit_web_view_load_request(@self, request);
end;

procedure TWebKitWebView.load_string(content: Pgchar; mime_type: Pgchar; encoding: Pgchar; base_uri: Pgchar); cdecl;
begin
  LazWebKit3.webkit_web_view_load_string(@self, content, mime_type, encoding, base_uri);
end;

procedure TWebKitWebView.load_uri(uri: Pgchar); cdecl;
begin
  LazWebKit3.webkit_web_view_load_uri(@self, uri);
end;

function TWebKitWebView.mark_text_matches(string_: Pgchar; case_sensitive: gboolean; limit: guint): guint; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_mark_text_matches(@self, string_, case_sensitive, limit);
end;

procedure TWebKitWebView.move_cursor(step: TGtkMovementStep; count: gint); cdecl;
begin
  LazWebKit3.webkit_web_view_move_cursor(@self, step, count);
end;

procedure TWebKitWebView.paste_clipboard; cdecl;
begin
  LazWebKit3.webkit_web_view_paste_clipboard(@self);
end;

procedure TWebKitWebView.redo; cdecl;
begin
  LazWebKit3.webkit_web_view_redo(@self);
end;

procedure TWebKitWebView.reload; cdecl;
begin
  LazWebKit3.webkit_web_view_reload(@self);
end;

procedure TWebKitWebView.reload_bypass_cache; cdecl;
begin
  LazWebKit3.webkit_web_view_reload_bypass_cache(@self);
end;

function TWebKitWebView.search_text(text: Pgchar; case_sensitive: gboolean; forward: gboolean; wrap: gboolean): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_search_text(@self, text, case_sensitive, forward, wrap);
end;

procedure TWebKitWebView.select_all; cdecl;
begin
  LazWebKit3.webkit_web_view_select_all(@self);
end;

procedure TWebKitWebView.set_custom_encoding(encoding: Pgchar); cdecl;
begin
  LazWebKit3.webkit_web_view_set_custom_encoding(@self, encoding);
end;

procedure TWebKitWebView.set_editable(flag: gboolean); cdecl;
begin
  LazWebKit3.webkit_web_view_set_editable(@self, flag);
end;

procedure TWebKitWebView.set_full_content_zoom(full_content_zoom: gboolean); cdecl;
begin
  LazWebKit3.webkit_web_view_set_full_content_zoom(@self, full_content_zoom);
end;

procedure TWebKitWebView.set_highlight_text_matches(highlight: gboolean); cdecl;
begin
  LazWebKit3.webkit_web_view_set_highlight_text_matches(@self, highlight);
end;

procedure TWebKitWebView.set_maintains_back_forward_list(flag: gboolean); cdecl;
begin
  LazWebKit3.webkit_web_view_set_maintains_back_forward_list(@self, flag);
end;

procedure TWebKitWebView.set_settings(settings: PWebKitWebSettings); cdecl;
begin
  LazWebKit3.webkit_web_view_set_settings(@self, settings);
end;

procedure TWebKitWebView.set_transparent(flag: gboolean); cdecl;
begin
  LazWebKit3.webkit_web_view_set_transparent(@self, flag);
end;

procedure TWebKitWebView.set_view_mode(mode: TWebKitWebViewViewMode); cdecl;
begin
  LazWebKit3.webkit_web_view_set_view_mode(@self, mode);
end;

procedure TWebKitWebView.set_view_source_mode(view_source_mode: gboolean); cdecl;
begin
  LazWebKit3.webkit_web_view_set_view_source_mode(@self, view_source_mode);
end;

procedure TWebKitWebView.set_zoom_level(zoom_level: gfloat); cdecl;
begin
  LazWebKit3.webkit_web_view_set_zoom_level(@self, zoom_level);
end;

procedure TWebKitWebView.stop_loading; cdecl;
begin
  LazWebKit3.webkit_web_view_stop_loading(@self);
end;

function TWebKitWebView.try_get_favicon_pixbuf(width: guint; height: guint): PGdkPixbuf; cdecl;
begin
  Result := LazWebKit3.webkit_web_view_try_get_favicon_pixbuf(@self, width, height);
end;

procedure TWebKitWebView.undo; cdecl;
begin
  LazWebKit3.webkit_web_view_undo(@self);
end;

procedure TWebKitWebView.unmark_text_matches; cdecl;
begin
  LazWebKit3.webkit_web_view_unmark_text_matches(@self);
end;

procedure TWebKitWebView.zoom_in; cdecl;
begin
  LazWebKit3.webkit_web_view_zoom_in(@self);
end;

procedure TWebKitWebView.zoom_out; cdecl;
begin
  LazWebKit3.webkit_web_view_zoom_out(@self);
end;

function TWebKitWebHistoryItem.new: PWebKitWebHistoryItem; cdecl;
begin
  Result := LazWebKit3.webkit_web_history_item_new();
end;

function TWebKitWebHistoryItem.new_with_data(uri: Pgchar; title: Pgchar): PWebKitWebHistoryItem; cdecl;
begin
  Result := LazWebKit3.webkit_web_history_item_new_with_data(uri, title);
end;

function TWebKitWebHistoryItem.copy: PWebKitWebHistoryItem; cdecl;
begin
  Result := LazWebKit3.webkit_web_history_item_copy(@self);
end;

function TWebKitWebHistoryItem.get_alternate_title: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_history_item_get_alternate_title(@self);
end;

function TWebKitWebHistoryItem.get_last_visited_time: gdouble; cdecl;
begin
  Result := LazWebKit3.webkit_web_history_item_get_last_visited_time(@self);
end;

function TWebKitWebHistoryItem.get_original_uri: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_history_item_get_original_uri(@self);
end;

function TWebKitWebHistoryItem.get_title: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_history_item_get_title(@self);
end;

function TWebKitWebHistoryItem.get_uri: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_history_item_get_uri(@self);
end;

procedure TWebKitWebHistoryItem.set_alternate_title(title: Pgchar); cdecl;
begin
  LazWebKit3.webkit_web_history_item_set_alternate_title(@self, title);
end;

function TWebKitWebDataSource.new: PWebKitWebDataSource; cdecl;
begin
  Result := LazWebKit3.webkit_web_data_source_new();
end;

function TWebKitWebDataSource.new_with_request(request: PWebKitNetworkRequest): PWebKitWebDataSource; cdecl;
begin
  Result := LazWebKit3.webkit_web_data_source_new_with_request(request);
end;

function TWebKitWebDataSource.get_data: PGString; cdecl;
begin
  Result := LazWebKit3.webkit_web_data_source_get_data(@self);
end;

function TWebKitWebDataSource.get_encoding: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_data_source_get_encoding(@self);
end;

function TWebKitWebDataSource.get_initial_request: PWebKitNetworkRequest; cdecl;
begin
  Result := LazWebKit3.webkit_web_data_source_get_initial_request(@self);
end;

function TWebKitWebDataSource.get_main_resource: PWebKitWebResource; cdecl;
begin
  Result := LazWebKit3.webkit_web_data_source_get_main_resource(@self);
end;

function TWebKitWebDataSource.get_request: PWebKitNetworkRequest; cdecl;
begin
  Result := LazWebKit3.webkit_web_data_source_get_request(@self);
end;

function TWebKitWebDataSource.get_subresources: PGList; cdecl;
begin
  Result := LazWebKit3.webkit_web_data_source_get_subresources(@self);
end;

function TWebKitWebDataSource.get_unreachable_uri: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_data_source_get_unreachable_uri(@self);
end;

function TWebKitWebDataSource.get_web_frame: PWebKitWebFrame; cdecl;
begin
  Result := LazWebKit3.webkit_web_data_source_get_web_frame(@self);
end;

function TWebKitWebDataSource.is_loading: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_data_source_is_loading(@self);
end;

function TWebKitWebResource.new(data: Pgchar; size: gssize; uri: Pgchar; mime_type: Pgchar; encoding: Pgchar; frame_name: Pgchar): PWebKitWebResource; cdecl;
begin
  Result := LazWebKit3.webkit_web_resource_new(data, size, uri, mime_type, encoding, frame_name);
end;

function TWebKitWebResource.get_data: PGString; cdecl;
begin
  Result := LazWebKit3.webkit_web_resource_get_data(@self);
end;

function TWebKitWebResource.get_encoding: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_resource_get_encoding(@self);
end;

function TWebKitWebResource.get_frame_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_resource_get_frame_name(@self);
end;

function TWebKitWebResource.get_mime_type: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_resource_get_mime_type(@self);
end;

function TWebKitWebResource.get_uri: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_resource_get_uri(@self);
end;

function TWebKitWebDatabase.get_display_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_database_get_display_name(@self);
end;

function TWebKitWebDatabase.get_expected_size: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_web_database_get_expected_size(@self);
end;

function TWebKitWebDatabase.get_filename: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_database_get_filename(@self);
end;

function TWebKitWebDatabase.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_database_get_name(@self);
end;

function TWebKitWebDatabase.get_security_origin: PWebKitSecurityOrigin; cdecl;
begin
  Result := LazWebKit3.webkit_web_database_get_security_origin(@self);
end;

function TWebKitWebDatabase.get_size: guint64; cdecl;
begin
  Result := LazWebKit3.webkit_web_database_get_size(@self);
end;

procedure TWebKitWebDatabase.remove; cdecl;
begin
  LazWebKit3.webkit_web_database_remove(@self);
end;

procedure TWebKitWebInspector.close; cdecl;
begin
  LazWebKit3.webkit_web_inspector_close(@self);
end;

function TWebKitWebInspector.get_inspected_uri: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_inspector_get_inspected_uri(@self);
end;

function TWebKitWebInspector.get_web_view: PWebKitWebView; cdecl;
begin
  Result := LazWebKit3.webkit_web_inspector_get_web_view(@self);
end;

procedure TWebKitWebInspector.inspect_coordinates(x: gdouble; y: gdouble); cdecl;
begin
  LazWebKit3.webkit_web_inspector_inspect_coordinates(@self, x, y);
end;

procedure TWebKitWebInspector.inspect_node(node: PWebKitDOMNode); cdecl;
begin
  LazWebKit3.webkit_web_inspector_inspect_node(@self, node);
end;

procedure TWebKitWebInspector.show; cdecl;
begin
  LazWebKit3.webkit_web_inspector_show(@self);
end;

function TWebKitWebNavigationAction.get_button: gint; cdecl;
begin
  Result := LazWebKit3.webkit_web_navigation_action_get_button(@self);
end;

function TWebKitWebNavigationAction.get_modifier_state: gint; cdecl;
begin
  Result := LazWebKit3.webkit_web_navigation_action_get_modifier_state(@self);
end;

function TWebKitWebNavigationAction.get_original_uri: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_navigation_action_get_original_uri(@self);
end;

function TWebKitWebNavigationAction.get_reason: TWebKitWebNavigationReason; cdecl;
begin
  Result := LazWebKit3.webkit_web_navigation_action_get_reason(@self);
end;

function TWebKitWebNavigationAction.get_target_frame: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_navigation_action_get_target_frame(@self);
end;

procedure TWebKitWebNavigationAction.set_original_uri(originalUri: Pgchar); cdecl;
begin
  LazWebKit3.webkit_web_navigation_action_set_original_uri(@self, originalUri);
end;

procedure TWebKitWebNavigationAction.set_reason(reason: TWebKitWebNavigationReason); cdecl;
begin
  LazWebKit3.webkit_web_navigation_action_set_reason(@self, reason);
end;

function TWebKitWebPlugin.get_description: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_plugin_get_description(@self);
end;

function TWebKitWebPlugin.get_enabled: gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_plugin_get_enabled(@self);
end;

function TWebKitWebPlugin.get_mimetypes: PGSList; cdecl;
begin
  Result := LazWebKit3.webkit_web_plugin_get_mimetypes(@self);
end;

function TWebKitWebPlugin.get_name: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_plugin_get_name(@self);
end;

function TWebKitWebPlugin.get_path: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_plugin_get_path(@self);
end;

procedure TWebKitWebPlugin.set_enabled(enabled: gboolean); cdecl;
begin
  LazWebKit3.webkit_web_plugin_set_enabled(@self, enabled);
end;

procedure TWebKitWebPluginDatabase.plugins_list_free(list: PGSList); cdecl;
begin
  LazWebKit3.webkit_web_plugin_database_plugins_list_free(list);
end;

function TWebKitWebPluginDatabase.get_plugin_for_mimetype(mime_type: Pgchar): PWebKitWebPlugin; cdecl;
begin
  Result := LazWebKit3.webkit_web_plugin_database_get_plugin_for_mimetype(@self, mime_type);
end;

function TWebKitWebPluginDatabase.get_plugins: PGSList; cdecl;
begin
  Result := LazWebKit3.webkit_web_plugin_database_get_plugins(@self);
end;

procedure TWebKitWebPluginDatabase.refresh; cdecl;
begin
  LazWebKit3.webkit_web_plugin_database_refresh(@self);
end;

procedure TWebKitWebPolicyDecision.download; cdecl;
begin
  LazWebKit3.webkit_web_policy_decision_download(@self);
end;

procedure TWebKitWebPolicyDecision.ignore; cdecl;
begin
  LazWebKit3.webkit_web_policy_decision_ignore(@self);
end;

procedure TWebKitWebPolicyDecision.use; cdecl;
begin
  LazWebKit3.webkit_web_policy_decision_use(@self);
end;

function TWebKitWebSettings.new: PWebKitWebSettings; cdecl;
begin
  Result := LazWebKit3.webkit_web_settings_new();
end;

function TWebKitWebSettings.copy: PWebKitWebSettings; cdecl;
begin
  Result := LazWebKit3.webkit_web_settings_copy(@self);
end;

function TWebKitWebSettings.get_user_agent: Pgchar; cdecl;
begin
  Result := LazWebKit3.webkit_web_settings_get_user_agent(@self);
end;

function TWebKitWebWindowFeatures.new: PWebKitWebWindowFeatures; cdecl;
begin
  Result := LazWebKit3.webkit_web_window_features_new();
end;

function TWebKitWebWindowFeatures.equal(features2: PWebKitWebWindowFeatures): gboolean; cdecl;
begin
  Result := LazWebKit3.webkit_web_window_features_equal(@self, features2);
end;

end.