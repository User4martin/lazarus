<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
  ====================================================================
    InterfaceBase
  ====================================================================
-->
    <module name="InterfaceBase">
      <short>Provides an platform independent widgetset and helper functions.
      </short>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
      </element>
      <element name="SysUtils">
        <short/>
      </element>
      <element name="Math">
        <short/>
      </element>
      <element name="LCLStrConsts">
        <short/>
      </element>
      <element name="LCLType">
        <short/>
      </element>
      <element name="LCLProc">
        <short/>
      </element>
      <element name="LMessages">
        <short/>
      </element>
      <element name="GraphType">
        <short/>
      </element>
      <element name="GraphMath">
        <short/>
      </element>
<!-- "type" alias type Visibility: default -->
      <element name="PEventHandler">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- "type" alias type Visibility: default -->
      <element name="PProcessEventHandler">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- "type" alias type Visibility: default -->
      <element name="PPipeEventHandler">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- "type" alias type Visibility: default -->
      <element name="PSocketEventHandler">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TChildExitReason">
        <short>Reasons for child process exit.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TChildExitReason.cerExit">
        <short>Normal exit</short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TChildExitReason.cerSignal">
        <short>Killed</short>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TPipeReason">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TPipeReason.prDataAvailable">
        <short/>
      </element>
      <element name="TPipeReason.prBroken">
        <short/>
      </element>
      <element name="TPipeReason.prCanWrite">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TPipeReasons" link="TPipeReason"/>
      <!-- procedure type Visibility: default -->
      <element name="TApplicationMainLoop">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TWaitHandleEvent">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TWaitHandleEvent.AData">
        <short/>
      </element>
      <element name="TWaitHandleEvent.AFlags">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TChildExitEvent">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TChildExitEvent.AData">
        <short/>
      </element>
      <element name="TChildExitEvent.AReason">
        <short/>
      </element>
      <element name="TChildExitEvent.AInfo">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TPipeEvent">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TPipeEvent.AData">
        <short/>
      </element>
      <element name="TPipeEvent.AReasons">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TSocketEvent">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TSocketEvent.AData">
        <short/>
      </element>
      <element name="TSocketEvent.AFlags">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TLCLWndMethod">
        <short>The type of all LCL message handlers.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TLCLWndMethod.TheMessage">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TLCLPlatform">
        <short>The supported platforms.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TLCLPlatform.lpGtk">
        <short/>
      </element>
      <element name="TLCLPlatform.lpGtk2">
        <short/>
      </element>
      <element name="TLCLPlatform.lpWin32">
        <short/>
      </element>
      <element name="TLCLPlatform.lpWinCE">
        <short/>
      </element>
      <element name="TLCLPlatform.lpCarbon">
        <short/>
      </element>
      <element name="TLCLPlatform.lpQT">
        <short/>
      </element>
      <element name="TLCLPlatform.lpfpGUI">
        <short/>
      </element>
      <element name="TLCLPlatform.lpNoGUI">
        <short/>
      </element>
      <element name="TLCLPlatform.lpCocoa">
        <short/>
      </element>
      <element name="TLCLPlatform.lpCustomDrawn">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TLCLPlatforms" link="TLCLPlatform"/>
      <!-- enumeration type Visibility: default -->
      <element name="TLCLCapability">
        <short>Capabilities of the (current) platform.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TLCLCapability.lcAsyncProcess">
        <short>Supports async process.</short>
      </element>
      <element name="TLCLCapability.lcCanDrawOutsideOnPaint">
        <short>Supports drawing outside OnPaint event of an control.</short>
      </element>
      <element name="TLCLCapability.lcNeedMininimizeAppWithMainForm">
        <short>When main form is minimized, then minimize also app.
        </short>
      <notes><note>all forms?</note>
        </notes>
      </element>
      <element name="TLCLCapability.lcApplicationTitle">
        <short>Can change application title at runtime.</short>
      </element>
      <element name="TLCLCapability.lcApplicationWindow">
        <short>Application has a special root window.</short>
      </element>
      <element name="TLCLCapability.lcFormIcon">
        <short>Forms have icon.</short>
      </element>
      <element name="TLCLCapability.lcModalWindow">
        <short>Native modal window support.</short>
      </element>
      <element name="TLCLCapability.lcDragDockStartOnTitleClick">
        <short>Can drag-dock forms from the title bar.</short>
      </element>
      <element name="TLCLCapability.lcAntialiasingEnabledByDefault">
        <short>Is amDontCare = amOn for the widgetset.
        </short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TLCLCapability.lcLMHelpSupport">
        <short>Support for LM_HELP command.</short>
      </element>
      <element name="TLCLCapability.lcReceivesLMClearCutCopyPasteReliably">
        <short>In Carbon we do not receive LM_CLEAR, CUT, COPY, PASTE etc. reliably,
          and this affects DB controls.
        </short>
      </element>
<!-- class Visibility: default -->
      <element name="TDialogButton">
        <short>Description of standard dialog buttons.
        </short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDialogButton.FCaption" link="TDialogButton.Caption"/>
      <element name="TDialogButton.FModalResult" link="TDialogButton.ModalResult"/>
      <!-- function Visibility: private -->
      <element name="TDialogButton.GetCancel" link="TDialogButton.Cancel"/>
      <element name="TDialogButton.GetCancel.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDialogButton.GetDefault" link="TDialogButton.Default"/>
      <element name="TDialogButton.GetDefault.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDialogButton.SetCancel" link="TDialogButton.Cancel"/>
      <element name="TDialogButton.SetCancel.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDialogButton.SetDefault" link="TDialogButton.Default"/>
      <element name="TDialogButton.SetDefault.AValue">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TDialogButton.GetDisplayName">
        <short>Here: returns Caption.
        </short>
      </element>
      <element name="TDialogButton.GetDisplayName.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDialogButton.SetCaption" link="TDialogButton.Caption"/>
      <element name="TDialogButton.SetCaption.AValue">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDialogButton.Create"/>
      <element name="TDialogButton.Create.ACollection">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDialogButton.Caption">
        <short>The button title.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TDialogButton.Cancel">
        <short>True for Cancel button(s) only.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TDialogButton.Default">
        <short>True for Default button(s) only.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TDialogButton.ModalResult">
        <short>The modal result, returned when the button is clicked.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
<!-- class Visibility: default -->
      <element name="TDialogButtons">
        <short>Collection of TDialogButton descriptions.
        </short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TDialogButtons.FCancelButton" link="TDialogButtons.CancelButton"/>
      <element name="TDialogButtons.FDefaultButton" link="TDialogButtons.DefaultButton"/>
      <!-- function Visibility: protected -->
      <element name="TDialogButtons.GetItem" link="TDialogButtons.Items"/>
      <element name="TDialogButtons.GetItem.Result">
        <short/>
      </element>
      <element name="TDialogButtons.GetItem.Index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDialogButtons.SetCancelButton" link="TDialogButtons.CancelButton"/>
      <element name="TDialogButtons.SetCancelButton.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDialogButtons.SetDefaultButton" link="TDialogButtons.DefaultButton"/>
      <element name="TDialogButtons.SetDefaultButton.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDialogButtons.SetItem" link="TDialogButtons.Items"/>
      <element name="TDialogButtons.SetItem.Index">
        <short/>
      </element>
      <element name="TDialogButtons.SetItem.Value">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TDialogButtons.Destroy"/>
      <!-- function Visibility: public -->
      <element name="TDialogButtons.Add">
        <short>Adds a new button description.
        </short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TDialogButtons.Add.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TDialogButtons.FindButton">
        <short>Find the button associated with (one of) the given modal result.
        </short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TDialogButtons.FindButton.Result">
        <short/>
      </element>
      <element name="TDialogButtons.FindButton.AModalResult">
        <short>The modal result to find.</short>
      </element>
      <element name="TDialogButtons.FindButton.Order">
        <short>List of modal results to find.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TDialogButtons.DefaultButton">
        <short>The Default button for this dialog kind.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TDialogButtons.CancelButton">
        <short>The Cancel button for this dialog kind.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TDialogButtons.Items">
        <short>Indexed access to the button descriptions.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TDialogButtons.Items.Index">
        <short/>
      </element>
<!-- procedure type Visibility: default -->
      <element name="TWSTimerProc">
        <short>Type of a timer callback procedure
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>

<!-- object Visibility: default -->
      <element name="TWidgetSet">
        <short>Application helper class (platform and drawing interface).
        </short>
        <descr>
          <p>
            The declaration contains a number of specific methods for interfacing with the operating system.
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TWidgetSet.FThemeServices" link="TWidgetSet.ThemeServices"/>
      <!-- procedure Visibility: protected -->
      <element name="TWidgetSet.PassCmdLineOptions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- function Visibility: protected -->
      <element name="TWidgetSet.CreateThemeServices" link="TWidgetSet.ThemeServices"/>
      <element name="TWidgetSet.CreateThemeServices.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TWidgetSet.GetAppHandle" link="TWidgetSet.AppHandle"/>
      <element name="TWidgetSet.GetAppHandle.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWidgetSet.SetAppHandle" link="TWidgetSet.AppHandle"/>
      <element name="TWidgetSet.SetAppHandle.AValue">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TWidgetSet.Create"/>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.BeforeDestruction"/>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.AppInit">
        <short>Initializes the application on the platform, returns Screen information.</short>
        <descr>Called by Application.Initialize. Don't use this directly, the LCL will use it when adequate.</descr>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TWidgetSet.AppInit.ScreenInfo">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.AppRun">
        <short>Enters a state in which the application waits for system messages</short>
        <descr>Called by Application.Run. Don't use this directly, the LCL will use it when adequate.</descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.AppRun.ALoop">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.AppWaitMessage">
        <short>Waits for arrival of a message.</short>
        <descr>Don't use this directly, the LCL will use it when adequate.</descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.AppProcessMessages">
        <short>Handles all pending messages.</short>
        <descr>Called by Application.ProcessMessages. Don't use this directly, the LCL will use it when adequate.</descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.AppTerminate">
        <short>Terminates the application.</short>
        <descr>Called by Application.Terminate. Don't use this directly, the LCL will use it when adequate.</descr>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.AppMinimize">
        <short>Minimizes the whole application to the taskbar.</short>
        <descr>Called by Application.Minimize. Don't use this directly, the LCL will use it when adequate.</descr>
        <seealso>
          <link id="TWidgetSet.AppRestore"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.AppRestore">
        <short>Restore application previously minimized to the taskbar.</short>
        <descr>Called by Application.Restore. Don't use this directly, the LCL will use it when adequate.</descr>
        <seealso>
          <link id="TWidgetSet.AppMinimize"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.AppBringToFront">
        <short>Brings the entire application on top of all other non-topmost programs.</short>
        <descr>Called by Application.BringToFront. Don't use this directly, the LCL will use it when adequate.</descr>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.AppSetIcon">
        <short>Set the icon of the taskbar button.</short>
        <descr>Don't use this directly, the LCL will use it when adequate.</descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.AppSetIcon.Small">
        <short/>
      </element>
      <element name="TWidgetSet.AppSetIcon.Big">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.AppSetTitle">
        <short/>
        <descr>Don't use this directly, the LCL will use it when adequate.</descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.AppSetTitle.ATitle">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.AppSetVisible">
        <short>Change the visibility of the application window.</short>
        <descr>Don't use this directly, the LCL will use it when adequate.</descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.AppSetVisible.AVisible">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.AppRemoveStayOnTopFlags">
        <short>Resets all StayOnTop windows to NoTopmost.</short>
        <descr>Don't use this directly, the LCL will use it when adequate.</descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.AppRemoveStayOnTopFlags.Result">
        <short>False on failure</short>
      </element>
      <element name="TWidgetSet.AppRemoveStayOnTopFlags.ASystemTopAlso">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.AppRestoreStayOnTopFlags">
        <short>Sets all windows in the StayOnTop list to TopMost.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.AppRestoreStayOnTopFlags.Result">
        <short/>
      </element>
      <element name="TWidgetSet.AppRestoreStayOnTopFlags.ASystemTopAlso">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.AppSetMainFormOnTaskBar">
        <short>Shows/Hides the MainForm taskbar icon.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.AppSetMainFormOnTaskBar.DoSet">
        <short>The visibility of the MainForm in the TaskBar.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.LCLPlatform">
        <short>Returns the widgetset in use.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.LCLPlatform.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetLCLCapability">
        <short>Checks the widgetset for available capabilities.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.GetLCLCapability.Result">
        <short>Can be either LCL_CAPABILITY_NO or LCL_CAPABILITY_YES</short>
      </element>
      <element name="TWidgetSet.GetLCLCapability.ACapability">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.DCGetPixel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TWidgetSet.DCGetPixel.Result">
        <short/>
      </element>
      <element name="TWidgetSet.DCGetPixel.CanvasHandle">
        <short/>
      </element>
      <element name="TWidgetSet.DCGetPixel.X">
        <short/>
      </element>
      <element name="TWidgetSet.DCGetPixel.Y">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.DCSetPixel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TWidgetSet.DCSetPixel.CanvasHandle">
        <short/>
      </element>
      <element name="TWidgetSet.DCSetPixel.X">
        <short/>
      </element>
      <element name="TWidgetSet.DCSetPixel.Y">
        <short/>
      </element>
      <element name="TWidgetSet.DCSetPixel.AColor">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.DCRedraw">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TWidgetSet.DCRedraw.CanvasHandle">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.DCSetAntialiasing">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.DCSetAntialiasing.CanvasHandle">
        <short/>
      </element>
      <element name="TWidgetSet.DCSetAntialiasing.AEnabled">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.SetDesigning">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TWidgetSet.SetDesigning.AComponent">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.InitStockFont">
        <short>Initializes a font object to an (predefined) stock font.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.InitStockFont.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.InitStockFont.AFont">
        <short>The font to initialize.</short>
      </element>
      <element name="TWidgetSet.InitStockFont.AStockFont">
        <short>The predefined font to use.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.IsHelpKey">
        <short>Checks whether the widgetset uses the key to show help.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.IsHelpKey.Result">
        <short>True when this is a Help key.</short>
      </element>
      <element name="TWidgetSet.IsHelpKey.Key">
        <short>The virtual key.</short>
      </element>
      <element name="TWidgetSet.IsHelpKey.Shift">
        <short>The modifier key state.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateTimer">
        <short>Creates an timer with the given callback method.</short>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TWidgetSet.CreateTimer.Result">
        <short>The timer ID, zero on failure.</short>
        <seealso>
          <link id="TWidgetSet.DestroyTimer"/>
        </seealso>
      </element>
      <element name="TWidgetSet.CreateTimer.Interval">
        <short>The time interval.</short>
      </element>
      <element name="TWidgetSet.CreateTimer.TimerProc">
        <short>The callback method.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.DestroyTimer">
        <short>Destroys an timer.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TWidgetSet.CreateTimer"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TWidgetSet.DestroyTimer.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.DestroyTimer.TimerHandle">
        <short>The timer ID.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TWidgetSet.AppHandle">
        <short>Native handle for TApplication</short>
        <descr>The meaning of the handle changes from widgetset to widgetset
        </descr>
        <seealso>
        </seealso>
      </element>
<!-- function Visibility: public -->
      <element name="TWidgetSet.Arc">
        <short>Use Arc to draw an elliptically curved line with the current Pen.</short>
        <descr>
          <p>
            The arc is part of the ellipse inscribed in the bounding rectangle.
          </p><p>
            The angles angle1 and angle2 are 1/16th of a degree. For example, a full
            circle equals 5760 (16*360). Positive values of Angle and AngleLength mean
            counter-clockwise while negative values mean clockwise direction.
            Zero degrees is at the 3'o clock position.
          </p>
        </descr>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TWidgetSet.Arc.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.Arc.DC">
        <short/>
      </element>
      <element name="TWidgetSet.Arc.Left">
        <short/>
      </element>
      <element name="TWidgetSet.Arc.Top">
        <short/>
      </element>
      <element name="TWidgetSet.Arc.Right">
        <short/>
      </element>
      <element name="TWidgetSet.Arc.Bottom">
        <short/>
      </element>
      <element name="TWidgetSet.Arc.Angle16Deg">
        <short>base angle</short>
      </element>
      <element name="TWidgetSet.Arc.Angle16DegLength">
        <short>angle length</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.AngleChord">
        <short>Use AngleChord to draw a filled Chord shape on a canvas.</short>
        <descr>
          <p>
            The chord is outlined with the current pen, and filled with the current brush.
          </p><p>
            The angles angle1 and angle2 are 1/16th of a degree. For example, a full circle equals 5760
            16*360). Positive values of Angle and AngleLength mean counter-clockwise while
            negative values mean clockwise direction. Zero degrees is at the 3'o clock
            position.
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.AngleChord.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.AngleChord.DC">
        <short/>
      </element>
      <element name="TWidgetSet.AngleChord.x1">
        <short/>
      </element>
      <element name="TWidgetSet.AngleChord.y1">
        <short/>
      </element>
      <element name="TWidgetSet.AngleChord.x2">
        <short/>
      </element>
      <element name="TWidgetSet.AngleChord.y2">
        <short/>
      </element>
      <element name="TWidgetSet.AngleChord.angle1">
        <short>Base angle.</short>
      </element>
      <element name="TWidgetSet.AngleChord.angle2">
        <short>Angle length.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.BeginPaint">
        <short>Start painting in a window.</short>
        <descr>
          <p>
            This function is for use in WM_PAINT handlers only.
            Not all platforms allow for painting outside WM_PAINT messages.
          </p><p>
            BeginPaint prepares the specified window for painting
            and fills a PAINTSTRUCT structure with information about the painting.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TWidgetSet.BeginPaint.Result">
        <short>A Device Context for the window, Nil on failure.</short>
      </element>
      <element name="TWidgetSet.BeginPaint.Handle">
        <short>The window Handle.</short>
      </element>
      <element name="TWidgetSet.BeginPaint.PS">
        <short>Will receive painting information.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.BitBlt">
        <short>Copies part of an source DC into an destination DC,
          using the specified raster operation.
        </short>
        <descr>
          <p>
            This routine implements the equivalent Windows GDI API
            of the same name in all platforms supported by Lazarus.
          </p><p>
            It copies a section of a Canvas to another one, without any stretching.
            It allows one to select the kind of operation which should be
            performed to draw the pixels into the destination in the parameter ROP.
            Allowed operations go from simply copying the pixels without change
            to inverting them and also to executing logical operations involving the source pixels and the previously
            existing pixels in the destination Canvas.
          </p><p>
            For normal usage one should only use SRCOPY in the ROP parameter,
            other operations may not be supported by all widgetsets.
          </p><p>
            There exist 16 raster operations, according to the possible combinations
            of two (boolean) values.
            Excluding the NOP case, that doesn't modify the target area,
            the possible values for ROP are:</p>
          <ul>
            <li>BLACKNESS - Fills the destination rectangle with black</li>
            <li>DSTINVERT - Inverts the colors of the destination area</li>
            <li>MERGECOPY -</li>
            <li>MERGEPAINT -</li>
            <li>NOTSRCCOPY -</li>
            <li>NOTSRCERASE -</li>
            <li>PATCOPY -</li>
            <li>PATINVERT -</li>
            <li>PATPAINT -</li>
            <li>SRCAND -</li>
            <li>SRCCOPY -</li>
            <li>SRCERASE -</li>
            <li>SRCINVERT -</li>
            <li>SRCPAINT - Combines the colors of the source and the destination using the operator OR on each pixel</li>
            <li>WHITENESS - Fills the destination rectangle with white</li>
          </ul>
          <p>These flags can be added to above ROPs:
          </p>
          <ul>
            <li>CAPTUREBLT - Includes windows which are on top of the specified Canvas.
              This option is not recommended and is very hard to implement in all supported platforms.
            </li>
            <li>NOMIRRORBITMAP - Prevents the bitmap from being mirrored.
              (The coordinates are sorted before painting?)
            </li>
          </ul>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.BitBlt.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.BitBlt.DestDC">
        <short>The destination Device Context.</short>
      </element>
      <element name="TWidgetSet.BitBlt.X">
        <short>The origin in the destination DC.</short>
      </element>
      <element name="TWidgetSet.BitBlt.Y">
        <short>The origin in the destination DC.</short>
      </element>
      <element name="TWidgetSet.BitBlt.Width">
        <short>The image size.</short>
      </element>
      <element name="TWidgetSet.BitBlt.Height">
        <short>The image size.</short>
      </element>
      <element name="TWidgetSet.BitBlt.SrcDC">
        <short>The source Device Context.</short>
      </element>
      <element name="TWidgetSet.BitBlt.XSrc">
        <short>The origin in the source DC.</short>
      </element>
      <element name="TWidgetSet.BitBlt.YSrc">
        <short>The origin in the source DC.</short>
      </element>
      <element name="TWidgetSet.BitBlt.Rop">
        <short>The raster operation.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CallNextHookEx">
        <short>Calls the next procedure in the hook chain.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.CallNextHookEx.Result">
        <short>Depends on the Hook type.</short>
      </element>
      <element name="TWidgetSet.CallNextHookEx.hhk">
        <short>Handle of the current hook.</short>
      </element>
      <element name="TWidgetSet.CallNextHookEx.ncode">
        <short>The Hook code (message ID).</short>
      </element>
      <element name="TWidgetSet.CallNextHookEx.WParam">
        <short>Message parameter.</short>
      </element>
      <element name="TWidgetSet.CallNextHookEx.LParam">
        <short>Message parameter.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CallWindowProc">
        <short>Calls another Window procedure, to handle a message.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.CallWindowProc.Result">
        <short/>
      </element>
      <element name="TWidgetSet.CallWindowProc.lpPrevWndFunc">
        <short/>
      </element>
      <element name="TWidgetSet.CallWindowProc.Handle">
        <short/>
      </element>
      <element name="TWidgetSet.CallWindowProc.Msg">
        <short/>
      </element>
      <element name="TWidgetSet.CallWindowProc.WParam">
        <short/>
      </element>
      <element name="TWidgetSet.CallWindowProc.LParam">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ClientToScreen">
        <short>Converts (relative) Client coordinates into absolute Screen coordinates.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.ClientToScreen.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.ClientToScreen.Handle">
        <short>The window with the client area.</short>
      </element>
      <element name="TWidgetSet.ClientToScreen.P">
        <short>The point to convert.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CombineRgn">
        <short>Combines two regions.</short>
        <descr>
          <p>The Destination must already be initialized.
            The Return value is the Destination's Region type, or ERROR (0).
          </p><p>
            fnCombineMode can be one of:
          </p>
          <ul>
            <li>
              RGN_AND  : Gets a region of all points which are in both source regions.
            </li><li>
              RGN_COPY : Gets an exact copy of the first source region.
            </li><li>
              RGN_DIFF : Gets a region of all points which are in the first source region
              but not in the second.(Src1 - Src2)
            </li><li>
              RGN_OR   : Gets a region of all points which are in either the first
                 source region or in the second.(Src1 + Src2)
            </li><li>
              RGN_XOR  : Gets all points which are in either the first Source Region
                 or in the second, but not in both.
            </li>
          </ul>
        </descr>
        <seealso/>
      </element>
      <element name="TWidgetSet.CombineRgn.Result">
        <short>The Destination's Region type, or ERROR (0).</short>
      </element>
      <element name="TWidgetSet.CombineRgn.Dest">
        <short>The Handle of the destination region. This region must already exist!
        </short>
      </element>
      <element name="TWidgetSet.CombineRgn.Src1">
        <short>The handle of a region to combine.</short>
      </element>
      <element name="TWidgetSet.CombineRgn.Src2">
        <short>The handle of a region to combine.</short>
      </element>
      <element name="TWidgetSet.CombineRgn.fnCombineMode">
        <short>How the regions are combined.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateBitmap">
        <short>Creates a bitmap with the specified width, height, and color format (color planes and bits per pixel).
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.CreateBitmap.Result">
        <short>The bitmap Handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.CreateBitmap.Width">
        <short/>
      </element>
      <element name="TWidgetSet.CreateBitmap.Height">
        <short/>
      </element>
      <element name="TWidgetSet.CreateBitmap.Planes">
        <short>The number of color planes.</short>
      </element>
      <element name="TWidgetSet.CreateBitmap.BitCount">
        <short>The number of color bits per pixel and plane.</short>
      </element>
      <element name="TWidgetSet.CreateBitmap.BitmapBits">
        <short>Pointer to array containing color data.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateBrushIndirect">
        <short>Creates a logical brush that has the specified style, color, and pattern.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.CreateBrushIndirect.Result">
        <short>The brush Handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.CreateBrushIndirect.LogBrush">
        <short>Description of the brush.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateCaret">
        <short>Creates a new shape for the system caret
          and assigns ownership of the caret to the specified window.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TWidgetSet.CreateCaret.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.CreateCaret.Handle">
        <short>The window that owns the caret.</short>
      </element>
      <element name="TWidgetSet.CreateCaret.Bitmap">
        <short>Bitmap Handle, or zero for a solid (black) caret, 1 for a grey caret.
        </short>
      </element>
      <element name="TWidgetSet.CreateCaret.Width">
        <short/>
      </element>
      <element name="TWidgetSet.CreateCaret.Height">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateCompatibleBitmap">
        <short>Creates a bitmap that is compatible with the given DC.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.CreateCompatibleBitmap.Result">
        <short>The bitmap handle, zero on failure.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.CreateCompatibleBitmap.DC">
        <short>The Device Context for the bitmap.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.CreateCompatibleBitmap.Width">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.CreateCompatibleBitmap.Height">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateCompatibleDC">
        <short>Creates an memory Device Context, compatible with the device of the given DC.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.CreateCompatibleDC.Result">
        <short>The memory DC, zero on failure.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.CreateCompatibleDC.DC">
        <short>The device DC.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateDIBitmap">
        <short>Creates a Device Dependent Bitmap (DDB) from a Device Independent Bitmap (DIB).</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.CreateDIBitmap.Result">
        <short>The bitmap handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.CreateDIBitmap.DC">
        <short>The context for the DDB.</short>
      </element>
      <element name="TWidgetSet.CreateDIBitmap.InfoHeader">
        <short/>
      </element>
      <element name="TWidgetSet.CreateDIBitmap.dwUsage">
        <short/>
      </element>
      <element name="TWidgetSet.CreateDIBitmap.InitBits">
        <short>An array containing the bitmap pixels.</short>
      </element>
      <element name="TWidgetSet.CreateDIBitmap.InitInfo">
        <short>CBM_INIT when InitBits contains valid data, else zero.</short>
      </element>
      <element name="TWidgetSet.CreateDIBitmap.wUsage">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateDIBSection">
        <short>Creates a bitmap into which the application can write.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TWidgetSet.CreateDIBSection.Result">
        <short>The bitmap Handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.CreateDIBSection.DC">
        <short>The DC for the bitmap.</short>
      </element>
      <element name="TWidgetSet.CreateDIBSection.BitmapInfo">
        <short>Contains all information about the bitmap, except the pixels.</short>
      </element>
      <element name="TWidgetSet.CreateDIBSection.Usage">
        <short>The type of the bitmap colors, e.g. DIB_RGB_COLORS.</short>
      </element>
      <element name="TWidgetSet.CreateDIBSection.Bits">
        <short>Pointer to the bitmap pixels.</short>
      </element>
      <element name="TWidgetSet.CreateDIBSection.SectionHandle">
        <short>Zero or the Handle of a file-mapping object, from which the bitmap is initialized
          (needs CreateFileMapping).
        </short>
      </element>
      <element name="TWidgetSet.CreateDIBSection.Offset">
        <short>The offset to the bitmap bits in the file-mapping object.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateEllipticRgn">
        <short>Creates an elliptic region, bounded by the given rectangle.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.CreateEllipticRgn.Result">
        <short>The region Handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.CreateEllipticRgn.X1">
        <short/>
      </element>
      <element name="TWidgetSet.CreateEllipticRgn.Y1">
        <short/>
      </element>
      <element name="TWidgetSet.CreateEllipticRgn.X2">
        <short/>
      </element>
      <element name="TWidgetSet.CreateEllipticRgn.Y2">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateFontIndirect">
        <short>Creates an logical font, selectable into any DC.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TWidgetSet.CreateFontIndirectEx"/>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.CreateFontIndirect.Result">
        <short>The font handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.CreateFontIndirect.LogFont">
        <short>The font description.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateFontIndirectEx">
        <short>Creates an logical font, selectable into any DC. Allows for an long fontname.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TWidgetSet.CreateFontIndirect"/>
        </seealso>
      </element>
      <element name="TWidgetSet.CreateFontIndirectEx.Result">
        <short>The font handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.CreateFontIndirectEx.LogFont">
        <short>The font description.</short>
      </element>
      <element name="TWidgetSet.CreateFontIndirectEx.LongFontName">
        <short>The font name, can be longer than 32 characters.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateIconIndirect">
        <short>Creates an icon or cursor.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.CreateIconIndirect.Result">
        <short>The Handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.CreateIconIndirect.IconInfo">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreatePalette">
        <short>Creates a logical palette, selectable into any DC.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.CreatePalette.Result">
        <short>The palette Handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.CreatePalette.LogPalette">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreatePatternBrush">
        <short>Creates a logical brush, selectable into any DC.</short>
        <descr>
          <p>
            The bitmap pattern is repeated for areas of larger width or height,
            it should allow for smooth transitions.
          </p><p>
            Monochrome bitmaps obtain the actual text (0) or background (1) color of the DC.
          </p>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.CreatePatternBrush.Result">
        <short>The brush handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.CreatePatternBrush.ABitmap">
        <short>The bitmap to use for the brush.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreatePenIndirect">
        <short>Creates an logical Pen, selectable into any DC.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.CreatePenIndirect.Result">
        <short>The pen Handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.CreatePenIndirect.LogPen">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreatePolygonRgn">
        <short>Creates a polygonial region.</short>
        <descr>
          <p>
            The Points parameter is an array of points that give the vertices of the polygon.
            The connections between two points can cross others.
          </p><p>
            FillMode determines what points are going to be included in the region.
            When FillMode=Winding points are selected by using the Winding fill algorithm.
            When FillMode=ALTERNATE points are selected by using using the
            even-odd (alternative) fill algorithm.
          </p><p>
            The last point is connected to the first point, to close the region.
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.CreatePolygonRgn.Result">
        <short>The region Handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.CreatePolygonRgn.Points">
        <short>The array of points.</short>
      </element>
      <element name="TWidgetSet.CreatePolygonRgn.NumPts">
        <short>The number of points in Points.</short>
      </element>
      <element name="TWidgetSet.CreatePolygonRgn.FillMode">
        <short>Can be ALTERNATE or WINDING.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateRectRgn">
        <short>Creates a rectangular region.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.CreateRectRgn.Result">
        <short>The region handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.CreateRectRgn.X1">
        <short/>
      </element>
      <element name="TWidgetSet.CreateRectRgn.Y1">
        <short/>
      </element>
      <element name="TWidgetSet.CreateRectRgn.X2">
        <short/>
      </element>
      <element name="TWidgetSet.CreateRectRgn.Y2">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateRoundRectRgn">
        <short>Creates a rectangular region with rounded corners.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.CreateRoundRectRgn.Result">
        <short>The region Handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.CreateRoundRectRgn.X1">
        <short/>
      </element>
      <element name="TWidgetSet.CreateRoundRectRgn.Y1">
        <short/>
      </element>
      <element name="TWidgetSet.CreateRoundRectRgn.X2">
        <short/>
      </element>
      <element name="TWidgetSet.CreateRoundRectRgn.Y2">
        <short/>
      </element>
      <element name="TWidgetSet.CreateRoundRectRgn.nWidthEllipse">
        <short>The extent of the ellipse, used for the rounded corners.</short>
      </element>
      <element name="TWidgetSet.CreateRoundRectRgn.nHeightEllipse">
        <short>The extent of the ellipse, used for the rounded corners.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.DeleteCriticalSection">
        <short>Deletes an unowned critical section.</short>
        <descr/>
        <errors>Results are unpredictable when the section is owned,
          i.e. has been entered but not yet left.
        </errors>
        <seealso>
          <link id="TWidgetSet.InitializeCriticalSection"/>
        </seealso>
      </element>
      <element name="TWidgetSet.DeleteCriticalSection.CritSection">
        <short>The critical section object.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.DeleteDC">
        <short>Deletes an Device Context, created by CreateDC.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TWidgetSet.ReleaseDC"/>
        </seealso>
      </element>
      <element name="TWidgetSet.DeleteDC.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.DeleteDC.hDC">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.DeleteObject">
        <short>Deletes a graphic object, freeing all system resources
          associated with the object.
        </short>
        <descr/>
        <errors>The function fails when the Handle is selected into an DC.
        </errors>
        <seealso/>
      </element>
      <element name="TWidgetSet.DeleteObject.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.DeleteObject.GDIObject">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.DestroyCaret">
        <short>Destroys the caret but doesn't free the bitmap.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.DestroyCaret.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.DestroyCaret.Handle">
        <short>Handle of the window with the caret.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.DestroyCursor">
        <short>Destroys an mouse cursor.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.DestroyCursor.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.DestroyCursor.Handle">
        <short>The cursor Handle.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.DestroyIcon">
        <short>Destroys an icon.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.DestroyIcon.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.DestroyIcon.Handle">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.DPtoLP">
        <short>Converts an array of Device Points (coordinates) into Logical Points.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TWidgetSet.DPtoLP.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.DPtoLP.DC">
        <short>The device context, containing the coordinate mapping information.</short>
      </element>
      <element name="TWidgetSet.DPtoLP.Points">
        <short>An array of points.</short>
      </element>
      <element name="TWidgetSet.DPtoLP.Count">
        <short>The number of points to convert.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.DrawFrameControl">
        <short>Draws a window frame control, of the specified type and style.
        </short>
        <descr>
          <p>
            A window frame includes these components (uType):
          </p>
            <ul>
              <li>
                title bar (DFC_CAPTION)
              </li><li>
                menu bar (DFC_MENU)
              </li><li>
                popup menus (DFC_POPUPMENU)
              </li><li>
                scrollbars (DFC_SCROLL)
              </li>
            </ul>
          <p>
            Window managers do not normally allow the user to paint the
            components of an window frame, do not even supply an DC for that purpose.
          </p><p>
            The available features depend on the window manager of the actual platform,
            and the used widgetset.
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.DrawFrameControl.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.DrawFrameControl.DC">
        <short>The window frame device context.</short>
      </element>
      <element name="TWidgetSet.DrawFrameControl.Rect">
        <short/>
      </element>
      <element name="TWidgetSet.DrawFrameControl.uType">
        <short>The control type, e.g. DFC_CAPTION.</short>
      </element>
      <element name="TWidgetSet.DrawFrameControl.uState">
        <short>The control state, e.g. DFCS_CAPTIONCLOSE (close button).</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.DrawFocusRect">
        <short>Shows or hides a floating rectangle.</short>
        <descr>
          <p>
            This function is intended to <b>temporarily</b> outline part of an canvas,
            e.g. a rectangular selection following mouse moves
            (rubber box, DockRect).
          </p><p>
            A second call of the function, with the same parameters,
            removes the rectangle again (XOR painting).
            Due to this behaviour the frame should be removed
            before it might be overwritten by any other painting operation.
          </p>
          <remark>
            Not all platforms allow for painting outside WM_PAINT events.
          </remark>
          <remark>
            Child windows may be excluded (clipped),
            i.e. the rectangle is not necessarily fully shown.
          </remark>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.DrawFocusRect.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.DrawFocusRect.DC">
        <short>Almost a screen DC.</short>
      </element>
      <element name="TWidgetSet.DrawFocusRect.Rect">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.DrawEdge">
        <short>Draws one or more edges of a rectangle.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.DrawEdge.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.DrawEdge.DC">
        <short/>
      </element>
      <element name="TWidgetSet.DrawEdge.Rect">
        <short/>
      </element>
      <element name="TWidgetSet.DrawEdge.edge">
        <short>A combination of edge styles (inner/outer, raised/sunken)</short>
      </element>
      <element name="TWidgetSet.DrawEdge.grfFlags">
        <short>Indicates e.g. the edges to paint (BF_LEFT).</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.DrawText">
        <short>Draws formatted text within a rectangle.</short>
        <descr>
          <p>
            Several formatting options are available (DT_WORDBREAK...).
          </p><p>
            DT_CALCRECT suppresses all painting, instead the extent of the formatted text
            is returned in the Rect parameter.
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.DrawText.Result">
        <short>The height of the drawn text,
          from Rect.Top to the bottom of the text.
          Zero on failure.
        </short>
      </element>
      <element name="TWidgetSet.DrawText.DC">
        <short/>
      </element>
      <element name="TWidgetSet.DrawText.Str">
        <short>The text (should be zero terminated).</short>
      </element>
      <element name="TWidgetSet.DrawText.Count">
        <short>The number of (Wide)Chars in the text.</short>
      </element>
      <element name="TWidgetSet.DrawText.Rect">
        <short>The bounding (clipping) rectangle.
        </short>
      </element>
      <element name="TWidgetSet.DrawText.Flags">
        <short>Various flags.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.EnableScrollBar">
        <short>Enables or disables the arrows of a scrollbar control,
          or of the scrollbars of a window.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.EnableScrollBar.Result">
        <short>False when nothing was changed.</short>
      </element>
      <element name="TWidgetSet.EnableScrollBar.Wnd">
        <short>The window or control handle.</short>
      </element>
      <element name="TWidgetSet.EnableScrollBar.wSBflags">
        <short>The scrollbar type (SB_CTL, SB_HORZ...).</short>
      </element>
      <element name="TWidgetSet.EnableScrollBar.wArrows">
        <short>The affected buttons.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.EnableWindow">
        <short>Enables or disables mouse and keyboard input to the specified window or control.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.EnableWindow.Result">
        <short>True when the window was disabled before.</short>
      </element>
      <element name="TWidgetSet.EnableWindow.hWnd">
        <short/>
      </element>
      <element name="TWidgetSet.EnableWindow.bEnable">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.EndPaint">
        <short>Ends painting a window, started with BeginPaint.</short>
        <descr/>
        <seealso>
          <link id="TWidgetSet.BeginPaint"/>
        </seealso>
      </element>
      <element name="TWidgetSet.EndPaint.Result">
        <short>Almost nonzero.</short>
      </element>
      <element name="TWidgetSet.EndPaint.Handle">
        <short>The window to paint.</short>
      </element>
      <element name="TWidgetSet.EndPaint.PS">
        <short>Painting information.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.EnterCriticalSection">
        <short>Enters a critical section.</short>
        <descr>The call returns only when the calling thread has obtained ownership of the critical section.
          See TryEnterCriticalSection for testing the ownership of the critical section.
        </descr>
        <seealso>
          <link id="TWidgetSet.InitializeCriticalSection"/>
          <link id="TWidgetSet.TryEnterCriticalSection"/>
        </seealso>
      </element>
      <element name="TWidgetSet.EnterCriticalSection.CritSection">
        <short>The critical section object.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.EnumDisplayMonitors">
        <short>Invokes a callback function for every available display monitor.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.EnumDisplayMonitors.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.EnumDisplayMonitors.hdc">
        <short/>
      </element>
      <element name="TWidgetSet.EnumDisplayMonitors.lprcClip">
        <short/>
      </element>
      <element name="TWidgetSet.EnumDisplayMonitors.lpfnEnum">
        <short>The callback function.</short>
      </element>
      <element name="TWidgetSet.EnumDisplayMonitors.dwData">
        <short>Data passed to the callback function</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.EnumFontFamilies">
        <short>Invokes a callback function for every font available on a specified device.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TWidgetSet.EnumFontFamiliesEx"/>
        </seealso>
      </element>
      <element name="TWidgetSet.EnumFontFamilies.Result">
        <short>The last value returned by the callback function.</short>
      </element>
      <element name="TWidgetSet.EnumFontFamilies.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.EnumFontFamilies.Family">
        <short>The font family name, empty for all families.</short>
      </element>
      <element name="TWidgetSet.EnumFontFamilies.EnumFontFamProc">
        <short>The callback function.</short>
      </element>
      <element name="TWidgetSet.EnumFontFamilies.LParam">
        <short>Data passed to the callback function.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.EnumFontFamiliesEx">
        <short>Invokes a callback function for every available font that matches certain criteria.
        </short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.EnumFontFamiliesEx.Result">
        <short>The last value returned by the callback function.</short>
      </element>
      <element name="TWidgetSet.EnumFontFamiliesEx.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.EnumFontFamiliesEx.lpLogFont">
        <short>Description of the desired fonts.</short>
      </element>
      <element name="TWidgetSet.EnumFontFamiliesEx.Callback">
        <short>The callback function.</short>
      </element>
      <element name="TWidgetSet.EnumFontFamiliesEx.Lparam">
        <short>Data passed to the callback function.</short>
      </element>
      <element name="TWidgetSet.EnumFontFamiliesEx.Flags">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.Ellipse">
        <short>Draws a filled circle or ellipse, bounded by a rectangle.</short>
        <descr>The ellipse is outlined with the current pen,
          and filled with the current brush.
        </descr>
        <seealso>
          <link id="TWidgetSet.Arc"/>
        </seealso>
      </element>
      <element name="TWidgetSet.Ellipse.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.Ellipse.DC">
        <short/>
      </element>
      <element name="TWidgetSet.Ellipse.x1">
        <short/>
      </element>
      <element name="TWidgetSet.Ellipse.y1">
        <short/>
      </element>
      <element name="TWidgetSet.Ellipse.x2">
        <short/>
      </element>
      <element name="TWidgetSet.Ellipse.y2">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ExcludeClipRect">
        <short>Excludes a rectangle from the clipping region,
          i.e. prevents painting within the rectangle.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.ExcludeClipRect.Result">
        <short>The type of the new clipping region, Error (0) on failure.</short>
      </element>
      <element name="TWidgetSet.ExcludeClipRect.dc">
        <short/>
      </element>
      <element name="TWidgetSet.ExcludeClipRect.Left">
        <short/>
      </element>
      <element name="TWidgetSet.ExcludeClipRect.Top">
        <short/>
      </element>
      <element name="TWidgetSet.ExcludeClipRect.Right">
        <short/>
      </element>
      <element name="TWidgetSet.ExcludeClipRect.Bottom">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ExtCreatePen">
        <short>Creates an logical pen, selectable into any DC.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.ExtCreatePen.Result">
        <short>The pen handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.ExtCreatePen.dwPenStyle">
        <short>A collection of style options.</short>
      </element>
      <element name="TWidgetSet.ExtCreatePen.dwWidth">
        <short>The pen width.</short>
      </element>
      <element name="TWidgetSet.ExtCreatePen.lplb">
        <short>The brush description.</short>
      </element>
      <element name="TWidgetSet.ExtCreatePen.dwStyleCount">
        <short>The number of sections of an dashed pen.</short>
      </element>
      <element name="TWidgetSet.ExtCreatePen.lpStyle">
        <short>Array of the section lengths of an dashed pen.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ExtTextOut">
        <short>Draws an string without formatting (single line).</short>
        <descr>
          <p>
            The string is drawn with the current font and colors.
          </p><p>
            The following Options are supported:
          </p>
          <ul>
            <li>
              ETO_CLIPPED - the text is clipped to the given rectangle.
            </li><li>
              ETO_OPAQUE - the rectangle is filled with the background color.
            </li>
          </ul>
        </descr>
        <seealso>
          <link id="TWidgetSet.ExtUTF8Out"/>
        </seealso>
      </element>
      <element name="TWidgetSet.ExtTextOut.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.ExtTextOut.DC">
        <short>The Device Context.</short>
      </element>
      <element name="TWidgetSet.ExtTextOut.X">
        <short>The reference point, used to position the text.</short>
      </element>
      <element name="TWidgetSet.ExtTextOut.Y">
        <short>The reference point, used to position the text.</short>
      </element>
      <element name="TWidgetSet.ExtTextOut.Options">
        <short>Output options.</short>
      </element>
      <element name="TWidgetSet.ExtTextOut.Rect">
        <short>The bounding rectangle.</short>
      </element>
      <element name="TWidgetSet.ExtTextOut.Str">
        <short>The text.</short>
      </element>
      <element name="TWidgetSet.ExtTextOut.Count">
        <short>The number of (Wide)Chars in the string.</short>
      </element>
      <element name="TWidgetSet.ExtTextOut.Dx">
        <short>Pointer to an array of intercharacter spacing values, can be Nil.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ExtSelectClipRGN">
        <short>Combines the passed Region with the current clipping region.</short>
        <descr>
          <p>The Mode can be one of:</p>
          <ul>
            <li>
              RGN_AND - all points which are in both regions.
            </li><li>
              RGN_COPY - an exact copy of the source region, same as SelectClipRGN.
            </li><li>
              RGN_DIFF - all points which are in the Clipping Region but but not in the Source. (Clip - RGN)
            </li><li>
              RGN_OR - all points which are in either the Clip Region or in the Source. (Clip + RGN)
            </li><li>
              RGN_XOR - all points which are in either the Clip Region or in the Source, but not in both.
            </li>
          </ul>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.ExtSelectClipRGN.Result">
        <short>The type of the resulting clipping region.</short>
      </element>
      <element name="TWidgetSet.ExtSelectClipRGN.dc">
        <short/>
      </element>
      <element name="TWidgetSet.ExtSelectClipRGN.rgn">
        <short>The region to combine with.</short>
      </element>
      <element name="TWidgetSet.ExtSelectClipRGN.Mode">
        <short>How the regions are combined.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.FillRect">
        <short>Fills a rectangle using the specified brush.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.FillRect.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.FillRect.DC">
        <short/>
      </element>
      <element name="TWidgetSet.FillRect.Rect">
        <short/>
      </element>
      <element name="TWidgetSet.FillRect.Brush">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.FillRgn">
        <short>Fills a region using the specified brush.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.FillRgn.Result">
        <short/>
      </element>
      <element name="TWidgetSet.FillRgn.DC">
        <short/>
      </element>
      <element name="TWidgetSet.FillRgn.RegionHnd">
        <short/>
      </element>
      <element name="TWidgetSet.FillRgn.hbr">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.FloodFill">
        <short>Fills an area of the display surface with the current brush.</short>
        <descr>
          <p>
            FillStyle specifies the area:
          </p>
          <ul>
            <li>
              When FillStyle is <var>fsBorder</var>, the area is <b>bounded</b> by a certain Color,
              the boundary must not have gaps in it.
            </li><li>
              When FillStyle is <var>fsSurface</var>, the area <b>has</b> the specified Color,
              and all adjacent pixels of this color are replaced.
            </li>
          </ul>
          <p>
            Filling starts at a given point, which resides somewhere inside the area.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TWidgetSet.FloodFill.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.FloodFill.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.FloodFill.X">
        <short>The starting point.</short>
      </element>
      <element name="TWidgetSet.FloodFill.Y">
        <short>The starting point.</short>
      </element>
      <element name="TWidgetSet.FloodFill.Color">
        <short>The area or boundary color, depending on FillStyle.</short>
      </element>
      <element name="TWidgetSet.FloodFill.FillStyle">
        <short>fsBorder or fsSurface.</short>
      </element>
      <element name="TWidgetSet.FloodFill.Brush">
        <short>The brush used to fill the area.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.FrameRect">
        <short>Draws a border around a rectangle.</short>
        <descr>The boundary is one logical unit wide,
          painted using the given brush.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.FrameRect.Result">
        <short>Zero on failure.</short>
      </element>
      <element name="TWidgetSet.FrameRect.DC">
        <short/>
      </element>
      <element name="TWidgetSet.FrameRect.ARect">
        <short>The rectangle to outline.</short>
      </element>
      <element name="TWidgetSet.FrameRect.hBr">
        <short>The brush for drawing the border.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetActiveWindow">
        <short>Returns the Handle of the active window of the calling thread.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetActiveWindow.Result">
        <short>The window handle, zero on failure.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetBitmapBits">
        <short>Fills an buffer with the bitmap bits.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetBitmapBits.Result">
        <short>The number of bytes copied, zero on failure.</short>
      </element>
      <element name="TWidgetSet.GetBitmapBits.Bitmap">
        <short>The (device dependent) bitmap handle.</short>
      </element>
      <element name="TWidgetSet.GetBitmapBits.Count">
        <short>The byte size of the buffer.</short>
      </element>
      <element name="TWidgetSet.GetBitmapBits.Bits">
        <short>Pointer to the output buffer.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetBkColor">
        <short>Returns the background color of an device context.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.GetBkColor.Result">
        <short>The background color, CLR_INVALID on failure.</short>
      </element>
      <element name="TWidgetSet.GetBkColor.DC">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetCapture">
        <short>Returns the window that captures mouse messages.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetCapture.Result">
        <short>The window handle, zero if no window of the thread captures mouse messages.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetCaretPos">
        <short>Returns the caret position, in client coordinates.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetCaretPos.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.GetCaretPos.lpPoint">
        <short>Receives the coordinates.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetClientRect">
        <short>Returns the client rectangle of a window.</short>
        <descr>
          <p>
            The client rectangle is the size of the inner area of a control,
            where e.g. the child controls are visible.
            Left and Top are always 0.
          </p><p>
            A child control with Align=alClient will completely fill the clientrect.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetClientRect.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.GetClientRect.handle">
        <short>The window handle.</short>
      </element>
      <element name="TWidgetSet.GetClientRect.Rect">
        <short>Receives the client coordinates.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetClipBox">
        <short>Returns the smallest rectangle
          which includes the entire clipping region of an device context.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetClipBox.Result">
        <short>The region kind.</short>
      </element>
      <element name="TWidgetSet.GetClipBox.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.GetClipBox.lpRect">
        <short>Receives the coordinates.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetClipRGN">
        <short>Returns the clipping region of an device context.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetClipRGN.Result">
        <short>Zero on failure.</short>
      </element>
      <element name="TWidgetSet.GetClipRGN.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.GetClipRGN.RGN">
        <short>The handle of the clipping region.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetCurrentObject">
        <short>Returns an currently selected object in an device context.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.GetCurrentObject.Result">
        <short>The object handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.GetCurrentObject.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.GetCurrentObject.uObjectType">
        <short>The type of the selected object, e.g. OBJ_BRUSH.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetCursorPos">
        <short>Gets the mouse cursor position, in screen coordinates.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetCursorPos.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.GetCursorPos.lpPoint">
        <short>Receives the mouse coordinates.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetCharABCWidths">
        <short>Returns the ABC widths of an range of character codes.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#lcl.LCLType._ABC"/>
        </seealso>
      </element>
      <element name="TWidgetSet.GetCharABCWidths.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.GetCharABCWidths.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.GetCharABCWidths.p2">
        <short>The first character code</short>
      </element>
      <element name="TWidgetSet.GetCharABCWidths.p3">
        <short>The last character code.</short>
      </element>
      <element name="TWidgetSet.GetCharABCWidths.ABCStructs">
        <short>Array of ABC records, receiving the information.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetDC">
        <short>Returns the handle of an Device Context (DC) for the client area of a window.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetDC.Result">
        <short>The DC handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.GetDC.hWnd">
        <short>The window handle.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetDeviceCaps">
        <short>Returns various device specific informations.</short>
        <descr>
          <p>The following informations can be retrieved:</p>
          <ul>
            <li>
              HORZSIZE - Horizontal size in millimeters
            </li><li>
              VERTSIZE - Vertical size in millimeters
            </li><li>
              HORZRES - Horizontal width in pixels
            </li><li>
              VERTRES - Vertical height in pixels
            </li><li>
              BITSPIXEL - Number of bits per pixel
            </li><li>
              PLANES - Number of color planes
            </li><li>
              LOGPIXELSX - The number of pixels per logical inch, in X (horizontal) direction.
            </li><li>
              LOGPIXELSY - The number of pixels per logical inch, in Y (vertical) direction.
            </li><li>
              SIZEPALETTE - Number of entries in the color palette
            </li><li>
              NUMRESERVED - Number of reserved entries in the color palette
            </li>
          </ul>
        </descr>
        <errors/>
        <seealso>
          <link id="#lcl.LCLType.HORZRES"/>
        </seealso>
      </element>
      <element name="TWidgetSet.GetDeviceCaps.Result">
        <short>The requested value</short>
      </element>
      <element name="TWidgetSet.GetDeviceCaps.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.GetDeviceCaps.Index">
        <short>The value type, e.g. HORZRES.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetDIBits">
        <short>Fills an buffer with bitmap color bits.</short>
        <descr>
          <p>
            The bitmap must be a compatible (device dependent) bitmap,
            for the given device context.
            It should not be selected into any DC.
          </p><p>
            The color bits are copied into the Bits array
            in Device Independent Bitmap (DIB) format.
          </p><p>
            When Bits is Nil, the BitInfo record receives the bitmap information,
            from which the required size of the Bits array can be determined.
          </p><p>
          </p>
        </descr>
        <errors/>
        <seealso>
          <link id="#lcl.LCLType.DIB_RGB_COLORS"/>
        </seealso>
      </element>
      <element name="TWidgetSet.GetDIBits.Result">
        <short>The number of returned scanlines, zero on failure.</short>
      </element>
      <element name="TWidgetSet.GetDIBits.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.GetDIBits.Bitmap">
        <short>The bitmap handle.</short>
      </element>
      <element name="TWidgetSet.GetDIBits.StartScan">
        <short>The first scanline to retrieve.</short>
      </element>
      <element name="TWidgetSet.GetDIBits.NumScans">
        <short>The number of scanlines to retrieve.</short>
      </element>
      <element name="TWidgetSet.GetDIBits.Bits">
        <short>Pointer to the color bits array, or Nil to get the BitmapInfo.</short>
      </element>
      <element name="TWidgetSet.GetDIBits.BitInfo">
        <short>Contains or receives the BitmapInfo.</short>
      </element>
      <element name="TWidgetSet.GetDIBits.Usage">
        <short>The color format, e.g. DIB_RGB_COLORS.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetDoubleClickTime">
        <short>Returns the double-click time, in milliseconds.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.GetDoubleClickTime.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetFocus">
        <short>Returns the handle of the window that has the focus in the current thread.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetFocus.Result">
        <short>The window handle, zero if no window has the focus.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetFontLanguageInfo">
        <short>Returns language information about the currently selected font.</short>
        <descr>
          <p>The following flags are supported:</p>
          <ul>
            <li>GCP_DBCS - the character set is double-byte (DBCS).
            </li>
          </ul>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetFontLanguageInfo.Result">
        <short>Font flags, zero for Latin font alikes.</short>
      </element>
      <element name="TWidgetSet.GetFontLanguageInfo.DC">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetForegroundWindow">
        <short>Returns the window that the user is currently working with, session wide.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.GetForegroundWindow.Result">
        <short>The window handle, zero when no such window exists.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetIconInfo">
        <short>Returns information about an Icon or Cursor.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.GetIconInfo.Result">
        <short/>
      </element>
      <element name="TWidgetSet.GetIconInfo.AIcon">
        <short>The item handle.</short>
      </element>
      <element name="TWidgetSet.GetIconInfo.AIconInfo">
        <short>Receives the information.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetKeyState">
        <short>The status of a virtual key.</short>
        <descr>
          <p>
            The result reflects the message processing state,
            at the time of the last seen key message.
          </p><p>
            A key can be up, down or toggled.
          </p><p>
            The high order bit of the result is the up/down state,
            1 for down.
          </p><p>
            The low order bit of the result is the toggled state,
            applicable to e.g. the caps-lock key.
            The bit is set if the key is toggled (active).
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetKeyState.Result">
        <short>The key state flags.</short>
      </element>
      <element name="TWidgetSet.GetKeyState.nVirtKey">
        <short>The virtual key code.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetMapMode">
        <short>Returns the mapping mode of an device context.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TWidgetSet.SetMapMode"/>
        </seealso>
      </element>
      <element name="TWidgetSet.GetMapMode.Result">
        <short>The <link id="TWidgetSet.SetMapMode">mapping mode</link>, zero on failure.</short>
      </element>
      <element name="TWidgetSet.GetMapMode.DC">
        <short>The device context.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetMonitorInfo">
        <short>Returns information about an display monitor.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.GetMonitorInfo.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.GetMonitorInfo.hMonitor">
        <short>The monitor handle.</short>
      </element>
      <element name="TWidgetSet.GetMonitorInfo.lpmi">
        <short>Receives the information.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetObject">
        <short>Returns information about a graphics object.</short>
        <descr>The returned information depends on the object type
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetObject.Result">
        <short>The number of bytes written into the buffer.</short>
      </element>
      <element name="TWidgetSet.GetObject.GDIObject">
        <short>The Handle of the object.</short>
      </element>
      <element name="TWidgetSet.GetObject.BufSize">
        <short>The bytecount of the buffer.</short>
      </element>
      <element name="TWidgetSet.GetObject.Buf">
        <short>Receives the information. Nil means to return the required buffer size.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetPaletteEntries">
        <short>Retrieves an range of color entries from a logical palette.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetPaletteEntries.Result">
        <short>The number of entries copied.</short>
      </element>
      <element name="TWidgetSet.GetPaletteEntries.Palette">
        <short>The palette handle.</short>
      </element>
      <element name="TWidgetSet.GetPaletteEntries.StartIndex">
        <short>The first entry.</short>
      </element>
      <element name="TWidgetSet.GetPaletteEntries.NumEntries">
        <short>The number of entries to retrieve.</short>
      </element>
      <element name="TWidgetSet.GetPaletteEntries.PaletteEntries">
        <short>Array of PALETTEENTRY records, receiving the information.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetParent">
        <short>Returns the parent window of a window.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetParent.Result">
        <short>The parent window handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.GetParent.Handle">
        <short>The window handle.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetProp">
        <short>Retrieves an property value for a window.</short>
        <descr/>
        <seealso>
          <link id="TWidgetSet.SetProp"/>
        </seealso>
      </element>
      <element name="TWidgetSet.GetProp.Result">
        <short>Nil on failure.</short>
      </element>
      <element name="TWidgetSet.GetProp.Handle">
        <short>The window handle.</short>
      </element>
      <element name="TWidgetSet.GetProp.Str">
        <short>The property name.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetRgnBox">
        <short>Returns the bounding rectangle of a region, containing the entire region.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetRgnBox.Result">
        <short>The region kind.</short>
      </element>
      <element name="TWidgetSet.GetRgnBox.RGN">
        <short>The region handle.</short>
      </element>
      <element name="TWidgetSet.GetRgnBox.lpRect">
        <short>Receives the coordinates.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetROP2">
        <short>The current Foreground Mixing Mode in an device context.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TWidgetSet.SetROP2"/>
          <link id="#lcl.LCLType.R2_COPYPEN"/>
        </seealso>
      </element>
      <element name="TWidgetSet.GetROP2.Result">
        <short>The mode, zero on failure.</short>
      </element>
      <element name="TWidgetSet.GetROP2.DC">
        <short>The device context.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetScrollInfo">
        <short>Returns all or selected information about a ScrollBar.
        </short>
        <descr/>
        <seealso>
          <link id="TWidgetSet.SetScrollInfo"/>
        </seealso>
      </element>
      <element name="TWidgetSet.GetScrollInfo.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.GetScrollInfo.Handle">
        <short>The handle of a ScrollBar, or of a window containing scrollbars.</short>
      </element>
      <element name="TWidgetSet.GetScrollInfo.SBStyle">
        <short>The ScrollBar kind.</short>
      </element>
      <element name="TWidgetSet.GetScrollInfo.ScrollInfo">
        <short>Receives the values indicated in fMask.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetStockObject">
        <short>Retrieves a handle to one of the predefined graphic objects.</short>
        <descr>
          <p>These are the predefined (Windows) stock objects:
          </p>
          <ul>
            <li>
              BLACK_BRUSH
            </li><li>
              DKGRAY_BRUSH
            </li><li>
              DC_BRUSH
            </li><li>
              GRAY_BRUSH
            </li><li>
              HOLLOW_BRUSH
            </li><li>
              LTGRAY_BRUSH
            </li><li>
              NULL_BRUSH
            </li><li>
              WHITE_BRUSH
            </li><li>
              BLACK_PEN
            </li><li>
              DC_PEN
            </li><li>
              WHITE_PEN
            </li><li>
              ANSI_FIXED_FONT
            </li><li>
              ANSI_VAR_FONT
            </li><li>
              DEVICE_DEFAULT_FONT
            </li><li>
              DEFAULT_GUI_FONT
            </li><li>
              OEM_FIXED_FONT
            </li><li>
              SYSTEM_FONT
            </li><li>
              SYSTEM_FIXED_FONT
            </li><li>
              DEFAULT_PALETTE
            </li>
          </ul>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetStockObject.Result">
        <short>The handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.GetStockObject.Value">
        <short>The object kind.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetSysColor">
        <short>Retrieves the system color for standard display elements.</short>
        <descr>
          <p>These are the available display elements:
          </p>
          <ul>
            <li>
              COLOR_3DDKSHADOW
            </li><li>
              COLOR_3DFACE, COLOR_BTNFACE
            </li><li>
              COLOR_3DHIGHLIGHT, COLOR_3DHILIGHT, COLOR_BTNHILIGHT, COLOR_BTNHIGHLIGHT
            </li><li>
              COLOR_3DLIGHT
            </li><li>
              COLOR_3DSHADOW, COLOR_BTNSHADOW
            </li><li>
              COLOR_ACTIVEBORDER
            </li><li>
              COLOR_ACTIVECAPTION
            </li><li>
              COLOR_APPWORKSPACE
            </li><li>
              COLOR_BACKGROUND, COLOR_DESKTOP
            </li><li>
              COLOR_BTNTEXT
            </li><li>
              COLOR_CAPTIONTEXT
            </li><li>
              COLOR_GRADIENTACTIVECAPTION
            </li><li>
              COLOR_GRADIENTINACTIVECAPTION
            </li><li>
              COLOR_GRAYTEXT
            </li><li>
              COLOR_HIGHLIGHT
            </li><li>
              COLOR_HIGHLIGHTTEXT
            </li><li>
              COLOR_HOTLIGHT
            </li><li>
              COLOR_INACTIVEBORDER
            </li><li>
              COLOR_INACTIVECAPTION
            </li><li>
              COLOR_INACTIVECAPTIONTEXT
            </li><li>
              COLOR_INFOBK
            </li><li>
              COLOR_INFOTEXT
            </li><li>
              COLOR_MENU
            </li><li>
              COLOR_MENUHILIGHT
            </li><li>
              COLOR_MENUBAR
            </li><li>
              COLOR_MENUTEXT
            </li><li>
              COLOR_SCROLLBAR
            </li><li>
              COLOR_WINDOW
            </li><li>
              COLOR_WINDOWFRAME
            </li><li>
              COLOR_WINDOWTEXT
            </li>
          </ul>
          <p>
            Since all returned values are valid colors, errors cannot be detected.
            GetSysColorBrush instead returns a zero handle on failure.
          </p>
        </descr>
        <seealso>
          <link id="TWidgetSet.GetSysColorBrush"/>
        </seealso>
      </element>
      <element name="TWidgetSet.GetSysColor.Result">
        <short>The RGB color.</short>
      </element>
      <element name="TWidgetSet.GetSysColor.nIndex">
        <short>The system color type.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetSysColorBrush">
        <short>Retrieves a system brush for standard display elements.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TWidgetSet.GetSysColor"/>
        </seealso>
      </element>
      <element name="TWidgetSet.GetSysColorBrush.Result">
        <short>The brush handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.GetSysColorBrush.nIndex">
        <short>The system color type.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetSystemPaletteEntries">
        <short>Retrieves an range of color entries from the system palette for a device.</short>
        <descr/>
        <seealso>
          <link id="TWidgetSet.GetPaletteEntries"/>
        </seealso>
      </element>
      <element name="TWidgetSet.GetSystemPaletteEntries.Result">
        <short>The number of entries copied, zero on failure.</short>
      </element>
      <element name="TWidgetSet.GetSystemPaletteEntries.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.GetSystemPaletteEntries.StartIndex">
        <short>The first entry to retrieve.</short>
      </element>
      <element name="TWidgetSet.GetSystemPaletteEntries.NumEntries">
        <short>The number of requested entries.</short>
      </element>
      <element name="TWidgetSet.GetSystemPaletteEntries.PaletteEntries">
        <short>Receives the color information. When Nil, the total number of palette entries is returned.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetSystemMetrics">
        <short>Retrieves various system metrics.</short>
        <descr>
          <p>
            All dimensions are measured in pixels.
          </p><p>
            These are available items:
          </p>
          <ul>
            <li>
              SM_ARRANGE
            </li><li>
              SM_CLEANBOOT
            </li><li>
              SM_CMONITORS
            </li><li>
              SM_CMOUSEBUTTONS
            </li><li>
              SM_CXBORDER, SM_CYBORDER
            </li><li>
              SM_CXCURSOR, SM_CYCURSOR
            </li><li>
              SM_CXDLGFRAME, SM_CYDLGFRAME
            </li><li>
              SM_CXDOUBLECLK, SM_CYDOUBLECLK
            </li><li>
              SM_CXDRAG, SM_CYDRAG
            </li><li>
              SM_CXEDGE, SM_CYEDGE
            </li><li>
              SM_CXFIXEDFRAME, SM_CYFIXEDFRAME
            </li><li>
              (sm_cxfocusborder)
            </li><li>
              SM_CXFRAME, SM_CYFRAME
            </li><li>
              SM_CXFULLSCREEN, SM_CYFULLSCREEN
            </li><li>
              SM_CXHSCROLL, SM_CYHSCROLL
            </li><li>
              SM_CXHTHUMB
            </li><li>
              SM_CXICON, SM_CYICON
            </li><li>
              SM_CXICONSPACING, SM_CYICONSPACING
            </li><li>
              SM_CXMAXIMIZED, SM_CYMAXIMIZED
            </li><li>
              SM_CXMAXTRACK, SM_CYMAXTRACK
            </li><li>
              SM_CXMENUCHECK, SM_CYMENUCHECK
            </li><li>
              SM_CXMENUSIZE, SM_CYMENUSIZE
            </li><li>
              SM_CXMIN, SM_CYMIN
            </li><li>
              SM_CXMINIMIZED, SM_CYMINIMIZED
            </li><li>
              SM_CXMINSPACING, SM_CYMINSPACING
            </li><li>
              SM_CXMINTRACK, SM_CYMINTRACK
            </li><li>
              SM_CXSCREEN, SM_CYSCREEN
            </li><li>
              SM_CXSIZE, SM_CYSIZE
            </li><li>
              SM_CXSIZEFRAME, SM_CYSIZEFRAME
            </li><li>
              SM_CXSMICON, SM_CYSMICON
            </li><li>
              SM_CXSMSIZE, SM_CYSMSIZE
            </li><li>
              SM_CXVIRTUALSCREEN, SM_CYVIRTUALSCREEN
            </li><li>
              SM_CXVSCROLL, SM_CYVSCROLL
            </li><li>
              SM_CYCAPTION
            </li><li>
              SM_CYKANJIWINDOW
            </li><li>
              SM_CYMENU
            </li><li>
              SM_CYSMCAPTION
            </li><li>
              SM_CYVTHUMB
            </li><li>
              SM_DBCSENABLED
            </li><li>
              SM_DEBUG
            </li><li>
              sm_imeenabled
              sm_mediacenter
            </li><li>
              SM_MENUDROPALIGNMENT
            </li><li>
              SM_MIDEASTENABLED
            </li><li>
              SM_MOUSEPRESENT
            </li><li>
              SM_MOUSEWHEELPRESENT
            </li><li>
              SM_NETWORK
            </li><li>
              SM_PENWINDOWS
            </li><li>
              sm_remotecontrol
              sm_remotesession
            </li><li>
              SM_SECURE
            </li><li>
              SM_SAMEDISPLAYFORMAT
            </li><li>
              SM_SHOWSOUNDS
            </li><li>
              sm_shuttingdown
            </li><li>
              SM_SLOWMACHINE
            </li><li>
              SM_SWAPBUTTON
            </li><li>
              sm_tabletpc
            </li><li>
              SM_XVIRTUALSCREEN, SM_YVIRTUALSCREEN
            </li>
          </ul>
          <p>
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetSystemMetrics.Result">
        <short>Depends on the requested item.</short>
      </element>
      <element name="TWidgetSet.GetSystemMetrics.nIndex">
        <short>The requested item.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetTextColor">
        <short>The current text color in an device context.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetTextColor.Result">
        <short>The RGB color.</short>
      </element>
      <element name="TWidgetSet.GetTextColor.DC">
        <short>The device context.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetTextExtentExPoint">
        <short>Calculates the number of characters, that fit into some horizontal space.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetTextExtentExPoint.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.GetTextExtentExPoint.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.GetTextExtentExPoint.Str">
        <short>The string containing the characters.</short>
      </element>
      <element name="TWidgetSet.GetTextExtentExPoint.Count">
        <short>The number of logical characters in Str, -1 for automatic detection.</short>
      </element>
      <element name="TWidgetSet.GetTextExtentExPoint.MaxWidth">
        <short>The maximum display width, in logical units.</short>
      </element>
      <element name="TWidgetSet.GetTextExtentExPoint.MaxCount">
        <short>Receives the number of <b>logical</b> (UTF) characters that can be displayed.
          When Nil, MaxWidth is ignored.</short>
      </element>
      <element name="TWidgetSet.GetTextExtentExPoint.PartialWidths">
        <short>Receives the widths for every partial sequence of characters. Can be Nil.</short>
      </element>
      <element name="TWidgetSet.GetTextExtentExPoint.Size">
        <short>Receives the total width and height of the display area.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetTextExtentPoint">
        <short>Computes the display width and height of an string.</short>
        <descr/>
        <errors>May not work properly without Unicode support.
        </errors>
        <seealso>
          <link id="TWidgetSet.GetTextExtentExPoint"/>
        </seealso>
      </element>
      <element name="TWidgetSet.GetTextExtentPoint.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.GetTextExtentPoint.DC">
        <short>The display DC.</short>
      </element>
      <element name="TWidgetSet.GetTextExtentPoint.Str">
        <short>The text.</short>
      </element>
      <element name="TWidgetSet.GetTextExtentPoint.Count">
        <short>The number of <b>bytes</b> in Str, -1 for automatic detection.</short>
      </element>
      <element name="TWidgetSet.GetTextExtentPoint.Size">
        <short>Receives the total width and height of the required display area.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetTextExtentPoint32" link="TWidgetSet.GetTextExtentPoint">
        <short>Computes the display width and height of an string.</short>
        <descr/>
        <errors>
        </errors>
        <seealso>
          <link id="TWidgetSet.GetTextExtentPoint"/>
          <link id="TWidgetSet.GetTextExtentExPoint"/>
        </seealso>
      </element>
      <element name="TWidgetSet.GetTextExtentPoint32.Result">
        <short/>
      </element>
      <element name="TWidgetSet.GetTextExtentPoint32.DC">
        <short/>
      </element>
      <element name="TWidgetSet.GetTextExtentPoint32.Str">
        <short/>
      </element>
      <element name="TWidgetSet.GetTextExtentPoint32.Count">
        <short/>
      </element>
      <element name="TWidgetSet.GetTextExtentPoint32.Size">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetTextMetrics">
        <short>Retrieves the metrics for the currently selected font.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetTextMetrics.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.GetTextMetrics.DC">
        <short>The device context, where the font is selected.</short>
      </element>
      <element name="TWidgetSet.GetTextMetrics.TM">
        <short>Receives the information.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetViewPortExtEx">
        <short>Returns the size of the viewport of an device context.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TWidgetSet.SetViewPortExtEx"/>
          <link id="TWidgetSet.GetViewPortOrgEx"/>
        </seealso>
      </element>
      <element name="TWidgetSet.GetViewPortExtEx.Result">
        <short>False (zero) on failure.</short>
      </element>
      <element name="TWidgetSet.GetViewPortExtEx.DC">
        <short/>
      </element>
      <element name="TWidgetSet.GetViewPortExtEx.Size">
        <short>Receives the viewport size.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetViewPortOrgEx">
        <short>Returns the origin of the viewport of an device context.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TWidgetSet.SetViewPortOrgEx"/>
          <link id="TWidgetSet.GetViewPortExtEx"/>
        </seealso>
      </element>
      <element name="TWidgetSet.GetViewPortOrgEx.Result">
        <short>False (zero) on failure.</short>
      </element>
      <element name="TWidgetSet.GetViewPortOrgEx.DC">
        <short/>
      </element>
      <element name="TWidgetSet.GetViewPortOrgEx.P">
        <short>Receives the viewport origin.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetWindowExtEx">
        <short>Returns the extent of a window, in logical units.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.GetWindowExtEx.Result">
        <short>False (zero) on failure.</short>
      </element>
      <element name="TWidgetSet.GetWindowExtEx.DC">
        <short/>
      </element>
      <element name="TWidgetSet.GetWindowExtEx.Size">
        <short>Receives the window extent.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetWindowLong">
        <short>Returns attributes of a window.</short>
        <descr>
          <p>The following attributes are defined:
          </p>
          <ul>
            <li>
              GWL_EXSTYLE - extended window style flags. See CreateWindowEx.
            </li><li>
              GWL_STYLE - window style flags.
            </li><li>
              GWL_WNDPROC - the window procedure (address or handle). See CallWindowProc.
            </li><li>
              GWL_HINSTANCE - handle of the application instance.
            </li><li>
              GWL_HWNDPARENT - handle of the parent window.
            </li><li>
              GWL_ID - the identifier of the window.
            </li><li>
              GWL_USERDATA - user data associated with the window.
            </li>
          </ul>
          <p>The following attributes are also available when the window is a dialog box:
          </p>
          <ul>
            <li>
              DWL_DLGPROC - the dialog box procedure (address or handle).
            </li><li>
              DWL_MSGRESULT - the return value of a message processed in the dialog box procedure.
            </li><li>
              DWL_USER - extra application information.
            </li>
          </ul>
          <p>
            GWL_USERDATA and DWL_USER are the base offsets of user added attributes.
            The second user attribute can be access with an additional offset of 4,
            and so on.
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetWindowLong.Result">
        <short>The sttribute.</short>
      </element>
      <element name="TWidgetSet.GetWindowLong.Handle">
        <short>The window handle.</short>
      </element>
      <element name="TWidgetSet.GetWindowLong.int">
        <short>Offset of the attribute.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetWindowRect">
        <short>Retrieves the bounding rectangle of a window, in screen coordinates.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetWindowRect.Result">
        <short>Zero on failure.</short>
      </element>
      <element name="TWidgetSet.GetWindowRect.Handle">
        <short>The window handle.</short>
      </element>
      <element name="TWidgetSet.GetWindowRect.Rect">
        <short>Receives the window bounds.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetWindowSize">
        <short>Returns the Width and Height of the window.</short>
        <descr>The size is the client width and height for forms or the total size for sub-controls</descr>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetWindowSize.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.GetWindowSize.Handle">
        <short>The window handle.</short>
      </element>
      <element name="TWidgetSet.GetWindowSize.Width">
        <short>The width.</short>
      </element>
      <element name="TWidgetSet.GetWindowSize.Height">
        <short>The height.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetWindowOrgEx">
        <short>Retrieves the window origin of an device context, in logical units.</short>
        <descr/>
        <seealso>
          <link id="TWidgetSet.SetWindowOrgEx"/>
          <link id="TWidgetSet.GetViewPortOrgEx"/>
        </seealso>
      </element>
      <element name="TWidgetSet.GetWindowOrgEx.Result">
        <short>Zero on failure.</short>
      </element>
      <element name="TWidgetSet.GetWindowOrgEx.dc">
        <short>The device context</short>
      </element>
      <element name="TWidgetSet.GetWindowOrgEx.P">
        <short>Receives the origin.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GradientFill">
        <short>Fills rectangle or triangle areas with gradient colors.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GradientFill.Result">
        <short>False on failure</short>
      </element>
      <element name="TWidgetSet.GradientFill.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.GradientFill.Vertices">
        <short/>
      </element>
      <element name="TWidgetSet.GradientFill.NumVertices">
        <short/>
      </element>
      <element name="TWidgetSet.GradientFill.Meshes">
        <short/>
      </element>
      <element name="TWidgetSet.GradientFill.NumMeshes">
        <short/>
      </element>
      <element name="TWidgetSet.GradientFill.Mode">
        <short>E.g. GRADIENT_FILL_RECT_H.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.HideCaret">
        <short>Removes the caret from the screen.</short>
        <descr>Calls are cumulative,
          for every HideCaret a call to ShowCaret is required.
        </descr>
        <seealso/>
      </element>
      <element name="TWidgetSet.HideCaret.Result">
        <short>False on failure</short>
      </element>
      <element name="TWidgetSet.HideCaret.hWnd">
        <short>The window handle, can be zero.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.InitializeCriticalSection">
        <short>Initializes a Critical Section object.</short>
        <descr>
          <p>
            Critical sections are thread synchronization elements,
            typically used to prevent concurrent access to a shared resource.
          </p><p>
            Only one thread can own a critical section at the same time,
            other requests (to enter the same critical section)
            are delayed until the owner has left the critical section.
          </p><p>
            The TCriticalSection type is platform specific,
            treat it like a Handle.
          </p>
        </descr>
        <seealso>
          <link id="TWidgetSet.EnterCriticalSection"/>
          <link id="TWidgetSet.TryEnterCriticalSection"/>
          <link id="TWidgetSet.LeaveCriticalSection"/>
          <link id="TWidgetSet.DeleteCriticalSection"/>
        </seealso>
      </element>
      <element name="TWidgetSet.InitializeCriticalSection.CritSection">
        <short>The critical section object.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.IntersectClipRect">
        <short>
          Shrinks the clipping region of an Device Context
          to a rectangular boundary, e.g. a text area.
        </short>
        <descr>
          <p>
            Use this method before painting into a rectangle in an DC,
            to clip everything outside the rectangle
            <b>and</b> outside the current clipping region of the DC.
          </p><p>
            The result can be one of the following constants:<br/>
            Error
            NullRegion
            SimpleRegion
            ComplexRegion
            Region_Error
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TWidgetSet.IntersectClipRect.Result">
        <short>The region type, zero on failure.</short>
      </element>
      <element name="TWidgetSet.IntersectClipRect.dc">
        <short/>
      </element>
      <element name="TWidgetSet.IntersectClipRect.Left">
        <short/>
      </element>
      <element name="TWidgetSet.IntersectClipRect.Top">
        <short/>
      </element>
      <element name="TWidgetSet.IntersectClipRect.Right">
        <short/>
      </element>
      <element name="TWidgetSet.IntersectClipRect.Bottom">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.InvalidateRect">
        <short>Marks a display area for repaint.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TWidgetSet.InvalidateRgn"/>
        </seealso>
      </element>
      <element name="TWidgetSet.InvalidateRect.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.InvalidateRect.aHandle">
        <short>The window handle.</short>
      </element>
      <element name="TWidgetSet.InvalidateRect.ARect">
        <short>The client coordinates of the area.</short>
      </element>
      <element name="TWidgetSet.InvalidateRect.bErase">
        <short>True forces a repaint of the background, before further painting.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.InvalidateRgn">
        <short>Marks a display area for repaint.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TWidgetSet.InvalidateRect"/>
        </seealso>
      </element>
      <element name="TWidgetSet.InvalidateRgn.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.InvalidateRgn.Handle">
        <short>The window handle.</short>
      </element>
      <element name="TWidgetSet.InvalidateRgn.Rgn">
        <short>The region to repaint.</short>
      </element>
      <element name="TWidgetSet.InvalidateRgn.Erase">
        <short>True forces a repaint of the background, before further painting.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.IsDBCSLeadByte">
        <short/>
        <descr/>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.IsDBCSLeadByte.Result">
        <short>True when the character code is the first of a double-byte character sequence</short>
      </element>
      <element name="TWidgetSet.IsDBCSLeadByte.TestChar">
        <short>The character code to test.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.IsIconic">
        <short>True when the window is minimized.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.IsIconic.Result">
        <short>True when the window is minimized.</short>
      </element>
      <element name="TWidgetSet.IsIconic.handle">
        <short>The window handle.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.IsWindow">
        <short>Checks whether a handle refers to a window.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.IsWindow.Result">
        <short>True when handle is a valid window handle.</short>
      </element>
      <element name="TWidgetSet.IsWindow.handle">
        <short>The handle to test.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.IsWindowEnabled">
        <short>Determines whether a window can receive mouse and keyboard input.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.IsWindowEnabled.Result">
        <short>True when the window is enabled (and visible).</short>
      </element>
      <element name="TWidgetSet.IsWindowEnabled.handle">
        <short>The window handle.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.IsWindowVisible">
        <short>The definite Visible state of a window.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.IsWindowVisible.Result">
        <short>True when the window and all its parents are visible.</short>
      </element>
      <element name="TWidgetSet.IsWindowVisible.handle">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.IsZoomed">
        <short>True when the window is maximized.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TWidgetSet.IsIconic"/>
        </seealso>
      </element>
      <element name="TWidgetSet.IsZoomed.Result">
        <short>True when the window is maximized.</short>
      </element>
      <element name="TWidgetSet.IsZoomed.handle">
        <short>The window handle.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.LeaveCriticalSection">
        <short>Releases a critical section, for use by other threads.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TWidgetSet.InitializeCriticalSection"/>
        </seealso>
      </element>
      <element name="TWidgetSet.LeaveCriticalSection.CritSection">
        <short>The critical section object.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.LineTo">
        <short>Draws a line from the current position up to, but not including, the specified point.</short>
        <descr>The current position is set to the given endpoint.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.LineTo.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.LineTo.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.LineTo.X">
        <short>The endpoint in logical units.</short>
      </element>
      <element name="TWidgetSet.LineTo.Y">
        <short>The endpoint in logical units.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.LPtoDP">
        <short>Converts logical coordinates into device coordinates.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.LPtoDP.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.LPtoDP.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.LPtoDP.Points">
        <short>Holds and receives the transformed coordinates.</short>
      </element>
      <element name="TWidgetSet.LPtoDP.Count">
        <short>The number of points in Points.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.MaskBlt">
        <short>Copies part of an source DC into an destination DC,
          using the specified foreground and background raster operations.
        </short>
        <descr>
          <p>
            MaskBlt behaves like BitBlt when no mask bitmap is specified.
            It does a SRCOPY operation when also no Rop is specified.
            See BitBlt for general information about raster operations.
          </p><p>
            Rop contains both a foreground and a background raster operation
            (see MakeROP4).
            When a (monochrome) mask bitmap is present, its bits select
            either the foreground (1) or background (0) raster operation.
          </p>
        </descr>
        <errors/>
        <seealso>
          <link id="TWidgetSet.BitBlt"/>
          <link id="TWidgetSet.StretchBlt"/>
          <link id="#lcl.LCLIntf.MakeROP4"/>
        </seealso>
      </element>
      <element name="TWidgetSet.MaskBlt.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.MaskBlt.DestDC">
        <short>The destination device context.</short>
      </element>
      <element name="TWidgetSet.MaskBlt.X">
        <short>The origin of the destination rectangle.</short>
      </element>
      <element name="TWidgetSet.MaskBlt.Y">
        <short>The origin of the destination rectangle.</short>
      </element>
      <element name="TWidgetSet.MaskBlt.Width">
        <short>The size of the destination rectangle.</short>
      </element>
      <element name="TWidgetSet.MaskBlt.Height">
        <short>The size of the destination rectangle.</short>
      </element>
      <element name="TWidgetSet.MaskBlt.SrcDC">
        <short>The source device context.</short>
      </element>
      <element name="TWidgetSet.MaskBlt.XSrc">
        <short>The origin of the source rectangle.</short>
      </element>
      <element name="TWidgetSet.MaskBlt.YSrc">
        <short>The origin of the source rectangle.</short>
      </element>
      <element name="TWidgetSet.MaskBlt.Mask">
        <short>The monochrome mask bitmap handle, can be zero.</short>
      </element>
      <element name="TWidgetSet.MaskBlt.XMask">
        <short>The origin of the mask rectangle.</short>
      </element>
      <element name="TWidgetSet.MaskBlt.YMask">
        <short>The origin of the mask rectangle.</short>
      </element>
      <element name="TWidgetSet.MaskBlt.Rop">
        <short>The raster operations (optional).</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.MessageBox">
        <short>The MessageBox function displays an modal dialog,
          with the given text, caption, icon and buttons.
        </short>
        <descr>
          <p>
            uType is a combination of flags from the following lists.
          </p><p>
            The shown buttons are selected by one of:
          </p>
          <ul>
            <li>
              MB_ABORTRETRYIGNORE - Abort, Retry, and Ignore.
            </li><li>
              MB_CANCELTRYCONTINUE - Cancel, Try Again, Continue.
               Use this message box type instead of MB_ABORTRETRYIGNORE.
            </li><li>
              MB_OK - OK.
            </li><li>
              MB_OKCANCEL - OK and Cancel.
            </li><li>
              MB_RETRYCANCEL - Retry and Cancel.
            </li><li>
              MB_YESNO - Yes and No.
            </li><li>
              MB_YESNOCANCEL - Yes, No, and Cancel.
            </li>
          </ul>
          <p>
             Add MB_HELP for an Help button.
             When the user clicks the Help button or presses F1,
             the owner window receives a WM_HELP message.
          </p><p>
            An icon can be added by one of:
          </p>
          <ul>
            <li>
              MB_ICONEXCLAMATION,
              MB_ICONWARNING - exclamation-point icon
            </li><li>
              MB_ICONINFORMATION,
              MB_ICONASTERISK - letter i in a circle
            </li><li>
              MB_ICONQUESTION - question-mark icon
            </li><li>
              MB_ICONSTOP,
              MB_ICONERROR,
              MB_ICONHAND - stop-sign icon
            </li>
          </ul>
          <p>
            The default button number, activated when the user presses Enter,
             can be indicated by one of:<br/>
              MB_DEFBUTTON1
              MB_DEFBUTTON2
              MB_DEFBUTTON3
              MB_DEFBUTTON4
          </p>
          <p>
            Further Windows MessageBox specific options
            are not (yet) implemented on other platforms.
          </p><p>
            The function result corresponds to the pressed button:<br/>
            IDABORT
            IDCANCEL
            IDCONTINUE
            IDIGNORE
            IDNO
            IDOK
            IDRETRY
            IDTRYAGAIN
            IDYES
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TWidgetSet.MessageBox.Result">
        <short>The pressed button, or zero on failure.</short>
      </element>
      <element name="TWidgetSet.MessageBox.hWnd">
        <short>The handle of the window that owns the MessageBox.</short>
      </element>
      <element name="TWidgetSet.MessageBox.lpText">
        <short>The text displayed in the MessageBox.</short>
      </element>
      <element name="TWidgetSet.MessageBox.lpCaption">
        <short>The caption of the MessageBox.</short>
      </element>
      <element name="TWidgetSet.MessageBox.uType">
        <short>Style flags specifiying the shown buttons etc.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.MonitorFromPoint">
        <short>Finds an monitor from screen coordinates.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.MonitorFromPoint.Result">
        <short><p>The monitor handle.</p>
          <p>When no monitor applies, <var>dwFlags</var> determines the result:</p>
          <ul>
            <li>
              MONITOR_DEFAULTTONEAREST - the nearest monitor.
            </li>
            <li>
              MONITOR_DEFAULTTONULL - zero.
            </li>
            <li>
              MONITOR_DEFAULTTOPRIMARY - the primary monitor.
            </li>
          </ul>
        </short>
      </element>
      <element name="TWidgetSet.MonitorFromPoint.ptScreenCoords">
        <short>The point in screen coordinates.</short>
      </element>
      <element name="TWidgetSet.MonitorFromPoint.dwFlags">
        <short>How coordinates outside any monitor are handled,
          see <link id="TWidgetSet.MonitorFromPoint.Result">MonitorFromPoint.Result</link>.
        </short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.MonitorFromRect" link="TWidgetSet.MonitorFromPoint">
        <short>Finds the monitor covering most of a rectangle.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.MonitorFromRect.Result">
        <short>The monitor handle,
          see <link id="TWidgetSet.MonitorFromPoint.Result"> dwFlags</link>.
        </short>
      </element>
      <element name="TWidgetSet.MonitorFromRect.lprcScreenCoords">
        <short>The logical screen coordinates.</short>
      </element>
      <element name="TWidgetSet.MonitorFromRect.dwFlags">
        <short>How coordinates outside any monitor are handled,
          see <link id="TWidgetSet.MonitorFromPoint.Result">MonitorFromPoint.Result</link>.
        </short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.MonitorFromWindow">
        <short>Finds the monitor covering most of a window.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.MonitorFromWindow.Result">
        <short>The monitor handle,
          see <link id="TWidgetSet.MonitorFromPoint.Result">MonitorFromPoint.Result</link>.
        </short>
      </element>
      <element name="TWidgetSet.MonitorFromWindow.hWnd">
        <short>The window handle.</short>
      </element>
      <element name="TWidgetSet.MonitorFromWindow.dwFlags">
        <short>How coordinates outside any monitor are handled,
          see <link id="TWidgetSet.MonitorFromPoint.Result">MonitorFromPoint.Result</link>.
        </short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.MoveToEx">
        <short>Moves the current position to the specified point.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TWidgetSet.MoveToEx.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.MoveToEx.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.MoveToEx.X">
        <short>The new logical position.</short>
      </element>
      <element name="TWidgetSet.MoveToEx.Y">
        <short>The new logical position.</short>
      </element>
      <element name="TWidgetSet.MoveToEx.OldPoint">
        <short>Receives the old position, can be Nil if not required.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.OffsetRgn">
        <short>Moves a region relative.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.OffsetRgn.Result">
        <short>The new region kind, zero on failure.</short>
      </element>
      <element name="TWidgetSet.OffsetRgn.RGN">
        <short>The Region to move.</short>
      </element>
      <element name="TWidgetSet.OffsetRgn.nXOffset">
        <short>The relative distance to move.</short>
      </element>
      <element name="TWidgetSet.OffsetRgn.nYOffset">
        <short>The relative distance to move.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.PeekMessage">
        <short>Checks the thread's message queue for a message.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TWidgetSet.PeekMessage.Result">
        <short/>
      </element>
      <element name="TWidgetSet.PeekMessage.lpMsg">
        <short>Receives the message.</short>
      </element>
      <element name="TWidgetSet.PeekMessage.Handle">
        <short>The target window handle of the message.
          Zero for any window, INVALID_HANDLE_VALUE for thread messages.
        </short>
      </element>
      <element name="TWidgetSet.PeekMessage.wMsgFilterMin">
        <short>The lowest message ID to retrieve.</short>
      </element>
      <element name="TWidgetSet.PeekMessage.wMsgFilterMax">
        <short>The highest message ID to retrieve, zero for all messages.</short>
      </element>
      <element name="TWidgetSet.PeekMessage.wRemoveMsg">
        <short>PM_REMOVE will remove the message from the queue.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.Pie">
        <short>Draws a filled pie-shaped wedge, from an ellipse and two radials.
        </short>
        <descr>
          <p>
            The ellipse is bounded by a rectangle x1..y2.
          </p><p>
            Each radial is defined by the center of the rectangle an point,
            which must not necessarily reside on the ellipse.
          </p><p>
            The bounding arc goes counter-clockwise from the Start to the End radial.
          </p><p>
            The pie is outlined with the current pen and filled with the current brush.
          </p>
        </descr>
        <errors/>
        <seealso>
          <link id="TWidgetSet.Chord"/>
        </seealso>
      </element>
      <element name="TWidgetSet.Pie.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.Pie.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.Pie.x1">
        <short>The bounding rectangle.</short>
      </element>
      <element name="TWidgetSet.Pie.y1">
        <short/>
      </element>
      <element name="TWidgetSet.Pie.x2">
        <short/>
      </element>
      <element name="TWidgetSet.Pie.y2">
        <short/>
      </element>
      <element name="TWidgetSet.Pie.sx">
        <short>The starting radial.</short>
      </element>
      <element name="TWidgetSet.Pie.sy">
        <short/>
      </element>
      <element name="TWidgetSet.Pie.ex">
        <short>The ending radial.</short>
      </element>
      <element name="TWidgetSet.Pie.ey">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.PolyBezier">
        <short>Draws Bézier curves.</short>
        <descr>
          <p>
            Use Polybezier to draw cubic Bézier curves.
          </p><p>
            The first curve is drawn from the first point to the fourth point
            with the second and third points being the control points.
          </p><p>
            If the Continuous flag is TRUE then each subsequent curve
            requires three more points, using the end-point of the previous Curve
            as its starting point.
          </p><p>
            If the Continous flag is set to FALSE, then each subsequent Curve
            requires 4 additional points, which are used exactly as in the first curve.
          </p><p>
            Any additonal points which do not add up to a full
            bezier (4 for Continuous, 3 otherwise) are ignored.
            There must be at least 4 points for an drawing to occur.
          </p><p>
            If the Filled Flag is TRUE then the resulting Poly-Bézier
            will be drawn as a Polygon.
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.PolyBezier.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.PolyBezier.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.PolyBezier.Points">
        <short>The array of points.</short>
      </element>
      <element name="TWidgetSet.PolyBezier.NumPts">
        <short>The number of points in Points.</short>
      </element>
      <element name="TWidgetSet.PolyBezier.Filled">
        <short>True draws a Polygon.</short>
      </element>
      <element name="TWidgetSet.PolyBezier.Continuous">
        <short>True uses the end-point as the starting point of the next segment.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.Polygon">
        <short>Draws a filled Polygon.</short>
        <descr>
          <p>
            Use Polygon to draw a closed, many-sided shape on the canvas,
            outlined with the current Pen and filled with the current Brush.
          </p><p>
            The Points parameter is an array of the vertices of the polygon.
          </p><p>
            Winding determines how the polygon is filled.
            When Winding is True, Polygon fills the shape using the Winding fill algorithm.
            When Winding is False, Polygon uses the even-odd (alternative) fill algorithm.
          </p><p>
            The first point is always connected to the last point.
          </p><p>
            To draw an unfilled polygon use the Polyline method,
            specifying the first point a second time at the end.
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.Polygon.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.Polygon.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.Polygon.Points">
        <short>The array of vertices.</short>
      </element>
      <element name="TWidgetSet.Polygon.NumPts">
        <short>The number of vertices.</short>
      </element>
      <element name="TWidgetSet.Polygon.Winding">
        <short>Selects the fill algorithm.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.Polyline">
        <short>Draws a sequence of lines.</short>
        <descr>
          <p>
            Use Polyline to connect a set of points on the canvas.
          </p><p>
            The Points parameter is an array of points to be connected.
          </p><p>
            If you specify only two points, Polyline draws a single line.
          </p><p>
            Calling the MoveTo function with the value of the first point,
            and then repeatedly calling LineTo with all subsequent points
            will draw the same image on the canvas.
            However, unlike LineTo, Polyline does not change the value of PenPos.
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.Polyline.Result">
        <short/>
      </element>
      <element name="TWidgetSet.Polyline.DC">
        <short/>
      </element>
      <element name="TWidgetSet.Polyline.Points">
        <short/>
      </element>
      <element name="TWidgetSet.Polyline.NumPts">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.PostMessage">
        <short>Sends a message to a window, without waiting for the message result.
        </short>
        <descr>
          <remark>
            This section was copied from LCLIntf, and may not apply to all platforms.
          </remark>
          <p>
            This method is a thread-safe solution to send messages to windows.
            Those messages will be handled in the message loop of the application
            and therefore can be sent from any thread.
            They are not immediate, but they will awake the main thread if it
            is waiting for messages.
          </p><p>
            These messages can be handled by procedures with the keyword message
            in the class of a form for example.
            One would then use the handle of this form as the Handle parameter
            of this routine.
          </p><p>
            Custom messages should always have an identification number
            (represented by the parameter Msg) larger then the constant LM_USER.
          </p><p>
            The two parameters WParam and LParam will be passed along to the
            window together with the Msg identification number.
          </p><p>
            The difference between SendMessage and PostMessage is the way that
            they return control to the calling thread.
            With SendMessage control is not returned until the window that the
            message was sent to has completed processing the sent message,
            however with PostMessage control is returned immediately.
          </p>
        </descr>
        <errors/>
        <seealso>
          <link id="TWidgetSet.SendMessage"/>
        </seealso>
      </element>
      <element name="TWidgetSet.PostMessage.Result">
        <short>Zero on failure.</short>
      </element>
      <element name="TWidgetSet.PostMessage.Handle">
        <short>The target window handle.</short>
      </element>
      <element name="TWidgetSet.PostMessage.Msg">
        <short>The message ID.</short>
      </element>
      <element name="TWidgetSet.PostMessage.WParam">
        <short/>
      </element>
      <element name="TWidgetSet.PostMessage.LParam">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.PtInRegion">
        <short>Tests whether a point lies in a region.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.PtInRegion.Result">
        <short>True when the point lies in the region.</short>
      </element>
      <element name="TWidgetSet.PtInRegion.RGN">
        <short>The region.</short>
      </element>
      <element name="TWidgetSet.PtInRegion.X">
        <short>The point coordinate.</short>
      </element>
      <element name="TWidgetSet.PtInRegion.Y">
        <short>The point coordinate.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.RealizePalette">
        <short>Maps palette entries from the current logical palette to the system palette.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.RealizePalette.Result">
        <short>The number of mapped entries.</short>
      </element>
      <element name="TWidgetSet.RealizePalette.DC">
        <short>The device context.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.Rectangle">
        <short>Draws a filled rectangle.</short>
          <p>
            The rectangle is outlined with the current Pen, and filled with the current Brush.
          </p><p>
            The bottom and right edges are not part of the rectangle.
          </p>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.Rectangle.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.Rectangle.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.Rectangle.X1">
        <short/>
      </element>
      <element name="TWidgetSet.Rectangle.Y1">
        <short/>
      </element>
      <element name="TWidgetSet.Rectangle.X2">
        <short/>
      </element>
      <element name="TWidgetSet.Rectangle.Y2">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.RectVisible">
        <short>Checks whether the clipping region contains (part of) a rectangle.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TWidgetSet.RectVisible.Result">
        <short>True when (part of) the rectangle is visible.</short>
      </element>
      <element name="TWidgetSet.RectVisible.dc">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.RectVisible.ARect">
        <short>The rectangle.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.RedrawWindow">
        <short>Redraws (part of) a window.</short>
        <descr>
          <p>
            All invalidated parts of a window, which deserve an update,
            are collected in the update region.
            When this region is not empty, WM_ERASEBKGND, WM_PAINT and WM_NCPAINT messages
            are sent to the window, as soon as the application is (almost) idle.
            RedrawWindow can be used to force an immediate redraw instead.
          </p><p>
            WM_ERASEBKGND is optional, erases the background before painting.
            WM_NCPAINT paints the non-client areas (borders, caption...),
            without assistance by user code.
          </p><p>
            When neither lprcUpdate nor hrgnUpdate are specified,
            the whole client area of the window is affected.
            Otherwise the region takes precedence over the rectangle.
          </p><p>
            Flags specify how the window is invalidated or validated,
            and when repainting occurs.
            Flags other than RDW_ERASE may not be supported by all platforms.
          </p><p>
            To invalidate specify RDW_INVALIDATE, and optionally one of:
          </p>
          <ul>
            <li>
              RDW_ERASE - forces a WM_ERASEBKGND message before painting.
            </li><li>
              RDW_FRAME - also redraws the window frame, as covered by the update region.
            </li><li>
              RDW_INTERNALPAINT - force WM_PAINT even if the update region is empty.
            </li><li>
            </li>
          </ul>
          <p>
            Validation is not implemented for all platforms.
            To validate specify RDW_VALIDATE, and optionally one of:
          </p>
          <ul>
            <li>
              RDW_NOERASE - suppress all pending WM_ERASEBKGND messages.
            </li><li>
              RDW_NOFRAME - suppress all pending WM_NCPAINT messages.
            </li><li>
              RDW_NOINTERNALPAINT - suppress all pending internal WM_PAINT messages.
            </li>
          </ul>
          <p>
            These flags specify <b>when</b> repainting will occur:
          </p>
          <ul>
            <li>
              RDW_ERASENOW - send WM_ERASEBKGND messages before returning.
            </li><li>
              RDW_UPDATENOW - send WM_PAINT messages before returning.
            </li>
          </ul>
          <p>
            The handling of child windows normally depends on the
            WS_CLIPCHILDREN window style flag.
            Clipped child windows are not normally affected by RedrawWindow.
            These flags override:
          </p>
          <ul>
            <li>
              RDW_ALLCHILDREN - include all child windows.
            </li><li>
              RDW_NOCHILDREN - exclude all child windows.
            </li>
          </ul>
          <p>
          </p>
        </descr>
        <seealso>
          <link id="TWidgetSet.InvalidateRect"/>
          <link id="TWidgetSet.InvalidateRgn"/>
        </seealso>
      </element>
      <element name="TWidgetSet.RedrawWindow.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.RedrawWindow.Wnd">
        <short>The window to redraw.</short>
      </element>
      <element name="TWidgetSet.RedrawWindow.lprcUpdate">
        <short>The rectangle to redraw, ignored when a region is given.</short>
      </element>
      <element name="TWidgetSet.RedrawWindow.hrgnUpdate">
        <short>The region to redraw, can be zero.</short>
      </element>
      <element name="TWidgetSet.RedrawWindow.flags">
        <short>How the redraw works.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ReleaseCapture">
        <short>Restores normal mouse input processing,
          after <link id="TWidgetSet.SetCapture">SetCapture</link>.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TWidgetSet.ReleaseCapture.Result">
        <short>False on failure.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ReleaseDC">
        <short>Releases an Device Context obtained by GetDC.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TWidgetSet.ReleaseDC.Result">
        <short>Zero on failure.</short>
      </element>
      <element name="TWidgetSet.ReleaseDC.hWnd">
        <short>The handle of the window, whose DC is released.</short>
      </element>
      <element name="TWidgetSet.ReleaseDC.DC">
        <short>The device context to release.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.RemoveProp">
        <short>Removes a named property from a window.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.RemoveProp.Result">
        <short>The handle of the removed data, zero on failure.</short>
      </element>
      <element name="TWidgetSet.RemoveProp.Handle">
        <short>The window handle.</short>
      </element>
      <element name="TWidgetSet.RemoveProp.Str">
        <short>The name of the property to remove.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.RestoreDC">
        <short>Restores an Device Context (DC) to an previously
          <link id="TWidgetSet.SaveDC">saved</link> state.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TWidgetSet.SaveDC"/>
        </seealso>
      </element>
      <element name="TWidgetSet.RestoreDC.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.RestoreDC.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.RestoreDC.SavedDC">
        <short>The index returned by SaveDC, or -1 for the most recently saved state.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.RoundRect">
        <short>Draws a filled rectangle with rounded corners.</short>
        <descr>The rectangle is outlined with the current Pen, and filled with the current Brush.
        </descr>
        <seealso/>
      </element>
      <element name="TWidgetSet.RoundRect.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.RoundRect.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.RoundRect.X1">
        <short>The rectangle coordinates.</short>
      </element>
      <element name="TWidgetSet.RoundRect.Y1">
        <short/>
      </element>
      <element name="TWidgetSet.RoundRect.X2">
        <short/>
      </element>
      <element name="TWidgetSet.RoundRect.Y2">
        <short/>
      </element>
      <element name="TWidgetSet.RoundRect.RX">
        <short>The extent of the ellipse, used for the rounded corners.</short>
      </element>
      <element name="TWidgetSet.RoundRect.RY">
        <short>The extent of the ellipse, used for the rounded corners.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SaveDC">
        <short>Saves the state of an Device Context in the context stack.</short>
        <descr/>
        <seealso>
          <link id="TWidgetSet.RestoreDC"/>
        </seealso>
      </element>
      <element name="TWidgetSet.SaveDC.Result">
        <short>The index of the saved DC, zero on failure.</short>
      </element>
      <element name="TWidgetSet.SaveDC.DC">
        <short>The device context to save.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ScreenToClient">
        <short>Converts absolute Screen coordinates into Client relative coordinates.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.ScreenToClient.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.ScreenToClient.Handle">
        <short>The handle of the window with the client area.</short>
      </element>
      <element name="TWidgetSet.ScreenToClient.P">
        <short>The point to convert.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ScrollWindowEx">
        <short>Scrolls the content of a window, by a number of pixels.</short>
        <descr>
          <p>The following flags are defined:
          </p>
          <ul>
            <li>
              SW_ERASE - when used with SW_INVALIDATE sends WM_ERASEBKGND messages
              for the invalidated parts of the window.
            </li><li>
              SW_INVALIDATE - invalidates the resulting hrgnUpdate region.
            </li><li>
              SW_SCROLLCHILDREN - also scrolls child windows within the scroll rect.
              Beware: also scrolls <b>parts</b> of the child windows!
            </li><li>
              SW_SMOOTHSCROLL - set HIWORD of <var>flags</var> to the time for the scrolling operation.
            </li>
          </ul>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.ScrollWindowEx.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.ScrollWindowEx.hWnd">
        <short>The window handle.</short>
      </element>
      <element name="TWidgetSet.ScrollWindowEx.dx">
        <short>Horizontal distance (positive to scroll right)</short>
      </element>
      <element name="TWidgetSet.ScrollWindowEx.dy">
        <short>Vertical distance (positive to scroll down)</short>
      </element>
      <element name="TWidgetSet.ScrollWindowEx.prcScroll">
        <short>The part of the window, that is to be scrolled. Nil means the entire client area.
        </short>
      </element>
      <element name="TWidgetSet.ScrollWindowEx.prcClip">
        <short>Pixels falling outside this rectangle are lost. Nil means the entire client area.</short>
      </element>
      <element name="TWidgetSet.ScrollWindowEx.hrgnUpdate">
        <short>The invalidated parts of the window are added to this region (can be zero).</short>
      </element>
      <element name="TWidgetSet.ScrollWindowEx.prcUpdate">
        <short>Receives the boundary of the invalidated part of the window (can be Nil).</short>
      </element>
      <element name="TWidgetSet.ScrollWindowEx.flags">
        <short>Control flags.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SelectClipRGN">
        <short>Sets the ClipRegion of an DeviceContext.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.SelectClipRGN.Result">
        <short>The region kind.</short>
      </element>
      <element name="TWidgetSet.SelectClipRGN.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.SelectClipRGN.RGN">
        <short>The region to copy, zero for an empty region.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SelectObject">
        <short>Selects an object into an device context.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.SelectObject.Result">
        <short>The previously selected object, for a region the new region type.</short>
      </element>
      <element name="TWidgetSet.SelectObject.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.SelectObject.GDIObj">
        <short>The object to select.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SelectPalette">
        <short>Selects a logical palette into an device context.</short>
        <descr>A foreground palette becomes the palette of the device, when the
          application is in the foreground.
          A background palette instead is mapped to the closest
          colors in the palette of the physical device.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.SelectPalette.Result">
        <short>The handle of the previously selected palette.</short>
      </element>
      <element name="TWidgetSet.SelectPalette.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.SelectPalette.Palette">
        <short>The palette to select.</short>
      </element>
      <element name="TWidgetSet.SelectPalette.ForceBackground">
        <short>True to select the background palette.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SendMessage">
        <short>Sends a message to a window.</short>
        <descr>
          <remark>
            This section was copied from LCLIntf, and may not apply to all platforms.
          </remark>
          <p>
            This method is a thread-safe solution to send messages to windows.
          </p><p>
            The messages will be handled in the message loop of the application
            and therefore can be sent from any thread.
            They are not immediate, but they will awake the main thread if it
            is waiting for messages.
          </p><p>
            Custom messages should always have an ID higher than the constant LM_USER.
          </p><p>
            The two parameters WParam and LParam will be passed to the
            message handler, together with the message ID.
          </p><p>
            The difference between SendMessage and PostMessage is the way that
            they return control to the calling thread.
            With SendMessage control is not returned until the window that the
            message was sent to has completed processing the sent message,
            however with PostMessage control is returned immediately.
          </p>
        </descr>
        <errors/>
        <seealso>
          <link id="TWidgetSet.PostMessage"/>
        </seealso>
      </element>
      <element name="TWidgetSet.SendMessage.Result">
        <short>The result depends on the message type.</short>
      </element>
      <element name="TWidgetSet.SendMessage.HandleWnd">
        <short>The handle of the target window.</short>
      </element>
      <element name="TWidgetSet.SendMessage.Msg">
        <short>The message ID.</short>
      </element>
      <element name="TWidgetSet.SendMessage.WParam">
        <short>Message parameter.</short>
      </element>
      <element name="TWidgetSet.SendMessage.LParam">
        <short>Message parameter.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetActiveWindow">
        <short>Sets focus to the specified window, if the application is on top.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.SetActiveWindow.Result">
        <short>The handle of the window that lost the focus, zero on failure.</short>
      </element>
      <element name="TWidgetSet.SetActiveWindow.Handle">
        <short>The window handle to activate.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetBkColor">
        <short>Sets the current background color of an decice context.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.SetBkColor.Result">
        <short>The old background color, CLR_INVALID on failure.</short>
      </element>
      <element name="TWidgetSet.SetBkColor.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.SetBkColor.Color">
        <short>The new background color.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetBkMode">
        <short>Sets the background mix mode (transparency) of an device context.</short>
        <descr>
          <p>
            The background mode specifies the handling of non-solid painting objects,
            like text, hatched brushes or dotted pens.
          </p>
          <ul>
            <li>
              OPAQUE mode fills the affected painting area with the background color
              before painting the foreground.
            </li><li>
              TRANSPARENT mode leaves the background unchanged.
            </li>
          </ul>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.SetBkMode.Result">
        <short>The previous background mode, zero on failure.</short>
      </element>
      <element name="TWidgetSet.SetBkMode.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.SetBkMode.bkMode">
        <short>The new background mode.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetCapture">
        <short>Sets the mouse capture to the specified window.</short>
        <descr>The window will receive all mouse messages, until capture
          is released again.
        </descr>
        <errors/>
        <seealso>
          <link id="TWidgetSet.ReleaseCapture"/>
        </seealso>
      </element>
      <element name="TWidgetSet.SetCapture.Result">
        <short>The handle of the previous capture window, zero if none.</short>
      </element>
      <element name="TWidgetSet.SetCapture.AHandle">
        <short>The handle of the capturing window.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetCaretPos">
        <short>Moves the Caret to the specified coordinates.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TWidgetSet.CreateCaret"/>
        </seealso>
      </element>
      <element name="TWidgetSet.SetCaretPos.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.SetCaretPos.X">
        <short>The new caret position.</short>
      </element>
      <element name="TWidgetSet.SetCaretPos.Y">
        <short>The new caret position.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetCaretPosEx">
        <short>Moves the Caret into a window.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.SetCaretPosEx.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.SetCaretPosEx.handle">
        <short>The window handle.</short>
      </element>
      <element name="TWidgetSet.SetCaretPosEx.X">
        <short>The new caret position.</short>
      </element>
      <element name="TWidgetSet.SetCaretPosEx.Y">
        <short>The new caret position.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetCursor">
        <short>Changes the shape of the mouse cursor.</short>
        <descr/>
        <seealso>
          <link id="#lcl.Controls.TCursor"/>
          <link id="TWidgetSet.CreateStandardCursor"/>
        </seealso>
      </element>
      <element name="TWidgetSet.SetCursor.Result">
        <short>The handle of the previous cursor, zero if none.</short>
      </element>
      <element name="TWidgetSet.SetCursor.hCursor">
        <short>The new cursor handle.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetCursorPos">
        <short>Changes the position of the mouse cursor.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.SetCursorPos.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.SetCursorPos.X">
        <short>The new screen coordinates.</short>
      </element>
      <element name="TWidgetSet.SetCursorPos.Y">
        <short>The new screen coordinates.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetFocus">
        <short>Sets the keyboard input focus to the specified window.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TWidgetSet.SetFocus.Result">
        <short>The handle of the previously focused window, zero if none.</short>
      </element>
      <element name="TWidgetSet.SetFocus.hWnd">
        <short>The handle of the window receiving the focus.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetForegroundWindow">
        <short>Moves a window in front of all other windows, and activates it.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.SetForegroundWindow.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.SetForegroundWindow.hWnd">
        <short>The window handle.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetMapMode">
        <short>Sets the mapping mode of an device context.</short>
        <descr>
          <p>
            The mapping mode specifies the correspondence between logical and physical units.
            Supported modes are:
          </p>
          <ul>
            <li>
              MM_ANISOTROPIC - arbitrary mapping
            </li><li>
              MM_HIENGLISH - 0.001 inch
            </li><li>
              MM_HIMETRIC - 0.01 mm
            </li><li>
              MM_ISOTROPIC - arbitrary mapping, same for X and Y axis
            </li><li>
              MM_LOENGLISH - 0.01 inch
            </li><li>
              MM_LOMETRIC - 0.1 mm
            </li><li>
              MM_TEXT - 1 device pixel
            </li><li>
              MM_TWIPS - 1/20th point (twip, 1/1440 inch)
            </li>
          </ul>
          <p>
            Positive X is right, except for (an)isotropic mappings.
            Positive Y is up, except for (an)isotropic and MM_TEXT mappings.
          </p>
        </descr>
        <seealso>
          <link id="TWidgetSet.GetMapMode"/>
        </seealso>
      </element>
      <element name="TWidgetSet.SetMapMode.Result">
        <short>The old mapping mode.</short>
      </element>
      <element name="TWidgetSet.SetMapMode.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.SetMapMode.fnMapMode">
        <short>The new mapping mode.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetMenu">
        <short>Assigns a menu to a window.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.SetMenu.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.SetMenu.AWindowHandle">
        <short>The window handle.</short>
      </element>
      <element name="TWidgetSet.SetMenu.AMenuHandle">
        <short>The menu handle.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetParent">
        <short>Changes the parent of a window.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.SetParent.Result">
        <short>The handle of the previous parent window, zero if none or failure.</short>
      </element>
      <element name="TWidgetSet.SetParent.hWndChild">
        <short>The handle of the child window.</short>
      </element>
      <element name="TWidgetSet.SetParent.hWndParent">
        <short>The handle of the new parent window, zero for the desktop window.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetProp">
        <short>Adds a property to a window.</short>
        <descr/>
        <seealso>
          <link id="TWidgetSet.GetProp"/>
        </seealso>
      </element>
      <element name="TWidgetSet.SetProp.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.SetProp.Handle">
        <short>The window handle.</short>
      </element>
      <element name="TWidgetSet.SetProp.Str">
        <short>The property name.</short>
      </element>
      <element name="TWidgetSet.SetProp.Data">
        <short>Pointer to the property data.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetROP2">
        <short>Sets the Foreground Mixing Mode in an device context.</short>
        <descr>
          <p>
            The raster operation specifies how foreground painting (Brush, Pen)
            is combined with the current pixels in the DC.
          </p><p>
            The operation combines bitwise the distinct red, green and blue values of the pixel colors.
          </p><p>
            There exist 16 raster operations, according to the possible combinations
            of two (boolean) values:
          </p>
          <ul>
            <li>
              R2_BLACK - all black (0).
            </li><li>
              R2_COPYPEN - Pen color.
            </li><li>
              R2_MASKNOTPEN - Dst and not Pen.
            </li><li>
              R2_MASKPEN - Dst and Pen.
            </li><li>
              R2_MASKPENNOT - (not Dst) and Pen.
            </li><li>
              R2_MERGENOTPEN - Dst or not Pen.
            </li><li>
              R2_MERGEPEN - Dst or Pen.
            </li><li>
              R2_MERGEPENNOT - (not Dst) or Pen.
            </li><li>
              R2_NOP - Dst (unchanged).
            </li><li>
              R2_NOT - not Dst.
            </li><li>
              R2_NOTCOPYPEN - not Pen.
            </li><li>
              R2_NOTMASKPEN - not (Dst and Pen).
            </li><li>
              R2_NOTMERGEPEN - not (Dst or Pen).
            </li><li>
              R2_NOTXORPEN - not (Dst xor Pen).
            </li><li>
              R2_WHITE - all white.
            </li><li>
              R2_XORPEN - Dst xor Pen.
            </li>
          </ul>
        </descr>
        <seealso>
          <link id="TWidgetSet.GetROP2"/>
          <link id="#lcl.LCLType.R2_COPYPEN"/>
        </seealso>
      </element>
      <element name="TWidgetSet.SetROP2.Result">
        <short>The old mode, zero on failure.</short>
      </element>
      <element name="TWidgetSet.SetROP2.DC">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.SetROP2.Mode">
        <short>The new mode.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetScrollInfo">
        <short>Sets (selected) parameters of a scroll bar.</short>
        <descr/>
        <seealso>
          <link id="TWidgetSet.GetScrollInfo"/>
        </seealso>
      </element>
      <element name="TWidgetSet.SetScrollInfo.Result">
        <short>The (new) slider position.</short>
      </element>
      <element name="TWidgetSet.SetScrollInfo.Handle">
        <short>The handle of a ScrollBar, or of a window containing scrollbars.</short>
      </element>
      <element name="TWidgetSet.SetScrollInfo.SBStyle">
        <short>The ScrollBar kind.</short>
      </element>
      <element name="TWidgetSet.SetScrollInfo.ScrollInfo">
        <short>Contains the new values.</short>
      </element>
      <element name="TWidgetSet.SetScrollInfo.Redraw">
        <short>True forces a repaint of the ScrollBar.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetStretchBltMode">
        <short>Sets the StrechBlt mode for an device context.</short>
        <descr>
          <p>
            The following modes are defined:
          </p>
          <ul>
            <li>
              BLACKONWHITE - preserves black pixels in a monchrome bitmap.
            </li><li>
              COLORONCOLOR
            </li><li>
              HALFTONE, STRETCH_HALFTONE
            </li><li>
              WHITEONBLACK - preserves white pixels in a monchrome bitmap.
            </li>
          </ul>
        </descr>
        <seealso/>
      </element>
      <element name="TWidgetSet.SetStretchBltMode.Result">
        <short>The previous mode, zero on failure.</short>
      </element>
      <element name="TWidgetSet.SetStretchBltMode.DC">
        <short>The Device Context.</short>
      </element>
      <element name="TWidgetSet.SetStretchBltMode.StretchMode">
        <short>The new mode.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetSysColors">
        <short>Sets the colors for one or more display elements of window borders and desktop.</short>
        <descr/>
        <seealso>
          <link id="TWidgetSet.GetSysColor">GetSysColor</link> for the element identifiers.
        </seealso>
      </element>
      <element name="TWidgetSet.SetSysColors.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.SetSysColors.cElements">
        <short>The number of colors to change, size of the arrays.</short>
      </element>
      <element name="TWidgetSet.SetSysColors.lpaElements">
        <short>Array of element identifiers.</short>
      </element>
      <element name="TWidgetSet.SetSysColors.lpaRgbValues">
        <short>Array of RGB colors.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetTextCharacterExtra">
        <short>Sets extra intercharacter spacing in text output.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.SetTextCharacterExtra.Result">
        <short>The previous spacing, $80000000 on failure.</short>
      </element>
      <element name="TWidgetSet.SetTextCharacterExtra._hdc">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.SetTextCharacterExtra.nCharExtra">
        <short>The additional spacing, in logical units.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetTextColor">
        <short>Sets the text color in an device context.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.SetTextColor.Result">
        <short>The previous color, CLR_INVALID on failure.</short>
      </element>
      <element name="TWidgetSet.SetTextColor.DC">
        <short>The Device Context.</short>
      </element>
      <element name="TWidgetSet.SetTextColor.Color">
        <short>The new text color.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetViewPortExtEx">
        <short>Sets the extent of the viewport for a device context.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TWidgetSet.SetViewPortOrgEx"/>
          <link id="TWidgetSet.SetWindowExtEx"/>
        </seealso>
      </element>
      <element name="TWidgetSet.SetViewPortExtEx.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.SetViewPortExtEx.DC">
        <short>The Device Context.</short>
      </element>
      <element name="TWidgetSet.SetViewPortExtEx.XExtent">
        <short>The extent in device units.</short>
      </element>
      <element name="TWidgetSet.SetViewPortExtEx.YExtent">
        <short>The extent in device units.</short>
      </element>
      <element name="TWidgetSet.SetViewPortExtEx.OldSize">
        <short>Receives the previous extent, if not Nil.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetViewPortOrgEx">
        <short>Sets the device origin corresponding to the window origin (0,0) in an device context.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TWidgetSet.SetViewPortExtEx"/>
          <link id="TWidgetSet.SetWindowOrgEx"/>
        </seealso>
      </element>
      <element name="TWidgetSet.SetViewPortOrgEx.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.SetViewPortOrgEx.DC">
        <short>The Device Context.</short>
      </element>
      <element name="TWidgetSet.SetViewPortOrgEx.NewX">
        <short>The coordinates in device units.</short>
      </element>
      <element name="TWidgetSet.SetViewPortOrgEx.NewY">
        <short>The coordinates in device units.</short>
      </element>
      <element name="TWidgetSet.SetViewPortOrgEx.OldPoint">
        <short>Receives the previous origin, if not Nil.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetWindowExtEx">
        <short>Sets the extent of the window for an device context.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TWidgetSet.SetViewPortExtEx"/>
          <link id="TWidgetSet.SetWindowOrgEx"/>
        </seealso>
      </element>
      <element name="TWidgetSet.SetWindowExtEx.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.SetWindowExtEx.DC">
        <short>The Device Context.</short>
      </element>
      <element name="TWidgetSet.SetWindowExtEx.XExtent">
        <short>The extent in logical units.</short>
      </element>
      <element name="TWidgetSet.SetWindowExtEx.YExtent">
        <short>The extent in logical units.</short>
      </element>
      <element name="TWidgetSet.SetWindowExtEx.OldSize">
        <short>Receives the previous extent, if not Nil.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetWindowLong">
        <short>Sets an attribute of a window.</short>
        <descr/>
        <seealso>
          <link id="TWidgetSet.GetWindowLong"/>
        </seealso>
      </element>
      <element name="TWidgetSet.SetWindowLong.Result">
        <short>The previous value, zero on failure.</short>
      </element>
      <element name="TWidgetSet.SetWindowLong.Handle">
        <short>The window handle.</short>
      </element>
      <element name="TWidgetSet.SetWindowLong.Idx">
        <short>The attribute offset.</short>
      </element>
      <element name="TWidgetSet.SetWindowLong.NewLong">
        <short>The new value.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetWindowOrgEx">
        <short>Specifies which window point maps to the viewport origin (0,0).</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TWidgetSet.SetWindowOrgEx.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.SetWindowOrgEx.dc">
        <short>The device context.</short>
      </element>
      <element name="TWidgetSet.SetWindowOrgEx.NewX">
        <short>The origin in logical units.</short>
      </element>
      <element name="TWidgetSet.SetWindowOrgEx.NewY">
        <short>The origin in logical units.</short>
      </element>
      <element name="TWidgetSet.SetWindowOrgEx.OldPoint">
        <short>Receives the previous origin, if not Nil.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetWindowPos">
        <short>Changes the size, position, and Z order of a window.</short>
        <descr>
          <p>
            The Z order can be changed to just behind another window, or:
          </p>
          <ul>
            <li>
              HWND_BOTTOM - behind all other windows.
            </li><li>
              HWND_NOTOPMOST - behind all topmost windows.
            </li><li>
              HWND_TOP - above all other windows.
            </li><li>
              HWND_TOPMOST - above all other non-topmost windows.
            </li>
          </ul>
          <p>
            The general placement can be a combination of:
          </p>
          <ul>
            <li>
              SWP_ASYNCWINDOWPOS - don't block the calling thread
                when the window is owned by an different thread.
            </li><li>
              SWP_DEFERERASE - suppress WM_SYNCPAINT message.
            </li><li>
              SWP_DRAWFRAME - draw the window frame.
            </li><li>
              SWP_FRAMECHANGED - apply new frame style.
            </li><li>
              SWP_HIDEWINDOW - hides the window.
            </li><li>
              SWP_NOACTIVATE - don't activate the window.
            </li><li>
              SWP_NOCOPYBITS - invalidate the entire client area.
                If not set, the window content moves together with the window.
            </li><li>
              SWP_NOMOVE - the position is not changed (ignores X, Y).
            </li><li>
              SWP_NOREPOSITION,
              SWP_NOOWNERZORDER - the Z order of the owner window is unchanged.
            </li><li>
              SWP_NOREDRAW - nothing is redrawn automatically,
                not even uncovered parts of the window.
            </li><li>
            </li><li>
              SWP_NOSENDCHANGING - no WM_WINDOWPOSCHANGING message.
            </li><li>
              SWP_NOSIZE - the size is unchanged (ignores cx, cy).
            </li><li>
              SWP_NOZORDER - the Z order is unchanged (ignores hWndInsertAfter)
            </li><li>
              SWP_SHOWWINDOW - unhide the window.
            </li>
          </ul>
          <p>
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TWidgetSet.SetWindowPos.Result">
        <short>Zero on failure.</short>
      </element>
      <element name="TWidgetSet.SetWindowPos.hWnd">
        <short>The window handle.</short>
      </element>
      <element name="TWidgetSet.SetWindowPos.hWndInsertAfter">
        <short>The window handle or Z order position.</short>
      </element>
      <element name="TWidgetSet.SetWindowPos.X">
        <short>The window origin.</short>
      </element>
      <element name="TWidgetSet.SetWindowPos.Y">
        <short>The window origin.</short>
      </element>
      <element name="TWidgetSet.SetWindowPos.cx">
        <short>The window extent.</short>
      </element>
      <element name="TWidgetSet.SetWindowPos.cy">
        <short>The window extent.</short>
      </element>
      <element name="TWidgetSet.SetWindowPos.uFlags">
        <short>General placement flags.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetWindowRgn">
        <short>Restricts the visible part of the entire window.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.SetWindowRgn.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.SetWindowRgn.hWnd">
        <short>The window handle.</short>
      </element>
      <element name="TWidgetSet.SetWindowRgn.hRgn">
        <short>The window region handle.</short>
      </element>
      <element name="TWidgetSet.SetWindowRgn.bRedraw">
        <short>True forces a repaint of the window.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ShowCaret">
        <short>Shows the Caret (text cursor).</short>
        <descr/>
        <seealso>
          <link id="TWidgetSet.HideCaret"/>
        </seealso>
      </element>
      <element name="TWidgetSet.ShowCaret.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.ShowCaret.hWnd">
        <short>The window handle.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ShowScrollBar">
        <short>Shows or hides a ScrollBar.</short>
        <descr/>
        <seealso>
          <link id="TWidgetSet.EnableScrollBar"/>
        </seealso>
      </element>
      <element name="TWidgetSet.ShowScrollBar.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.ShowScrollBar.Handle">
        <short>The window or ScrollBar handle.</short>
      </element>
      <element name="TWidgetSet.ShowScrollBar.wBar">
        <short>The scrollbar type (SB_CTL, SB_HORZ...).</short>
      </element>
      <element name="TWidgetSet.ShowScrollBar.bShow">
        <short>True shows, False hides the ScrollBar.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ShowWindow">
        <short>Shows a window in an specific state.</short>
        <descr>
          <p>
            These are available options:
          </p>
          <ul>
            <li>
              sw_forceminimize
            </li><li>
              SW_HIDE - hides the window.
            </li><li>
              SW_MAXIMIZE - maximizes the window.
            </li><li>
              SW_MINIMIZE - minimizes the window.
            </li><li>
              SW_RESTORE - activates and restores from minimized/maximized to normal state.
            </li><li>
              SW_SHOW - activates and shows the window.
            </li><li>
              SW_SHOWMAXIMIZED - activates and maximizes the window.
            </li><li>
              SW_SHOWMINIMIZED - activates and minimizes the window.
            </li><li>
              SW_SHOWMINNOACTIVE - minimizes the window.
            </li><li>
              SW_SHOWNA - shows the window.
            </li><li>
              SW_SHOWNOACTIVATE - shows the window as designed.
            </li><li>
              SW_SHOWNORMAL - activates and shows the window as designed.
            </li>
          </ul>
        </descr>
        <seealso/>
      </element>
      <element name="TWidgetSet.ShowWindow.Result">
        <short>True when the window was already visible.</short>
      </element>
      <element name="TWidgetSet.ShowWindow.hWnd">
        <short>The window handle.</short>
      </element>
      <element name="TWidgetSet.ShowWindow.nCmdShow">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.Sleep">
        <short>Suspends the current thread for a certain time interval.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TWidgetSet.Sleep.dwMilliseconds">
        <short>The time interval in milliseconds.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.StretchBlt">
        <short>Copies a rectangular region into an device context,
          shrinking or stretching it as required.
        </short>
        <descr/>
        <seealso>
          <link id="TWidgetSet.StretchMaskBlt"/>
          <link id="TWidgetSet.SetStretchBltMode"/>
          <link id="TWidgetSet.BitBlt"/>
        </seealso>
      </element>
      <element name="TWidgetSet.StretchBlt.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.StretchBlt.DestDC">
        <short>The destination device context.</short>
      </element>
      <element name="TWidgetSet.StretchBlt.X">
        <short>The destination origin.</short>
      </element>
      <element name="TWidgetSet.StretchBlt.Y">
        <short>The destination origin.</short>
      </element>
      <element name="TWidgetSet.StretchBlt.Width">
        <short>The destination extent.</short>
      </element>
      <element name="TWidgetSet.StretchBlt.Height">
        <short>The destination extent.</short>
      </element>
      <element name="TWidgetSet.StretchBlt.SrcDC">
        <short>The source device context.</short>
      </element>
      <element name="TWidgetSet.StretchBlt.XSrc">
        <short>The source origin.</short>
      </element>
      <element name="TWidgetSet.StretchBlt.YSrc">
        <short>The source origin.</short>
      </element>
      <element name="TWidgetSet.StretchBlt.SrcWidth">
        <short>The source extent.</short>
      </element>
      <element name="TWidgetSet.StretchBlt.SrcHeight">
        <short>The source extent.</short>
      </element>
      <element name="TWidgetSet.StretchBlt.Rop">
        <short>The raster opcode (see BitBlt).</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.StretchDIBits">
        <short>Copies a rectangular region from a DIB into an device context,
          shrinking or stretching it as required.
        </short>
        <descr/>
        <seealso>
          <link id="TWidgetSet.StretchMaskBlt"/>
          <link id="TWidgetSet.StretchBlt"/>
          <link id="TWidgetSet.StretchMaskBlt"/>
        </seealso>
      </element>
      <element name="TWidgetSet.StretchDIBits.Result">
        <short/>
      </element>
      <element name="TWidgetSet.StretchDIBits.DC">
        <short>The destination Device Context.</short>
      </element>
      <element name="TWidgetSet.StretchDIBits.DestX">
        <short>The destination origin.</short>
      </element>
      <element name="TWidgetSet.StretchDIBits.DestY">
        <short>The destination origin.</short>
      </element>
      <element name="TWidgetSet.StretchDIBits.DestWidth">
        <short>The destination extent.</short>
      </element>
      <element name="TWidgetSet.StretchDIBits.DestHeight">
        <short>The destination extent.</short>
      </element>
      <element name="TWidgetSet.StretchDIBits.SrcX">
        <short>The source origin.</short>
      </element>
      <element name="TWidgetSet.StretchDIBits.SrcY">
        <short>The source origin.</short>
      </element>
      <element name="TWidgetSet.StretchDIBits.SrcWidth">
        <short>The source extent.</short>
      </element>
      <element name="TWidgetSet.StretchDIBits.SrcHeight">
        <short>The source extent.</short>
      </element>
      <element name="TWidgetSet.StretchDIBits.Bits">
        <short>The device independent bitmap bits.</short>
      </element>
      <element name="TWidgetSet.StretchDIBits.BitsInfo">
        <short>The bitmap info structure.</short>
      </element>
      <element name="TWidgetSet.StretchDIBits.Usage">
        <short>The color mode.</short>
      </element>
      <element name="TWidgetSet.StretchDIBits.Rop">
        <short>The raster operation.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SystemParametersInfo">
        <short>Retrieves or sets one of the system-wide parameters.</short>
        <descr>
          <p>
            Most of the parameters are Windows platform specific.
          </p><p>
            SPI_GETACCESSTIMEOUT
            SPI_GETFILTERKEYS
            SPI_GETFOCUSBORDERHEIGHT
            SPI_GETFOCUSBORDERWIDTH
            SPI_GETHIGHCONTRAST
            SPI_GETMOUSECLICKLOCK
            SPI_GETMOUSECLICKLOCKTIME
            SPI_GETMOUSEKEYS
            SPI_GETMOUSESONAR
            SPI_GETMOUSEVANISH
            SPI_GETSCREENREADER
            SPI_GETSERIALKEYS
            SPI_GETSHOWSOUNDS
            SPI_GETSOUNDSENTRY
            SPI_GETSTICKYKEYS
            SPI_GETTOGGLEKEYS

            SPI_SETACCESSTIMEOUT
            SPI_SETFILTERKEYS
            SPI_SETFOCUSBORDERHEIGHT
            SPI_SETFOCUSBORDERWIDTH
            SPI_SETHIGHCONTRAST
            SPI_SETMOUSECLICKLOCK
            SPI_SETMOUSECLICKLOCKTIME
            SPI_SETMOUSEKEYS
            SPI_SETMOUSESONAR
            SPI_SETMOUSEVANISH
            SPI_SETSCREENREADER
            SPI_SETSERIALKEYS
            SPI_SETSHOWSOUNDS
            SPI_SETSOUNDSENTRY
            SPI_SETSTICKYKEYS
            SPI_SETTOGGLEKEYS
          </p><p>
            SPI_GETDESKWALLPAPER
            SPI_GETDROPSHADOW
            SPI_GETFLATMENU
            SPI_GETFONTSMOOTHING
            SPI_GETFONTSMOOTHINGCONTRAST
            SPI_GETFONTSMOOTHINGTYPE
            SPI_GETWORKAREA

            SPI_SETCURSORS
            SPI_SETDESKPATTERN
            SPI_SETDESKWALLPAPER
            SPI_SETDROPSHADOW
            SPI_SETFLATMENU
            SPI_SETFONTSMOOTHING
            SPI_SETFONTSMOOTHINGCONTRAST
            SPI_SETFONTSMOOTHINGTYPE
            SPI_SETWORKAREA
          </p><p>
            SPI_GETICONMETRICS
            SPI_GETICONTITLELOGFONT
            SPI_GETICONTITLEWRAP
            SPI_ICONHORIZONTALSPACING
            SPI_ICONVERTICALSPACING

            SPI_SETICONMETRICS
            SPI_SETICONS
            SPI_SETICONTITLELOGFONT
            SPI_SETICONTITLEWRAP
          </p><p>
            SPI_GETBEEP
            SPI_GETBLOCKSENDINPUTRESETS
            SPI_GETDEFAULTINPUTLANG
            SPI_GETKEYBOARDCUES
            SPI_GETKEYBOARDDELAY
            SPI_GETKEYBOARDPREF
            SPI_GETKEYBOARDSPEED
            SPI_GETMOUSE
            SPI_GETMOUSEHOVERHEIGHT
            SPI_GETMOUSEHOVERTIME
            SPI_GETMOUSEHOVERWIDTH
            SPI_GETMOUSESPEED
            SPI_GETMOUSETRAILS
            SPI_GETSNAPTODEFBUTTON
            SPI_GETWHEELSCROLLLINES

            SPI_SETBEEP
            SPI_SETBLOCKSENDINPUTRESETS
            SPI_SETDEFAULTINPUTLANG
            SPI_SETDOUBLECLICKTIME
            SPI_SETDOUBLECLKHEIGHT
            SPI_SETDOUBLECLKWIDTH
            SPI_SETKEYBOARDCUES
            SPI_SETKEYBOARDDELAY
            SPI_SETKEYBOARDPREF
            SPI_SETKEYBOARDSPEED
            SPI_SETLANGTOGGLE
            SPI_SETMOUSE
            SPI_SETMOUSEBUTTONSWAP
            SPI_SETMOUSEHOVERHEIGHT
            SPI_SETMOUSEHOVERTIME
            SPI_SETMOUSEHOVERWIDTH
            SPI_SETMOUSESPEED
            SPI_SETMOUSETRAILS
            SPI_SETSNAPTODEFBUTTON
            SPI_SETWHEELSCROLLLINES
          </p><p>
            SPI_GETMENUDROPALIGNMENT
            SPI_GETMENUFADE
            SPI_GETMENUSHOWDELAY

            SPI_SETMENUDROPALIGNMENT
            SPI_SETMENUFADE
            SPI_SETMENUSHOWDELAY
          </p><p>
            SPI_GETLOWPOWERACTIVE
            SPI_GETLOWPOWERTIMEOUT
            SPI_GETPOWEROFFACTIVE
            SPI_GETPOWEROFFTIMEOUT

            SPI_SETLOWPOWERACTIVE
            SPI_SETLOWPOWERTIMEOUT
            SPI_SETPOWEROFFACTIVE
            SPI_SETPOWEROFFTIMEOUT
          </p><p>
            SPI_GETSCREENSAVEACTIVE
            SPI_GETSCREENSAVERRUNNING
            SPI_GETSCREENSAVETIMEOUT

            SPI_SETSCREENSAVEACTIVE
            SPI_SETSCREENSAVERRUNNING
            SPI_SETSCREENSAVETIMEOUT
          </p><p>
            SPI_GETCOMBOBOXANIMATION
            SPI_GETCURSORSHADOW
            SPI_GETGRADIENTCAPTIONS
            SPI_GETHOTTRACKING
            SPI_GETLISTBOXSMOOTHSCROLLING
            SPI_GETMENUANIMATION
            SPI_GETMENUUNDERLINES
            SPI_GETSELECTIONFADE
            SPI_GETTOOLTIPANIMATION
            SPI_GETTOOLTIPFADE
            SPI_GETUIEFFECTS

            SPI_SETCOMBOBOXANIMATION
            SPI_SETCURSORSHADOW
            SPI_SETGRADIENTCAPTIONS
            SPI_SETHOTTRACKING
            SPI_SETLISTBOXSMOOTHSCROLLING
            SPI_SETMENUANIMATION
            SPI_SETMENUUNDERLINES
            SPI_SETSELECTIONFADE
            SPI_SETTOOLTIPANIMATION
            SPI_SETTOOLTIPFADE
            SPI_SETUIEFFECTS
          </p><p>
            SPI_GETACTIVEWINDOWTRACKING
            SPI_GETACTIVEWNDTRKZORDER
            SPI_GETACTIVEWNDTRKTIMEOUT
            SPI_GETANIMATION
            SPI_GETBORDER
            SPI_GETCARETWIDTH
            SPI_GETDRAGFULLWINDOWS
            SPI_GETFOREGROUNDFLASHCOUNT
            SPI_GETFOREGROUNDLOCKTIMEOUT
            SPI_GETMINIMIZEDMETRICS
            SPI_GETNONCLIENTMETRICS
            SPI_GETSHOWIMEUI

            SPI_SETACTIVEWINDOWTRACKING
            SPI_SETACTIVEWNDTRKZORDER
            SPI_SETACTIVEWNDTRKTIMEOUT
            SPI_SETANIMATION
            SPI_SETBORDER
            SPI_SETCARETWIDTH
            SPI_SETDRAGFULLWINDOWS
            SPI_SETDRAGWIDTH
            SPI_SETDRAGWIDTH
            SPI_SETFOREGROUNDFLASHCOUNT
            SPI_SETFOREGROUNDLOCKTIMEOUT
            SPI_SETMINIMIZEDMETRICS
            SPI_SETNONCLIENTMETRICS
            SPI_SETSHOWIMEUI
          </p><p>
            SPI_GETWINDOWSEXTENSION
            SPI_SETPENWINDOWS
          </p><p>
            Additional actions (zero for none):<br/>
            spif_updateinifile
            spif_sendchange
            spif_sendwindowinichange
          </p>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.SystemParametersInfo.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.SystemParametersInfo.uiAction">
        <short>The parameter and action.</short>
      </element>
      <element name="TWidgetSet.SystemParametersInfo.uiParam">
        <short>Depends on uiAction.</short>
      </element>
      <element name="TWidgetSet.SystemParametersInfo.pvParam">
        <short>Depends on uiAction.</short>
      </element>
      <element name="TWidgetSet.SystemParametersInfo.fWinIni">
        <short>Additional actions.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.TextOut">
        <short>Draws an string without formatting (single line).</short>
        <descr/>
        <seealso>
          <link id="TWidgetSet.ExtTextOut"/>
        </seealso>
      </element>
      <element name="TWidgetSet.TextOut.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.TextOut.DC">
        <short>The Device Context.</short>
      </element>
      <element name="TWidgetSet.TextOut.X">
        <short>The text origin in logical coordinates.</short>
      </element>
      <element name="TWidgetSet.TextOut.Y">
        <short>The text origin in logical coordinates.</short>
      </element>
      <element name="TWidgetSet.TextOut.Str">
        <short>The text.</short>
      </element>
      <element name="TWidgetSet.TextOut.Count">
        <short>The number of (Wide)Chars in the string.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.UpdateWindow">
        <short>Forces an immediate repaint of a window, if required.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TWidgetSet.UpdateWindow.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.UpdateWindow.Handle">
        <short>The window handle.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.WindowFromPoint">
        <short>Finds the window containing the specified point.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TWidgetSet.WindowFromPoint.Result">
        <short>The window handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.WindowFromPoint.Point">
        <short>The screen coordinates.</short>
      </element>

      <!-- function Visibility: public -->
      <element name="TWidgetSet.AddEventHandler">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.AddEventHandler.Result">
        <short/>
      </element>
      <element name="TWidgetSet.AddEventHandler.AHandle">
        <short/>
      </element>
      <element name="TWidgetSet.AddEventHandler.AFlags">
        <short/>
      </element>
      <element name="TWidgetSet.AddEventHandler.AEventHandler">
        <short/>
      </element>
      <element name="TWidgetSet.AddEventHandler.AData">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.AddProcessEventHandler">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.AddProcessEventHandler.Result">
        <short/>
      </element>
      <element name="TWidgetSet.AddProcessEventHandler.AHandle">
        <short/>
      </element>
      <element name="TWidgetSet.AddProcessEventHandler.AEventHandler">
        <short/>
      </element>
      <element name="TWidgetSet.AddProcessEventHandler.AData">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.AddPipeEventHandler">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.AddPipeEventHandler.Result">
        <short/>
      </element>
      <element name="TWidgetSet.AddPipeEventHandler.AHandle">
        <short/>
      </element>
      <element name="TWidgetSet.AddPipeEventHandler.AEventHandler">
        <short/>
      </element>
      <element name="TWidgetSet.AddPipeEventHandler.AData">
        <short/>
      </element>
      <element name="TWidgetSet.AllocateHWnd">
        <short>Allocates an invisible window that can be used to receive messages.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TWidgetSet.DeallocateHWnd"/>
        </seealso>
      </element>
      <element name="TWidgetSet.AllocateHWnd.Result">
        <short>The window handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.AllocateHWnd.Method">
        <short>The callback method for the window. Can be Nil.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.AskUser">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.AskUser.Result">
        <short/>
      </element>
      <element name="TWidgetSet.AskUser.DialogCaption">
        <short/>
      </element>
      <element name="TWidgetSet.AskUser.DialogMessage">
        <short/>
      </element>
      <element name="TWidgetSet.AskUser.DialogType">
        <short/>
      </element>
      <element name="TWidgetSet.AskUser.Buttons">
        <short/>
      </element>
      <element name="TWidgetSet.AskUser.HelpCtx">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.CallDefaultWndHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.CallDefaultWndHandler.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.CallDefaultWndHandler.Message">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ClipboardFormatToMimeType">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.ClipboardFormatToMimeType.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.ClipboardFormatToMimeType.FormatID">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ClipboardGetData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.ClipboardGetData.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.ClipboardGetData.ClipboardType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.ClipboardGetData.FormatID">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.ClipboardGetData.Stream">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ClipboardGetFormats">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.ClipboardGetFormats.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.ClipboardGetFormats.ClipboardType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.ClipboardGetFormats.Count">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.ClipboardGetFormats.List">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ClipboardGetOwnerShip">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.ClipboardGetOwnerShip.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.ClipboardGetOwnerShip.ClipboardType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.ClipboardGetOwnerShip.OnRequestProc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.ClipboardGetOwnerShip.FormatCount">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.ClipboardGetOwnerShip.Formats">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ClipboardRegisterFormat">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.ClipboardRegisterFormat.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.ClipboardRegisterFormat.AMimeType">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ComboBoxDropDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.ComboBoxDropDown.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.ComboBoxDropDown.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.ComboBoxDropDown.DropDown">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateBitmapFromRawImage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.CreateBitmapFromRawImage.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.CreateBitmapFromRawImage.RawImage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.CreateBitmapFromRawImage.Bitmap">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.CreateBitmapFromRawImage.MaskBitmap">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.CreateBitmapFromRawImage.AlwaysCreateMask">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateEmptyRegion">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.CreateEmptyRegion.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreatePixmapIndirect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.CreatePixmapIndirect.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.CreatePixmapIndirect.Data">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.CreatePixmapIndirect.TransColor">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateRegionCopy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.CreateRegionCopy.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.CreateRegionCopy.SrcRGN">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateRubberBand">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.CreateRubberBand.Result">
        <short/>
      </element>
      <element name="TWidgetSet.CreateRubberBand.ARect">
        <short/>
      </element>
      <element name="TWidgetSet.CreateRubberBand.ABrush">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.CreateStandardCursor">
        <short>Creates one of the standard cursors.</short>
        <descr>
        </descr>
        <seealso>
          <link id="#lcl.Controls.TCursor"/>
          <link id="TWidgetSet.SetCursor"/>
        </seealso>
      </element>
      <element name="TWidgetSet.CreateStandardCursor.Result">
        <short>The cursor handle, zero on failure.</short>
      </element>
      <element name="TWidgetSet.CreateStandardCursor.ACursor">
        <short>The cursor shape.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.DCClipRegionValid">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.DCClipRegionValid.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.DCClipRegionValid.DC">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.DeallocateHWnd">
        <short>Deletes a window created with AllocateHWnd.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TWidgetSet.AllocateHWnd"/>
        </seealso>
      </element>
      <element name="TWidgetSet.DeallocateHWnd.Wnd">
        <short>The window handle.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.DestroyRubberBand">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.DestroyRubberBand.ARubberBand">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.DrawDefaultDockImage">
        <short>Draws the DockRect during drag-dock operations.</short>
        <descr>
        </descr>
        <errors>
          The Windows implementation doesn't cooperate with the DragManager.
          See Mantis 0018525
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.DrawDefaultDockImage.AOldRect">
        <short>The old DockRect.</short>
      </element>
      <element name="TWidgetSet.DrawDefaultDockImage.ANewRect">
        <short>The new DockRect.</short>
      </element>
      <element name="TWidgetSet.DrawDefaultDockImage.AOperation">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.DrawGrid">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.DrawGrid.DC">
        <short/>
      </element>
      <element name="TWidgetSet.DrawGrid.R">
        <short/>
      </element>
      <element name="TWidgetSet.DrawGrid.DX">
        <short/>
      </element>
      <element name="TWidgetSet.DrawGrid.DY">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ExtUTF8Out" link="TWidgetSet.ExtTextOut">
        <short>Draws an UTF-8 string without formatting (single line).</short>
        <descr>The intercharacter spacing array (Dx) must have one element for
          every Char (byte) in the UTF-8 text.
          For multi-byte character codes the values of all Dx elements are summed up.
        </descr>
        <seealso>
          <link id="TWidgetSet.ExtTextOut"/>
        </seealso>
      </element>
      <element name="TWidgetSet.ExtUTF8Out.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.ExtUTF8Out.DC">
        <short>The Device Context.</short>
      </element>
      <element name="TWidgetSet.ExtUTF8Out.X">
        <short>The reference point, used to position the text.</short>
      </element>
      <element name="TWidgetSet.ExtUTF8Out.Y">
        <short>The reference point, used to position the text.</short>
      </element>
      <element name="TWidgetSet.ExtUTF8Out.Options">
        <short>Output options.</short>
      </element>
      <element name="TWidgetSet.ExtUTF8Out.Rect">
        <short>The bounding rectangle.</short>
      </element>
      <element name="TWidgetSet.ExtUTF8Out.Str">
        <short>The text.</short>
      </element>
      <element name="TWidgetSet.ExtUTF8Out.Count">
        <short>The number of Chars in the string.</short>
      </element>
      <element name="TWidgetSet.ExtUTF8Out.Dx">
        <short>Pointer to an array of intercharacter spacing values, can be Nil.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.FontCanUTF8">
        <short>Obsolete option, don't use it. It will be removed.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TWidgetSet.FontCanUTF8.Result">
        <short>True when Unicode is supported.</short>
      </element>
      <element name="TWidgetSet.FontCanUTF8.Font">
        <short>The font handle.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.FontIsMonoSpace">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.FontIsMonoSpace.Result">
        <short/>
      </element>
      <element name="TWidgetSet.FontIsMonoSpace.Font">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.Frame">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.Frame.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.Frame.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.Frame.ARect">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.Frame3d">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.Frame3d.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.Frame3d.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.Frame3d.ARect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.Frame3d.FrameWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.Frame3d.Style">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetAcceleratorString">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetAcceleratorString.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetAcceleratorString.AVKey">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetAcceleratorString.AShiftState">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetBitmapRawImageDescription">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetBitmapRawImageDescription.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetBitmapRawImageDescription.Bitmap">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetBitmapRawImageDescription.Desc">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetCaretRespondToFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetCaretRespondToFocus.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetCaretRespondToFocus.handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetCaretRespondToFocus.ShowHideOnFocus">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetClientBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetClientBounds.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetClientBounds.handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetClientBounds.ARect">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetCmdLineParamDescForInterface">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetCmdLineParamDescForInterface.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetControlConstraints">
        <short>Updates the constraints object (e.g. TSizeConstraints) with interface specific bounds.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.GetControlConstraints.Result">
        <short>False on failure.</short>
      </element>
      <element name="TWidgetSet.GetControlConstraints.Constraints">
        <short>Should be a TSizeConstraints.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetDCOriginRelativeToWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetDCOriginRelativeToWindow.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetDCOriginRelativeToWindow.PaintDC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetDCOriginRelativeToWindow.WindowHandle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetDCOriginRelativeToWindow.OriginDiff">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetDesignerDC">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetDesignerDC.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetDesignerDC.WindowHandle">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetDeviceRawImageDescription">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetDeviceRawImageDescription.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetDeviceRawImageDescription.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetDeviceRawImageDescription.Desc">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetDeviceSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetDeviceSize.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetDeviceSize.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetDeviceSize.p">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetLCLOwnerObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetLCLOwnerObject.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetLCLOwnerObject.Handle">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetListBoxIndexAtY">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetListBoxIndexAtY.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetListBoxIndexAtY.ListBox">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetListBoxIndexAtY.y">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetListBoxItemRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetListBoxItemRect.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetListBoxItemRect.ListBox">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetListBoxItemRect.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetListBoxItemRect.ARect">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetNotebookTabIndexAtPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetNotebookTabIndexAtPos.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetNotebookTabIndexAtPos.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetNotebookTabIndexAtPos.ClientPos">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetRawImageFromDevice">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetRawImageFromDevice.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetRawImageFromDevice.SrcDC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetRawImageFromDevice.SrcRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetRawImageFromDevice.NewRawImage">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetRawImageFromBitmap">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetRawImageFromBitmap.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetRawImageFromBitmap.SrcBitmap">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetRawImageFromBitmap.SrcMaskBitmap">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetRawImageFromBitmap.SrcRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetRawImageFromBitmap.NewRawImage">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetScrollBarSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetScrollBarSize.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetScrollBarSize.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetScrollBarSize.SBStyle">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetScrollbarVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetScrollbarVisible.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetScrollbarVisible.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetScrollbarVisible.SBStyle">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.GetWindowRelativePosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.GetWindowRelativePosition.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetWindowRelativePosition.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetWindowRelativePosition.Left">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.GetWindowRelativePosition.Top">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.IntfSendsUTF8KeyPress">
        <short>Returns the interface capability to send UTF-8 characters</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TWidgetSet.IntfSendsUTF8KeyPress.Result">
        <short>True when UTF-8 KeyPress messages are sent</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.InvalidateFrame">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.InvalidateFrame.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.InvalidateFrame.aHandle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.InvalidateFrame.ARect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.InvalidateFrame.bErase">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.InvalidateFrame.BorderWidth">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.IsDesignerDC">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.IsDesignerDC.Result">
        <short/>
      </element>
      <element name="TWidgetSet.IsDesignerDC.WindowHandle">
        <short/>
      </element>
      <element name="TWidgetSet.IsDesignerDC.DC">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.MoveWindowOrgEx">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.MoveWindowOrgEx.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.MoveWindowOrgEx.dc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.MoveWindowOrgEx.dX">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.MoveWindowOrgEx.dY">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.PromptUser">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.PromptUser.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.PromptUser.DialogCaption">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.PromptUser.DialogMessage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.PromptUser.DialogType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.PromptUser.Buttons">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.PromptUser.ButtonCount">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.PromptUser.DefaultIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.PromptUser.EscapeResult">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.PromptUserAtXY">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.PromptUserAtXY.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.PromptUserAtXY.DialogCaption">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.PromptUserAtXY.DialogMessage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.PromptUserAtXY.DialogType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.PromptUserAtXY.Buttons">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.PromptUserAtXY.ButtonCount">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.PromptUserAtXY.DefaultIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.PromptUserAtXY.EscapeResult">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.PromptUserAtXY.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.PromptUserAtXY.Y">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.RadialArc">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.RadialArc.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.RadialArc.DC">
        <short/>
      </element>
      <element name="TWidgetSet.RadialArc.left">
        <short/>
      </element>
      <element name="TWidgetSet.RadialArc.top">
        <short/>
      </element>
      <element name="TWidgetSet.RadialArc.right">
        <short/>
      </element>
      <element name="TWidgetSet.RadialArc.bottom">
        <short/>
      </element>
      <element name="TWidgetSet.RadialArc.sx">
        <short/>
      </element>
      <element name="TWidgetSet.RadialArc.sy">
        <short/>
      </element>
      <element name="TWidgetSet.RadialArc.ex">
        <short/>
      </element>
      <element name="TWidgetSet.RadialArc.ey">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.RadialChord">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.RadialChord.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.RadialChord.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.RadialChord.x1">
        <short/>
      </element>
      <element name="TWidgetSet.RadialChord.y1">
        <short/>
      </element>
      <element name="TWidgetSet.RadialChord.x2">
        <short/>
      </element>
      <element name="TWidgetSet.RadialChord.y2">
        <short/>
      </element>
      <element name="TWidgetSet.RadialChord.sx">
        <short/>
      </element>
      <element name="TWidgetSet.RadialChord.sy">
        <short/>
      </element>
      <element name="TWidgetSet.RadialChord.ex">
        <short/>
      </element>
      <element name="TWidgetSet.RadialChord.ey">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.RadialPie">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.RadialPie.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.RadialPie.DC">
        <short/>
      </element>
      <element name="TWidgetSet.RadialPie.x1">
        <short/>
      </element>
      <element name="TWidgetSet.RadialPie.y1">
        <short/>
      </element>
      <element name="TWidgetSet.RadialPie.x2">
        <short/>
      </element>
      <element name="TWidgetSet.RadialPie.y2">
        <short/>
      </element>
      <element name="TWidgetSet.RadialPie.Angle1">
        <short/>
      </element>
      <element name="TWidgetSet.RadialPie.Angle2">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.RawImage_CreateBitmaps">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.RawImage_CreateBitmaps.Result">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_CreateBitmaps.ARawImage">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_CreateBitmaps.ABitmap">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_CreateBitmaps.AMask">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_CreateBitmaps.ASkipMask">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.RawImage_DescriptionFromBitmap">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.RawImage_DescriptionFromBitmap.Result">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_DescriptionFromBitmap.ABitmap">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_DescriptionFromBitmap.ADesc">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.RawImage_DescriptionFromDevice">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.RawImage_DescriptionFromDevice.Result">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_DescriptionFromDevice.ADC">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_DescriptionFromDevice.ADesc">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.RawImage_FromBitmap">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.RawImage_FromBitmap.Result">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_FromBitmap.ARawImage">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_FromBitmap.ABitmap">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_FromBitmap.AMask">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_FromBitmap.ARect">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.RawImage_FromDevice">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.RawImage_FromDevice.Result">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_FromDevice.ARawImage">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_FromDevice.ADC">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_FromDevice.ARect">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_QueryDescription">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.RawImage_QueryDescription.Result">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_QueryDescription.AFlags">
        <short/>
      </element>
      <element name="TWidgetSet.RawImage_QueryDescription.ADesc">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.RegroupMenuItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.RegroupMenuItem.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.RegroupMenuItem.hndMenu">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.RegroupMenuItem.GroupIndex">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.ReleaseDesignerDC">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.ReleaseDesignerDC.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.ReleaseDesignerDC.hWnd">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.ReleaseDesignerDC.DC">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.RemoveEventHandler">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.RemoveEventHandler.AHandler">
        <short/>
      </element>
      <element name="TWidgetSet.RemoveProcessEventHandler">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.RemoveProcessEventHandler.AHandler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.RemovePipeEventHandler">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.RemovePipeEventHandler.AHandler">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.RequestInput">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.RequestInput.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.RequestInput.InputCaption">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.RequestInput.InputPrompt">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.RequestInput.MaskInput">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.RequestInput.Value">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.RightJustifyMenuItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.RightJustifyMenuItem.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.RightJustifyMenuItem.HndMenu">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.RightJustifyMenuItem.bRightJustify">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.SendCachedLCLMessages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetCaretRespondToFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.SetCaretRespondToFocus.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.SetCaretRespondToFocus.handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.SetCaretRespondToFocus.ShowHideOnFocus">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.SetComboMinDropDownSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.SetComboMinDropDownSize.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.SetComboMinDropDownSize.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.SetComboMinDropDownSize.MinItemsWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.SetComboMinDropDownSize.MinItemsHeight">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.SetComboMinDropDownSize.MinItemCount">
        <short/>
      </element>

      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.SetEventHandlerFlags">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.SetEventHandlerFlags.AHandler">
        <short/>
      </element>
      <element name="TWidgetSet.SetEventHandlerFlags.NewFlags">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidgetSet.SetRubberBandRect">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.SetRubberBandRect.ARubberBand">
        <short/>
      </element>
      <element name="TWidgetSet.SetRubberBandRect.ARect">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.StretchMaskBlt">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidgetSet.StretchMaskBlt.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.StretchMaskBlt.DestDC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.StretchMaskBlt.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.StretchMaskBlt.Y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.StretchMaskBlt.Width">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.StretchMaskBlt.Height">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.StretchMaskBlt.SrcDC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.StretchMaskBlt.XSrc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.StretchMaskBlt.YSrc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.StretchMaskBlt.SrcWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.StretchMaskBlt.SrcHeight">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.StretchMaskBlt.Mask">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.StretchMaskBlt.XMask">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.StretchMaskBlt.YMask">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidgetSet.StretchMaskBlt.Rop">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidgetSet.TextUTF8Out">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TWidgetSet.TextUTF8Out.Result">
        <short/>
      </element>
      <element name="TWidgetSet.TextUTF8Out.DC">
        <short/>
      </element>
      <element name="TWidgetSet.TextUTF8Out.X">
        <short/>
      </element>
      <element name="TWidgetSet.TextUTF8Out.Y">
        <short/>
      </element>
      <element name="TWidgetSet.TextUTF8Out.Str">
        <short/>
      </element>
      <element name="TWidgetSet.TextUTF8Out.Count">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWidgetSet.ThemeServices">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
<!-- "class of" type Visibility: default -->
      <element name="TWidgetSetClass" link="TWidgetSet"/>
      <!-- constant Visibility: default -->
      <element name="LCLPlatformDirNames">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- constant Visibility: default -->
      <element name="LCL_CAPABILITY_NO">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- constant Visibility: default -->
      <element name="LCL_CAPABILITY_YES">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- object Visibility: default -->
      <element name="EInterfaceException">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="EInterfaceError">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="EInterfaceCritical">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="EInterfaceWarning">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>

      <!-- function type Visibility: default -->
      <element name="TInputDialogFunction">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TInputDialogFunction.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TInputDialogFunction.InputCaption">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TInputDialogFunction.InputPrompt">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TInputDialogFunction.MaskInput">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TInputDialogFunction.Value">
        <short/>
      </element>
      <!-- variable Visibility: default -->
      <element name="InputDialogFunction">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function type Visibility: default -->
      <element name="TPromptDialogFunction">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPromptDialogFunction.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPromptDialogFunction.DialogCaption">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPromptDialogFunction.DialogMessage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPromptDialogFunction.DialogType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPromptDialogFunction.Buttons">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPromptDialogFunction.ButtonCount">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPromptDialogFunction.DefaultIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPromptDialogFunction.EscapeResult">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPromptDialogFunction.UseDefaultPos">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPromptDialogFunction.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPromptDialogFunction.Y">
        <short/>
      </element>
      <!-- variable Visibility: default -->
      <element name="PromptDialogFunction">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function type Visibility: default -->
      <element name="TQuestionDialogFunction">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TQuestionDialogFunction.Result">
        <short/>
      </element>
      <element name="TQuestionDialogFunction.aCaption">
        <short/>
      </element>
      <element name="TQuestionDialogFunction.aMsg">
        <short/>
      </element>
      <element name="TQuestionDialogFunction.DlgType">
        <short/>
      </element>
      <element name="TQuestionDialogFunction.Buttons">
        <short/>
      </element>
      <element name="TQuestionDialogFunction.HelpCtx">
        <short/>
      </element>
<!-- variable Visibility: default -->
      <element name="QuestionDialogFunction">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: default -->
      <element name="WidgetSet">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
    </module>
    <!-- InterfaceBase -->
  </package>
</fpdoc-descriptions>
