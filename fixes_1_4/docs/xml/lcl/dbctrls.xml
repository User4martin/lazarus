<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
  ====================================================================
    DbCtrls
  ====================================================================
-->
    <module name="DbCtrls">
      <short>Data-Aware controls commonly used for viewing and operating on information held in databases</short>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="DB">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LMessages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GraphType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Forms">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Controls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Graphics">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Dialogs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="StdCtrls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Buttons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="MaskEdit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="ExtCtrls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Calendar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Chart">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TFieldDataLink">
        <short>
          <var>TFieldDataLink</var> - forms a link between a database field and an action</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFieldDataLink.FField">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFieldDataLink.FFieldName">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFieldDataLink.FControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFieldDataLink.FEditing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFieldDataLink.IsModified">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFieldDataLink.FOnDataChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFieldDataLink.FOnEditingChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFieldDataLink.FOnUpdateData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFieldDataLink.FOnActiveChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFieldDataLink.FOnFocusRequest">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TFieldDataLink.FieldCanModify">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFieldDataLink.FieldCanModify.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TFieldDataLink.GetCanModify">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFieldDataLink.GetCanModify.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFieldDataLink.SetFieldName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFieldDataLink.SetFieldName.Value">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TFieldDataLink.ValidateField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFieldDataLink.ValidateField.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFieldDataLink.ActiveChanged">
        <short>
          <var>ActiveChanged</var> - method to process changes in the <var>Active</var> property</short>
        <descr>
          <p>
            <var>ActiveChanged</var> - method to process changes in the <var>Active</var> property</p>
          <p>Any change to the <var>Active</var> property triggers the <var>ActiveChanged</var> method.</p>
          <p>If the method is triggered by a transition into an <var>Active</var> state, then <var>ActiveChanged</var> ensures that this <var>TFieldDataLink</var>'s Field is still valid before calling the event handler.</p>
          <p>ActiveChanged calls an <var>OnActiveChange</var> event handler if one has been assigned.</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFieldDataLink.DataSetChanged">
        <short>
          <var>DataSetChanged</var> - method to process a change in the <var>DataSet</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFieldDataLink.EditingChanged">
        <short>
          <var>EditingChanged</var> - method for processing changes in the <var>Editing</var> property</short>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFieldDataLink.LayoutChanged">
        <short>
          <var>LayoutChanged</var>- called if layout is changed: tests validity of field then calls <var>OnLayoutChange</var> event handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFieldDataLink.RecordChanged">
        <short>
          <var>RecordChanged</var> - triggered if the contents of the current record change; calls <var>Reset</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFieldDataLink.RecordChanged.aField">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFieldDataLink.UpdateData">
        <short>
          <var>UpdateData</var> - if there are any pending changes, calls <var>OnUpdateData</var> event handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFieldDataLink.FocusControl">
        <short>
          <var>FocusControl</var> - gives this control the input focus; calls the <var>OnFocusRequest</var> event handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFieldDataLink.FocusControl.aField">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TFieldDataLink.Create">
        <short>
          <var>Create</var> - calls inherited <var>Create</var> then initialises field information</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.System.TObject.Create">TObject.Create</link>
          <link id="#fcl.db.TDataLink.Create">TDataLink.Create</link>
        </seealso>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TFieldDataLink.Destroy" link="#lcl.db.TDataLink.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TFieldDataLink.Edit">
        <short>
          <var>Edit</var> - if the field can be modified, performs inherited Edit and shows editing status </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#FCL.db.TDataLink.Edit">TDataLink.Edit</link>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFieldDataLink.Edit.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFieldDataLink.Modified">
        <short>
          <var>Modified</var> sets the <var>IsModified</var> local variable to True</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFieldDataLink.Reset">
        <short>
          <var>Reset</var> - checks that link is active, calls the <var>OnDataChange</var> event handler then sets <var>IsModified</var> to False</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFieldDataLink.Control">
        <short>The <var>Control</var> to which this datalink is attached</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFieldDataLink.Field">
        <short>The <var>Field</var> to which the datalink is attached</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFieldDataLink.FieldName">
        <short>
          <var>FieldName</var> - the name of the attached field, stored as a string</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFieldDataLink.CanModify">
        <short>
          <var>CanModify</var> - True if the linked field is capable of being modified</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFieldDataLink.Editing">
        <short>
          <var>Editing</var> - True if the linked field is being edited</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFieldDataLink.OnDataChange">
        <short>
          <var>OnDataChange</var> - event handler for a change in the data</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFieldDataLink.OnEditingChange">
        <short>
          <var>OnEditingChange</var> - event handler for a changed in the <var>Editing</var> property</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFieldDataLink.OnUpdateData">
        <short>
          <var>OnUpdateData</var> - event handler for updating any pending changes in the data</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFieldDataLink.OnActiveChange">
        <short>
          <var>OnActiveChange</var> - event handler for a change in the <var>Active</var> property</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFieldDataLink.OnFocusRequest">
        <short>
          <var>OnFocusRequest</var> - event handler for a request to give focus</short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDBEdit">
        <short>
          <var>TDBEdit </var> - a data-aware edit box for processing a single text-string from a dataset</short>
        <seealso>
          <link id="HowToUseDataAwareControls"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBEdit.FDataLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBEdit.DataChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBEdit.DataChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBEdit.EditingChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBEdit.EditingChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBEdit.UpdateData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBEdit.UpdateData.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBEdit.FocusRequest">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBEdit.FocusRequest.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBEdit.ActiveChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBEdit.ActiveChange.Sender">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBEdit.GetDataField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBEdit.GetDataField.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBEdit.GetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBEdit.GetDataSource.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBEdit.GetField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBEdit.GetField.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBEdit.GetReadOnly" link="#LCL.StdCtrls.TCustomEdit.GetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBEdit.GetReadOnly.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBEdit.SetReadOnly" link="#LCL.StdCtrls.TCustomEdit.SetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBEdit.SetReadOnly.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBEdit.SetDataField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBEdit.SetDataField.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBEdit.SetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBEdit.SetDataSource.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBEdit.KeyDown" link="#LCL.Controls.TWinControl.KeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBEdit.KeyDown.Key">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBEdit.KeyDown.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBEdit.Loaded" link="#rtl.Classes.TComponent.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBEdit.Notification" link="#rtl.Classes.TComponent.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBEdit.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBEdit.Notification.Operation">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TDBEdit.EditCanModify" link="#LCL.MaskEdit.TCustomMaskEdit.EditCanModify">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBEdit.EditCanModify.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBEdit.Change" link="#LCL.StdCtrls.TCustomEdit.Change">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBEdit.Reset" link="#LCL.MaskEdit.TCustomMaskEdit.Reset">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBEdit.SetFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBEdit.EditingDone">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDBEdit.Create">
        <short>
          <var>Create</var> - Constructor for <var>TDBEdit</var>: calls inherited <var>Create</var> then sets up data links and actions</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.StdCtrls.TCustomEdit.Create">TCustomEdit.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBEdit.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TDBEdit.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TDBEdit</var>: frees data links then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.Destroy">TWinControl.Destroy</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBEdit.Field">
        <short>The field in the DataSet from which data are to be displayed in the Edit</short>
        <descr>Refers to the complete Field entity, not just its name</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.DataField">
        <short>The name (as a string) of the field whose data are to be displayed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.DataSource">
        <short>The DataSource to be used for supplying the data in the required Field. Ususally the result of a data query</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.ReadOnly" link="#LCL.StdCtrls.TCustomEdit.ReadOnly">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.Anchors" link="#LCL.Controls.TControl.Anchors">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines how the control is to be anchored to its client or parent control</p>
          <p>Either reads a flag containing the set of anchors to be used, or writes a set of anchors. If they have been written, this is indicated in <var>IsAnchorsStored</var>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.AutoSize" link="#LCL.Controls.TControl.AutoSize">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>AutoSize permits the size of a control to be adjusted automatically, for example a button can become bigger or smaller to accommodate a longer or shorter caption.</p>
          <p>Reads logical (boolean) flag to see whether auto-sizing is to be operated, or writes the flag to say it should be done. Default is false, ie no auto-sizing</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.CharCase" link="#LCL.StdCtrls.TCustomEdit.CharCase">
        <descr>
          <p>Indicates how text is displayed in a text editing control in the following ways:</p>
          <ul>
            <li>Normal case letters</li>
            <li>Upper case letters</li>
            <li>Lower case letters</li>
          </ul>
          <p>The rules can, of course, be overridden by use of the shift key.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.Color" link="#LCL.Controls.TControl.Color">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Reads the value for colour, or stores the value, and sets a flag if the colour is stored.</p>
          <p>The default colour is the same as the window in which the control is located.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.Constraints" link="#LCL.Controls.TControl.Constraints">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determine <var>Constraints</var> (max and min height and width) for this control; reads the size constraints or stores new ones.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.DragCursor" link="#LCL.Controls.TControl.DragCursor">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.DragKind" link="#LCL.Controls.TControl.DragKind">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.DragMode" link="#LCL.Controls.TControl.DragMode">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.Enabled" link="#LCL.Controls.TControl.Enabled">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Whether the control is <var>Enabled</var>. If not, it usually appears 'greyed-out'</p>
          <p>Reads a flag to see whether the control is enabled, or stores a new value. If stored, sets a flag to say so.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.EditMask" link="#LCL.MaskEdit.TCustomMaskEdit.EditMask">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.Font" link="#LCL.Controls.TControl.Font">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Reads a flag to see what font should be used, or sets a flag to store it. If stored, sets a flag to say so</p>
          <p>The properties of <var>Font</var> are defined in the parent class <link id="#lcl.Graphics.TFont">TFont</link>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.MaxLength" link="#LCL.StdCtrls.TCustomEdit.MaxLength">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.ParentColor" link="#LCL.Controls.TControl.ParentColor">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.ParentFont" link="#LCL.Controls.TControl.ParentFont">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.PasswordChar" link="#LCL.StdCtrls.TCustomEdit.PasswordChar">
        <descr>
          <p>
            <var>PasswordChar</var>



: the character which appears in the Edit box replacing and masking the actual character typed.</p>
          <p>Typically used in password input, to prevent the typed characters from being seen by passers-by or casual observers (or even malicious observers!)</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <descr>// standard properties, which should be supported by all descendants<br/>
 Reads the details of the pop-up menu, or stores them.<br/>
Properties are defined in the parent class <link id="#lcl.Menus.TPopupMenu">TPopupMenu</link>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads flag or writes one to determine if a hint is to be shown when mouse hovers over this control. If value is stored, a storage flag is set. Display of the actual hint is controlled by OnShowHint
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <descr>Reads or writes information in flag; default is -1
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <descr>
          <p>Reads or writes boolean flag; default is False</p>
          <p>Use the TabStop to allow or disallow access to the control using the Tab key.</p>
          <p>If <var>TabStop</var> is True, the control is in the tab order. If <var>TabStop</var> is False, the control is not in the tab order and the user can't use the Tab key to move to the control.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.Visible" link="#LCL.Controls.TControl.Visible">
        <descr>
          <pre>The Visible property represents the ability to see a visual control. 
          If Visible is True the control is shown, otherwise it is hidden.
          Calling Show sets, among others, Visible to True.
          Setting Visible to False is equivalent to calling Hide method.</pre>
          <remark>The Visible property does not depend on control's parent visibility. Use IsVisible method to consider this and get real visibility.</remark>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.OnChange" link="#LCL.StdCtrls.TCustomEdit.OnChange">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.OnClick" link="#LCL.Controls.TControl.OnClick">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>This is often the default action for many controls, and is often the ONLY action specified by the programmer. The action can be spcified by the user, either by typing explicit code into the implementation section for this control, or by selecting an action from a pre-supplied <var>ActionList</var>
          </p>
          <p>Reads or writes a flag if  a mouse click is detected, and sets a flag if a value is stored.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.OnDblClick" link="#LCL.Controls.TControl.OnDblClick">
        <descr>
          <p>Double-clicking is much more common in a Windows environment than in Unix or Linux, where single-clicking is the default method for selecting an object. However, in all environments there could be valid use for a double-click, and a method should be supplied if appropriate.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.OnDragOver" link="#LCL.Controls.TControl.OnDragOver">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown">
        <descr>
          <p>
            <var>OnKeyDown</var>
 - event handler for instance when key is down while control has focus</p>
          <p>Differs from <link id="#lcl.Controls.TWinControl.OnKeyPress">OnKeyPress</link> in that the key may have already been down when the control received focus; with <var>OnKeyPress</var> the key needs to become pressed while the control has focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress">
        <descr>
          <p>
            <var>OnKeyPress</var>
 - event controller for a key being pressed while the control has focus</p>
          <p>Differs from <link id="#lcl.Controls.TWinControl.OnKeyDown">OnKeyDown</link> in that the key needs to become pressed while the control has focus; with <var>OnKeyDown</var>  the key may have already been down when the control received focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp">
        <descr>
          <p>
            <var>OnKeyUp</var>
  - event handler for instance when a key is up (not pressed) while the control has focus</p>
          <p>The key may already have been up when the control received focus, or a pressed key may become released during the time the control has focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBEdit.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag">
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDBText">
        <short>
          <var>TDBText</var> - a data-aware text component to display a single text-string from a dataset</short>
        <seealso>
          <link id="HowToUseDataAwareControls"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBText.FDataLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBText.DataChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBText.DataChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBText.ActiveChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBText.ActiveChange.Sender">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBText.GetDataField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBText.GetDataField.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBText.GetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBText.GetDataSource.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBText.GetField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBText.GetField.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBText.SetDataField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBText.SetDataField.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBText.SetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBText.SetDataSource.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBText.Loaded" link="#rtl.Classes.TComponent.Loaded">
        <descr>
          <p>
            <var>Loaded</var> is called by the streaming system when a root
component was completely read from a stream and all properties and 
references to other objects have been resolved by the streaming 
system. Descendents of <var>TComponent</var> should override this method to
do some additional processing of properties after all published 
properties have been set from values obtained from the stream.
</p>
          <p>Application programmers should never call <var>Loaded</var> directly, this
is done automatically by the streaming system.
</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBText.Notification" link="#rtl.Classes.TComponent.Notification">
        <descr>
          <p>
            <var>Notification</var> is called whenever a child component is destroyed,
inserted or removed from the list of owned component. Components that
were requested to send a notification when they are freed 
((with <link id="TComponent.FreeNotification">FreeNotification</link>)
will also call <var>Notification</var> when they are freed.
</p>
          <p>The <var>AComponent</var> parameter specifies which component sends the
notification, and <var>Operation</var> specifies whether the component is
being inserted into or removed from the child component list, or whether it
is being destroyed.
</p>
          <p>Descendents of <var>TComponent</var> can use <link id="TComponent.FreeNotification">FreeNotification</link> to request
notification of the destruction of another object. By overriding the
<var>Notification</var> method, they can do special processing (typically,
set a reference to this component to <var>Nil</var>) 
when this component is destroyed. The <var>Notification</var> method is
called quite often in the streaming process, so speed should be a
consideration when overriding this method.
</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBText.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBText.Notification.Operation">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDBText.Create">
        <short>
          <var>Create</var> - constructor for <var>TDBText</var>: calls inherited <var>Create</var> then forms data links and actions</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.StdCtrls.TCustomLabel.Create">TCustomLabel.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBText.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TDBText.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TDBText</var>: frees data links then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TGraphicControl.Destroy">TGraphicControl.Destroy</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBText.Field">
        <short>The field in the DataSet to which this control is to be linked. Can be referred to by name, or as an index</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBText.Align" link="#LCL.Controls.TControl.Align">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Either reads a flag containing alignment instructions (<var>FAlign</var>) or writes alignment instructions (<var>SetAlign</var>)</p>
          <p>May have no alignment, may have custom or client alignment, or can be aligned to top, bottom, left or right</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBText.Alignment" link="#LCL.StdCtrls.TCustomLabel.Alignment">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBText.Anchors" link="#LCL.Controls.TControl.Anchors">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines how the control is to be anchored to its client or parent conrol</p>
          <p>Either reads a flag containing the set of anchors to be used, or writes a set of anchors. If they have been written, this is indicated in <var>IsAnchorsStored</var>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBText.AutoSize" link="#LCL.Controls.TControl.AutoSize">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>AutoSize permits the size of a control to be adjusted automatically, for example a button can become bigger or smaller to accommodate a longer or shorter caption.</p>
          <p>Reads logical (boolean) flag to see whether auto-sizing is to be operated, or writes the flag to say it should be done. Default is false, ie no auto-sizing</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBText.Caption" link="#LCL.Controls.TControl.Caption">
        <descr>
          <p>Gets caption as a text-string (<var>GetText</var>), or stores the new caption (<var>SetText</var>). Shows flag if caption is stored (<var>IsCaptionStored</var>).</p>
          <p>By default, the <var>Caption</var> appears the same as the control <var>Name</var> in the Object Inspector, 
and the developer needs to set it explicitly to some new text.</p>
          <p>The VCL implementation relies on the virtual <var>Get/SetTextBuf</var> to exchange text between widgets and VCL. This means a lot of (unnecesary) text copies. </p>
          <p>The LCL uses strings for exchanging text (more efficient). To maintain VCL compatibility, the virtual <var>RealGet/SetText</var> is
introduced. These functions interface with the LCLInterface. </p>
          <p>The default <var>Get/SetTextBuf</var> implementation calls the <var>RealGet/SetText</var>. As long as the <var>Get/SetTextBuf</var> isn't overridden <var>Get/SetText</var> calls <var>RealGet/SetText</var> to avoid PChar copying.</p>
          <p>To keep things optimal, LCL implementations should always override RealGet/SetText. Get/SetTextBuf is only kept for compatibility.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBText.Color" link="#LCL.Controls.TControl.Color">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Reads the value for colour, or stores the value, and sets a flag if the colour is stored.</p>
          <p>The default colour is the same as the window in which the control is located.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBText.DataField">
        <short>The name of the field, as a string (ie cannot be referred to as an Index)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBText.DataSource">
        <short>The <var>DataSource</var> from which information is obtained to display in this control. Usually the result of a SQLQuery</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBText.FocusControl" link="#LCL.StdCtrls.TCustomLabel.FocusControl">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBText.Font" link="#LCL.Controls.TControl.Font">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Reads a flag to see what font should be used, or sets a flag to store it. If stored, sets a flag to say so</p>
          <p>The properties of <var>Font</var> are defined in the parent class <link id="#lcl.Graphics.TFont">TFont</link>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBText.Layout" link="#LCL.StdCtrls.TLabel.Layout">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBText.ShowAccelChar" link="#LCL.StdCtrls.TCustomLabel.ShowAccelChar">
        <descr>
          <p>
            <var>ShowAccelChar</var>



 - underline the character in the label that acts as an accelerator with a shortcut key</p>
          <p>Boolean property - default True</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBText.Visible" link="#LCL.Controls.TControl.Visible">
        <descr>
          <pre>The Visible property represents the ability to see a visual control. 
          If Visible is True the control is shown, otherwise it is hidden.
          Calling Show sets, among others, Visible to True.
          Setting Visible to False is equivalent to calling Hide method.</pre>
          <remark>The Visible property does not depend on control's parent visibility. Use IsVisible method to consider this and get real visibility.</remark>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBText.WordWrap" link="#LCL.StdCtrls.TCustomLabel.WordWrap">
        <descr>
          <p>
            <var>WordWrap</var>



 - whether a word is to be wrapped to the next line if the text is about to become too long for the width available</p>
          <p>Boolean property, default False</p>
        </descr>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDBListBox">
        <short>
          <var>TDBListBox </var>- a data-aware version of <var>TListBox,</var> for displaying lists of entries from a field in a database</short>
        <seealso>
          <link id="HowToUseDataAwareControls"/>
        </seealso>
      </element>
      <!-- variable Visibility: default -->
      <element name="TDBListBox.FDataLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBListBox.DataChange" link="#LCL.DbCtrls.TCustomDBListBox.DataChange">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBListBox.DataChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBListBox.EditingChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBListBox.EditingChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBListBox.UpdateData" link="#LCL.DbCtrls.TCustomDBListBox.UpdateData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBListBox.UpdateData.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBListBox.FocusRequest">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBListBox.FocusRequest.Sender">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="TDBListBox.GetDataField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBListBox.GetDataField.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="TDBListBox.GetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBListBox.GetDataSource.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="TDBListBox.GetField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBListBox.GetField.Result">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBListBox.SetItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBListBox.SetItems.Values">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="TDBListBox.GetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBListBox.GetReadOnly.Result">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBListBox.SetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBListBox.SetReadOnly.Value">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBListBox.SetDataField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBListBox.SetDataField.Value">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBListBox.SetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBListBox.SetDataSource.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBListBox.KeyDown" link="#LCL.Controls.TWinControl.KeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBListBox.KeyDown.Key">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBListBox.KeyDown.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBListBox.Loaded" link="#rtl.Classes.TComponent.Loaded">
        <descr>
          <p>
            <var>Loaded</var> is called by the streaming system when a root
component was completely read from a stream and all properties and 
references to other objects have been resolved by the streaming 
system. Descendents of <var>TComponent</var> should override this method to
do some additional processing of properties after all published 
properties have been set from values obtained from the stream.
</p>
          <p>Application programmers should never call <var>Loaded</var> directly, this
is done automatically by the streaming system.
</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBListBox.Notification" link="#rtl.Classes.TComponent.Notification">
        <descr>
          <p>
            <var>Notification</var> is called whenever a child component is destroyed,
inserted or removed from the list of owned component. Components that
were requested to send a notification when they are freed 
((with <link id="TComponent.FreeNotification">FreeNotification</link>)
will also call <var>Notification</var> when they are freed.
</p>
          <p>The <var>AComponent</var> parameter specifies which component sends the
notification, and <var>Operation</var> specifies whether the component is
being inserted into or removed from the child component list, or whether it
is being destroyed.
</p>
          <p>Descendents of <var>TComponent</var> can use <link id="TComponent.FreeNotification">FreeNotification</link> to request
notification of the destruction of another object. By overriding the
<var>Notification</var> method, they can do special processing (typically,
set a reference to this component to <var>Nil</var>) 
when this component is destroyed. The <var>Notification</var> method is
called quite often in the streaming process, so speed should be a
consideration when overriding this method.
</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBListBox.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBListBox.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBListBox.Click">
        <short>
          <var>Click</var> - a procedure that allows the programmer to simulate a mouse click over the control, and initiates the same <var>Action</var> as that associated with the <var>OnClick</var> event</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBListBox.EditingDone">
        <short>
          <var>EditingDone</var> - what to do when you have finished editing</short>
        <descr>
          <p>
            <var>TControl.EditingDone</var>
          </p>
          <p>Called when user has finished editing. This procedure can be used by data links to commit the changes.</p>
          <p>For example:</p>
          <ul>
            <li>When focus switches to another control (default)</li>
            <li>When user selected another item</li>
          </ul>
          <p>It's totally up to the control, what events will commit.</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDBListBox.Create">
        <short>
          <var>Create</var> - constructor for <var>TDBListBox</var>: calls inherited <var>Create</var> then forms data links and actions</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.StdCtrls.TCustomListBox.Create"/>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBListBox.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TDBListBox.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TDBListBox</var>: frees data link then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.StdCtrls.TCustomListBox.Destroy"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBListBox.Field">
        <short>The Field of the DataSet for which data are to be displayed</short>
        <descr>Regers to the whole Field entity, not just its name</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.DataField" link="#LCL.DbCtrls.TCustomDBListBox.DataField">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.DataSource" link="#LCL.DbCtrls.TCustomDBListBox.DataSource">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.Items" link="#LCL.DbCtrls.TCustomDBListBox.Items">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.ReadOnly" link="#LCL.DbCtrls.TCustomDBListBox.ReadOnly">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.Align" link="#LCL.Controls.TControl.Align">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Either reads a flag containing alignment instructions (<var>FAlign</var>) or writes alignment instructions (<var>SetAlign</var>)</p>
          <p>May have no alignment, may have custom or client alignment, or can be aligned to top, bottom, left or right</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.Anchors" link="#LCL.Controls.TControl.Anchors">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines how the control is to be anchored to its client or parent conrol</p>
          <p>Either reads a flag containing the set of anchors to be used, or writes a set of anchors. If they have been written, this is indicated in <var>IsAnchorsStored</var>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.ExtendedSelect" link="#LCL.StdCtrls.TCustomListBox.ExtendedSelect">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.ItemHeight" link="#LCL.StdCtrls.TCustomListBox.ItemHeight">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.MultiSelect" link="#LCL.StdCtrls.TCustomListBox.MultiSelect">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.OnClick" link="#LCL.Controls.TControl.OnClick">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>This is often the default action for many controls, and is often the ONLY action specified by the programmer. The action can be spcified by the user, either by typing explicit code into the implementation section for this control, or by selecting an action from a pre-supplied <var>ActionList</var>
          </p>
          <p>Reads or writes a flag if  a mouse click is detected, and sets a flag if a value is stored.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.OnDblClick" link="#LCL.Controls.TControl.OnDblClick">
        <descr>
          <p>Double-clicking is much more common in a Windows environment than in Unix or Linux, where single-clicking is the default method for selecting an object. However, in all environments there could be valid use for a double-click, and a method should be supplied if appropriate.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.OnDrawItem" link="#LCL.StdCtrls.TCustomListBox.OnDrawItem">
        <descr>
          <p>
            <var>OnDrawItem</var>



 - event handler for drawing an Item</p>
          <p>For example, selecting an item may require it to be highlighted or have its font or background changed</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress">
        <descr>
          <p>
            <var>OnKeyPress</var>
 - event controller for a key being pressed while the control has focus</p>
          <p>Differs from <link id="#lcl.Controls.TWinControl.OnKeyDown">OnKeyDown</link> in that the key needs to become pressed while the control has focus; with <var>OnKeyDown</var>  the key may have already been down when the control received focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown">
        <descr>
          <p>
            <var>OnKeyDown</var>
 - event handler for instance when key is down while control has focus</p>
          <p>Differs from <link id="#lcl.Controls.TWinControl.OnKeyPress">OnKeyPress</link> in that the key may have already been down when the control received focus; with <var>OnKeyPress</var> the key needs to become pressed while the control has focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp">
        <descr>
          <p>
            <var>OnKeyUp</var>
  - event handler for instance when a key is up (not pressed) while the control has focus</p>
          <p>The key may already have been up when the control received focus, or a pressed key may become released during the time the control has focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.OnResize" link="#LCL.Controls.TControl.OnResize">
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads or Writes flag if control is re-sized.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads flag or writes one to determine if a hint is to be shown when mouse hovers over this control. If value is stored, a storage flag is set. Display of the actual hint is controlled by OnShowHint
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.Sorted" link="#LCL.StdCtrls.TCustomListBox.Sorted">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.Style" link="#LCL.StdCtrls.TCustomListBox.Style">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <descr>Reads or writes information in flag; default is -1
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <descr>
          <p>Reads or writes boolean flag; default is False</p>
          <p>Use the TabStop to allow or disallow access to the control using the Tab key.</p>
          <p>If <var>TabStop</var> is True, the control is in the tab order. If <var>TabStop</var> is False, the control is not in the tab order and the user can't use the Tab key to move to the control.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.TopIndex" link="#LCL.StdCtrls.TCustomListBox.TopIndex">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBListBox.Visible" link="#LCL.Controls.TControl.Visible">
        <descr>
          <pre>The Visible property represents the ability to see a visual control. 
          If Visible is True the control is shown, otherwise it is hidden.
          Calling Show sets, among others, Visible to True.
          Setting Visible to False is equivalent to calling Hide method.</pre>
          <remark>The Visible property does not depend on control's parent visibility. Use IsVisible method to consider this and get real visibility.</remark>
        </descr>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDBRadioGroup">
        <short>
          <var>TDBRadioGroup</var> - a data-aware version of <var>TRadioGroup,</var> providing a series of mutually exclusive buttons to select an entry to insert into a database field</short>
        <seealso>
          <link id="HowToUseDataAwareControls"/>
        </seealso>
        <descr>
          <p>The properties of TDBRadioGroup are similar to those of TRadioGroup (and TCustomRadioGroup). Access is obtained to members of the group by selecting (in the Object Inspector) the ellipsis (...) next to the entry <b>Items</b>, and then editing the stringlist. </p>
          <p>At runtime, selecting one of the radiobuttons makes the corresponding ItemIndex available to the programmer, and the corresponding string Item gets selected and appears as the string value for the record in that field.</p>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBRadioGroup.FDataLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBRadioGroup.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBRadioGroup.FValue">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBRadioGroup.FInSetValue">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBRadioGroup.FValues">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBRadioGroup.GetDataField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBRadioGroup.GetDataField.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBRadioGroup.GetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBRadioGroup.GetDataSource.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBRadioGroup.GetField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBRadioGroup.GetField.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBRadioGroup.GetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBRadioGroup.GetReadOnly.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBRadioGroup.SetDataField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBRadioGroup.SetDataField.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBRadioGroup.SetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBRadioGroup.SetDataSource.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBRadioGroup.SetItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBRadioGroup.SetItems.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBRadioGroup.SetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBRadioGroup.SetReadOnly.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBRadioGroup.SetValue">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBRadioGroup.SetValue.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBRadioGroup.SetValues">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBRadioGroup.SetValues.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBRadioGroup.Change">
        <short>
          <var>Change</var> - calls the <var>OnChange</var> event handler if it is assigned</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBRadioGroup.Notification" link="#rtl.Classes.TComponent.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBRadioGroup.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBRadioGroup.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBRadioGroup.DataChange">
        <short>
          <var>DataChange</var> - updates the current <var>Value</var> to reflect a change inthe data</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBRadioGroup.DataChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBRadioGroup.UpdateData">
        <short>
          <var>UpdateData</var> - places the current <var>Value</var> into the data</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBRadioGroup.UpdateData.Sender">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TDBRadioGroup.DataLink">
        <short>
          <var>DataLink</var> - the field data link to be used for the data</short>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TDBRadioGroup.GetButtonValue">
        <short>
          <var>GetButtonValue</var> - returns the string value of the button associated with the specified index</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBRadioGroup.GetButtonValue.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBRadioGroup.GetButtonValue.Index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBRadioGroup.UpdateRadioButtonStates">
        <short>
          <var>UpdateRadioButtonStates</var> - performs the inheited method and ensures that any updates are also reflected via the data link, if it is active and in an <var>Editing</var> state</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.ExtCtrls.TCustomRadioGroup.UpdateRadioButtonStates">TCustomRadioGroup.UpdateRadioButtonStates</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBRadioGroup.Loaded" link="#rtl.Classes.TComponent.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBRadioGroup.EditingDone">
        <short>
          <var>EditingDone</var> - updates the record through the datalink, then calls inherited <var>EditingDone</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.EditingDone">TControl.EditingDone</link>
        </seealso>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDBRadioGroup.Create">
        <short>
          <var>Create</var> - constructor for <var>TDBRadioGroup</var>: calls inherited <var>Create</var> then forms datalinks and actions</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.ExtCtrls.TCustomRadioGroup.Create">TCustomRadioGroup.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBRadioGroup.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TDBRadioGroup.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TDBRadioGroup</var>: frees links and items, then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.ExtCtrls.TCustomRadioGroup.Destroy">TCustomRadioGroup.Destroy</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBRadioGroup.Field">
        <short>The DataSet Field relevant to the data being selected</short>
        <descr>Refers to the complete Field entity, not just its name</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBRadioGroup.ItemIndex" link="#LCL.ExtCtrls.TCustomRadioGroup.ItemIndex">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBRadioGroup.Value">
        <short>The selected value (as indicated by ItemIndex)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.Align" link="#LCL.Controls.TControl.Align">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Either reads a flag containing alignment instructions (<var>FAlign</var>) or writes alignment instructions (<var>SetAlign</var>)</p>
          <p>May have no alignment, may have custom or client alignment, or can be aligned to top, bottom, left or right</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.Anchors" link="#LCL.Controls.TControl.Anchors">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines how the control is to be anchored to its client or parent conrol</p>
          <p>Either reads a flag containing the set of anchors to be used, or writes a set of anchors. If they have been written, this is indicated in <var>IsAnchorsStored</var>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.Caption" link="#LCL.Controls.TControl.Caption">
        <descr>
          <p>Gets caption as a text-string (<var>GetText</var>), or stores the new caption (<var>SetText</var>). Shows flag if caption is stored (<var>IsCaptionStored</var>).</p>
          <p>By default, the <var>Caption</var> appears the same as the control <var>Name</var> in the Object Inspector, 
and the developer needs to set it explicitly to some new text.</p>
          <p>The VCL implementation relies on the virtual <var>Get/SetTextBuf</var> to exchange text between widgets and VCL. This means a lot of (unnecesary) text copies. </p>
          <p>The LCL uses strings for exchanging text (more efficient). To maintain VCL compatibility, the virtual <var>RealGet/SetText</var> is
introduced. These functions interface with the LCLInterface. </p>
          <p>The default <var>Get/SetTextBuf</var> implementation calls the <var>RealGet/SetText</var>. As long as the <var>Get/SetTextBuf</var> isn't overridden <var>Get/SetText</var> calls <var>RealGet/SetText</var> to avoid PChar copying.</p>
          <p>To keep things optimal, LCL implementations should always override RealGet/SetText. Get/SetTextBuf is only kept for compatibility.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.Columns" link="#LCL.ExtCtrls.TCustomRadioGroup.Columns">
        <descr>
          <p>Don't confuse this with the Columns entity in a DBGrid, nor with the COLUMNS entity in a SQL database - it simply refers to the number of columns of radiobuttons to be displayed</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.DataField">
        <short>The name (as a string) of the Field whose data are linked to the control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.DataSource">
        <short>The DataSource from which relevant Field data are to be linked - usually the result of a database query</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.Enabled" link="#LCL.Controls.TControl.Enabled">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Whether the control is <var>Enabled</var>. If not, it usually appears 'greyed-out'</p>
          <p>Reads a flag to see whether the control is enabled, or stores a new value. If stored, sets a flag to say so.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.Items" link="#LCL.ExtCtrls.TCustomRadioGroup.Items">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.OnChange">
        <short>Event Handler for any change in the radiogroup selection</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Reads or Writes flag if bounds are changed</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.OnClick" link="#LCL.Controls.TControl.OnClick">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>This is often the default action for many controls, and is often the ONLY action specified by the programmer. The action can be spcified by the user, either by typing explicit code into the implementation section for this control, or by selecting an action from a pre-supplied <var>ActionList</var>
          </p>
          <p>Reads or writes a flag if  a mouse click is detected, and sets a flag if a value is stored.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.OnMouseuP" link="#LCL.Controls.TControl.OnMouseUp">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.OnResize" link="#LCL.Controls.TControl.OnResize">
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads or Writes flag if control is re-sized.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.ReadOnly">
        <short>
          <var>ReadOnly</var> - if True, data can only be read, not written or modified. (Doesn't really make sense for a RadioGroup!)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.Values">
        <short>The <var>values</var> of the strings in <var>Items</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBRadioGroup.Visible" link="#LCL.Controls.TControl.Visible">
        <descr>
          <pre>The Visible property represents the ability to see a visual control. 
          If Visible is True the control is shown, otherwise it is hidden.
          Calling Show sets, among others, Visible to True.
          Setting Visible to False is equivalent to calling Hide method.</pre>
          <remark>The Visible property does not depend on control's parent visibility. Use IsVisible method to consider this and get real visibility.</remark>
        </descr>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDBCheckBox">
        <short>
          <var>TDBCheckBox</var> - a data-aware checkbox for use with logical fields in a database</short>
        <seealso>
          <link id="HowToUseDataAwareControls"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBCheckBox.FDataLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBCheckBox.FValueCheck">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBCheckBox.FValueUncheck">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBCheckBox.GetDataField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBCheckBox.GetDataField.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBCheckBox.GetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBCheckBox.GetDataSource.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBCheckBox.GetField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBCheckBox.GetField.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBCheckBox.GetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBCheckBox.GetReadOnly.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBCheckBox.SetDataField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCheckBox.SetDataField.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBCheckBox.SetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCheckBox.SetDataSource.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBCheckBox.SetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCheckBox.SetReadOnly.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBCheckBox.SetValueCheck">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCheckBox.SetValueCheck.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBCheckBox.SetValueUncheck">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCheckBox.SetValueUncheck.AValue">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBCheckBox.ValueEqualsField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBCheckBox.ValueEqualsField.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCheckBox.ValueEqualsField.AValue">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCheckBox.ValueEqualsField.AFieldText">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TDBCheckBox.GetFieldCheckState">
        <short>
          <var>GetFieldCheckState</var> - returns the checkbox state for the current field</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBCheckBox.GetFieldCheckState.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCheckBox.DataChange">
        <short>
          <var>DataChange</var> - uses <var>GetFieldCheckState</var> to update the State</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCheckBox.DataChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCheckBox.UpdateData">
        <short>
          <var>UpdateData</var> - examines the <var>State</var> to see whether it has changed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCheckBox.UpdateData.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCheckBox.FocusRequest">
        <short>
          <var>FocusRequest</var> - a request has been received, so Sets Focus</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCheckBox.FocusRequest.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCheckBox.Notification" link="#rtl.Classes.TComponent.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCheckBox.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCheckBox.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCheckBox.Loaded" link="#rtl.Classes.TComponent.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCheckBox.EditingDone">
        <short>
          <var>EditingDone</var> - if the datalink is in an <var>Editing</var> state, updates the data through the link then calls inherited <var>EditingDone</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.EditingDone">TControl.EditingDone</link>
        </seealso>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDBCheckBox.Create">
        <short>
          <var>Create</var> - constructor for <var>TDBCheckBox</var>: calls inherited <var>Create</var>, forms logical connections for checked and unchecked, sets initial style and state, forms datalinks and actions</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.StdCtrls.TCustomCheckBox.Create">TCustomCheckBox.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCheckBox.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TDBCheckBox.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TDBCheckBox</var>: frees links and calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.Destroy">TWinControl.Destroy</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBCheckBox.Checked" link="#LCL.StdCtrls.TButtonControl.Checked">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBCheckBox.Field">
        <short>The Field in the DataSet with which the box is to be associated</short>
        <descr>
          <p>Refers to the whole Field entity, not just its name</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBCheckBox.State" link="#LCL.StdCtrls.TCustomCheckBox.State">
        <descr>
          <p>See <link id="#lcl.StdCtrls.TCheckBoxState">TCheckBoxState</link> for possible values of <var>State</var>.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.AllowGrayed" link="#LCL.StdCtrls.TCustomCheckBox.AllowGrayed">
        <descr>
          <p>If <var>AllowGrayed</var> is set to True, the check box has three possible states: checked, unchecked and grayed. If <var>AllowGrayed</var> is set to False, the check box has only two possible states: checked and unchecked.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.Anchors" link="#LCL.Controls.TControl.Anchors">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines how the control is to be anchored to its client or parent conrol</p>
          <p>Either reads a flag containing the set of anchors to be used, or writes a set of anchors. If they have been written, this is indicated in <var>IsAnchorsStored</var>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.AutoSize" link="#LCL.Controls.TControl.AutoSize">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>AutoSize permits the size of a control to be adjusted automatically, for example a button can become bigger or smaller to accommodate a longer or shorter caption.</p>
          <p>Reads logical (boolean) flag to see whether auto-sizing is to be operated, or writes the flag to say it should be done. Default is false, ie no auto-sizing</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.Caption" link="#LCL.Controls.TControl.Caption">
        <descr>
          <p>Gets caption as a text-string (<var>GetText</var>), or stores the new caption (<var>SetText</var>). Shows flag if caption is stored (<var>IsCaptionStored</var>).</p>
          <p>By default, the <var>Caption</var> appears the same as the control <var>Name</var> in the Object Inspector, 
and the developer needs to set it explicitly to some new text.</p>
          <p>The VCL implementation relies on the virtual <var>Get/SetTextBuf</var> to exchange text between widgets and VCL. This means a lot of (unnecesary) text copies. </p>
          <p>The LCL uses strings for exchanging text (more efficient). To maintain VCL compatibility, the virtual <var>RealGet/SetText</var> is
introduced. These functions interface with the LCLInterface. </p>
          <p>The default <var>Get/SetTextBuf</var> implementation calls the <var>RealGet/SetText</var>. As long as the <var>Get/SetTextBuf</var> isn't overridden <var>Get/SetText</var> calls <var>RealGet/SetText</var> to avoid PChar copying.</p>
          <p>To keep things optimal, LCL implementations should always override RealGet/SetText. Get/SetTextBuf is only kept for compatibility.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.DataField">
        <short>The name (as a string) of the field with which the checkbox is to be associated</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.DataSource">
        <short>The DataSource containing the Field that is to be associated with this checkbox</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.DragCursor" link="#LCL.Controls.TControl.DragCursor">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.DragKind" link="#LCL.Controls.TControl.DragKind">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.DragMode" link="#LCL.Controls.TControl.DragMode">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.Enabled" link="#LCL.Controls.TControl.Enabled">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Whether the control is <var>Enabled</var>. If not, it usually appears 'greyed-out'</p>
          <p>Reads a flag to see whether the control is enabled, or stores a new value. If stored, sets a flag to say so.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.Hint" link="#LCL.Controls.TControl.Hint">
        <descr>
          <p>
            <var>Hint</var>
 - a small informative pop-up box that appears when the mouse 'hovers' over a control</p>
          <p>Requires <var>ShowHint</var> to be True</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.OnChange" link="#LCL.StdCtrls.TButtonControl.OnChange">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.OnClick" link="#LCL.Controls.TControl.OnClick">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>This is often the default action for many controls, and is often the ONLY action specified by the programmer. The action can be spcified by the user, either by typing explicit code into the implementation section for this control, or by selecting an action from a pre-supplied <var>ActionList</var>
          </p>
          <p>Reads or writes a flag if  a mouse click is detected, and sets a flag if a value is stored.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.OnDragOver" link="#LCL.Controls.TControl.OnDragOver">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <descr>// standard properties, which should be supported by all descendants<br/>
 Reads the details of the pop-up menu, or stores them.<br/>
Properties are defined in the parent class <link id="#lcl.Menus.TPopupMenu">TPopupMenu</link>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.ReadOnly">
        <short>
          <var>ReadOnly </var>- if True, data may be read but not written or modified (doesn't make much sense for a check-box unless the box is NOT Enabled!)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads flag or writes one to determine if a hint is to be shown when mouse hovers over this control. If value is stored, a storage flag is set. Display of the actual hint is controlled by OnShowHint
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <descr>Reads or writes information in flag; default is -1
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <descr>Use the TabStop to allow or disallow access to the control using the Tab key.

If the TabStop is True, the control is in the tab order. If TabStop is False, the control is not in the tab order and the user can't press the Tab key to move to the control.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.UseOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.ValueChecked">
        <short>
          <var>ValueChecked</var> - the box for the value has been checked</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.ValueUnchecked">
        <short>
          <var>ValueUnchecked</var> -the box for the value is unchecked</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCheckBox.Visible" link="#LCL.Controls.TControl.Visible">
        <descr>
          <pre>The Visible property represents the ability to see a visual control. 
          If Visible is True the control is shown, otherwise it is hidden.
          Calling Show sets, among others, Visible to True.
          Setting Visible to False is equivalent to calling Hide method.</pre>
          <remark>The Visible property does not depend on control's parent visibility. Use IsVisible method to consider this and get real visibility.</remark>
        </descr>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDBComboBox">
        <short>
          <var>TDBComboBox</var> - a data-aware version of <var>TComboBox</var> to allow selection of a value from a list of entries into a database field</short>
        <seealso>
          <link id="HowToUseDataAwareControls"/>
        </seealso>
        <descr>
          <p>
            <var>TDBComboBox </var>has properties similar to <var>TComboBox</var> and <var>TCustomComboBox</var>. It consists of an Edit Box which is th eData-aware part of the component, and a drop-down list box.</p>
          <p>In a typical application a user would be presented with the drop-down list, would make a selection and then this would appear in the edit box and become the data value for that cell in the database. </p>
          <p>So for example a list of countries might be presented, and the selected value from the list would be used to populate the appropriate field ('Country') in that record of the database.</p>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBComboBox.FDataLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBComboBox.GetDataField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBComboBox.GetDataField.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBComboBox.GetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBComboBox.GetDataSource.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBComboBox.GetField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBComboBox.GetField.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBComboBox.GetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBComboBox.GetReadOnly.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBComboBox.SetDataField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBComboBox.SetDataField.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBComboBox.SetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBComboBox.SetDataSource.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBComboBox.SetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBComboBox.SetReadOnly.AValue">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TDBComboBox.GetComboText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBComboBox.GetComboText.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBComboBox.SetComboText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBComboBox.SetComboText.NewText">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBComboBox.DataChange">
        <short>
          <var>DataChange</var> - updates the text if it has changed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBComboBox.DataChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBComboBox.EditingChange">
        <short>
          <var>EditingChange</var> - (currently no action)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBComboBox.EditingChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBComboBox.Notification" link="#rtl.Classes.TComponent.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBComboBox.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBComboBox.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBComboBox.UpdateData">
        <short>
          <var>UpdateData</var> - copies the new data via the datalink </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.DbCtrls.TCustomDBComboBox.UpdateData">TCustomDBComboBox.UpdateData</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBComboBox.UpdateData.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBComboBox.FocusRequest">
        <short>
          <var>FocusRequest</var> - a request has been received and Focus is set</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBComboBox.FocusRequest.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBComboBox.Loaded" link="#rtl.Classes.TComponent.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBComboBox.EditingDone">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDBComboBox.Create">
        <short>
          <var>Create</var> - constructor for <var>TDBComboBox</var>: calls inherited <var>Create</var> then sets default style and forms datalinks and actions</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.StdCtrls.TCustomComboBox.Create"/>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBComboBox.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TDBComboBox.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TDBComboBox</var>: frees datalinks then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.StdCtrls.TCustomComboBox.Destroy"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBComboBox.Field">
        <short>The field in the dataset to which this control is attached</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBComboBox.Text">
        <short>
          <var>Text</var> - the string appearing in the main box. If an item on the drop-down list is selected, it replaces the contents of <var>Text</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBComboBox.ItemIndex">
        <short>
          <var>Index </var>- the number of the currently selected item (starting at zero)</short>
        <descr>
          <p>
            <var>Index </var>



- the number of the currently selected item</p>
          <p>The first item has number 0, the second has number 1, the third number 2, etc. </p>
          <p>In case no item is selected, ItemIndex
has value -1.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.Anchors" link="#LCL.Controls.TControl.Anchors">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines how the control is to be anchored to its client or parent conrol</p>
          <p>Either reads a flag containing the set of anchors to be used, or writes a set of anchors. If they have been written, this is indicated in <var>IsAnchorsStored</var>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.ArrowKeysTraverseList" link="#LCL.StdCtrls.TCustomComboBox.ArrowKeysTraverseList">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.AutoDropDown" link="#LCL.StdCtrls.TCustomComboBox.AutoDropDown">
        <descr>
          <p>
            <var>AutoDropDown </var>



- if True, the drop-down list appears as soon as the cursor moves over the text box</p>
          <p>If False, the drop-down box only appears when the downward triangular indicator at the end of the box is selected</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.DataField" link="#LCL.DbCtrls.TCustomDBComboBox.DataField">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.DataSource" link="#LCL.DbCtrls.TCustomDBComboBox.DataSource">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.DropDownCount" link="#LCL.StdCtrls.TCustomComboBox.DropDownCount">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.Enabled" link="#LCL.Controls.TControl.Enabled">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Whether the control is <var>Enabled</var>. If not, it usually appears 'greyed-out'</p>
          <p>Reads a flag to see whether the control is enabled, or stores a new value. If stored, sets a flag to say so.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.Font" link="#LCL.Controls.TControl.Font">
        <short>The <var>Font</var> to be used for text in this control</short>
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Reads a flag to see what font should be used, or sets a flag to store it. If stored, sets a flag to say so</p>
          <p>The properties of <var>Font</var> are defined in the parent class <link id="#lcl.Graphics.TFont">TFont</link>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.ItemHeight" link="#LCL.StdCtrls.TCustomComboBox.ItemHeight">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.Items" link="#LCL.StdCtrls.TCustomComboBox.Items">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.ItemWidth" link="#LCL.StdCtrls.TCustomComboBox.ItemWidth">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.MaxLength" link="#LCL.StdCtrls.TCustomComboBox.MaxLength">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.OnChange" link="#LCL.StdCtrls.TCustomComboBox.OnChange">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.OnClick" link="#LCL.Controls.TControl.OnClick">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>This is often the default action for many controls, and is often the ONLY action specified by the programmer. The action can be spcified by the user, either by typing explicit code into the implementation section for this control, or by selecting an action from a pre-supplied <var>ActionList</var>
          </p>
          <p>Reads or writes a flag if  a mouse click is detected, and sets a flag if a value is stored.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.OnCloseUp" link="#LCL.StdCtrls.TCustomComboBox.OnCloseUp">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.OnDrawItem" link="#LCL.StdCtrls.TCustomComboBox.OnDrawItem">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.OnDropDown" link="#LCL.StdCtrls.TCustomComboBox.OnDropDown">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown">
        <descr>
          <p>
            <var>OnKeyDown</var>
 - event handler for instance when key is down while control has focus</p>
          <p>Differs from <link id="#lcl.Controls.TWinControl.OnKeyPress">OnKeyPress</link> in that the key may have already been down when the control received focus; with <var>OnKeyPress</var> the key needs to become pressed while the control has focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress">
        <descr>
          <p>
            <var>OnKeyPress</var>
 - event controller for a key being pressed while the control has focus</p>
          <p>Differs from <link id="#lcl.Controls.TWinControl.OnKeyDown">OnKeyDown</link> in that the key needs to become pressed while the control has focus; with <var>OnKeyDown</var>  the key may have already been down when the control received focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp">
        <descr>
          <p>
            <var>OnKeyUp</var>
  - event handler for instance when a key is up (not pressed) while the control has focus</p>
          <p>The key may already have been up when the control received focus, or a pressed key may become released during the time the control has focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.ParentFont" link="#LCL.Controls.TControl.ParentFont">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.ReadOnly" link="#LCL.StdCtrls.TCustomComboBox.ReadOnly">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads flag or writes one to determine if a hint is to be shown when mouse hovers over this control. If value is stored, a storage flag is set. Display of the actual hint is controlled by OnShowHint
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.Sorted" link="#LCL.StdCtrls.TCustomComboBox.Sorted">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.Style" link="#LCL.StdCtrls.TCustomComboBox.Style">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <descr>Reads or writes information in flag; default is -1
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <descr>
          <p>Reads or writes boolean flag; default is False</p>
          <p>Use the TabStop to allow or disallow access to the control using the Tab key.</p>
          <p>If <var>TabStop</var> is True, the control is in the tab order. If <var>TabStop</var> is False, the control is not in the tab order and the user can't use the Tab key to move to the control.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBComboBox.Visible" link="#LCL.Controls.TControl.Visible">
        <descr>
          <pre>The Visible property represents the ability to see a visual control. 
          If Visible is True the control is shown, otherwise it is hidden.
          Calling Show sets, among others, Visible to True.
          Setting Visible to False is equivalent to calling Hide method.</pre>
          <remark>The Visible property does not depend on control's parent visibility. Use IsVisible method to consider this and get real visibility.</remark>
        </descr>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDBMemo">
        <short>
          <var>TDBMemo </var> - a data-aware Memo box to process the multi-line text of a single field in a dataset</short>
        <seealso>
          <link id="HowToUseDataAwareControls"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBMemo.FDataLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBMemo.FAutoDisplay">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBMemo.FDBMemoFocused">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBMemo.FDBMemoLoaded">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBMemo.GetDataField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBMemo.GetDataField.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBMemo.GetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBMemo.GetDataSource.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBMemo.GetField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBMemo.GetField.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBMemo.GetReadOnly" link="#LCL.StdCtrls.TCustomEdit.GetReadOnly">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBMemo.GetReadOnly.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBMemo.SetAutoDisplay">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBMemo.SetAutoDisplay.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBMemo.SetDataField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBMemo.SetDataField.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBMemo.SetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBMemo.SetDataSource.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBMemo.SetReadOnly" link="#LCL.StdCtrls.TCustomEdit.SetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBMemo.SetReadOnly.AValue">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TDBMemo.WordWrapIsStored" link="#LCL.StdCtrls.TCustomMemo.WordWrapIsStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBMemo.WordWrapIsStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBMemo.DataChange">
        <short>
          <var>DataChange</var> - if Data changed, loads the new data into the appropriate part of the Field</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBMemo.DataChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBMemo.EditingChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBMemo.EditingChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBMemo.Notification" link="#rtl.Classes.TComponent.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBMemo.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBMemo.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBMemo.UpdateData">
        <short>
          <var>UpdateData</var> - if data changed, copy new text via the datalink</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBMemo.UpdateData.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBMemo.FocusRequest">
        <short>
          <var>FocusRequest</var> - a request has been received, so focus is given</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBMemo.FocusRequest.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBMemo.Loaded" link="#rtl.Classes.TComponent.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBMemo.EditingDone">
        <short>
          <var>EditingDone</var> - if link allows modifications and is in an <var>Editing</var> state, updates data via the link then calls inherited <var>EditingDone</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.EditingDone">TControl.EditingDone</link>
        </seealso>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDBMemo.Create">
        <short>
          <var>Create</var> - constructor for <var>TDBMemo</var>: calls inherited <var>Create</var>, then sets style and forms datalinks and actions</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.StdCtrls.TCustomMemo.Create">TCustomMemo.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBMemo.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TDBMemo.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TDBMemo</var>: frees datalinks then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.StdCtrls.TCustomMemo.Destroy">TCustomMemo.Destroy</link>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TDBMemo.LoadMemo">
        <short>
          <var>LoadMemo</var> - tries to load data from current field as a string if possible, otherwise returns an exception</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBMemo.Field">
        <short>The field in the DataSet to which this control is to be linked. Can be referred to by name, or as an index</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.Align" link="#LCL.Controls.TControl.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.Anchors" link="#LCL.Controls.TControl.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.AutoDisplay">
        <short>
          <var>AutoDisplay</var> - if True, automatically displays the data when loaded</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.Color" link="#LCL.Controls.TControl.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.DataField">
        <short>The name of the field, as a string (ie cannot be referred to as an Index)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.DataSource">
        <short>The DataSource from which information is obtained to display in this control. Usually the result of a database query</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.Font" link="#LCL.Controls.TControl.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.Lines" link="#LCL.StdCtrls.TCustomMemo.Lines">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.MaxLength" link="#LCL.StdCtrls.TCustomEdit.MaxLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.OnChange" link="#LCL.StdCtrls.TCustomEdit.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.ReadOnly" link="#LCL.StdCtrls.TCustomEdit.ReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.ScrollBars" link="#LCL.StdCtrls.TCustomMemo.ScrollBars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.Tabstop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBMemo.WordWrap" link="#LCL.StdCtrls.TCustomMemo.WordWrap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDBGroupBox">
        <short>
          <var>TDBGroupBox</var>  - a data-aware version of <var>TGroupBox,</var>  allowing a number of data-aware objects to be grouped together on a form</short>
        <seealso>
          <link id="HowToUseDataAwareControls"/>
        </seealso>
      </element>
      <!-- variable Visibility: default -->
      <element name="TDBGroupBox.FDataLink">
        <short>
          <var>FDataLink</var> - local variable storing the identity of the Field Data Link</short>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="TDBGroupBox.GetDataField">
        <short>
          <var>GetDataField</var> - returns the name of the data field</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBGroupBox.GetDataField.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="TDBGroupBox.GetDataSource">
        <short>
          <var>GetDataSource</var> - returns the identity of the data source</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBGroupBox.GetDataSource.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="TDBGroupBox.GetField">
        <short>
          <var>GetField</var> - returns the identity of the field to which the group box is atttached</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBGroupBox.GetField.Result">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBGroupBox.SetDataField">
        <short>
          <var>SetDataField</var> - specifies the data field to which the group box is attached</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBGroupBox.SetDataField.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBGroupBox.SetDataSource">
        <short>
          <var>SetDataSource</var> - specifies the data source to be used by the group box</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBGroupBox.SetDataSource.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBGroupBox.DataChange">
        <short>
          <var>DataChange</var> - if Data changed, loads the new data into the caption</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBGroupBox.DataChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBGroupBox.Loaded" link="#rtl.Classes.TComponent.Loaded">
        <descr>
          <p>
            <var>Loaded</var> is called by the streaming system when a root
component was completely read from a stream and all properties and 
references to other objects have been resolved by the streaming 
system. Descendents of <var>TComponent</var> should override this method to
do some additional processing of properties after all published 
properties have been set from values obtained from the stream.
</p>
          <p>Application programmers should never call <var>Loaded</var> directly, this
is done automatically by the streaming system.
</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBGroupBox.Notification" link="#rtl.Classes.TComponent.Notification">
        <descr>
          <p>
            <var>Notification</var> is called whenever a child component is destroyed,
inserted or removed from the list of owned component. Components that
were requested to send a notification when they are freed 
((with <link id="TComponent.FreeNotification">FreeNotification</link>)
will also call <var>Notification</var> when they are freed.
</p>
          <p>The <var>AComponent</var> parameter specifies which component sends the
notification, and <var>Operation</var> specifies whether the component is
being inserted into or removed from the child component list, or whether it
is being destroyed.
</p>
          <p>Descendents of <var>TComponent</var> can use <link id="TComponent.FreeNotification">FreeNotification</link> to request
notification of the destruction of another object. By overriding the
<var>Notification</var> method, they can do special processing (typically,
set a reference to this component to <var>Nil</var>) 
when this component is destroyed. The <var>Notification</var> method is
called quite often in the streaming process, so speed should be a
consideration when overriding this method.
</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBGroupBox.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBGroupBox.Notification.Operation">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDBGroupBox.Create">
        <short>
          <var>Create</var> - constructor for <var>TDBGroupBox</var>: calls inherited <var>Create</var> then sets up datalinks and actions</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.StdCtrls.TCustomGroupBox.Create">TCustomGroupBox.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBGroupBox.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TDBGroupBox.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TDBGroupBox</var>: frees datalinks then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.Destroy">TWinControl.Destroy</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBGroupBox.Field">
        <short>The field in the DataSet to which this control is to be linked. Can be referred to by name, or as an index</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.Align" link="#LCL.Controls.TControl.Align">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Either reads a flag containing alignment instructions (<var>FAlign</var>) or writes alignment instructions (<var>SetAlign</var>)</p>
          <p>May have no alignment, may have custom or client alignment, or can be aligned to top, bottom, left or right</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.Anchors" link="#LCL.Controls.TControl.Anchors">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines how the control is to be anchored to its client or parent conrol</p>
          <p>Either reads a flag containing the set of anchors to be used, or writes a set of anchors. If they have been written, this is indicated in <var>IsAnchorsStored</var>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.Caption" link="#LCL.Controls.TControl.Caption">
        <descr>
          <p>Gets caption as a text-string (<var>GetText</var>), or stores the new caption (<var>SetText</var>). Shows flag if caption is stored (<var>IsCaptionStored</var>).</p>
          <p>By default, the <var>Caption</var> appears the same as the control <var>Name</var> in the Object Inspector, 
and the developer needs to set it explicitly to some new text.</p>
          <p>The VCL implementation relies on the virtual <var>Get/SetTextBuf</var> to exchange text between widgets and VCL. This means a lot of (unnecesary) text copies. </p>
          <p>The LCL uses strings for exchanging text (more efficient). To maintain VCL compatibility, the virtual <var>RealGet/SetText</var> is
introduced. These functions interface with the LCLInterface. </p>
          <p>The default <var>Get/SetTextBuf</var> implementation calls the <var>RealGet/SetText</var>. As long as the <var>Get/SetTextBuf</var> isn't overridden <var>Get/SetText</var> calls <var>RealGet/SetText</var> to avoid PChar copying.</p>
          <p>To keep things optimal, LCL implementations should always override RealGet/SetText. Get/SetTextBuf is only kept for compatibility.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.ClientHeight" link="#LCL.Controls.TControl.ClientHeight">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Finds or sets the client height, and sets a flag if it has been stored</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.ClientWidth">
        <short>
          <var>ClientWidth</var> - determines the width of the client within which the control exists</short>
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>
            <var>ClientWidth</var>
 - determines the width of the client within which the control exists; reads the width of the client control or sets the value. Sets flag if value is stored</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.Color" link="#LCL.Controls.TControl.Color">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Reads the value for colour, or stores the value, and sets a flag if the colour is stored.</p>
          <p>The default colour is the same as the window in which the control is located.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.Constraints" link="#LCL.Controls.TControl.Constraints">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determine <var>Constraints</var> (max and min height and width) for this control; reads the size constraints or stores new ones.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.DataField">
        <short>The name of the field, as a string (ie cannot be referred to as an Index)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.DataSource">
        <short>The DataSource from which information is obtained to display in this control. Usually the result of a SQLQuery</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.Enabled" link="#LCL.Controls.TControl.Enabled">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Whether the control is <var>Enabled</var>. If not, it usually appears 'greyed-out'</p>
          <p>Reads a flag to see whether the control is enabled, or stores a new value. If stored, sets a flag to say so.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.Font" link="#LCL.Controls.TControl.Font">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Reads a flag to see what font should be used, or sets a flag to store it. If stored, sets a flag to say so</p>
          <p>The properties of <var>Font</var> are defined in the parent class <link id="#lcl.Graphics.TFont">TFont</link>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.OnClick" link="#LCL.Controls.TControl.OnClick">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>This is often the default action for many controls, and is often the ONLY action specified by the programmer. The action can be spcified by the user, either by typing explicit code into the implementation section for this control, or by selecting an action from a pre-supplied <var>ActionList</var>
          </p>
          <p>Reads or writes a flag if  a mouse click is detected, and sets a flag if a value is stored.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.OnDblClick" link="#LCL.Controls.TControl.OnDblClick">
        <descr>
          <p>Double-clicking is much more common in a Windows environment than in Unix or Linux, where single-clicking is the default method for selecting an object. However, in all environments there could be valid use for a double-click, and a method should be supplied if appropriate.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown">
        <descr>
          <p>
            <var>OnKeyDown</var>
 - event handler for instance when key is down while control has focus</p>
          <p>Differs from <link id="#lcl.Controls.TWinControl.OnKeyPress">OnKeyPress</link> in that the key may have already been down when the control received focus; with <var>OnKeyPress</var> the key needs to become pressed while the control has focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress">
        <descr>
          <p>
            <var>OnKeyPress</var>
 - event controller for a key being pressed while the control has focus</p>
          <p>Differs from <link id="#lcl.Controls.TWinControl.OnKeyDown">OnKeyDown</link> in that the key needs to become pressed while the control has focus; with <var>OnKeyDown</var>  the key may have already been down when the control received focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp">
        <descr>
          <p>
            <var>OnKeyUp</var>
  - event handler for instance when a key is up (not pressed) while the control has focus</p>
          <p>The key may already have been up when the control received focus, or a pressed key may become released during the time the control has focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.OnResize" link="#LCL.Controls.TControl.OnResize">
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads or Writes flag if control is re-sized.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.ParentColor" link="#LCL.Controls.TControl.ParentColor">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.ParentFont" link="#LCL.Controls.TControl.ParentFont">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <descr>// standard properties, which should be supported by all descendants<br/>
 Reads the details of the pop-up menu, or stores them.<br/>
Properties are defined in the parent class <link id="#lcl.Menus.TPopupMenu">TPopupMenu</link>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads flag or writes one to determine if a hint is to be shown when mouse hovers over this control. If value is stored, a storage flag is set. Display of the actual hint is controlled by OnShowHint
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <descr>Reads or writes information in flag; default is -1
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <descr>
          <p>Reads or writes boolean flag; default is False</p>
          <p>Use the TabStop to allow or disallow access to the control using the Tab key.</p>
          <p>If <var>TabStop</var> is True, the control is in the tab order. If <var>TabStop</var> is False, the control is not in the tab order and the user can't use the Tab key to move to the control.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGroupBox.Visible" link="#LCL.Controls.TControl.Visible">
        <descr>
          <pre>The Visible property represents the ability to see a visual control. 
          If Visible is True the control is shown, otherwise it is hidden.
          Calling Show sets, among others, Visible to True.
          Setting Visible to False is equivalent to calling Hide method.</pre>
          <remark>The Visible property does not depend on control's parent visibility. Use IsVisible method to consider this and get real visibility.</remark>
        </descr>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDBImage">
        <short>
          <var>TDBImage </var>- a data-aware Image box to display a single image from a dataset</short>
        <seealso>
          <link id="HowToUseDataAwareControls"/>
        </seealso>
        <descr>The Image is stored in the database as a Binary Large Object (BLOB)</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBImage.FAutoDisplay">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBImage.FDataLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBImage.FQuickDraw">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBImage.FPictureLoaded">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBImage.GetDataField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBImage.GetDataField.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBImage.GetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBImage.GetDataSource.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBImage.GetField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBImage.GetField.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBImage.GetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBImage.GetReadOnly.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBImage.SetAutoDisplay">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBImage.SetAutoDisplay.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBImage.SetDataField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBImage.SetDataField.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBImage.SetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBImage.SetDataSource.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBImage.SetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBImage.SetReadOnly.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBImage.Notification" link="#rtl.Classes.TComponent.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBImage.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBImage.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBImage.DataChange">
        <short>
          <var>DataChange</var> - if data changed, load new picture</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBImage.DataChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBImage.UpdateData">
        <short>
          <var>UpdateData</var> - if data changed, save new picture</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBImage.UpdateData.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBImage.LoadPicture">
        <short>
          <var>LoadPicture</var> - loads picture into the appropriate field for the graphic class of the caller</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBImage.Loaded" link="#rtl.Classes.TComponent.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDBImage.Create">
        <short>
          <var>Create</var> - constructor for <var>TDBImage</var>: cals inherited <var>Create</var> then sets style and display methods, forms datalinks and actions</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.ExtCtrls.TCustomImage.Create">TCustomImage.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBImage.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TDBImage.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TDBImage</var>: frees datalinks and calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.ExtCtrls.TCustomImage.Destroy">TCustomImage.Destroy</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBImage.Field">
        <short>The <var>Field</var> in which picture data are stored</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.Align" link="#LCL.Controls.TControl.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.AutoDisplay">
        <short>
          <var>AutoDisplay</var> - if True, automatically displays when focus is given</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.AutoSize" link="#LCL.Controls.TControl.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.Center" link="#LCL.ExtCtrls.TCustomImage.Center">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.Constraints" link="#LCL.Controls.TControl.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.DataField">
        <short>The name of the <var>DataField</var> that holds the image</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.DataSource">
        <short>The identity of the <var>DataSource</var> that holds the image</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.OnClick" link="#LCL.Controls.TControl.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.Picture">
        <short>The picture that is to be stored or displayed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.Proportional">
        <short>True if image is proportional</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.QuickDraw">
        <short>
          <var>QuickDraw</var> - if True, quick drawing is implemented</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.ReadOnly">
        <short>
          <var>ReadOnly</var> if True, image can be inspected byt not modified or written </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.Stretch" link="#LCL.ExtCtrls.TCustomImage.Stretch">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.Transparent" link="#LCL.ExtCtrls.TCustomImage.Transparent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBImage.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDBCalendar">
        <short>
          <var>TDBCalendar</var> - a data-aware version of <var>TCalendar</var>, for selecting a date to put in a database field</short>
        <seealso>
          <link id="HowToUseDataAwareControls"/>
        </seealso>
        <descr>A pop-up calendar appears, and the user can navigate through years, months and days to select the date that is required. When a date is selected, it is inserted into the Date field of the appropriate record in the database.</descr>
      </element>
      <!-- variable Visibility: default -->
      <element name="TDBCalendar.FDataLink">
        <short>
          <var>FDataLink</var> - local variable to hold identity of the field data link</short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBCalendar.DataChange">
        <short>
          <var>DataChange</var> - if the link is active, transmit the changed data</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCalendar.DataChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBCalendar.EditingChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCalendar.EditingChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBCalendar.UpdateData">
        <short>
          <var>UpdateData</var> copy changed data into the text fileld</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCalendar.UpdateData.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBCalendar.FocusRequest">
        <short>
          <var>FocusRequest</var> - a request has been received to give focus, so it is given</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCalendar.FocusRequest.Sender">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="TDBCalendar.GetDataField">
        <short>
          <var>GetDataField</var> - returns the name of the Data Field</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBCalendar.GetDataField.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="TDBCalendar.GetDataSource">
        <short>
          <var>GetDataSource</var> - returns the  identity of the data source</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBCalendar.GetDataSource.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="TDBCalendar.GetField">
        <short>
          <var>GetField</var> - returns the identity of the data field</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBCalendar.GetField.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="TDBCalendar.GetReadOnly">
        <short>
          <var>GetReadOnly</var> - returns the ReadOnly state</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBCalendar.GetReadOnly.Result">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBCalendar.SetReadOnly">
        <short>
          <var>SetReadOnly</var> - specifies the value for ReadOnly</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCalendar.SetReadOnly.Value">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBCalendar.SetDate">
        <short>
          <var>SetDate</var> - specifies the date as a string</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCalendar.SetDate.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBCalendar.SetDataField">
        <short>
          <var>SetDataField</var> - specifies the data field to use for the calendar</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCalendar.SetDataField.Value">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDBCalendar.SetDataSource">
        <short>
          <var>SetDataSource</var> - specifies the data source to which the calendar is linked</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCalendar.SetDataSource.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCalendar.Loaded" link="#rtl.Classes.TComponent.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCalendar.Notification" link="#rtl.Classes.TComponent.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCalendar.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCalendar.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCalendar.EditingDone">
        <short>
          <var>EditingDone</var> - changes data over the link then calls inherited <var>EditingDone</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.EditingDone">TControl.EditingDone</link>
        </seealso>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDBCalendar.Create">
        <short>
          <var>Create</var> - constructor for <var>TDBCalendar</var>: calls inherited <var>Create</var> and forms datalinks and actions</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Calendar.TCustomCalendar.Create">TCustomCalendar.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCalendar.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TDBCalendar.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TDBCalendar</var>: frees datalinks and calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.Destroy">TWinControl.Destroy</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBCalendar.Field">
        <short>The <var>Field</var> to which the calendar is attached</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCalendar.DataField">
        <short>The name of the <var>DataField</var> as a string</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCalendar.DataSource">
        <short>The identity of the <var>DataSource</var> holding the date information</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCalendar.Date">
        <short>The <var>Date</var> obtained from the Calendar</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCalendar.ReadOnly" link="#LCL.Calendar.TCustomCalendar.ReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCalendar.DisplaySettings" link="#LCL.Calendar.TCustomCalendar.DisplaySettings">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCalendar.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCalendar.OnClick" link="#LCL.Controls.TControl.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCalendar.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCalendar.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCalendar.OnDayChanged" link="#LCL.Calendar.TCustomCalendar.OnDayChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCalendar.OnMonthChanged" link="#LCL.Calendar.TCustomCalendar.OnMonthChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBCalendar.OnYearChanged" link="#LCL.Calendar.TCustomCalendar.OnYearChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TDBNavGlyph">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBNavGlyph.ngEnabled">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBNavGlyph.ngDisabled">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TDBNavButtonType">
        <short>TDBNavButtonType</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBNavButtonType.nbFirst">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBNavButtonType.nbPrior">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBNavButtonType.nbNext">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBNavButtonType.nbLast">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBNavButtonType.nbInsert">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBNavButtonType.nbDelete">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBNavButtonType.nbEdit">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBNavButtonType.nbPost">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBNavButtonType.nbCancel">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBNavButtonType.nbRefresh">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TDBNavButtonSet">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TDBNavButtonStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBNavButtonStyle.nsAllowTimer">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBNavButtonStyle.nsFocusRect">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TDBNavButtonDirection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBNavButtonDirection.nbdHorizontal">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBNavButtonDirection.nbdVertical">
        <short/>
      </element>
      <!-- alias type Visibility: default -->
      <element name="TNavigateBtn">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TDBNavClickEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBNavClickEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBNavClickEvent.Button">
        <short/>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefaultDBNavigatorButtons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="DBNavButtonResourceName">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDBCustomNavigator">
        <short>
          <var>TDBCustomNavigator</var> - the base class for <var>TDBNavigator</var>, a tool for navigating through the records of a dataset</short>
        <seealso>
          <link id="HowToUseDataAwareControls"/>
        </seealso>
        <descr>
          <p>
            <var>TDBCustomNavigator</var> is the parent class for 
<var>TDBNavigator</var>, an advanced tool for navigating through datasets held locally in response to a query sent to the database. Most of the important properties are defined here.</p>
          <p>It consists of a series of toolbuttons to move to the <b>First</b>, <b>Prior</b>, <b>Next</b> or <b>Last</b> record; to <b>Insert</b> or <b>Delete</b> a record; to <b>Edit</b> a record (enter Edit mode), to <b>Post</b> the changes. to <b>Cance</b>l the changes, and to <var>Refresh</var> the display from the database. The set of buttons for display can be customised in <var>VisibleButtons</var>, which allows display of individual buttons to be suppressed</p>
          <p>If used in conjunction with a DataAware control such as <var>TDBGrid</var> or <var>TDBMemo</var> it controls which records are displayed , the position of the record selection cursor, and the initiation of changes to the dataset and ultimately the database.</p>
          <p>Most of the functionality of the toolbar is already built-in to the control, but if the programmer needs to specify actions to be associated with individual buttons, there is a procedure  <var>BtnClick</var> to which an argument can be sent with the index value of the button clicked, and the procedure chooses which action to call dependent on the button index.</p>
          <p>The <var>DataSource</var> property must be set to link to the appropriate set of data.</p>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBCustomNavigator.FBeforeAction">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBCustomNavigator.FConfirmDelete">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBCustomNavigator.FDataLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBCustomNavigator.FDirection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBCustomNavigator.FFlat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBCustomNavigator.FOnNavClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBCustomNavigator.FShowButtonHints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBCustomNavigator.FVisibleButtons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBCustomNavigator.FDefaultHints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBCustomNavigator.FHints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBCustomNavigator.FUpdateButtonsNeeded">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBCustomNavigator.FUpdateButtonsLock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBCustomNavigator.GetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBCustomNavigator.GetDataSource.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDBCustomNavigator.GetHints">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBCustomNavigator.GetHints.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBCustomNavigator.SetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCustomNavigator.SetDataSource.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBCustomNavigator.SetDirection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCustomNavigator.SetDirection.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBCustomNavigator.SetFlat">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCustomNavigator.SetFlat.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBCustomNavigator.SetHints">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCustomNavigator.SetHints.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBCustomNavigator.SetShowButtonHints">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCustomNavigator.SetShowButtonHints.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDBCustomNavigator.SetVisibleButtons">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCustomNavigator.SetVisibleButtons.AValue">
        <short/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TDBCustomNavigator.Buttons">
        <short>The list of Buttons included in the navigator tool</short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCustomNavigator.DataChanged">
        <short>
          <var>DataChanged</var> - update status of all the buttons to reflect new data</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCustomNavigator.EditingChanged">
        <short>
          <var>EditingChanged</var> - the status of the buttons is set to <var>CanModify</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCustomNavigator.ActiveChanged">
        <short>
          <var>ActiveChanged</var> - if datalink is active, calls <var>DataChanged</var> and <var>EditingChanged</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#lcl.DBCtrls.TDBCustomNavigator.DataChanged">DataChanged</link>
          <link id="#lcl.DBCtrls.TDBCustomNavigator.EditingChanged">EditingChanged</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCustomNavigator.Loaded" link="#rtl.Classes.TComponent.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCustomNavigator.Notification" link="#rtl.Classes.TComponent.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCustomNavigator.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCustomNavigator.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCustomNavigator.UpdateButtons">
        <short>
          <var>UpdateButtons</var> - if the position of the buttons need to be changed, does this, then updates the status of the buttons (see <var>ActiveChanged</var>)</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.DBCtrls.TDBCustomNavigator.ActiveChanged">ActiveChanged</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCustomNavigator.UpdateHints">
        <short>
          <var>UpdateHints</var> - reloads the default hints and modifies any that have been changed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCustomNavigator.HintsChanged">
        <short>
          <var>HintsChanged</var> - calls <var>UpdateHints</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#lcl.DBCtrls.TDBCustomNavigator.UpdateHints">UpdateHints</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCustomNavigator.HintsChanged.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCustomNavigator.ButtonClickHandler">
        <short>
          <var>ButtonClickHandler</var> - performs <var>BtnClick</var> for the appropriate button</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCustomNavigator.ButtonClickHandler.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCustomNavigator.DoOnResize">
        <short>
          <var>DoOnResize</var> - calls <var>UpdateButtons</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.DoOnResize"/>
          <link id="#LCL.DBCtrls.TDBCustomNavigator.UpdateButtons">UpdateButtons</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCustomNavigator.BeginUpdateButtons">
        <short>
          <var>BeginUpdateButtons</var> - locks the buttons before updating them</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBCustomNavigator.EndUpdateButtons">
        <short>
          <var>EndUpdateButtons</var> - unlocks each button in turn and updates it if needed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDBCustomNavigator.Create">
        <short>
          <var>Create</var> - constructor for <var>TDBCustomNavigator</var>: locks the buttons, calls inherited <var>Create</var>, sets default size, style, forms datalinks, initialises hints, updates the buttons</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.ExtCtrls.TCustomPanel.Create">TCustomPanel.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCustomNavigator.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TDBCustomNavigator.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TDBCustomNavigator</var>: frees datalinks and hints, then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TDBCustomNavigator.BtnClick">
        <short>
          <var>BtnClick</var> - procedure to respond to button clicks, and select an action from a list according to the value of the <var>Index</var> of the clicked button</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBCustomNavigator.BtnClick.Index">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TDBCustomNavigator.VisibleButtonCount">
        <short>Finds the number of visible buttons</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBCustomNavigator.VisibleButtonCount.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBCustomNavigator.BeforeAction">
        <short>
          <var>BeforeAction</var> - code to be executed before an action is performed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBCustomNavigator.ConfirmDelete">
        <short>Should the user be asked for confirmation before a record is deleted? If True, a dialog appears asking for confirmation</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBCustomNavigator.DataSource">
        <short>The Data Source to which the control must be linked in order to function</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBCustomNavigator.Direction">
        <short>The direction in which the buttons appear: horizontal or vertical</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBCustomNavigator.Flat">
        <short>
          <var>Flat</var> - if True, buttons have no 3-D effect</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBCustomNavigator.Hints">
        <short>A list of hints to be shown if the mouse hovers over a button</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBCustomNavigator.OnClick">
        <short>The action to be taken when a navigator button is clicked</short>
        <descr/>
        <seealso>
          <link id="#LCL.Controls.TControl.OnClick">TControl.OnClick</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBCustomNavigator.VisibleButtons">
        <short>The set of visible buttons (some of them can be suppressed if their function appears redundant)</short>
        <descr>
          <p>The VisibleButtons entry in the Object Inspector can be used to set whether or not a particular button is to be visible.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBCustomNavigator.ShowButtonHints">
        <short>Determines whether button hints are to be shown</short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDBNavButton">
        <short>
          <var>TDBNavButton</var> - one of the <var>SpeedButtons</var> on a <var>TDBNavigator</var> tool</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBNavButton.FIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBNavButton.FNavStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TDBNavButton.Destroy" link="#LCL.Buttons.TCustomSpeedButton.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBNavButton.NavStyle">
        <short>
          <var>NavStyle</var> - the style of Navigator Button</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBNavButton.Index">
        <short>
          <var>Index</var> - the value from the enumerated type that specifies which button is being selected</short>
        <descr>
          <p>
            <printshort id="TDBNavButton.Index"/>
          </p>
          <p>Button may be</p>
          <p>nbFirst, nbPrior, nbNext, nbLast, nbInsert, nbDelete, nbEdit, nbPost, nbCancel, nbRefresh</p>
        </descr>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDBNavDataLink">
        <short>
          <var>TDBNavDataLink</var> - provides a link between a Database Navigator and a DataSet</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDBNavDataLink.FNavigator">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBNavDataLink.EditingChanged">
        <short>
          <var>EditingChanged</var> - method to process a change in the <var>Editing</var> property of the navigator</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBNavDataLink.DataSetChanged">
        <short>
          <var>DataSetChanged</var> - method to process a change in the data set attached to the navigator</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBNavDataLink.ActiveChanged">
        <short>
          <var>ActiveChanged</var> - method to process a change in the <var>Active</var> property of the navigator</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDBNavDataLink.Create">
        <short>
          <var>Create</var> - constructor for <var>TDBNavDataLink</var>: calls inherited <var>Create</var>, attaches <var>Navigator</var> and sets <var>VisualControl</var> to True</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.System.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBNavDataLink.Create.TheNavigator">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TDBNavDataLink.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TDBNavDataLink</var>: frees <var>Navigator</var> and calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Destroy">TPersistent.Destroy</link>
        </seealso>
      </element>
      <!-- object Visibility: default -->
      <element name="TDBNavigator">
        <short>
          <var>TDBNavigator </var>- a data-aware Button-Bar to facilitate navigating between records of a dataset</short>
        <seealso>
          <link id="HowToUseDataAwareControls"/>
        </seealso>
        <descr>
          <p>
            <var>TDBNavigator</var> is an advanced tool for navigating through datasets held locally in response to a query sent to the database.</p>
          <p>It consists of a series of toolbuttons to move to the <b>First</b>, <b>Prior</b>, <b>Next</b> or <b>Last</b> record; to <b>Insert</b> or <b>Delete</b> a record; to <b>Edit</b> a record (enter Edit mode), to <b>Post</b> the changes. to <b>Cancel</b> the changes, and to <b>Refresh</b> the display from the database.</p>
          <p>The programmer may determine, at design time, which buttons are to be displayed or suppressed by adjusting the <var>VisibleButtons</var> property in the Object Inspector.</p>
          <p>If used in conjunction with a DataAware control such as <link id="#lcl.DBGrids.TDBGrid">TDBGrid</link> or <link id="TDBMemo">TDBMemo</link> it controls which records are displayed , the position of the record selection cursor, and the initiation of changes to the dataset and ultimately the database.</p>
          <p>Most of the functionality of the toolbar is already built-in to the control, but if the programmer needs to specify actions to be associated with individual buttons, there is a procedure <link id="TDBCustomNavigator.BtnClick">TDBCustomNavigator.BtnClick</link> to which an argument can be sent with the <var>Index</var> value of the button clicked, and the procedure chooses which action to call dependent on the button index.</p>
          <p>The <var>DataSource</var> property must be set to link to the appropriate set of data.</p>
        </descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.Align" link="#LCL.Controls.TControl.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.Alignment" link="#LCL.ExtCtrls.TCustomPanel.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.Anchors" link="#LCL.Controls.TControl.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.AutoSize" link="#LCL.Controls.TControl.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.BeforeAction" link="#LCL.DbCtrls.TDBCustomNavigator.BeforeAction">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.BevelInner" link="#LCL.ExtCtrls.TCustomPanel.BevelInner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.BevelOuter" link="#LCL.ExtCtrls.TCustomPanel.BevelOuter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.BevelWidth" link="#LCL.ExtCtrls.TCustomPanel.BevelWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.BorderWidth" link="#LCL.Controls.TWinControl.BorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.Caption" link="#LCL.Controls.TControl.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.ClientHeight" link="#LCL.Controls.TControl.ClientHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.ClientWidth" link="#LCL.Controls.TControl.ClientWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.Color" link="#LCL.Controls.TControl.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.ConfirmDelete" link="#LCL.DbCtrls.TDBCustomNavigator.ConfirmDelete">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.DataSource" link="#LCL.DbCtrls.TDBCustomNavigator.DataSource">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.Direction" link="#LCL.DbCtrls.TDBCustomNavigator.Direction">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.DragMode" link="#LCL.Controls.TControl.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.Enabled" link="#LCL.Controls.TControl.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.Flat" link="#LCL.DbCtrls.TDBCustomNavigator.Flat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.Font" link="#LCL.Controls.TControl.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.Hints" link="#LCL.DbCtrls.TDBCustomNavigator.Hints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.OnClick" link="#LCL.DbCtrls.TDBCustomNavigator.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.OnDblClick" link="#LCL.Controls.TControl.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.OnDragOver" link="#LCL.Controls.TControl.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.OnResize" link="#LCL.Controls.TControl.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.ParentColor" link="#LCL.Controls.TControl.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.ParentFont" link="#LCL.Controls.TControl.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBNavigator.VisibleButtons" link="#LCL.DbCtrls.TDBCustomNavigator.VisibleButtons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="ExtractFieldName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ExtractFieldName.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExtractFieldName.Fields">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExtractFieldName.StartPos">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="FillBarChart">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FillBarChart.BC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FillBarChart.DS">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FillBarChart.LabelField">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FillBarChart.ValueField">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FillBarChart.AColor">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="Register">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <topic name="HowToUseDataAwareControls">
        <short>
          <var>HowToUseDataAwareControls</var>    - Hints for accessing databases</short>
        <descr>
          <p>
            <var>HowToUseDataAwareControls</var> - Hints for accessing databases. A set of Data-Aware components is provided, to make it easier to access information held in databases.</p>
          <p>Before using Data-Aware components, it is necessary to make a connection with a database, and this should be done either using a TSQLConnection or a TDBf component, depending on the type of database that is being used. In any case, the components for connection with the database need to be found in $Lazdir/components/sqldb/, $Lazdir/components/tdbf/ or whatever other source is appropriate. They need to be added using the <var>Components</var> Menu Item of the IDE, and compiled ready for adding. The IDE needs to be re-built to include the new components.</p>
          <p>To make the connection with the database: first place a <var>DataBase Connection</var> on the Form (invisible at run-time, so put it anywhere convenient); set its properties to connect the user (with name and password) to the appropriate server, database and table (the connection component should deal with all the user-authentication issues, opening and closing the database etc). Then put on a <var>TDataSource</var> from the Data Access tab of the Component Palette, and perhaps items such as <var>TSQLTransaction</var> and <var>TSQLQuery</var>, depending on the particular database you are using. The various database components need to be linked to each other, for example by setting the <var>Transaction</var> property of a database connector to the appropriate transaction component, and linking the <var>DataBase</var> property of the Transaction component back to the database connector; link the DataSource's <var>DataSet</var> property to the appropriate SQLQuery or other set of data, and its <var>Transaction</var> property to the transaction component</p>
          <p>Each Data-Aware control (on the Data Controls tab of the Component Palette) has the usual set of properties to determine its shape and size, position, colour and font etc. But there are also special properties to define the data to be displayed or modified. These include the <var>DataSource</var> property which must be set to link to the defined set of data, and often a <var>Field</var> component to determine which of the columns in the database is to be displayed. </p>
          <p>Most of the components operate on a single Row or record of the database, but the <var>TDBGrid</var> is capable of displaying and operating on multiple rows and columns, in a <var>StringGrid</var> format, allowing the user to get an overview of what is in the database. The DBGrid will display the contents of the DataSet even at design time, provided the various components are enabled or rendered active; this allows the designer to ensure that all the connections to the database have been correctly made.</p>
          <p>The <var>TDBNavigator</var> component is used in conjunction with the Data-Aware components. It consists of a series of buttons to allow browsing through the DataSet, displaying the first, previous, next or last record (or Row), inserting or deleting records, committing the changes back to the database or refreshing the DataSet from the database.</p>
          <p>The way database programming works is typically as follows:</p>
          <ul>
            <li>a database is opened for access by the user (Database Connection)</li>
            <li>a command is issued (eg by <var>TSQLQuery</var>) to select or extract some or all of the records which are then stored locally in the <var>DataSet</var>
            </li>
            <li>the contents of the <var>DataSet</var> are acted on by the Data-Aware components, displaying one Row or record at a time from selected Columns, or perhaps the whole DataSet in a <var>DBGrid</var>, editing records, inserting or deleting records, or using the data to perform statistical tests or calculations</li>
            <li>at intervals usually prescribed by the user (sometimes after every change, sometimes after a whole series of changes), the contents of the local DataSet are sent back to the database, causing an update of the database's contents. This process is referred to as 'Commit' or 'Post' or sometimes as 'Update'</li>
          </ul>
          <p>The programmer can determine which events are associated with a Commit action by supplying suitable event handlers for <var>OnClick</var>, <var>OnChange</var>, <var>OnFinishedEdit</var> etc.</p>
          <p>The following table shows the approximate correspondence between conventional and data-aware control classes</p>
          <table>
            <th>
              <td>Standard Control</td>
              <td>Data-Aware Control</td>
              <td>Comment</td>
            </th>
            <tr>
              <td>TCalendar</td>
              <td>TDBCalendar</td>
              <td>Select a date from pop-up calendar</td>
            </tr>
            <tr>
              <td>TCheckBox</td>
              <td>TDBCheckBox</td>
              <td>Check a box to show an option has been selected</td>
            </tr>
            <tr>
              <td>TComboBox</td>
              <td>TDBComboBox</td>
              <td>Select an option from a list and return it (or some custom text) in the main edit box</td>
            </tr>
            <tr>
              <td>TEdit</td>
              <td>TDBEdit</td>
              <td>Single-line text editing box</td>
            </tr>
            <tr>
              <td>TGroupBox</td>
              <td>TDBGroupBox</td>
              <td>A container for several related controls</td>
            </tr>
            <tr>
              <td>TImage</td>
              <td>TDBImage</td>
              <td>A Picture</td>
            </tr>
            <tr>
              <td>TListBox</td>
              <td>TDBListBox</td>
              <td>A list of string items</td>
            </tr>
            <tr>
              <td>TMemo</td>
              <td>TDBMemo</td>
              <td>Multiple-line text editing box</td>
            </tr>
            <tr>
              <td>TRadioGroup</td>
              <td>TDBRadioGroup</td>
              <td>A group of mutually exclusive Radio Buttons; only one at a time may be checked and selected. Note there is no data-aware equivalent of the isolated TRadioButton</td>
            </tr>
            <tr>
              <td>TText</td>
              <td>TDBText</td>
              <td>A simple text-string, usually read-only</td>
            </tr>
            <tr>
              <td>TStringGrid</td>
              <td>TdbGrid</td>
              <td>A grid to display information in Rows and Columns</td>
            </tr>
          </table>
          <p>Standard Controls can, of course, be used to display information from a database, but they lack the direct link with the DataSet and its Navigation aids, so the programmer must write explicit code to extract data from the DataSet and put it in the Standard Control</p>
        </descr>
      </topic>
      <element name="TDBEdit.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines the border spacing for this control</p>
          <p>Reads flag to find stored spacing values required for the border of the control, or writes the flag to set the spacing.</p>
          <p>The properties are defined in the parent class <link id="#lcl.Controls.TControlBorderSpacing">TControlBorderSpacing</link>
          </p>
        </descr>
      </element>
      <element name="TDBText.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TDBText.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TDBText.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TDBText.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TDBText.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TDBListBox.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines the border spacing for this control</p>
          <p>Reads flag to find stored spacing values required for the border of the control, or writes the flag to set the spacing.</p>
          <p>The properties are defined in the parent class <link id="#lcl.Controls.TControlBorderSpacing">TControlBorderSpacing</link>
          </p>
        </descr>
      </element>
      <element name="TDBListBox.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TDBListBox.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TDBListBox.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TDBListBox.OnDragOver" link="#LCL.Controls.TControl.OnDragOver">
        <short>Event handler for the case when a control is dragged over another control</short>
      </element>
      <element name="TDBListBox.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TDBListBox.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TDBRadioGroup.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines the border spacing for this control</p>
          <p>Reads flag to find stored spacing values required for the border of the control, or writes the flag to set the spacing.</p>
          <p>The properties are defined in the parent class <link id="#lcl.Controls.TControlBorderSpacing">TControlBorderSpacing</link>
          </p>
        </descr>
      </element>
      <element name="TDBRadioGroup.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TDBRadioGroup.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TDBRadioGroup.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TDBRadioGroup.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TDBRadioGroup.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TDBRadioGroup.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag">
        <short>Event handler for start of dragging process</short>
      </element>
      <element name="TDBCheckBox.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines the border spacing for this control</p>
          <p>Reads flag to find stored spacing values required for the border of the control, or writes the flag to set the spacing.</p>
          <p>The properties are defined in the parent class <link id="#lcl.Controls.TControlBorderSpacing">TControlBorderSpacing</link>
          </p>
        </descr>
      </element>
      <element name="TDBCheckBox.Color" link="#LCL.Controls.TControl.Color">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Reads the value for colour, or stores the value, and sets a flag if the colour is stored.</p>
          <p>The default colour is the same as the window in which the control is located.</p>
        </descr>
      </element>
      <element name="TDBCheckBox.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TDBComboBox.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines the border spacing for this control</p>
          <p>Reads flag to find stored spacing values required for the border of the control, or writes the flag to set the spacing.</p>
          <p>The properties are defined in the parent class <link id="#lcl.Controls.TControlBorderSpacing">TControlBorderSpacing</link>
          </p>
        </descr>
      </element>
      <element name="TDBComboBox.Color" link="#LCL.Controls.TControl.Color">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Reads the value for colour, or stores the value, and sets a flag if the colour is stored.</p>
          <p>The default colour is the same as the window in which the control is located.</p>
        </descr>
      </element>
      <element name="TDBComboBox.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TDBComboBox.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TDBComboBox.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Reads or Writes flag if bounds are changed</p>
        </descr>
      </element>
      <element name="TDBComboBox.OnDblClick" link="#LCL.Controls.TControl.OnDblClick">
        <descr>
          <p>Double-clicking is much more common in a Windows environment than in Unix or Linux, where single-clicking is the default method for selecting an object. However, in all environments there could be valid use for a double-click, and a method should be supplied if appropriate.</p>
        </descr>
      </element>
      <element name="TDBComboBox.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TDBComboBox.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TDBComboBox.OnEditingDone" link="#LCL.Controls.TControl.OnEditingDone"/>
      <element name="TDBComboBox.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TDBComboBox.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TDBComboBox.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TDBComboBox.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TDBComboBox.OnSelect" link="#LCL.StdCtrls.TCustomComboBox.OnSelect"/>
      <element name="TDBComboBox.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TDBComboBox.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TDBGroupBox.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines the border spacing for this control</p>
          <p>Reads flag to find stored spacing values required for the border of the control, or writes the flag to set the spacing.</p>
          <p>The properties are defined in the parent class <link id="#lcl.Controls.TControlBorderSpacing">TControlBorderSpacing</link>
          </p>
        </descr>
      </element>
      <element name="TDBGroupBox.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TDBGroupBox.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TDBGroupBox.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TDBGroupBox.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TDBGroupBox.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TDBGroupBox.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TDBEdit.IsReadOnly">
        <short>
          <var>IsReadOnly</var> - returns True if ReadOnly status is True</short>
      </element>
      <element name="TDBEdit.CMGetDataLink">
        <short>
          <var>CMGetDataLink</var> - LCL Message method for getting data link</short>
      </element>
      <element name="TDBEdit.KeyPress" link="#LCL.Controls.TWinControl.KeyPress"/>
      <element name="TDBEdit.GetEditText" link="#LCL.MaskEdit.TCustomMaskEdit.GetEditText"/>
      <element name="TDBEdit.WMSetFocus" link="#LCL.Controls.TWinControl.WMSetFocus"/>
      <element name="TDBEdit.WMKillFocus" link="#LCL.Controls.TWinControl.WMKillFocus"/>
      <element name="TDBEdit.LMPasteFromClip" link="#LCL.MaskEdit.TCustomMaskEdit.LMPasteFromClip"/>
      <element name="TDBEdit.LMCutToClip" link="#LCL.MaskEdit.TCustomMaskEdit.LMCutToClip"/>
      <element name="TDBComboBox.ActiveChange">
        <short>
          <var>ActiveChange</var> - if the datalink is active then send the changes, otherwise set the data to null</short>
      </element>
      <element name="TDBComboBox.Change" link="#LCL.StdCtrls.TCustomComboBox.Change"/>
      <element name="TDBComboBox.UpdateText">
        <short>
          <var>UpdateText</var> - copy the new text via the datalink and calls inherited <var>UpdateTExt</var>
        </short>
      </element>
      <element name="TDBMemo.ActiveChange">
        <short>
          <var>ActiveChange</var> - if the data link is active, transmit the changed data to the sender</short>
      </element>
      <element name="TDBMemo.Change" link="#LCL.StdCtrls.TCustomEdit.Change"/>
      <element name="TDBMemo.KeyPress" link="#LCL.Controls.TWinControl.KeyPress"/>
      <element name="TDBMemo.WndProc" link="#LCL.Controls.TControl.WndProc"/>
      <element name="TDBImage.ActiveChange">
        <short>
          <var>ActiveChange</var> - if datalink is active, send back new picture</short>
      </element>
      <element name="TDBImage.PictureChanged" link="#LCL.ExtCtrls.TCustomImage.PictureChanged"/>
      <element name="TDBCustomNavigator.GetControlClassDefaultSize" link="#LCL.Controls.TControl.GetControlClassDefaultSize"/>
      <element name="TDBCustomNavigator.SetEnabled" link="#LCL.Controls.TControl.SetEnabled"/>
      <element name="TFieldDataLink.OnLayoutChange">
        <short>
          <var>OnLayoutChange</var> - event handler for a change in the layout</short>
      </element>
      <element name="TDBLookup">
        <short>
          <var>TDBLookup</var> - used as source of data by <var>TDBLookupListBox</var> or <var>TDBLookupComboBox</var>, to find data from a lookup table</short>
        <descr>
          <p>
            <var>TDBLookup</var> component is typically owned by a Lookup control like <var>TDBLookupListBox</var> or <var>TDBLookupComboBox</var>.</p>
          <p>The <var>ListSource</var> is the other dataset <var>TDataSource</var> from which to retrieve the lookup data</p>
          <p>The <var>KeyField</var> is the lookup key in the <var>ListSource</var> which corresponds to the <var>DataField</var> value</p>
          <p>The <var>ListField</var> is the name of the field in the <var>ListSource</var> to list into the <var>Items</var> property of the lookup control.</p>
        </descr>
      </element>
      <element name="TDBLookup.Create">
        <short>
          <var>Create</var> - constructor for <var>TDBLookup</var>: calls inherited <var>Create</var>, creates links with fields and data source, initialises ActiveChange and Editing properties</short>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
        </seealso>
      </element>
      <element name="TDBLookup.Destroy">
        <short>
          <var>Destroy</var> - destructor for TDBLookup: frees links and calls inherited <var>Destroy</var>
        </short>
        <seealso>
          <link id="#rtl.Classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>
      <element name="TDBLookup.Initialize">
        <short>
          <var>Initialize</var> makes links between local Fields and the appropriate fields in the remote data source, then fetches the lookup data</short>
      </element>
      <element name="TDBLookup.KeyFieldValueOf">
        <short>
          <var>KeyFieldValueOf</var> - returns a key field value as a string from the given list field</short>
      </element>
      <element name="TDBLookup.ListFieldValueOf">
        <short>
          <var>ListFieldValueOf</var> - returns a listfield value as a string, given the key field value</short>
      </element>
      <element name="TDBLookup.KeyField">
        <short>The name of the <var>KeyField</var> used in the lookup search</short>
      </element>
      <element name="TDBLookup.ListField">
        <short>
          <var>ListField</var> - the name of the list field used in the lookup search</short>
      </element>
      <element name="TDBLookup.ListFieldIndex">
        <short>
          <var>ListFieldIndex</var> - the index value of the list field</short>
      </element>
      <element name="TDBLookup.ListSource">
        <short>
          <var>ListSource</var> - the data source that contains the lookup list</short>
      </element>
      <element name="TCustomDBListBox">
        <short>
          <var>TCustomDBListBox</var> - base class for TDBListBox, a data-aware listbox for presenting list information from a database</short>
        <seealso>
          <link id="HowToUseDataAwareControls"/>
        </seealso>
      </element>
      <element name="TCustomDBListBox.EditingChange">
        <short>
          <var>EditingChange</var> - method for responding to a change in the <var>Editing</var> property</short>
      </element>
      <element name="TCustomDBListBox.FocusRequest">
        <short>
          <var>FocusRequest</var> - method for responding to a request to give this control focus</short>
      </element>
      <element name="TCustomDBListBox.GetDataField">
        <short>
          <var>GetDataField</var> - returns the name of the data field as a string</short>
      </element>
      <element name="TCustomDBListBox.GetDataSource">
        <short>
          <var>GetDataSource</var> - returns the identity of the data source</short>
      </element>
      <element name="TCustomDBListBox.GetField">
        <short>
          <var>GetField</var> - returns the identity of the field</short>
      </element>
      <element name="TCustomDBListBox.SetItems">
        <short>
          <var>SetItems</var> - copies the specified Values into the <var>Items</var> property</short>
        <seealso>
          <link id="#LCL.StdCtrls.TCustomListBox.SetItems">TCustomListBox.SetItems</link>
        </seealso>
      </element>
      <element name="TCustomDBListBox.GetReadOnly">
        <short>
          <var>GetReadOnly</var> - fetches the <var>ReadOnly</var> status from the field datalink rather than using the inherited ReadOnly status</short>
      </element>
      <element name="TCustomDBListBox.SetReadOnly">
        <short>
          <var>SetReadOnly</var> - changes the datalink <var>ReadOnly</var> property as well as the local property, to that specified by <var>Value</var>
        </short>
      </element>
      <element name="TCustomDBListBox.SetDataField">
        <short>
          <var>SetDataField</var> - links to the field in the datalink with the given name</short>
      </element>
      <element name="TCustomDBListBox.SetDataSource">
        <short>
          <var>SetDataSource</var> - changes the attached data source to the one specified by AValue</short>
      </element>
      <element name="TCustomDBListBox.CMGetDataLink">
        <short>
          <var>CMGetDataLink</var> - control message method for obtaining the data link</short>
      </element>
      <element name="TCustomDBListBox.FDataLink">
        <short>
          <var>FDataLink</var> - local variable holding the identity of the field data link</short>
      </element>
      <element name="TCustomDBListBox.DataChange">
        <short>
          <var>DataChange</var> - method for dealing with a change in the data</short>
      </element>
      <element name="TCustomDBListBox.KeyDown" link="#LCL.Controls.TWinControl.KeyDown"/>
      <element name="TCustomDBListBox.Loaded" link="#rtl.Classes.TComponent.Loaded"/>
      <element name="TCustomDBListBox.Notification" link="#rtl.Classes.TComponent.Notification"/>
      <element name="TCustomDBListBox.UpdateData">
        <short>
          <var>UpdateData</var> - method for applying any pending changes to the data</short>
      </element>
      <element name="TCustomDBListBox.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomDBListBox</var>: calls inherited <var>Create</var>, makes links and sets up event handlers for data change, change in <var>Editing</var> status and updating data</short>
        <seealso>
          <link id="#LCL.StdCtrls.TCustomListBox.Create">CustomListBox.Create</link>
        </seealso>
      </element>
      <element name="TCustomDBListBox.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TCustomEBListbox</var>: frees data links then calls inherited <var>Destroy</var>
        </short>
        <seealso>
          <link id="#LCL.StdCtrls.TCustomListBox.Destroy">CustomListBox.Destroy</link>
        </seealso>
      </element>
      <element name="TCustomDBListBox.Click" link="#LCL.Controls.TControl.Click"/>
      <element name="TCustomDBListBox.EditingDone" link="#LCL.Controls.TControl.EditingDone"/>
      <element name="TCustomDBListBox.Field">
        <short>The identity of the <var>Field</var> to which the listbox belongs</short>
      </element>
      <element name="TCustomDBListBox.DataField">
        <short>The name of the <var>DataField</var> to which the listbox belongs</short>
      </element>
      <element name="TCustomDBListBox.DataSource">
        <short>The identity of the <var>DataSource</var> from which the lookup data will be fetched</short>
      </element>
      <element name="TCustomDBListBox.Items">
        <short>
          <var>Items</var> - the data that form the list in the box</short>
        <descr>
          <p>
            <var>Items</var> - the data that form the list in the box</p>
          <p>We need to overrride the write method for db aware.</p>
          <p>The Read isn't an issue since the list will be updated on data change anyway</p>
        </descr>
        <seealso>
          <link id="#LCL.StdCtrls.TCustomListBox.Items">TCustomListBox.Items</link>
        </seealso>
      </element>
      <element name="TCustomDBListBox.ReadOnly">
        <short>
          <var>ReadOnly</var> - if True, the data can only be read but not written or edited</short>
      </element>
      <element name="TDBListBox.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TDBLookupListBox">
        <short>
          <var>TDBLookupListBox</var>, a data-aware listbox for presenting lookup list information from a database</short>
      </element>
      <element name="TDBLookupListBox.DataChange">
        <short>
          <var>DataChange</var> - triggered by a change in the data: finds the index of the field containing th changed value</short>
        <seealso>
          <link id="#LCL.DbCtrls.TCustomDBListBox.DataChange">TCustomDBListBox.DataChange</link>
        </seealso>
      </element>
      <element name="TDBLookupListBox.Loaded" link="#rtl.Classes.TComponent.Loaded"/>
      <element name="TDBLookupListBox.UpdateData" link="#LCL.DbCtrls.TCustomDBListBox.UpdateData"/>
      <element name="TDBLookupListBox.Create">
        <short>
          <var>Create</var> - constructor for <var>TDBLookupListBox</var>: calls inherited <var>Create</var> then creates lookup and forms linkd</short>
        <seealso>
          <link id="#LCL.DbCtrls.TCustomDBListBox.Create">TCustomDBListBox.Create</link>
        </seealso>
      </element>
      <element name="TDBLookupListBox.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TDBLookupListBox.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TDBLookupListBox.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TDBLookupListBox.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle"/>
      <element name="TDBLookupListBox.DataField" link="#LCL.DbCtrls.TCustomDBListBox.DataField"/>
      <element name="TDBLookupListBox.DataSource" link="#LCL.DbCtrls.TCustomDBListBox.DataSource"/>
      <element name="TDBLookupListBox.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TDBLookupListBox.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TDBLookupListBox.KeyField">
        <short>The <var>KeyField</var> holding the data</short>
      </element>
      <element name="TDBLookupListBox.ListField">
        <short>The <var>ListField</var> for the data</short>
      </element>
      <element name="TDBLookupListBox.ListFieldIndex">
        <short>
          <var>ListFieldIndex</var> - the index value for the listfield</short>
      </element>
      <element name="TDBLookupListBox.ListSource">
        <short>
          <var>ListSource</var> - the data source from which the list is obtained</short>
      </element>
      <element name="TDBLookupListBox.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TDBLookupListBox.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TDBLookupListBox.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TDBLookupListBox.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TDBLookupListBox.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TDBLookupListBox.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TDBLookupListBox.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TDBLookupListBox.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TDBLookupListBox.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TDBLookupListBox.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TDBLookupListBox.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TDBLookupListBox.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TDBLookupListBox.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TDBLookupListBox.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TDBLookupListBox.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TDBLookupListBox.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TDBLookupListBox.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TDBLookupListBox.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TDBLookupListBox.ReadOnly" link="#LCL.DbCtrls.TCustomDBListBox.ReadOnly"/>
      <element name="TDBLookupListBox.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TDBLookupListBox.Sorted" link="#LCL.StdCtrls.TCustomListBox.Sorted"/>
      <element name="TDBLookupListBox.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TDBLookupListBox.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TDBLookupListBox.TopIndex" link="#LCL.StdCtrls.TCustomListBox.TopIndex"/>
      <element name="TDBLookupListBox.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TDBEdit.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TDBText.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TDBRadioGroup.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TDBCheckBox.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TCustomDBComboBox">
        <short>
          <var>TCustomDBComboBox</var> - a Data-aware Combo Box for displaying information from a Database</short>
        <seealso>
          <link id="HowToUseDataAwareControls"/>
        </seealso>
      </element>
      <element name="TCustomDBComboBox.DataChange">
        <short>
          <var>DataChange</var> - updates any changes in text</short>
      </element>
      <element name="TCustomDBComboBox.ActiveChange">
        <short>
          <var>ActiveChange</var> - method to process a change in the <var>Active</var> state</short>
      </element>
      <element name="TCustomDBComboBox.EditingChange">
        <short>
          <var>EditingChange</var> - method to process a change in the <var>Editing</var> state</short>
      </element>
      <element name="TCustomDBComboBox.Notification" link="#rtl.Classes.TComponent.Notification"/>
      <element name="TCustomDBComboBox.Change">
        <short>
          <var>Change</var> -if there has been a change to the data the link must be notified, then inherited <var>Change</var> is called</short>
        <seealso>
          <link id="#LCL.StdCtrls.TCustomComboBox.Change">TCustomComboBox.Change</link>
        </seealso>
      </element>
      <element name="TCustomDBComboBox.UpdateData">
        <short>
          <var>UpdateData</var> - implements any pending changes in the data</short>
      </element>
      <element name="TCustomDBComboBox.FocusRequest">
        <short>
          <var>FocusRequest</var> - sets focus in response to a request to do so</short>
      </element>
      <element name="TCustomDBComboBox.Loaded" link="#rtl.Classes.TComponent.Loaded"/>
      <element name="TCustomDBComboBox.EditingDone" link="#LCL.Controls.TControl.EditingDone">
        <short>
          <var>EditingDone</var> - updates data through the link, then calls inherited <var>EditingDone</var>
        </short>
      </element>
      <element name="TCustomDBComboBox.Field">
        <short>The <var>Field</var> to which this combobox is attached</short>
      </element>
      <element name="TCustomDBComboBox.Text" link="#LCL.StdCtrls.TCustomComboBox.Text"/>
      <element name="TCustomDBComboBox.ItemIndex" link="#LCL.StdCtrls.TCustomComboBox.ItemIndex"/>
      <element name="TCustomDBComboBox.DataField" link="#LCL.DbCtrls.TCustomDBComboBox.DataField">
        <short>The name (as a string) of the Feild whose data are to be linked to the ComboBox</short>
      </element>
      <element name="TCustomDBComboBox.DataSource">
        <short>The identity of the <var>DataSource</var> to which the ComboBox is attached</short>
      </element>
      <element name="TCustomDBComboBox.ReadOnly" link="#LCL.StdCtrls.TCustomComboBox.ReadOnly"/>
      <element name="TDBComboBox.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TDBComboBox.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TDBLookupComboBox">
        <short>
          <var>TDBLookupComboBox</var> - a dataware ComboBox for examining a lookup table from a database</short>
        <seealso>
          <link id="HowToUseDataAwareControls"/>
        </seealso>
      </element>
      <element name="TDBLookupComboBox.Loaded" link="#rtl.Classes.TComponent.Loaded"/>
      <element name="TDBLookupComboBox.UpdateData">
        <short>
          <var>UpdateData</var> - copies the local data from the corresponding entry from the lookup field</short>
        <seealso>
          <link id="#LCL.DbCtrls.TCustomDBComboBox.UpdateData">TCustomDBComboBox.UpdateData</link>
        </seealso>
      </element>
      <element name="TDBLookupComboBox.UpdateText">
        <short>
          <var>UpdateText</var> - if the link is active, copies local text from the lookup table, otherwise calls inherited <var>UpdateText</var>
        </short>
      </element>
      <element name="TDBLookupComboBox.Create">
        <short>
          <var>Create</var> - constructor fro TDBLookupComboBox: calls inherited <var>Create</var> then makes lookup list, forms links</short>
        <seealso>
          <link id="#LCL.StdCtrls.TCustomComboBox.Create">TCustomComboBox.Create</link>
        </seealso>
      </element>
      <element name="TDBLookupComboBox.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TDBLookupComboBox.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TDBLookupComboBox.ArrowKeysTraverseList" link="#LCL.StdCtrls.TCustomComboBox.ArrowKeysTraverseList"/>
      <element name="TDBLookupComboBox.AutoDropDown" link="#LCL.StdCtrls.TCustomComboBox.AutoDropDown"/>
      <element name="TDBLookupComboBox.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TDBLookupComboBox.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TDBLookupComboBox.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TDBLookupComboBox.DataField" link="#LCL.DbCtrls.TCustomDBComboBox.DataField"/>
      <element name="TDBLookupComboBox.DataSource" link="#LCL.DbCtrls.TCustomDBComboBox.DataSource"/>
      <element name="TDBLookupComboBox.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TDBLookupComboBox.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TDBLookupComboBox.DropDownCount" link="#LCL.StdCtrls.TCustomComboBox.DropDownCount"/>
      <element name="TDBLookupComboBox.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TDBLookupComboBox.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TDBLookupComboBox.KeyField">
        <short>
          <var>KeyField</var> the name of the field containing the key data</short>
      </element>
      <element name="TDBLookupComboBox.ListField">
        <short>
          <var>ListField</var> - the name of the field containing the list data</short>
      </element>
      <element name="TDBLookupComboBox.ListFieldIndex">
        <short>
          <var>ListFieldIndex</var> - the index value of the field containing the list</short>
      </element>
      <element name="TDBLookupComboBox.ListSource">
        <short>
          <var>ListSource</var> the data source that contains the list</short>
      </element>
      <element name="TDBLookupComboBox.OnChange" link="#LCL.StdCtrls.TCustomComboBox.OnChange"/>
      <element name="TDBLookupComboBox.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TDBLookupComboBox.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TDBLookupComboBox.OnCloseUp" link="#LCL.StdCtrls.TCustomComboBox.OnCloseUp"/>
      <element name="TDBLookupComboBox.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TDBLookupComboBox.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TDBLookupComboBox.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TDBLookupComboBox.OnDrawItem" link="#LCL.StdCtrls.TCustomComboBox.OnDrawItem"/>
      <element name="TDBLookupComboBox.OnDropDown" link="#LCL.StdCtrls.TCustomComboBox.OnDropDown"/>
      <element name="TDBLookupComboBox.OnEditingDone" link="#LCL.Controls.TControl.OnEditingDone"/>
      <element name="TDBLookupComboBox.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TDBLookupComboBox.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TDBLookupComboBox.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TDBLookupComboBox.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TDBLookupComboBox.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TDBLookupComboBox.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TDBLookupComboBox.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TDBLookupComboBox.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TDBLookupComboBox.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TDBLookupComboBox.OnSelect" link="#LCL.StdCtrls.TCustomComboBox.OnSelect"/>
      <element name="TDBLookupComboBox.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TDBLookupComboBox.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TDBLookupComboBox.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TDBLookupComboBox.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TDBLookupComboBox.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TDBLookupComboBox.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TDBLookupComboBox.ReadOnly" link="#LCL.StdCtrls.TCustomComboBox.ReadOnly"/>
      <element name="TDBLookupComboBox.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TDBLookupComboBox.Sorted" link="#LCL.StdCtrls.TCustomComboBox.Sorted"/>
      <element name="TDBLookupComboBox.Style" link="#LCL.StdCtrls.TCustomComboBox.Style"/>
      <element name="TDBLookupComboBox.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TDBLookupComboBox.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TDBLookupComboBox.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TDBMemo.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TDBMemo.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TDBMemo.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TDBMemo.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TDBMemo.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TDBMemo.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TDBMemo.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TDBMemo.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TDBMemo.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TDBMemo.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TDBGroupBox.CMGetDataLink">
        <short>
          <var>CMGetDataLink</var> - control message for finding the data link</short>
      </element>
      <element name="TDBGroupBox.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TDBImage.Change">
        <short>
          <var>Change</var> - if picture is changes, datalink needs to be informed</short>
      </element>
      <element name="TDBImage.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TDBImage.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TDBImage.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TDBImage.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TDBImage.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TDBImage.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TDBImage.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TDBImage.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TDBCalendar.UpdateDate">
        <short>
          <var>UpdateDate</var> - implements any pending changes in the date selected</short>
      </element>
      <element name="TDBCalendar.CMGetDataLink">
        <short>
          <var>CMGetDataLink</var> - control message method for getting the data link</short>
      </element>
      <element name="TDBCalendar.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TDBCalendar.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TDBCalendar.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TDBCalendar.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TDBCalendar.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TDBCalendar.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TDBCalendar.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TDBNavigator.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TDBNavigator.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
    <element name="TDBImage.WriteHeader"><short>Write a header in the image stream.</short><descr><p>The <var>WriteHeader</var> property controls whether or not a header will be written to the image stream. By default a header will be written. This helps to efficiently identify the image format when loading. The writing of a header in the image stream could be a problem if the database will be shared with external applications that do not expect a header in the image stream. In this case, set WriteHeader value to false in order to skip the header writing.
</p><p>The default value is true.</p><p>Note: The <var>WriteHeader</var> value is ignored if <var>OnDbImageWrite</var> event is implemented.
  </p>
        </descr>
      </element><element name="TDBImage.OnDBImageRead"><short>Event to read a custom header from image stream.</short><descr><p>By default, the <var>TDbImage</var> component expects a header at the start of the image stream. This helps to efficiently identify the image format contained in the data stream. On writing, the header is controlled by the <var>WriteHeader</var> property or the <var>OnDbImageWrite</var> event handler.</p><p>When loading image data which was created by external applications, the data stream may not have a header or the header is not a format identifier that the <var>TDbImage</var> component would recognize.</p><p>In this case, the <var>OnDbImageRead</var> event can be used to identify the image format in the data stream. In the <var>GraphExt</var> parameter it must return a format identifier corresponding to the registered image format. This format identifier could e.g. be read from the data stream provided in the <var>s</var> parameter. On return, the data stream should start with the raw image data.</p><p>If the <var>OnDbImageRead</var> handler was not implemented or if it returns an invalid format identifier, the <var>TDbImage</var> component will try to load the image by checking the data stream content. This means that it is not necessary to write an <var>OnDbImageRead</var> event handler for the most common image formats, For example: jpg, png, gif or bmp.</p><p>The <var>TDbImage</var> component will be able to identify the image format even if the data stream doesn't have a header for those TGraphic registered classes that implement the IsStreamFormatSupported method.</p>
        </descr>
      </element><element name="TDBImage.OnDBImageWrite"><short>Event to write a custom header into image stream.</short><descr><p>Use <var>OnDBImageWrite</var> to write a custom header in the image stream. This header could be "decoded" in the handler for the <var>OnDbImageRead</var> event when loading. The header will be followed by the image raw data.</p><p>By default, <var>TDbImage</var> will write an image header in order to efficiently identify the image format when loading. This behaviour is controlled by the <var>WriteHeader</var> property. If your database will be shared with external applications that do not support this, it is important to not write an image header. This could be achieved by writing an empty handler for <var>OnDbImageWrite</var>. Note that an empty handler has the same effect as setting <var>WriteHeader</var> to false.</p><p><var>OnDbImageWrite</var> has precedence over the <var>WriteHeader</var> property.</p>
        </descr>
      </element>
    </module>
    <!-- DbCtrls -->
  </package>
</fpdoc-descriptions>
