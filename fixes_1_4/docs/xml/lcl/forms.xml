<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
  ====================================================================
    Forms
  ====================================================================
-->
    <module name="Forms">
      <short>Contains definitions and descriptions for constructing the Forms which are the basis of the Lazarus Graphical User Interface</short>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="TypInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Math">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="AvgLvlTree">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Maps">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLStrConsts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLIntf">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="InterfaceBase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LResources">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GraphType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Graphics">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Menus">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LMessages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="CustomTimer">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="ActnList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="ClipBrd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="CustApp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="HelpIntfs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLClasses">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Controls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TProcedure">
        <short>The type of a procedure that takes no arguments.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TProcedureOfObject">
        <short>The type of a method that takes no arguments.</short>
        <descr/>
        <seealso/>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TPosition">
        <short>Represents the Position and Size of a Form on Screen.</short>
        <descr>
          <p>poDesigned - The Form appears exactly as it is positioned and sized in the Form Designer</p>
          <p>poDefault - The window manager decides how the form is to appear, in a default position and size</p>
          <p>poDefaultPosOnly - keeps the Designed size, but position determined by windowmanager</p>
          <p>poDefaultSizeOnly - keeps the Designed position, but size determined by windowmanager</p>
          <p>poScreenCenter - Centers the form on screen</p>
          <p>poDeskTopCenter - Centers the form on desktop</p>
          <p>poMainFormCenter - Centers the Form on the Main Form</p>
          <p>poOwnerFormCenter - Centers the Form on Owner form</p>
        </descr>
        <seealso/>
      </element>
      <element name="TPosition.poDesigned">
        <short>The Form appears exactly as it is positioned and sized in the Form Designer.
        </short>
      </element>
      <element name="TPosition.poDefault">
        <short>The window manager decides how the form is to appear, in a default position and size.
        </short>
      </element>
      <element name="TPosition.poDefaultPosOnly">
        <short>Keeps the designed form size, but position determined by windowmanager.
        </short>
      </element>
      <element name="TPosition.poDefaultSizeOnly">
        <short>Keeps the designed form position, but size determined by windowmanager.
        </short>
      </element>
      <element name="TPosition.poScreenCenter">
        <short>Centers the form on screen.
        </short>
      </element>
      <element name="TPosition.poDesktopCenter">
        <short>Centers the form on the desktop (not recommended, use poScreenCenter).
        </short>
      </element>
      <element name="TPosition.poMainFormCenter">
        <short>Centers the form on the Main Form.
        </short>
      </element>
      <element name="TPosition.poOwnerFormCenter">
        <short>Centers the form on its Owner form.
        </short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TWindowState">
        <short>Represents the actual State of the window on the screen.</short>
        <descr>
&#x9;&#x9;      <p>The actual meaning of each value depends on the platform:</p>
          <p>Windows and Mac OS X - These operating systems support all values.</p>
          <p>X11 - The window state is a hint sent to the Window Manager, so more primitive Window Managers might ignore this hints.</p>
          <p>Windows CE - In Windows CE platforms where Application.ApplicationType = atKeyPadDevice or atPDA (like in Windows Phone, PocketPC and Windows Mobile), wsMinimized and wsNormal are understood as wsMaximized, which is the normal state for windows in this platform. An exception are windows with BorderStyle=bsDialog or bsNone, which are allowed to have a custom position and size. For more information please read http://wiki.lazarus.freepascal.org/Windows_CE_Development_Notes#Positioning_and_size_of_Dialogs_and_Forms</p>
          <p>Android - In this platform windows are always fullscreen.</p>
          <p>The valid values for this enumerated type are:</p>
          <p>wsNormal - The window appears normal</p>
          <p>wsMinimized - The window is minimized and is not shown in the screen, but only in the taskbar</p>
          <p>wsMaximized - The window appears maximized</p>
          <p>wsFullScreen - The window appears in full screen mode, as much as allowed by the platform.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TWindowState.wsNormal">
        <short>Neither maximized nor minimized.</short>
      </element>
      <element name="TWindowState.wsMinimized">
        <short>The window is minimized and is not shown in the screen, but only in the taskbar.</short>
      </element>
      <element name="TWindowState.wsMaximized">
        <short>The window appears maximized. The exact behavior is up to the window manager,
        but usually the window appear occupying all of the work area of a monitor.</short>
      <notes><note>to the full monitor?</note>
        </notes>
      </element>
      <element name="TWindowState.wsFullScreen">
        <short>The window appears in full screen mode, as much as allowed by the platform.
        It will, for example, attempt to appear on the top of taskbars and other static platform
        user interface elements.</short>
      <notes><note>?</note>
        </notes>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TCloseAction">
        <short>What should happen when a form is closed.</short>
        <descr/>
        <seealso>
          <link id="TCustomForm.OnClose">TCustomForm.OnClose</link>
        </seealso>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCloseAction.caNone">
        <short>Do nothing.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCloseAction.caHide">
        <short>The form is hidden.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCloseAction.caFree">
        <short>The form is destroyed.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCloseAction.caMinimize">
        <short>The form is minimized.</short>
      </element>
<!-- object Visibility: default -->
      <element name="TCustomHintAction">
        <short>Action taken when a new value is assigned to <link id="#lcl.Forms.TApplication.Hint"/>,
          and no OnHint handler is available.
        </short>
        <descr>
        </descr>
        <seealso/>
      <notes><note>!?</note>
        </notes>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomHintAction.Hint" link="#LCL.ActnList.TCustomAction.Hint">
        <short>The new Hint text.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TScrollBarKind">
        <short>The orientation of a ScrollBar.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollBarKind.sbHorizontal">
        <short>Horizontal scrollbar.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollBarKind.sbVertical">
        <short>Vertical scrollbar.</short>
      </element>
      <!-- range type Visibility: default -->
      <element name="TScrollBarInc">
        <short>The range of scrollbar increments.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TScrollBarStyle">
        <short>Scrollbar style flags.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TScrollBarStyle.ssRegular">
        <short>Default</short>
      <notes><note>what's this?</note>
        </notes>
      </element>
      <element name="TScrollBarStyle.ssFlat">
        <short>Scrollbar appears flat</short>
      </element>
      <element name="TScrollBarStyle.ssHotTrack">
        <short>Scrollbar sends HotTrack messages</short>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- object Visibility: default -->
      <element name="EScrollBar">
        <short>Class for exception in <link id="TControlScrollBar"/>.
        </short>
        <descr/>
        <seealso/>
      </element>
<!-- object Visibility: default -->
      <element name="TControlScrollBar">
        <short>Type of a scrollbar in a <link id="#lcl.Forms.TScrollingWinControl"/>.
        </short>
        <descr>
          <p>
            Scrollable controls supply their own <b>integrated</b> scrollbars,
            one for horizontal and one for vertical scrolling.
            This class allows access to (one of) these integrated scrollbars.
          </p><p>
            A scrollable control has both a physical (visible) client size,
            and a logical (virtual) client size.
          </p><p>
            The <var>Range</var> property reflects the total virtual client size,
            in pixels.
          </p><p>
            The <var>Page</var> property corresponds to physical (visible) client size,
            in pixels, excluding the scrollbars.
            It also determines the size of the slider, relative to the total Range.
          </p><p>
            The <var>Position</var> property reflects the virtual origin of the
            visible client area, equivalent to the top coordinate of the slider.
            The Position can be changed by the user or by code.
          </p><p>
            Scrollbars usually appear only when Range is higher than Page,
            i.e. when not the entire content can be shown at the same time.
            See the ScrollBar property of the scrolling control for details.
          </p>
        </descr>
        <seealso>
          <link id="TScrollingWinControl"/>
          <link id="TScrollBox"/>
          <link id="TCustomForm"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FAutoRange">
        <short>The virtual scroll range (FRange - ClientSize), at least zero (never negative).
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FIncrement" link="TControlScrollBar.Increment"/>
      <element name="TControlScrollBar.FKind" link="TControlScrollBar.Kind"/>
      <element name="TControlScrollBar.FPage" link="TControlScrollBar.Page"/>
      <element name="TControlScrollBar.FPosition" link="TControlScrollBar.Position"/>
      <element name="TControlScrollBar.FRange" link="TControlScrollBar.Range"/>
      <element name="TControlScrollBar.FSmooth" link="TControlScrollBar.Smooth"/>
      <element name="TControlScrollBar.FTracking" link="TControlScrollBar.Tracking"/>
      <element name="TControlScrollBar.FVisible" link="TControlScrollBar.Visible"/>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FOldScrollInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FOldScrollInfoValid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TControlScrollBar.FControl">
        <short>The associated <link id="TScrollingWinControl"/>.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.ControlHandle">
        <short>The Handle of the associated <link id="TScrollingWinControl"/>.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.ControlHandle.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetAutoScroll">
        <short>The AutoScroll state of the associated <link id="TScrollingWinControl"/>.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.GetAutoScroll.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetIncrement" link="TControlScrollBar.Increment"/>
      <element name="TControlScrollBar.GetIncrement.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetPage" link="TControlScrollBar.Page"/>
      <element name="TControlScrollBar.GetPage.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetPosition" link="TControlScrollBar.Position"/>
      <element name="TControlScrollBar.GetPosition.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetRange" link="TControlScrollBar.Range"/>
      <element name="TControlScrollBar.GetRange.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetSize" link="TControlScrollBar.Size"/>
      <element name="TControlScrollBar.GetSize.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetSmooth" link="TControlScrollBar.Smooth"/>
      <element name="TControlScrollBar.GetSmooth.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.HandleAllocated">
        <short>True when the associated <link id="TScrollingWinControl"/> has a handle allocated.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.HandleAllocated.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.IsRangeStored" link="TControlScrollBar.Range"/>
      <element name="TControlScrollBar.IsRangeStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.AutoCalcRange">
        <short>Determines the Range, based on the physical and virtual size of the associated control.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.ControlUpdateScrollBars">
        <short>Notifies the associated Control of changes.
        </short>
        <descr/>
        <seealso>
          <link id="TScrollingWinControl.UpdateScrollBars"/>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.InternalSetRange">
        <short>Checks and propagates the new range to the Control.
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TControlScrollBar.ControlUpdateScrollBars"/>
          <link id="TScrollingWinControl.UpdateScrollBars"/>
        </seealso>
      </element>
      <element name="TControlScrollBar.InternalSetRange.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.ScrollHandler">
        <short>Handler for the ScrollBar (movement) messages.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.ScrollHandler.Message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetIncrement" link="TControlScrollBar.Increment"/>
      <element name="TControlScrollBar.SetIncrement.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetPage" link="TControlScrollBar.Page"/>
      <element name="TControlScrollBar.SetPage.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetPosition" link="TControlScrollBar.Position"/>
      <element name="TControlScrollBar.SetPosition.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetRange" link="TControlScrollBar.Range"/>
      <element name="TControlScrollBar.SetRange.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetSize" link="TControlScrollBar.Size"/>
      <element name="TControlScrollBar.SetSize.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetSmooth" link="TControlScrollBar.Smooth"/>
      <element name="TControlScrollBar.SetSmooth.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetTracking" link="TControlScrollBar.Tracking"/>
      <element name="TControlScrollBar.SetTracking.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetVisible" link="TControlScrollBar.Visible"/>
      <element name="TControlScrollBar.SetVisible.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.UpdateScrollBar">
        <short>updates the scroll bar (position, etc)</short>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>usage?</note>
        </notes>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.InvalidateScrollInfo">
        <short>render scroll information non-valid</short>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>usage?</note>
        </notes>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.GetHorzScrollBar">
        <short>Get the horizontal scrollbar of Control.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.GetHorzScrollBar.Result">
        <short>
        </short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.GetVertScrollBar">
        <short>Get the vertical scrollbar of Control.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.GetVertScrollBar.Result">
        <short>
        </short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.ScrollBarShouldBeVisible">
        <short>Determines whether a scrollbar is required.
        </short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.ScrollBarShouldBeVisible.Result">
        <short>True when Visible and Range higher than Page.</short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TControlScrollBar.Create">
        <short>Creates a scrollbar object for AControl.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.System.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TControlScrollBar.Create.AControl">
        <short>The windowed control in which the scroll bar is found.</short>
      </element>
      <element name="TControlScrollBar.Create.AKind">
        <short>The scrollbar orientation.
        </short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControlScrollBar.Assign">
        <short>If Source is a <var>TControlScrollBar</var>, copies properties to itself, else performs inherited <var>Assign</var>.
        </short>
        <descr>Assigns the contents of the source object to the current object;
          in particular finds the increment, position, range and whether smooth scrolling is to  be feature and whether the scroll bar is visible
        </descr>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Assign"/>
        </seealso>
      </element>
      <element name="TControlScrollBar.Assign.Source">
        <short>
        </short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.IsScrollBarVisible">
        <short>Determines the current widget state.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.IsScrollBarVisible.Result">
        <short>True if scrollbar is visible.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.ScrollPos">
        <short>The scroll Position, zero if not Visible.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.ScrollPos.Result">
        <short>The scroll Position, zero if not Visible.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.GetOtherScrollBar">
        <short>Get the ScrollBar of the opposite direction (horz/vert).
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.GetOtherScrollBar.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.ClientSize">
        <short>The currently remaining extent of the Parent Control, depending on ScrollBar visibility.
        </short>
        <descr>return for vertical scrollbar the clientwidth
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.ClientSize.Result">
        <short>for vertical scrollbar the clientwidth</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.ClientSizeWithBar">
        <short>The remaining extent of the Parent Control, when the ScrollBar is visible.
        </short>
        <descr>return for vertical scrollbar the clientwidth with the bar, even if Visible=false
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.ClientSizeWithBar.Result">
        <short>for vertical scrollbar the clientwidth with the bar, even if Visible=false
        </short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.ClientSizeWithoutBar">
        <short>The remaining extent of the Parent Control, when the ScrollBar is not visible.
        </short>
        <descr>return for vertical scrollbar the clientwidth without the bar, even if Visible=true
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.ClientSizeWithoutBar.Result">
        <short>for vertical scrollbar the clientwidth without the bar, even if Visible=true
        </short>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Increment">
        <short>The small Position increment, applicable to the scrollbar arrows.
        </short>
        <descr>The amount by which the Position moves if the triangle at either end of the bar is selected.
          <br/>Default is 8 (pixels).
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControlScrollBar.Kind">
        <short>The orientation: horizontal or vertical.</short>
        <descr>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Page">
        <short>The slider size,
          Position increment applicable to the scrollbar area beneath the slider.
        </short>
        <descr>The amount by which the scroll indicator moves if the cursor selects the scroll bar above, below or on either side of the scroll indicator.
          <br/>Default is 80 (pixels).
         </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Position">
        <short>Position of the slider, 0..Range-Page.
        </short>
        <descr>The Position reflects the top coordinate of the slider,
          which is Range-Page when the slider is at the bottom of the bar.
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Smooth">
        <short>Enables smooth scrolling, with automatic adjustment of Increment and Page.
        </short>
        <descr>Smooth scrolling uses an Increment of 10%
          and a Page size of 90% of the visible client area
        </descr>
        <seealso>
          <link id="TControlScrollBar.Increment"/>
          <link id="TControlScrollBar.Page"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TControlScrollBar.SmoothIsStored" link="TControlScrollBar.Smooth"/>
      <element name="TControlScrollBar.SmoothIsStored.Result">
        <short/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Range">
        <short>The virtual size of the Parent Control.</short>
        <descr>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControlScrollBar.Size">
        <short>The adjustable size of the scroll bar.</short>
        <descr>The length of the bar is the Width (or Height) of the Parent Control,
          the Size is the other (free) coordinate.
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Tracking">
        <short>Gives feedback while the slider is dragged.
        </short>
        <descr>When it takes an significant amount of time,
          to repaint the parent control at a new position,
          Tracking should be False to prevent flicker;
          then the control is updated only when the slider is released.
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Visible">
        <short>Definitely hides the scrollbar when False (default True).
        </short>
        <descr>
          <p>
            The scrollbar widget is visible only if (Visible=True) <b>and</b> (Range&gt;Page).
          </p><p>
            Set Visible to False to disallow the user to scroll the content,
            while the content still can be scrolled by code.
          </p><p>
            Use IsScrollBarVisible to get the current visible state of the widget.
          </p>
        </descr>
        <seealso>
          <link id="TControlScrollBar.IsScrollBarVisible"/>
        </seealso>
      </element>
<!-- object Visibility: default -->
      <element name="TScrollingWinControl">
        <short>Class of a windowed control with incorporated scroll bars.
        </short>
        <descr>
          This class introduces a logical (virtual) client area,
          part of which is visible in the physical (visible) client area.
          <link id="TControlScrollBar">ScrollBars</link> allow the user to scroll through the logical client area.
        </descr>
        <errors/>
        <seealso>
          <link id="TControlScrollBar"/>
          <link id="TForm"/>
          <link id="TScrollBox"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScrollingWinControl.FHorzScrollBar" link="TScrollingWinControl.HorzScrollBar"/>
      <element name="TScrollingWinControl.FVertScrollBar" link="TScrollingWinControl.VertScrollBar"/>
      <element name="TScrollingWinControl.FAutoScroll" link="TScrollingWinControl.AutoScroll"/>
      <!-- variable Visibility: private -->
      <element name="TScrollingWinControl.FIsUpdating">
        <short>Prevents recursive updates, True while an update is already in progress.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScrollingWinControl.SetHorzScrollBar" link="TScrollingWinControl.HorzScrollBar"/>
      <element name="TScrollingWinControl.SetHorzScrollBar.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScrollingWinControl.SetVertScrollBar" link="TScrollingWinControl.VertScrollBar"/>
      <element name="TScrollingWinControl.SetVertScrollBar.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.AlignControls" link="#LCL.Controls.TWinControl.AlignControls">
        <short>Also calculates sizes for the scrollbars if required.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.AlignControls">TWinControl.AlignControls</link>
        </seealso>
      </element>
      <element name="TScrollingWinControl.AlignControls.AControl">
        <short/>
      </element>
      <element name="TScrollingWinControl.AlignControls.ARect">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.CreateWnd" link="#lcl.Controls.TWinControl.CreateWnd"/>
      <!-- function Visibility: protected -->
      <element name="TScrollingWinControl.GetClientScrollOffset">
        <short>The virtual origin of the physical client area.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.GetClientScrollOffset">TControl.GetClientScrollOffset</link>
        </seealso>
      </element>
      <element name="TScrollingWinControl.GetClientScrollOffset.Result">
        <short>The ScrollBar Positions, or (0,0) if no scrollbars in use.
        </short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScrollingWinControl.GetLogicalClientRect" link="#LCL.Controls.TControl.GetLogicalClientRect">
        <short>Returns the full virtual ClientRect.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.GetLogicalClientRect">TControl.GetLogicalClientRect</link>
        </seealso>
      </element>
      <element name="TScrollingWinControl.GetLogicalClientRect.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.DoOnResize" link="#LCL.Controls.TControl.DoOnResize">
        <short>Also updates scrollbars if needed.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.DoOnResize">TControl.DoOnResize</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.WMHScroll">
        <short>Delegates scroll messages to the horizontal ScrollBar.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScrollingWinControl.WMHScroll.Message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.WMVScroll">
        <short>Delegates scroll messages to the vertical ScrollBar.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScrollingWinControl.WMVScroll.Message">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScrollingWinControl.ComputeScrollbars">
        <short>Updates Page, AutoRange, IsScrollBarVisible, returns True on changes.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScrollingWinControl.ComputeScrollbars.Result">
        <short>True when something changed.</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.ScrollbarHandler">
        <short>Tells the widget to scroll the client area, in the given direction.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScrollingWinControl.ScrollbarHandler.ScrollKind">
        <short>The direction to scroll.</short>
      </element>
      <element name="TScrollingWinControl.ScrollbarHandler.OldPosition">
        <short>The previous scroll Position, needed to calculate the relative scroll amount.</short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScrollingWinControl.SetAutoScroll" link="TScrollingWinControl.AutoScroll"/>
      <element name="TScrollingWinControl.SetAutoScroll.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.Loaded">
        <short>Also initializes the scroll bars.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.Loaded">TWinControl.Loaded</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.SetAutoSize" link="#lcl.Controls.TControl.AutoSize"/>
      <element name="TScrollingWinControl.SetAutoSize.Value">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TScrollingWinControl.Create" link="#rtl.Classes.TComponent.Create"/>
      <element name="TScrollingWinControl.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TScrollingWinControl.Destroy"/>
      <!-- procedure Visibility: public -->
      <element name="TScrollingWinControl.UpdateScrollbars">
        <short>Initializes or updates the ScrollBars.
        </short>
        <descr>Ignores recursive calls.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScrollingWinControl.GetControlClassDefaultSize" link="#LCL.Controls.TControl.GetControlClassDefaultSize"/>
      <element name="TScrollingWinControl.GetControlClassDefaultSize.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.ScrollBy">
        <short>Tells the widget to scroll the client area relative.
        </short>
        <descr>The still visible part doesn't deserve a repaint (optimization).
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TScrollingWinControl.ScrollBy.DeltaX">
        <short/>
      </element>
      <element name="TScrollingWinControl.ScrollBy.DeltaY">
        <short/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollingWinControl.AutoScroll">
        <short>Allows to show ScrollBars only if needed (when True).
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollingWinControl.HorzScrollBar">
        <short>The horizontal scroll bar (LCL control).</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollingWinControl.VertScrollBar">
        <short>The vertical scroll bar (LCL control).</short>
        <descr/>
        <seealso/>
      </element>
<!-- object Visibility: default -->
      <element name="TScrollBox">
        <short>A windowed control with scroll bars.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScrollBox.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <!-- constructor Visibility: public -->
      <element name="TScrollBox.Create" link="#rtl.Classes.TComponent.Create"/>
      <element name="TScrollBox.Create.AOwner">
        <short/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TScrollBox.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TScrollBox.AutoScroll" link="#LCL.Forms.TScrollingWinControl.AutoScroll"/>
      <element name="TScrollBox.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TScrollBox.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TScrollBox.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TScrollBox.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle"/>
      <element name="TScrollBox.ChildSizing" link="#LCL.Controls.TWinControl.ChildSizing"/>
      <element name="TScrollBox.ClientHeight" link="#LCL.Controls.TControl.ClientHeight"/>
      <element name="TScrollBox.ClientWidth" link="#LCL.Controls.TControl.ClientWidth"/>
      <element name="TScrollBox.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TScrollBox.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TScrollBox.DockSite" link="#LCL.Controls.TWinControl.DockSite"/>
      <element name="TScrollBox.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TScrollBox.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TScrollBox.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TScrollBox.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TScrollBox.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TScrollBox.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TScrollBox.OnConstrainedResize" link="#LCL.Controls.TControl.OnConstrainedResize"/>
      <element name="TScrollBox.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TScrollBox.OnDockDrop" link="#LCL.Controls.TWinControl.OnDockDrop"/>
      <element name="TScrollBox.OnDockOver" link="#LCL.Controls.TWinControl.OnDockOver"/>
      <element name="TScrollBox.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TScrollBox.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TScrollBox.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TScrollBox.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TScrollBox.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TScrollBox.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TScrollBox.OnGetSiteInfo" link="#LCL.Controls.TWinControl.OnGetSiteInfo"/>
      <element name="TScrollBox.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TScrollBox.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TScrollBox.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TScrollBox.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TScrollBox.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TScrollBox.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TScrollBox.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TScrollBox.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TScrollBox.OnPaint" link="#LCL.Controls.TCustomControl.OnPaint"/>
      <element name="TScrollBox.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TScrollBox.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TScrollBox.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TScrollBox.OnUnDock" link="#LCL.Controls.TWinControl.OnUnDock"/>
      <element name="TScrollBox.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TScrollBox.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TScrollBox.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TScrollBox.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TScrollBox.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TScrollBox.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TScrollBox.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TScrollBox.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TScrollBox.Visible" link="#LCL.Controls.TControl.Visible"/>
<!-- object Visibility: default -->
      <element name="TCustomFrame">
        <short>The base type for <var>TFrame</var>.
        </short>
        <descr>
          Frames can be designed like Forms
          and used like custom controls,
          without much coding or installation in the IDE.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.AddActionList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomFrame.AddActionList.ActionList">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.RemoveActionList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomFrame.RemoveActionList.ActionList">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.ReadDesignLeft">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomFrame.ReadDesignLeft.Reader">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.ReadDesignTop">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomFrame.ReadDesignTop.Reader">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.WriteDesignLeft">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomFrame.WriteDesignLeft.Writer">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.WriteDesignTop">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomFrame.WriteDesignTop.Writer">
        <short/>
      </element>
      <element name="TCustomFrame.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <!-- procedure Visibility: protected -->
      <element name="TCustomFrame.GetChildren">
        <short>Invokes Proc for all Controls and also for all Components with no Parent.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.GetChildren">TComponent.GetChildren</link>
          <link id="#LCL.Controls.TWinControl.GetChildren">TWinControl.GetChildren</link>
        </seealso>
      </element>
      <element name="TCustomFrame.GetChildren.Proc">
        <short>The callback method.</short>
      </element>
      <element name="TCustomFrame.GetChildren.Root">
        <short>Components are enumerated only if Root=Self.</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomFrame.Notification">
        <short>Also handles add/remove of ActionLists.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Notification">TComponent.Notification</link>
          <link id="#LCL.Controls.TControl.Notification">TControl.Notification</link>
        </seealso>
      </element>
      <element name="TCustomFrame.Notification.AComponent">
        <short/>
      </element>
      <element name="TCustomFrame.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomFrame.SetParent">
        <short>Also updates the ActionLists.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.SetParent">TControl.SetParent</link>
        </seealso>
      </element>
      <element name="TCustomFrame.SetParent.AParent">
        <short/>
      </element>
      <element name="TCustomFrame.DefineProperties" link="#rtl.Classes.TComponent.DefineProperties"/>
      <element name="TCustomFrame.DefineProperties.Filer">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomFrame.CalculatePreferredSize" link="#LCL.Controls.TControl.CalculatePreferredSize"/>
      <element name="TCustomFrame.CalculatePreferredSize.PreferredWidth">
        <short/>
      </element>
      <element name="TCustomFrame.CalculatePreferredSize.PreferredHeight">
        <short/>
      </element>
      <element name="TCustomFrame.CalculatePreferredSize.WithThemeSpace">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomFrame.Create" link="#rtl.Classes.TComponent.Create"/>
      <element name="TCustomFrame.Create.AOwner">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomFrame.GetControlClassDefaultSize" link="#LCL.Controls.TControl.GetControlClassDefaultSize"/>
      <element name="TCustomFrame.GetControlClassDefaultSize.Result">
        <short/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TCustomFrameClass" link="TCustomFrame"/>
<!-- object Visibility: default -->
      <element name="TFrame">
        <short>
          Frames can be designed like Forms
          and used like custom controls,
          without much coding or installation in the IDE.
        </short>
        <descr>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFrame.FLCLVersion" link="TFrame.LCLVersion"/>
      <element name="TFrame.LCLVersionIsStored" link="TFrame.LCLVersion"/>
      <element name="TFrame.LCLVersionIsStored.Result">
        <short/>
      </element>
      <element name="TFrame.Create" link="#rtl.Classes.TComponent.Create"/>
      <element name="TFrame.Create.TheOwner">
        <short/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TFrame.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TFrame.AutoScroll" link="#LCL.Forms.TScrollingWinControl.AutoScroll"/>
      <element name="TFrame.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <!-- property Visibility: published -->
      <element name="TFrame.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TFrame.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TFrame.ChildSizing" link="#LCL.Controls.TWinControl.ChildSizing"/>
      <element name="TFrame.ClientHeight" link="#LCL.Controls.TControl.ClientHeight"/>
      <element name="TFrame.ClientWidth" link="#LCL.Controls.TControl.ClientWidth"/>
      <element name="TFrame.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TFrame.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TFrame.DockSite" link="#LCL.Controls.TWinControl.DockSite"/>
      <element name="TFrame.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TFrame.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TFrame.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TFrame.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TFrame.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TFrame.LCLVersion" link="#LCL.LCLVersion.lcl_version"/>
      <element name="TFrame.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TFrame.OnConstrainedResize" link="#LCL.Controls.TControl.OnConstrainedResize"/>
      <element name="TFrame.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TFrame.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TFrame.OnDockDrop" link="#LCL.Controls.TWinControl.OnDockDrop"/>
      <element name="TFrame.OnDockOver" link="#LCL.Controls.TWinControl.OnDockOver"/>
      <element name="TFrame.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TFrame.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TFrame.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TFrame.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TFrame.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TFrame.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TFrame.OnGetSiteInfo" link="#LCL.Controls.TWinControl.OnGetSiteInfo"/>
      <element name="TFrame.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TFrame.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TFrame.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TFrame.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TFrame.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TFrame.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TFrame.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TFrame.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TFrame.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TFrame.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TFrame.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TFrame.OnUnDock" link="#LCL.Controls.TWinControl.OnUnDock"/>
      <element name="TFrame.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TFrame.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TFrame.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TFrame.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TFrame.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TFrame.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TFrame.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TFrame.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TFrame.Visible" link="#LCL.Controls.TControl.Visible"/>
<!-- enumeration type Visibility: default -->
      <element name="TBorderIcon">
        <short>Visual elements in window title bars - depending on window manager support.
        </short>
        <descr>biSystemMenu - The form has a System menu (Maybe not all windowmanager supports this)<br/>
          biMinimize - The form has an minimize button<br/>
          biMaximize - The form has a maximize button<br/>
          biHelp - When you click this button a Question Cursor appears and the help routines are called if you click on an control
        </descr>
        <seealso/>
      </element>
      <element name="TBorderIcon.biSystemMenu">
        <short>Window has a system menu.</short>
      </element>
      <element name="TBorderIcon.biMinimize">
        <short>Window has an Minimize button.</short>
      </element>
      <element name="TBorderIcon.biMaximize">
        <short>Window has an Maximize button.</short>
      </element>
      <element name="TBorderIcon.biHelp">
        <short>Window has an Help button.</short>
      </element>
      <!-- set type Visibility: default -->
      <element name="TBorderIcons" link="TBorderIcon"/>
<!-- enumeration type Visibility: default -->
      <element name="TDefaultMonitor">
        <short>The preferred monitor for showing a form.
        </short>
        <descr>
          <p>When a form is not assigned to a specific monitor,
            assume the following display context:
          </p>
          <ul>
            <li>
              dmDesktop - on the full desktop
            </li><li>
              dmPrimary - on the primary monitor
            </li><li>
              dmMainForm - on the same monitor as the main form. If there is no main form then use dmPrimary behavior.
            </li><li>
              dmActiveForm - on the same monitor as the currently active form. If there is no active form use dmMainForm behavior.
            </li>
          </ul>
        </descr>
      </element>
      <element name="TDefaultMonitor.dmDesktop">
        <short>Place the form on the full desktop.</short>
      </element>
      <element name="TDefaultMonitor.dmPrimary">
        <short>Place the form on the primary monitor.</short>
      </element>
      <element name="TDefaultMonitor.dmMainForm">
        <short>Place the form on the same monitor as the main form.
          If there is no such form then use the primary monitor.
        </short>
      </element>
      <element name="TDefaultMonitor.dmActiveForm">
        <short>Place the form on the same monitor as the currently active form.
          If there is no such form then use the primary monitor.
        </short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TFormStateType">
        <short>Form state flags.</short>
        <descr>
          <p>The states are:</p>
          <pre>fsCreating,  // initializing (form streaming)
    fsVisible,   // form should be shown
    fsShowing,
    fsModal,     // form is modal
    fsCreatedMDIChild,
    fsBorderStyleChanged,
    fsFormStyleChanged,
    fsFirstShow,  // form is shown for the first time
    fsDisableAutoSize  </pre>
        </descr>
        <seealso/>
      </element>
      <element name="TFormStateType.fsCreating">
        <short>initializing (form streaming)</short>
      </element>
      <element name="TFormStateType.fsVisible">
        <short>form should be shown</short>
      </element>
      <element name="TFormStateType.fsShowing">
        <short>form handling WM_SHOWWINDOW message</short>
      </element>
      <element name="TFormStateType.fsModal">
        <short>form is modal</short>
      </element>
      <element name="TFormStateType.fsCreatedMDIChild">
        <short>not yet implemented</short>
      </element>
      <element name="TFormStateType.fsBorderStyleChanged">
        <short>border style changed before window handle creation</short>
      </element>
      <element name="TFormStateType.fsFormStyleChanged">
        <short>form style is changed before window handle creation</short>
      </element>
      <element name="TFormStateType.fsFirstShow">
        <short>form is shown for the first time</short>
      </element>
      <element name="TFormStateType.fsDisableAutoSize">
        <short>disable autosize</short>
      </element>
      <!-- set type Visibility: default -->
      <element name="TFormState" link="TFormStateType">
        <short>The set of form state flags.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- range type Visibility: default -->
      <element name="TModalResult">
        <short>Dummy type for the values that can be returned as a modal result.</short>
        <descr>
          Even though the type is defined as an integer,
          only the defined constant values should be used (mrOK...).
        </descr>
        <seealso>
          <link id="controls.mrNone"/>
          <link id="controls.mrOK"/>
          <link id="controls.mrCancel"/>
          <link id="controls.mrAbort"/>
          <link id="controls.mrRetry"/>
          <link id="controls.mrIgnore"/>
          <link id="controls.mrYes"/>
          <link id="controls.mrNo"/>
          <link id="controls.mrAll"/>
        </seealso>
      </element>
      <!-- pointer type Visibility: default -->
      <element name="PModalResult" link="TModalResult"/>
<!-- enumeration type Visibility: default -->
      <element name="TFormHandlerType">
        <short>TForm Notification handler types.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TFormHandlerType.fhtFirstShow">
        <short>Notified on first form Show.</short>
      </element>
      <element name="TFormHandlerType.fhtClose">
        <short>Notified on form Close.</short>
      </element>
      <element name="TFormHandlerType.fhtCreate">
        <short>Notified after form Create.</short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TShowInTaskbar">
        <short>How a form is represented in the TaskBar.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TShowInTaskbar.stDefault">
        <short>Uses the default rules from the platform for showing the form in the TaskBar.</short>
      <notes><note>platform?</note>
        </notes>
      </element>
      <element name="TShowInTaskbar.stAlways">
        <short>Always show the form in the TaskBar.</short>
      </element>
      <element name="TShowInTaskbar.stNever">
        <short>Never show the form in the TaskBar.</short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TPopupMode">
        <short>Defines where popup menus shall appear.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TPopupMode.pmNone">
        <short>default behavior - popup to mainform/taskbar window</short>
      </element>
      <element name="TPopupMode.pmAuto">
        <short>popup to active form, and same as pmNone if no active form</short>
      </element>
      <element name="TPopupMode.pmExplicit">
        <short>popup to PopupParent, and same as pmNone if not exists</short>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TCloseEvent">
        <short>Type of an form OnClose handler.</short>
        <descr>
          <p>
            Closing a form can have several meanings:
          </p>
          <ul>
            <li>
              caNone: do nothing (don't close)
            </li><li>
              caHide: hide the form (default for modal forms)
            </li><li>
              caFree: destroy the form
            </li><li>
              caMinimize: minimize the form (MDI child default)
            </li>
          </ul>
          <p>
            The handler can set CloseAction to the desired action.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCloseEvent.Sender">
        <short>The form that received an Close request.</short>
      </element>
      <element name="TCloseEvent.CloseAction">
        <short>Set this to caNone, to prevent the form from closing.</short>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TCloseQueryEvent">
        <short>Type of an form OnCloseQuery handler.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCloseQueryEvent.Sender">
        <short>The form that received an Close request.</short>
      </element>
      <element name="TCloseQueryEvent.CanClose">
        <short>Set to False to deny closing</short>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- function type Visibility: default -->
      <element name="THelpEvent">
        <short>Type of an OnHelp event handler.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THelpEvent.Result">
        <short>False means: use the default procedure</short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="THelpEvent.Command">
        <short/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="THelpEvent.Data">
        <short/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="THelpEvent.CallHelp">
        <short>False means: do not show any help.</short>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TDropFilesEvent">
        <short>Type of an OnDropFiles event handler.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TDropFilesEvent.Sender">
        <short>The control that received the dropped files</short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TDropFilesEvent.FileNames">
        <short>The list of the dropped files</short>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TShortCutEvent">
        <short>Type of an OnShortcut event handler.</short>
        <descr>
          <p>
            A shortcut handler is invoked when a key is pressed,
            before any other processing.
          </p><p>
            It can interpret the key as an shortcut and act accordingly.
            In this case Handled should be set to True,
            to prevent further processing of the key.
          </p><p>
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TShortCutEvent.Msg">
        <short>The key event message.</short>
      </element>
      <element name="TShortCutEvent.Handled">
        <short>Set Handled to True to prevent further processing of the key.</short>
      </element>
<!-- object Visibility: default -->
      <element name="TCustomForm">
        <short>The base type for <var>TForm</var>.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FActionLists">
        <short>
          <var>FActionLists</var> - local variable holding lists of actions asociated with the Form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomForm.FActive" link="TCustomForm.Active"/>
      <element name="TCustomForm.FActiveControl" link="TCustomForm.ActiveControl"/>
      <element name="TCustomForm.FActiveDefaultControl" link="TCustomForm.ActiveDefaultControl"/>
      <element name="TCustomForm.FAllowDropFiles" link="TCustomForm.AllowDropFiles"/>
      <element name="TCustomForm.FAlphaBlend" link="TCustomForm.AlphaBlend"/>
      <element name="TCustomForm.FAlphaBlendValue" link="TCustomForm.AlphaBlendValue"/>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FBigIconHandle">
        <short>The Handle of the big form icon</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TCustomForm.FBorderIcons" link="TCustomForm.BorderIcons"/>
      <element name="TCustomForm.FCancelControl" link="TCustomForm.CancelControl"/>
      <element name="TCustomForm.FDefaultControl" link="TCustomForm.DefaultControl"/>
      <element name="TCustomForm.FDefaultMonitor" link="TCustomForm.DefaultMonitor"/>
      <element name="TCustomForm.FDesigner" link="TCustomForm.Designer"/>
      <element name="TCustomForm.FFormBorderStyle" link="TCustomForm.BorderStyle"/>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FFormHandlers">
        <short>Lists of installed Notification handlers</short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TCustomForm.FFormState" link="TCustomForm.FormState"/>
      <element name="TCustomForm.FFormStyle" link="TCustomForm.FormStyle"/>
      <element name="TCustomForm.FFormUpdateCount">
        <short/>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FHelpFile" link="TCustomForm.HelpFile"/>
      <element name="TCustomForm.FIcon" link="TCustomForm.Icon"/>
      <element name="TCustomForm.FKeyPreview" link="TCustomForm.KeyPreview"/>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FLastFocusedControl">
        <short>Used to detect Focus changes (Enter/Exit events)</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TCustomForm.FMenu" link="TCustomForm.Menu"/>
      <element name="TCustomForm.FModalResult" link="TCustomForm.ModalResult"/>
      <element name="TCustomForm.FOldBorderStyle">
        <short/>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FOnActivate" link="TCustomForm.OnActivate"/>
      <element name="TCustomForm.FOnClose" link="TCustomForm.OnClose"/>
      <element name="TCustomForm.FOnCloseQuery" link="TCustomForm.OnCloseQuery"/>
      <element name="TCustomForm.FOnCreate" link="TCustomForm.OnCreate"/>
      <element name="TCustomForm.FOnDeactivate" link="TCustomForm.OnDeactivate"/>
      <element name="TCustomForm.FOnDestroy" link="TCustomForm.OnDestroy"/>
      <element name="TCustomForm.FOnDropFiles" link="TCustomForm.OnDropFiles"/>
      <element name="TCustomForm.FOnHelp" link="TCustomForm.OnHelp"/>
      <element name="TCustomForm.FOnHide" link="TCustomForm.OnHide"/>
      <element name="TCustomForm.FOnShortcut" link="TCustomForm.OnShortcut"/>
      <element name="TCustomForm.FOnShow" link="TCustomForm.OnShow"/>
      <element name="TCustomForm.FOnWindowStateChange" link="TCustomForm.OnWindowStateChange"/>
      <element name="TCustomForm.FPixelsPerInch" link="TCustomForm.PixelsPerInch"/>
      <element name="TCustomForm.FPopupMode" link="TCustomForm.PopupMode"/>
      <element name="TCustomForm.FPopupParent" link="TCustomForm.PopupParent"/>
      <element name="TCustomForm.FPosition" link="TCustomForm.Position"/>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FRealizedShowInTaskBar">
        <short>The taskbar representation of the form, as set in the widgetset.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TCustomForm.ShowInTaskBar"/>
          <link id="TCustomForm.GetEffectiveShowInTaskBar"/>
          <link id="TCustomForm.UpdateShowInTaskBar"/>
        </seealso>
      </element>
      <element name="TCustomForm.FRestoredHeight" link="TCustomForm.RestoredHeight"/>
      <element name="TCustomForm.FRestoredLeft" link="TCustomForm.RestoredLeft"/>
      <element name="TCustomForm.FRestoredTop" link="TCustomForm.RestoredTop"/>
      <element name="TCustomForm.FRestoredWidth" link="TCustomForm.RestoredWidth"/>
      <element name="TCustomForm.FShowInTaskbar" link="TCustomForm.ShowInTaskBar"/>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FSmallIconHandle">
        <short>The Handle of the small form icon</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TCustomForm.FWindowState" link="TCustomForm.WindowState"/>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetClientHandle" link="TCustomForm.ClientHandle"/>
      <element name="TCustomForm.GetClientHandle.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetEffectiveShowInTaskBar">
        <short>Tries to resolve ShowInTaskBar=stDefault according to Application settings.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.GetEffectiveShowInTaskBar.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetMonitor" link="TCustomForm.Monitor"/>
      <element name="TCustomForm.GetMonitor.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetPixelsPerInch" link="TCustomForm.PixelsPerInch"/>
      <element name="TCustomForm.GetPixelsPerInch.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetRestoredLeft" link="TCustomForm.RestoredLeft"/>
      <element name="TCustomForm.GetRestoredLeft.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetRestoredTop" link="TCustomForm.RestoredTop"/>
      <element name="TCustomForm.GetRestoredTop.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsAutoScrollStored" link="TCustomForm.AutoScroll"/>
      <element name="TCustomForm.IsAutoScrollStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsForm">
        <short>Whether Form properties should be stored in the stream.</short>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TCustomForm.IsForm.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsIconStored" link="TCustomForm.Icon"/>
      <element name="TCustomForm.IsIconStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CloseModal">
        <short>Closes a modal form</short>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.FreeIconHandles">
        <short>Destroys the form icons</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.IconChanged">
        <short>Loads the new form icons, notifies the widgetset and all forms.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.IconChanged.Sender">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsKeyPreviewStored" link="TCustomForm.KeyPreview"/>
      <element name="TCustomForm.IsKeyPreviewStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetActive" link="TCustomForm.Active"/>
      <element name="TCustomForm.SetActive.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetActiveControl" link="TCustomForm.ActiveControl"/>
      <element name="TCustomForm.SetActiveControl.AWinControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetActiveDefaultControl" link="TCustomForm.ActiveDefaultControl"/>
      <element name="TCustomForm.SetActiveDefaultControl.AControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetAllowDropFiles" link="TCustomForm.AllowDropFiles"/>
      <element name="TCustomForm.SetAllowDropFiles.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetAlphaBlend" link="TCustomForm.AlphaBlend"/>
      <element name="TCustomForm.SetAlphaBlend.AValue">
      <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetAlphaBlendValue" link="TCustomForm.AlphaBlendValue"/>
      <element name="TCustomForm.SetAlphaBlendValue.AValue">
      <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetBorderIcons" link="TCustomForm.BorderIcons"/>
      <element name="TCustomForm.SetBorderIcons.NewIcons">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetFormBorderStyle" link="TCustomForm.BorderStyle"/>
      <element name="TCustomForm.SetFormBorderStyle.NewStyle">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetCancelControl" link="TCustomForm.CancelControl"/>
      <element name="TCustomForm.SetCancelControl.NewControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetDefaultControl" link="TCustomForm.DefaultControl"/>
      <element name="TCustomForm.SetDefaultControl.NewControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetDesigner" link="TCustomForm.Designer"/>
      <element name="TCustomForm.SetDesigner.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetFormStyle" link="TCustomForm.FormStyle"/>
      <element name="TCustomForm.SetFormStyle.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetIcon" link="TCustomForm.Icon"/>
      <element name="TCustomForm.SetIcon.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetMenu" link="TCustomForm.Menu"/>
      <element name="TCustomForm.SetMenu.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetPopupMode" link="TCustomForm.PopupMode"/>
      <element name="TCustomForm.SetPopupMode.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetPopupParent" link="TCustomForm.PopupParent"/>
      <element name="TCustomForm.SetPopupParent.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetModalResult" link="TCustomForm.ModalResult"/>
      <element name="TCustomForm.SetModalResult.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetPosition" link="TCustomForm.Position"/>
      <element name="TCustomForm.SetPosition.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetShowInTaskbar" link="TCustomForm.ShowInTaskBar"/>
      <element name="TCustomForm.SetShowInTaskbar.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetLastFocusedControl">
        <short>Remembers the last focused control.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.SetLastFocusedControl.AControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetWindowFocus">
        <short>Called when the Focus changed</short>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetWindowState" link="TCustomForm.WindowState"/>
      <element name="TCustomForm.SetWindowState.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMActivate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.WMActivate.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMCloseQuery">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>what does Result=0 mean?</note>
        </notes>
      </element>
      <element name="TCustomForm.WMCloseQuery.message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMDeactivate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.WMDeactivate.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMHelp">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.WMHelp.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMShowWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WMShowWindow.message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WMSize.message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMWindowPosChanged">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.WMWindowPosChanged.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMBiDiModeChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.CMBiDiModeChanged.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMParentBiDiModeChanged">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMParentBiDiModeChanged.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMAppShowBtnGlyphChanged">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMAppShowBtnGlyphChanged.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMAppShowMenuGlyphChanged">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMAppShowMenuGlyphChanged.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMIconChanged">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMIconChanged.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMRelease">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMRelease.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMActivate">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMActivate.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMDeactivate">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMDeactivate.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.AddHandler">
        <short>Adds an form notification handler.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TFormHandlerType"/>
        </seealso>
      </element>
      <element name="TCustomForm.AddHandler.HandlerType">
        <short/>
      </element>
      <element name="TCustomForm.AddHandler.Handler">
        <short/>
      </element>
      <element name="TCustomForm.AddHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.RemoveHandler">
        <short>Removes an form notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.RemoveHandler.HandlerType">
        <short/>
      </element>
      <element name="TCustomForm.RemoveHandler.Handler">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.FindDefaultForActiveControl">
        <short>Returns the first control in Tab order.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.FindDefaultForActiveControl.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.UpdateMenu">
        <short>Called when the main menu changed.</short>
        <descr>Don't show a main menu for dialog forms,
          i.e. when BorderStyle=bsDialog (delphi compatible).
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.UpdateShowInTaskBar">
        <short>Notifies the widgetset of the change.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CMShowingChanged">
        <short>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.CMShowingChanged.Message">
        <short/>
      </element>
      <element name="TCustomForm.DoShowWindow">
        <short>When no control is Active, sets the Focus to the first control in TabOrder.
        </short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Activate">
        <short>Notifies the OnActivate handler.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.ActiveChanged">
        <short> Does nothing.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.AdjustClientRect">
        <short>Excludes borders from the given rectangle.
        </short>
        <seealso>
          <link id="#LCL.Controls.TWinControl.AdjustClientRect">TWinControl.AdjustClientRect</link>
        </seealso>
      </element>
      <element name="TCustomForm.AdjustClientRect.Rect">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.BeginFormUpdate">
        <short>Locks form updates (AutoSize), until EndFormUpdate.
        </short>
        <descr>Nested calls are allowed (pairs of Begin/EndFormUpdate).
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.ColorIsStored" link="#LCL.Controls.TControl.Color"/>
      <element name="TCustomForm.ColorIsStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CreateParams" link="#LCL.Controls.TWinControl.CreateParams"/>
      <element name="TCustomForm.CreateParams.Params">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CreateWnd" link="#lcl.Controls.TWinControl.CreateWnd">
        <short>Creates the widget, updates the widget-dependent properties.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
          <link id="#LCL.Forms.TScrollingWinControl.CreateWnd">TScrollingWinControl.CreateWnd</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Deactivate">
        <short>Called when the form looses the focus. Notifies the OnDeactivate handler.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoClose">
        <short>Notifies the form close handlers.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TFormHandlerType.fhtClose"/>
          <link id="TCustomForm.OnClose"/>
        </seealso>
      </element>
      <element name="TCustomForm.DoClose.CloseAction">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoCreate">
        <short>Notifies the form create handlers.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TFormHandlerType.fhtCreate"/>
          <link id="TCustomForm.OnCreate"/>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoDestroy">
        <short>Notifies the <link id="TCustomForm.OnDestroy">OnDestroy</link> handler.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TCustomForm.OnDestroy"/>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoHide">
        <short>Notifies the <link id="TCustomForm.OnHide">OnHide</link> handler.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoShow">
        <short>Notifies the <link id="TCustomForm.OnShow">OnShow</link> handler.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.EndFormUpdate">
        <short>Unlocks form updates, in sync with BeginFormUpdate.
        </short>
        <descr>When the update counter reaches zero,
          FormEndUpdated is invoked to realize the pending changes.
        </descr>
        <errors/>
        <seealso>
          <link id="TCustomForm.BeginFormUpdate"/>
          <link id="TCustomForm.FormEndUpdated"/>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.GetChildren">
        <short>Invokes Proc for all Controls and also for all Components with no Parent.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.GetChildren">TComponent.GetChildren</link>
          <link id="#LCL.Controls.TWinControl.GetChildren">TWinControl.GetChildren</link>
        </seealso>
      </element>
      <element name="TCustomForm.GetChildren.Proc">
        <short>The callback method.</short>
      </element>
      <element name="TCustomForm.GetChildren.Root">
        <short>Components are enumerated only if Root=Self.</short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.HandleCreateException">
        <short>Placeholder for exception handlers in derived classes.</short>
        <descr>By default the Application exception handler is invoked.
        </descr>
        <seealso>
          <link id="TApplication.HandleException"/>
          <link id="TApplication.CaptureExceptions"/>
        </seealso>
      </element>
      <element name="TCustomForm.HandleCreateException.Result">
        <short>True when the exception was handled.</short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.HandleDestroyException">
        <short>Placeholder for exception handlers in derived classes.</short>
        <descr>By default the Application exception handler is invoked.
        </descr>
        <seealso>
          <link id="TApplication.HandleException"/>
          <link id="TApplication.CaptureExceptions"/>
        </seealso>
      </element>
      <element name="TCustomForm.HandleDestroyException.Result">
        <short>True when the exception was handled.</short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.HandleShowHideException">
        <short>Placeholder for exception handlers in derived classes.</short>
        <descr>By default the Application exception handler is invoked.
        </descr>
        <seealso>
          <link id="TApplication.HandleException"/>
          <link id="TApplication.CaptureExceptions"/>
        </seealso>
      </element>
      <element name="TCustomForm.HandleShowHideException.Result">
        <short>True when the exception was handled.</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.InitializeWnd" link="#LCL.Controls.TControl.InitializeWnd">
        <short>Initializes the widget, also for AlphaBlend and AllowDropFiles.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Loaded">
        <short>Also renews ActiveControl and Visible.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Loaded">TComponent.Loaded</link>
          <link id="#LCL.Forms.TScrollingWinControl.Loaded">TScrollingWinControl.Loaded</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.ChildHandlesCreated">
        <short>Called after all child control handles are created.
          When this is a top level form (Parent=Nil) also invokes ParentFormHandleInitialized.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.ChildHandlesCreated">TWinControl.ChildHandlesCreated</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Notification" link="#rtl.Classes.TComponent.Notification"/>
      <element name="TCustomForm.Notification.AComponent">
        <short/>
      </element>
      <element name="TCustomForm.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.PaintWindow" link="#LCL.Controls.TCustomControl.PaintWindow">
        <short>Calls the user Paint handler.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomForm.PaintWindow.dc">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.RequestAlign" link="#LCL.Controls.TControl.RequestAlign">
        <short>Calls the user Alignment handler (AlignControls).
          Here: Nop for a top-level form.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CalculatePreferredSize" link="#LCL.Controls.TControl.CalculatePreferredSize">
        <short>Here: clip width and height of a top-level form to the monitor WorkArea.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CalculatePreferredSize.PreferredWidth">
        <short/>
      </element>
      <element name="TCustomForm.CalculatePreferredSize.PreferredHeight">
        <short/>
      </element>
      <element name="TCustomForm.CalculatePreferredSize.WithThemeSpace">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.SetZOrder">
        <short>Here: Moves a top-level form in front or back of all forms.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.SetZOrder.Topmost">
        <short>True for BringToFront.</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.SetParent" link="#LCL.Controls.TControl.Parent"/>
      <element name="TCustomForm.SetParent.NewParent">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.MoveToDefaultPosition" link="TCustomForm.Position">
        <short>Moves the form to the initial Position.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.UpdateShowing">
        <short>Called when the widget's visibility (Showing) changed.
          Updates (and realizes?) all properties affecting the visual representation.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.UpdateShowing">TWinControl.UpdateShowing</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.SetVisible" link="#LCL.Controls.TControl.SetVisible"/>
      <element name="TCustomForm.SetVisible.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.AllAutoSized" link="#LCL.Controls.TWinControl.AllAutoSized">
        <short>If the the form is about to show, calculate its metrics.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoFirstShow">
        <short>Notifies the FirstShow handlers.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TFormHandlerType.fhtFirstShow"/>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.UpdateWindowState">
        <short>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.VisibleChanging">
        <short>Notifies all <var>VisibleChanging</var> handlers.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.VisibleChanged">
        <short>Notifies all <var>VisibleChanged</var> handlers.
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TScreenNotification.snFormVisibleChanged"/>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.WndProc" link="#LCL.Controls.TControl.WndProc"/>
      <element name="TCustomForm.WndProc.TheMessage">
        <short>
          Handled messages include:
          Activate, SetFocus. KillFocus; Exit, Enter; Window Position Changing; DrawItem
        </short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.VisibleIsStored" link="TCustomForm.Visible"/>
      <element name="TCustomForm.VisibleIsStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoSendBoundsToInterface" link="#LCL.Controls.TWinControl.DoSendBoundsToInterface"/>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoAutoSize" link="#LCL.Controls.TControl.DoAutoSize"/>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.SetAutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TCustomForm.SetAutoSize.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.SetAutoScroll" link="TCustomForm.AutoScroll"/>
      <element name="TCustomForm.SetAutoScroll.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoAddActionList">
        <short>Adds another ActionList.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TCustomForm.RemoveActionList"/>
        </seealso>
      </element>
      <element name="TCustomForm.DoAddActionList.List">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoRemoveActionList">
        <short>Removes an ActionList.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
          <link id="TCustomForm.AddActionList"/>
        </seealso>
      </element>
      <element name="TCustomForm.DoRemoveActionList.List">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.BeginAutoDrag">
        <short>Checked BeginDrag.</short>
        <descr>allow form dragging only if it is docked into a site without DockManager
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      <notes><note>why?</note>
        </notes>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoDock" link="#LCL.Controls.TControl.DoDock"/>
      <element name="TCustomForm.DoDock.NewDockSite">
        <short/>
      </element>
      <element name="TCustomForm.DoDock.ARect">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.GetFloating" link="#LCL.Controls.TControl.GetFloating"/>
      <element name="TCustomForm.GetFloating.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.GetDefaultDockCaption">
        <short>Here: returns the Caption.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.GetDefaultDockCaption.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CMActionExecute">
        <short>Handler for ActionExecute messages.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomForm.CMActionExecute.Message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CMActionUpdate">
        <short>Handler for ActionUpdate messages.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.CMActionUpdate.Message">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.DoExecuteAction">
        <short>Asks all applicable components to execute an action.
        </short>
        <descr>
          <p>First the ActiveControl and the Form itself are asked to execute the action.
            Then all child components are tried.
            The search stops as soon as the action is handled.
          </p>
        </descr>
      </element>
      <element name="TCustomForm.DoExecuteAction.Result">
        <short>True when the action was handled.
        </short>
      </element>
      <element name="TCustomForm.DoExecuteAction.ExeAction">
        <short>Action to execute.</short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.DoUpdateAction">
        <short>Tries all applicable components to update an action.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Forms.TCustomForm.DoExecuteAction">DoExecuteAction</link>
        </seealso>
      </element>
      <element name="TCustomForm.DoUpdateAction.Result">
        <short>True when the action was updated.
        </short>
      </element>
      <element name="TCustomForm.DoUpdateAction.TheAction">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.UpdateActions">
        <short>Asks all components to initiate their actions
        </short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomForm.Create" link="#rtl.Classes.TComponent.Create"/>
      <element name="TCustomForm.Create.AOwner">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomForm.CreateNew">
        <short>Creates a form without a resource.
        </short>
        <descr>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.CreateNew.AOwner">
        <short/>
      </element>
      <element name="TCustomForm.CreateNew.Num">
        <short>Here: ignored</short>
      <notes><note>purpose?</note>
        </notes>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomForm.Destroy"/>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.AfterConstruction"/>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.BeforeDestruction"/>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.GetControlClassDefaultSize" link="#LCL.Controls.TControl.GetControlClassDefaultSize"/>
      <element name="TCustomForm.GetControlClassDefaultSize.Result">
        <short/>
      </element>
      <element name="TCustomForm.BigIconHandle">
        <short>The Handle of the big form icon.</short>
      </element>
      <element name="TCustomForm.BigIconHandle.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Close">
        <short>Close the form.</short>
        <descr>
          <p>
            Close does not necessarily destroy the form.
            Modal forms only are hidden.
          </p><p>
            When the MainForm is closed, the application terminates.
          </p><p>
            An OnCloseQuery handler can deny to close the form.
          </p>
        </descr>
        <errors/>
        <seealso>
          <link id="TCustomForm.CloseQuery"/>
        </seealso>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.CloseQuery">
        <short>Asks the OnCloseQuery handler whether the form can close.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TCustomForm.OnCloseQuery"/>
        </seealso>
      </element>
      <element name="TCustomForm.CloseQuery.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.DefocusControl">
        <short>Updates ActiveControl if it is to be defocused.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.DefocusControl.Control">
        <short>The control that looses the focus.</short>
      </element>
      <element name="TCustomForm.DefocusControl.Removing">
        <short>True when the control is removed.</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DestroyWnd" link="#LCL.Controls.TWinControl.DestroyWnd"/>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.EnsureVisible">
        <short>Ensure that this form is fully visible,
          optionally brings it in front of all forms.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.EnsureVisible.AMoveToTop">
        <short>Bring the form to front if True.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.FocusControl">
        <short>Focus the control. If needed bring form to front.
        </short>
        <descr/>
        <errors>If the control or one of its parents is not visible or disabled
          an exception will be raised (in SetFocus).
        </errors>
        <seealso/>
      <notes><note>when? always?</note>
        </notes>
      </element>
      <element name="TCustomForm.FocusControl.WinControl">
        <short>The control receiving the focus.</short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.FormIsUpdating" link="#LCL.Controls.TControl.FormIsUpdating">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.FormIsUpdating.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.GetFormImage">
        <short>Makes a Bitmap image from the Form.
        </short>
      </element>
      <element name="TCustomForm.GetFormImage.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.GetRolesForControl">
        <short>The role(s) of the control in a modal form (default or cancel button).
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.GetRolesForControl.Result">
        <short/>
      </element>
      <element name="TCustomForm.GetRolesForControl.AControl">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Hide" link="#LCL.Controls.TControl.Hide"/>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.IntfDropFiles">
        <short>Invokes the <link id="TCustomForm.OnDropFiles">OnDropFiles</link> handler of the form.
          This function is called by the interface.
        </short>
        <descr>The drop files event will be invoked when the user drops
          one or multiple dragged files on one of application's forms.
          First this event should be fired for target form (or main form if drop target is unknown),
          then for the application.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.IntfDropFiles.FileNames">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.IntfHelp">
        <short>Show help for control or menu item.
          This function is called by the interface.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.Controls.TControl.ShowHelp"/>
        </seealso>
       </element>
      <element name="TCustomForm.IntfHelp.AComponent">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.IsShortcut">
        <short>Asks all applicable components to interpret an keystroke as an shortcut.
          True, the specified Key and Message are active as a shortcut
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.IsShortcut.Result">
        <short>True when the specified Key was handled as a shortcut.
        </short>
      </element>
      <element name="TCustomForm.IsShortcut.Message">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.MakeFullyVisible">
        <short>Extends or shrinks the form to a monitor.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.MakeFullyVisible.AMonitor">
        <short>The monitor to use, Nil means the designed monitor.</short>
      </element>
      <element name="TCustomForm.MakeFullyVisible.UseWorkarea">
        <short>If True then extend to the WorkArea of the monitor,
          else clip the form to the monitor bounds.
        </short>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.AutoSizeDelayedHandle">
        <short>Returns true if AutoSize should be skipped / delayed because of a missing handle.
        </short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      <notes><note>propagate back into TControl?</note>
        </notes>
      </element>
      <element name="TCustomForm.AutoSizeDelayedHandle.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.GetPreferredSize" link="#LCL.Controls.TControl.GetPreferredSize"/>
      <element name="TCustomForm.GetPreferredSize.PreferredWidth">
        <short/>
      </element>
      <element name="TCustomForm.GetPreferredSize.PreferredHeight">
        <short/>
      </element>
      <element name="TCustomForm.GetPreferredSize.Raw">
        <short/>
      </element>
      <element name="TCustomForm.GetPreferredSize.WithThemeSpace">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Release">
        <short>Marks the form for destruction.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.CanFocus">
        <short>True when the form can receive the focus.
        </short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CanFocus.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.SetFocus" link="#LCL.Controls.TWinControl.SetFocus"/>
      <!-- function Visibility: public -->
      <element name="TCustomForm.SetFocusedControl">
        <short>Handles focus switch to a control (enter/exit messages).
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.SetFocusedControl.Result">
        <short>False when no switching allowed</short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TCustomForm.SetFocusedControl.Control">
        <short>The control that received the focus</short>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.SetRestoredBounds">
        <short>Sets the bounds defining the restored control.</short>
        <descr>Temporarily goes to normal (restored) window state, if required.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.SetRestoredBounds.ALeft">
        <short/>
      </element>
      <element name="TCustomForm.SetRestoredBounds.ATop">
        <short/>
      </element>
      <element name="TCustomForm.SetRestoredBounds.AWidth">
        <short/>
      </element>
      <element name="TCustomForm.SetRestoredBounds.AHeight">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Show" link="#LCL.Controls.TControl.Show"/>
      <!-- function Visibility: public -->
      <element name="TCustomForm.ShowModal">
        <short>Show this form as a modal Dialog.
        </short>
        <descr>The call doesn't return until the form is closed.
          The application switches to modal state until then.
        </descr>
        <errors>EInvalidOperation if the form cannot be shown modally.
        </errors>
        <seealso/>
      </element>
      <element name="TCustomForm.ShowModal.Result">
        <short>The modal result of the dialog.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.ShowOnTop">
        <short>Shows this form in front of all other forms.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.SmallIconHandle">
        <short>Returns (eventually creates) the Handle of the small Form or Application Icon.
        </short>
        <seealso>
          <link id="TCustomForm.Icon"/>
        </seealso>
      </element>
      <element name="TCustomForm.SmallIconHandle.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.WantChildKey">
        <short>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TCustomForm.WantChildKey.Result">
        <short>Here: always False.</short>
      </element>
      <element name="TCustomForm.WantChildKey.Child">
        <short/>
      </element>
      <element name="TCustomForm.WantChildKey.Message">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.RemoveAllHandlersOfObject" link="#LCL.LCLClasses.TLCLComponent.RemoveAllHandlersOfObject"/>
      <element name="TCustomForm.RemoveAllHandlersOfObject.AnObject">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.AddHandlerFirstShow">
        <short>Adds an handler for the first Show of the form.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.AddHandlerFirstShow.OnFirstShowHandler">
        <short/>
      </element>
      <element name="TCustomForm.AddHandlerFirstShow.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.RemoveHandlerFirstShow">
        <short>Removes an handler for the first Show of the form.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.RemoveHandlerFirstShow.OnFirstShowHandler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.AddHandlerClose">
        <short>Adds an handler for form Close.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.AddHandlerClose.OnCloseHandler">
        <short/>
      </element>
      <element name="TCustomForm.AddHandlerClose.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.RemoveHandlerClose">
        <short>Removes an handler for form Close.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.RemoveHandlerClose.OnCloseHandler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.AddHandlerCreate">
        <short>Adds an handler for form Create.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.AddHandlerCreate.OnCreateHandler">
        <short/>
      </element>
      <element name="TCustomForm.AddHandlerCreate.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.RemoveHandlerCreate">
        <short>Removes an handler for form Create.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.RemoveHandlerCreate.OnCreateHandler">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.ActiveMDIChild">
        <short>Returns the currently active MDI child form.
        </short>
        <descr>Valid result is returned only when FormStyle = fsMDIForm or fsMDIChild,
          otherwise Result is nil.
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.ActiveMDIChild.Result">
        <short>Nil if the form is neither an MDI host nor child.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.GetMDIChildren" link="TCustomForm.MDIChildren"/>
      <element name="TCustomForm.GetMDIChildren.Result">
        <short>Nil if caller isn't an mdi type or handle isn't allocated.</short>
      </element>
      <element name="TCustomForm.GetMDIChildren.AIndex">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.MDIChildCount" link="TCustomForm.MDIChildren"/>
      <element name="TCustomForm.MDIChildCount.Result">
        <short>-1 if caller isn't an MDI form or handle is not allocated.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Dock" link="#LCL.Controls.TControl.Dock"/>
      <element name="TCustomForm.Dock.NewDockSite">
        <short/>
      </element>
      <element name="TCustomForm.Dock.ARect">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.UpdateDockCaption" link="#LCL.Controls.TWinControl.UpdateDockCaption"/>
      <element name="TCustomForm.UpdateDockCaption.Exclude">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Active">
        <short>Is true when the form has the focus.</short>
        <descr>Use active to check if the form has the focus</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.ActiveControl">
        <short>Specifies the active control on the form.</short>
        <descr>Use this to get or set the active control on this form.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.ActiveDefaultControl">
        <short>Specifies the Default control on the Form.</short>
        <descr>The Default control reacts on the Enter key pressed.
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.AllowDropFiles">
        <short>Specifies whether files can be dropped onto this form.</short>
        <descr>Allows this form to receive OnDropFiles event, when files are dropped on form via drag-and-drop operation.
        </descr>
        <seealso>
          <link id="TCustomForm.OnDropFiles"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.AlphaBlend">
        <short>Allows for a translucent form.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TCustomForm.AlphaBlendValue"/>
        </seealso>
      <notes><note>somewhat transparent?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.AlphaBlendValue">
        <short>How translucent the form is (0=transparent, 255=opaque).</short>
        <descr>
        </descr>
        <seealso>
          <link id="TCustomForm.AlphaBlend"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.AutoScroll">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.BorderIcons">
        <short>Specifies which icons appear in the title bar of the form.
        </short>
        <descr>The icons can represent a system menu,
          minimize/restore/maximize and close buttons,
          and an <var>What's this</var> button.
        </descr>
        <seealso>
          <link id="TBorderIcon"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.BorderStyle">
        <short>The border style affects the title bar, border and resize behaviour of the form.
        </short>
        <descr>
          <p>Use borderstyle to get or set the appearance of the form's border. </p>
          <p>By default it is a sizeable window, but it could, for example, be a dialog form or a tool window, or could be non-sizeable</p>
          <p>This property is slightly different (has a different base type) from the <var>TCustomControl.BorderStyle</var>
            When the form is put into another control the window borders depend on the widgetset.
            There are no borders under gtk.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.Controls.TFormBorderStyle"/>
          <link id="#lcl.Controls.TBorderStyle"/>
          <link id="#lcl.Controls.TCustomControl.BorderStyle"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.CancelControl">
        <short>The control associated with the Cancel action.</short>
        <descr>
          <p>Determines the control associated with the Cancel action
            (exit from the modal form without changing anything).</p>
          <p>This is usually a button with the caption 'Cancel',
            but might be an 'Exit' button or anything else the application programmer decides.</p>
          <p>This control is selected either by explicitly clicking with the mouse,
            or by hitting the 'Esc' key.
          </p>
        </descr>
        <seealso>
          <link id="TCustomForm.DefaultControl"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Caption" link="#LCL.Controls.TControl.Caption">
        <short>The text appearing in the title bar.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomForm.ClientHandle">
        <short>The Handle of the MDIForm client (container for mdi children).
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Color" link="#LCL.Controls.TControl.Color">
        <descr>The form's background color.
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.DefaultControl">
        <short>The control associated with the default action for this form.</short>
        <descr>
&#x9;&#x9;      This is typically a button such as 'Accept'
          which is highlighted in some way on-screen to indicate
          that this is the default action,
          and is selected either by hitting 'Return' or 'Enter'
          or by selecting that control with the mouse.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.DefaultMonitor">
        <short>The monitor type on which the form shall appear.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Designer">
        <short>The designer object when the form is in design state.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.FormState">
        <short>Various state flags.
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TFormState"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.FormStyle">
        <short>Determines the <link id="#lcl.Controls.TFormStyle">Style</link> of the form (MDI, splash...).
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="#lcl.Controls.TFormStyle"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.HelpFile">
        <short>The name of the help file for this form.</short>
        <descr>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Icon">
        <short>The Icon associated with this Form (in minimized state).
        </short>
        <descr/>
        <seealso>
          <link id="TCustomForm.BigIconHandle"/>
          <link id="TCustomForm.SmallIconHandle"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.KeyPreview">
        <short>Allows the form to intercept keystrokes in child controls.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.MDIChildren">
        <short>Indexed access to MDI child forms, when this is an MDI form.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TCustomForm.FormStyle"/>
        </seealso>
      </element>
      <element name="TCustomForm.MDIChildren.I">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Menu">
        <short>The main menu for this form.</short>
        <descr>Drop a TMainMenu on the form to store it here
          and to show it on the form.<br/>
        </descr>
        <seealso>
          <link id="#lcl.Menus.TMainMenu"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.ModalResult">
        <short>Specifies the return value of a modal form (dialog).</short>
        <descr>
        </descr>
        <seealso>
          <link id="TModalResult"/>
        </seealso>
      </element>
      <element name="TCustomForm.Monitor">
        <short>The Monitor on which the form is shown.
        </short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnActivate">
        <short>Handler called when the form receives focus.
        </short>
        <descr>
          <p>
            This handler is called when the form receives focus for the first time
            at application start up and then subsequently each time focus is changed
            from another window of the same application to this window.
          </p><p>
            For focus changes between different applications
            the Application.OnActivate handler is called instead.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.Forms.TApplication.OnActivate">TApplication.OnActivate</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnClose">
        <short>Handler called when the form is closed.
          It determines what happens to the form (destroy, hide...).
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnCloseQuery">
        <short>Handler called before the form is closed.
          It can reject an close request.
        </short>
        <descr>An OnCloseQuery handler can check for unsaved information,
          ask the user whether it's okay to save or discard changes,
          or simply reject the close request.
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnCreate">
        <short>Handler called when the form has been created.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnDeactivate">
        <short>Handler called when the form is deactivated (lost focus).
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.OnDeactivate"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnDestroy">
        <short>Handler called when the form is destroyed.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnDropFiles">
        <short>Handler called when files have been dropped.
        </short>
        <descr>
          You enable this feature by setting AllowDropFiles property.
        </descr>
        <seealso>
          <link id="TCustomForm.AllowDropFiles"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnHelp">
        <short>Handler called when Help is requested.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnHide">
        <short>Handler called when the form is being hidden.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnShortcut">
        <short>Handler called when a key is pressed, before further handling of the key.
        </short>
        <descr>The handler can interpret the key as an shortcut
          and act accordingly.
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnShow">
        <short>Handler called when the form becomes visible.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnWindowStateChange">
        <short>Handler called when the form is minimized, maximized or restored.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomForm.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <!-- property Visibility: public -->
      <element name="TCustomForm.PixelsPerInch">
        <short>The logical scaling of the form
        </short>
        <descr>
        </descr>
        <seealso/>
      <notes><note>font? used where?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.PopupMode">
        <short>Defines where popup menus are shown</short>
        <descr>
        </descr>
        <seealso>
          <link id="TCustomForm.PopupParent"/>
          <link id="TPopupMode"/>
        </seealso>
      <notes><note>???</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.PopupParent">
        <short/>
        <descr>
        </descr>
        <seealso>
          <link id="TCustomForm.PopupMode"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Position">
        <short>The initial placement of the form.
        </short>
        <descr>
&#x9;&#x9;      By default it is in the position that it was placed in the Form Designer
        </descr>
        <seealso>
          <link id="TPosition"/>
          <link id="TCustomForm.DefaultMonitor"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.RestoredHeight">
        <short>The height of the form when it is restored (ie changes from minimised or maximised).</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.RestoredLeft">
        <short>The position of the left edge of the form when it is restored (ie changes from minimised or maximised).</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.RestoredTop">
        <short>The position of the top edge of the form when it is restored (ie changes from minimised or maximised).</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.RestoredWidth">
        <short>The width of the form when it is restored (ie changes from minimised or maximised).</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.ShowInTaskBar">
        <short>How the form is represented in the system Task Bar.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Visible" link="#LCL.Controls.TControl.Visible"/>
      <!-- property Visibility: public -->
      <element name="TCustomForm.WindowState">
        <short>Whether the form is currently minimized, maximized or normal (restored).
        </short>
        <descr>
      &#x9;&#x9;Default is 'normal' (ie not minimized nor maximized)
        </descr>
        <seealso>
          <link id="TWindowState"/>
        </seealso>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TCustomFormClass" link="TCustomForm"/>
<!-- object Visibility: default -->
      <element name="TForm">
      </element>
      <!-- variable Visibility: private -->
      <element name="TForm.FLCLVersion" link="TForm.LCLVersion"/>
      <!-- function Visibility: private -->
      <element name="TForm.LCLVersionIsStored" link="TForm.LCLVersion"/>
      <element name="TForm.LCLVersionIsStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TForm.CreateWnd" link="#lcl.Controls.TWinControl.CreateWnd"/>
      <element name="TForm.Loaded" link="#LCL.Forms.TCustomForm.Loaded"/>
      <element name="TForm.Create" link="#rtl.Classes.TComponent.Create"/>
      <element name="TForm.Create.TheOwner">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TForm.Cascade">
        <short>Arranges MDI child forms so they overlap.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TForm.Next">
        <short>Activates the next child MDI form (fsMDIChild) in the form sequence.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TForm.Previous">
        <short>Activates the previous MDI child form in the form sequence.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TForm.Tile">
        <short>Arranges MDI child forms side by side.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.Action" link="#LCL.Controls.TControl.Action"/>
      <element name="TForm.ActiveControl" link="TCustomForm.ActiveControl"/>
      <element name="TForm.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TForm.AllowDropFiles" link="TCustomForm.AllowDropFiles"/>
      <element name="TForm.AlphaBlend" link="TCustomForm.AlphaBlend"/>
      <element name="TForm.AlphaBlendValue" link="TCustomForm.AlphaBlendValue"/>
      <element name="TForm.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TForm.AutoScroll" link="TScrollingWinControl.AutoScroll"/>
      <element name="TForm.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TForm.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TForm.BorderIcons" link="TCustomForm.BorderIcons"/>
      <element name="TForm.BorderStyle" link="TCustomForm.BorderStyle"/>
      <element name="TForm.BorderWidth" link="#LCL.Controls.TWinControl.BorderWidth"/>
      <element name="TForm.Caption" link="#LCL.Controls.TControl.Caption"/>
      <element name="TForm.ChildSizing" link="#LCL.Controls.TWinControl.ChildSizing"/>
      <element name="TForm.ClientHandle" link="TCustomForm.ClientHandle"/>
      <element name="TForm.ClientHeight" link="#LCL.Controls.TControl.ClientHeight"/>
      <element name="TForm.ClientWidth" link="#LCL.Controls.TControl.ClientWidth"/>
      <element name="TForm.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TForm.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TForm.DefaultMonitor" link="TCustomForm.DefaultMonitor"/>
      <element name="TForm.DockManager" link="#LCL.Controls.TWinControl.DockManager"/>
      <element name="TForm.DockSite" link="#LCL.Controls.TWinControl.DockSite"/>
      <element name="TForm.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TForm.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TForm.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TForm.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TForm.FormStyle" link="TCustomForm.FormStyle"/>
      <element name="TForm.HelpFile" link="TCustomForm.HelpFile"/>
      <element name="TForm.Icon" link="TCustomForm.Icon"/>
      <element name="TForm.KeyPreview" link="TCustomForm.KeyPreview"/>
      <element name="TForm.LCLVersion">
        <short>The version of the LCL as string. Used to distinguish form streams of different versions.</short>
      </element>
      <element name="TForm.Menu" link="TCustomForm.Menu"/>
      <element name="TForm.OnActivate" link="TCustomForm.OnActivate"/>
      <element name="TForm.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TForm.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TForm.OnClose" link="TCustomForm.OnClose"/>
      <element name="TForm.OnCloseQuery" link="TCustomForm.OnCloseQuery"/>
      <element name="TForm.OnContextPopup" link="TCustomForm.OnContextPopup"/>
      <element name="TForm.OnCreate" link="TCustomForm.OnCreate"/>
      <element name="TForm.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TForm.OnDeactivate" link="TCustomForm.OnDeactivate"/>
      <element name="TForm.OnDestroy" link="TCustomForm.OnDestroy"/>
      <element name="TForm.OnDockDrop" link="#LCL.Controls.TWinControl.OnDockDrop"/>
      <element name="TForm.OnDockOver" link="#LCL.Controls.TWinControl.OnDockOver"/>
      <element name="TForm.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TForm.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TForm.OnDropFiles" link="TCustomForm.OnDropFiles"/>
      <element name="TForm.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TForm.OnGetSiteInfo" link="#LCL.Controls.TWinControl.OnGetSiteInfo"/>
      <element name="TForm.OnHelp" link="TCustomForm.OnHelp"/>
      <element name="TForm.OnHide" link="TCustomForm.OnHide"/>
      <element name="TForm.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TForm.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TForm.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TForm.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TForm.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TForm.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TForm.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TForm.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TForm.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TForm.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TForm.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TForm.OnPaint" link="#LCL.Controls.TCustomControl.OnPaint"/>
      <element name="TForm.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TForm.OnShortCut" link="TCustomForm.OnShortcut"/>
      <element name="TForm.OnShow" link="TCustomForm.OnShow"/>
      <element name="TForm.OnShowHint" link="#LCL.Controls.TControl.OnShowHint"/>
      <element name="TForm.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TForm.OnUnDock" link="#LCL.Controls.TWinControl.OnUnDock"/>
      <element name="TForm.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TForm.OnWindowStateChange" link="TCustomForm.OnWindowStateChange"/>
      <element name="TForm.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TForm.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TForm.PixelsPerInch" link="TCustomForm.PixelsPerInch"/>
      <element name="TForm.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TForm.PopupMode" link="TCustomForm.PopupMode"/>
      <element name="TForm.PopupParent" link="TCustomForm.PopupParent"/>
      <element name="TForm.Position" link="TCustomForm.Position"/>
      <element name="TForm.SessionProperties" link="#LCL.Controls.TControl.SessionProperties"/>
      <element name="TForm.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TForm.ShowInTaskBar" link="TCustomForm.ShowInTaskBar"/>
      <element name="TForm.UseDockManager" link="#LCL.Controls.TWinControl.UseDockManager"/>
      <element name="TForm.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TForm.WindowState" link="TCustomForm.WindowState"/>
      <!-- "class of" type Visibility: default -->
      <element name="TFormClass" link="TForm">
        <short>Class of <var>TForm</var>
        </short>
        <descr/>
        <seealso/>
      </element>
<!-- object Visibility: default -->
      <element name="TCustomDockForm">
        <short>A floating DockSite, usable to make TControls float.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDockForm.DoAddDockClient" link="#LCL.Controls.TWinControl.DoAddDockClient">
        <short>Makes the client occupy the entire client area (alClient).</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomDockForm.DoAddDockClient.Client">
        <short/>
      </element>
      <element name="TCustomDockForm.DoAddDockClient.ARect">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDockForm.DoRemoveDockClient" link="#LCL.Controls.TWinControl.DoRemoveDockClient">
        <short>Closes (releases) the form after the last client has been undocked.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomDockForm.DoRemoveDockClient.Client">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDockForm.GetSiteInfo" link="#LCL.Controls.TWinControl.GetSiteInfo">
        <short>Disallows docking of an second client.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomDockForm.GetSiteInfo.Client">
        <short/>
      </element>
      <element name="TCustomDockForm.GetSiteInfo.InfluenceRect">
        <short/>
      </element>
      <element name="TCustomDockForm.GetSiteInfo.MousePos">
        <short/>
      </element>
      <element name="TCustomDockForm.GetSiteInfo.CanDock">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDockForm.Loaded" link="#LCL.Forms.TCustomForm.Loaded">
        <short>Tries to make all child controls dockclients.
          This is of little use in practice, a floating hostdocksite should have no child controls.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomDockForm.Create" link="#rtl.Classes.TComponent.Create"/>
      <element name="TCustomDockForm.Create.TheOwner">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDockForm.AutoScroll" link="#LCL.Forms.TScrollingWinControl.AutoScroll"/>
      <element name="TCustomDockForm.BorderStyle" link="#LCL.Forms.TCustomForm.BorderStyle"/>
      <element name="TCustomDockForm.FormStyle" link="#LCL.Forms.TCustomForm.FormStyle"/>
      <element name="TCustomDockForm.PixelsPerInch" link="#LCL.Forms.TCustomForm.PixelsPerInch"/>
<!-- object Visibility: default -->
      <element name="THintWindow">
        <short>The popup box containing helpful information that appears when the mouse pointer hovers over an object.</short>
        <descr><p>Usage:</p>
<code>
   HintWindow := THintWindow.Create(nil);
   Rect := HintWindow.CalcHintRect(0,'This is the hint',nil);
   HintWindow.ActivateHint(Rect,'This is the hint');
</code>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="THintWindow.FActivating">
        <short>True during ActivateHint.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THintWindow.FAlignment" link="THintWindow.Alignment"/>
      <element name="THintWindow.FAutoHide" link="THintWindow.AutoHide"/>
      <element name="THintWindow.FAutoHideTimer">
        <short>The timer used to make the hint disappear.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="THintWindow.FHideInterval" link="THintWindow.HideInterval"/>
      <!-- function Visibility: private -->
      <element name="THintWindow.GetDrawTextFlags">
        <short>Collect the flags for the formatting of the text.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="THintWindow.GetDrawTextFlags.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="THintWindow.SetAutoHide" link="THintWindow.AutoHide"/>
      <element name="THintWindow.SetAutoHide.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="THintWindow.AutoHideHint">
        <short>Called when the hint timer expires.
          Hides the window.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="THintWindow.AutoHideHint.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="THintWindow.SetHideInterval" link="THintWindow.HideInterval"/>
      <element name="THintWindow.SetHideInterval.Value">
        <short/>
      </element>
      <element name="THintWindow.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <!-- procedure Visibility: protected -->
      <element name="THintWindow.WMNCHitTest">
        <short>Treats the whole window as transparent.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="THintWindow.WMNCHitTest.Message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="THintWindow.DoShowWindow" link="#LCL.Forms.TCustomForm.DoShowWindow"/>
      <!-- procedure Visibility: protected -->
      <element name="THintWindow.UpdateRegion">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- constructor Visibility: public -->
      <element name="THintWindow.Create" link="#rtl.Classes.TComponent.Create"/>
      <element name="THintWindow.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="THintWindow.Destroy"/>
      <!-- procedure Visibility: public -->
      <element name="THintWindow.ActivateHint">
        <short>Shows the hint.
        </short>
        <descr/>
        <seealso>
          <link id="THintWindow.CalcHintRect"/>
        </seealso>
      </element>
      <element name="THintWindow.ActivateHint.ARect">
        <short/>
      </element>
      <element name="THintWindow.ActivateHint.AHint">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="THintWindow.ActivateHintData">
        <short>Extended version of ActivateHint.
          Override this method to make use of the additional data.
        </short>
        <descr/>
        <seealso>
          <link id="THintWindow.ActivateHint"/>
        </seealso>
      </element>
      <element name="THintWindow.ActivateHintData.ARect">
        <short/>
      </element>
      <element name="THintWindow.ActivateHintData.AHint">
        <short/>
      </element>
      <element name="THintWindow.ActivateHintData.AData">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="THintWindow.CalcHintRect">
        <short>Determines the rectangle required for the hint display,
          based on the maximum text/window width.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="THintWindow.CalcHintRect.Result">
        <short/>
      </element>
      <element name="THintWindow.CalcHintRect.MaxWidth">
        <short>Greater zero, else the full monitor width is used.</short>
      </element>
      <element name="THintWindow.CalcHintRect.AHint">
        <short/>
      </element>
      <element name="THintWindow.CalcHintRect.AData">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="THintWindow.InitializeWnd" link="#LCL.Controls.TControl.InitializeWnd"/>
      <!-- procedure Visibility: public -->
      <element name="THintWindow.ReleaseHandle">
        <short>Destroys the widget.</short>
        <seealso>
          <link id="#LCL.Controls.TWinControl.DestroyHandle"/>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="THintWindow.Paint" link="#LCL.Controls.TCustomControl.Paint"/>
      <!-- procedure Visibility: public -->
      <element name="THintWindow.SetBounds" link="#LCL.Controls.TControl.InitializeWnd"/>
      <element name="THintWindow.SetBounds.ALeft">
        <short/>
      </element>
      <element name="THintWindow.SetBounds.ATop">
        <short/>
      </element>
      <element name="THintWindow.SetBounds.AWidth">
        <short/>
      </element>
      <element name="THintWindow.SetBounds.AHeight">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="THintWindow.GetControlClassDefaultSize" link="#LCL.Controls.TControl.GetControlClassDefaultSize"/>
      <element name="THintWindow.GetControlClassDefaultSize.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="THintWindow.Alignment">
        <short>The intended text alignment.</short>
        <descr>See DrawText
        </descr>
        <seealso>
        </seealso>
      <notes><note>link?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="THintWindow.AutoHide">
        <short>Does the hint disappear (get hidden) after a while?</short>
        <descr>If <var>AutoHide</var> is TRUE, the hint disappears afer an
          interval specified by <link id="THintWindow.HideInterval">HideInterval</link>.
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="THintWindow.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <!-- property Visibility: public -->
      <element name="THintWindow.HideInterval">
        <short>The time after which the displayed hint disappears.</short>
        <descr/>
        <seealso>
          <link id="THintWindow.AutoHide"/>
        </seealso>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="THintWindowClass" link="THintWindow">
        <short>Class of <var>THintWindow</var>.
        </short>
        <descr/>
        <seealso/>
      </element>
<!-- object Visibility: default -->
      <element name="TMonitor">
        <short>Information about an phyiscal monitor.</short>
        <descr>All informations are retrieved dynamically from the OS,
          so that all changes are taken into account.
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TMonitor.FHandle" link="TMonitor.Handle"/>
      <element name="TMonitor.FMonitorNum" link="TMonitor.MonitorNum"/>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetInfo">
        <short>Retrieves monitor information from the OS.
        </short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitor.GetInfo.Result">
        <short/>
      </element>
      <element name="TMonitor.GetInfo.Info">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetLeft" link="TMonitor.Left"/>
      <element name="TMonitor.GetLeft.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetHeight" link="TMonitor.Height"/>
      <element name="TMonitor.GetHeight.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetTop" link="TMonitor.Top"/>
      <element name="TMonitor.GetTop.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetWidth" link="TMonitor.Width"/>
      <element name="TMonitor.GetWidth.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetBoundsRect" link="TMonitor.BoundsRect"/>
      <element name="TMonitor.GetBoundsRect.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetWorkareaRect" link="TMonitor.WorkareaRect"/>
      <element name="TMonitor.GetWorkareaRect.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetPrimary" link="TMonitor.Primary"/>
      <element name="TMonitor.GetPrimary.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMonitor.BoundsRect">
        <short>The logical dimensions of the monitor, within the desktop.
        </short>
      </element>
      <element name="TMonitor.Handle">
        <short>Identifies this monitor to the system.
        </short>
      </element>
      <element name="TMonitor.Height">
        <short>The height of the display.</short>
      </element>
      <element name="TMonitor.Left">
        <short>The leftmost screen coordinate of the display.</short>
      </element>
      <element name="TMonitor.MonitorNum">
        <short>Index of the monitor in the <link id="TScreen.Monitors"/> list.</short>
      </element>
      <element name="TMonitor.Primary">
        <short>True if this is the primary monitor of the system.</short>
      </element>
      <element name="TMonitor.Top">
        <short>The topmost screen coordinate of the display.</short>
      </element>
      <element name="TMonitor.Width">
        <short>The width of the display.</short>
      </element>
      <element name="TMonitor.WorkareaRect">
        <short>The usable display area, excluding a taskbar etc.
        </short>
      </element>
<!-- object Visibility: default -->
      <element name="TMonitorList">
        <short>A list of all available monitors.</short>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitorList.GetItem" link="TMonitorList.Items"/>
      <element name="TMonitorList.GetItem.Result">
        <short/>
      </element>
      <element name="TMonitorList.GetItem.AIndex">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TMonitorList.SetItem" link="TMonitorList.Items"/>
      <element name="TMonitorList.SetItem.AIndex">
        <short/>
      </element>
      <element name="TMonitorList.SetItem.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TMonitorList.Notify">
        <short>List notification handler, destroys the Monitor object on removal from the list.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitorList.Notify.Ptr">
        <short>The monitor object.</short>
      </element>
      <element name="TMonitorList.Notify.Action">
        <short>The list operation.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TMonitorList.Items">
        <short>The indexed list of all Monitors.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitorList.Items.AIndex">
        <short/>
      </element>
<!-- pointer type Visibility: default -->
      <element name="PCursorRec" link="TCursorRec"/>
      <!-- record type Visibility: default -->
      <element name="TCursorRec">
        <short>An element of the Cursor list.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCursorRec.Next">
        <short>The next list element.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCursorRec.Index">
        <short>The list index.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCursorRec.Handle">
        <short>The OS identifier for this cursor.
        </short>
        <descr/>
        <seealso/>
      </element>
<!-- procedure type Visibility: default -->
      <element name="TScreenFormEvent">
        <short>Type of an screen notification handler, for form related events.
        </short>
        <descr/>
        <seealso>
          <link id="TScreenNotification"/>
          <link id="TScreenControlEvent"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreenFormEvent.Sender">
        <short>The Screen</short>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreenFormEvent.Form">
        <short>The affected form.</short>
      </element>
<!-- procedure type Visibility: default -->
      <element name="TScreenControlEvent">
        <short>Type of an screen notification handler, for control related events.
        </short>
        <descr/>
        <seealso>
          <link id="TScreenNotification"/>
          <link id="TScreenFormEvent"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreenControlEvent.Sender">
        <short>The Screen</short>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreenControlEvent.LastControl">
        <short>The <b>new</b> active control.</short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TScreenNotification">
        <short>Screen notification events and handler types.
        </short>
        <descr/>
        <seealso>
          <link id="TScreenFormEvent"/>
          <link id="TScreenControlEvent"/>
        </seealso>
      </element>
      <element name="TScreenNotification.snFormAdded">
        <short>A form was added.
        </short>
      </element>
      <element name="TScreenNotification.snRemoveForm">
        <short>A form was removed.
        </short>
      </element>
      <element name="TScreenNotification.snActiveControlChanged">
        <short>The focus moved to another control.
        </short>
      </element>
      <element name="TScreenNotification.snActiveFormChanged">
        <short>The focus moved to another form.
        </short>
      </element>
      <element name="TScreenNotification.snFormVisibleChanged">
        <short>The visibility of a form changed.
        </short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TMonitorDefaultTo">
        <short>The monitor to choose when screen coordinates are out of the screen bounds.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitorDefaultTo.mdNearest">
        <short>Default to the nearest monitor.</short>
      </element>
      <element name="TMonitorDefaultTo.mdNull">
        <short>Default to Nil (no suggested monitor).</short>
      </element>
      <element name="TMonitorDefaultTo.mdPrimary">
        <short>Default to the primary monitor.</short>
      </element>
<!-- object Visibility: default -->
      <element name="TScreen">
        <short>Provides information about the display and related objects.
        </short>
        <descr>
          <p>The virtual screen (desktop) can include multiple
            <link id="TScreen.Monitors">physical Monitors</link>.
          </p><p>
            Screen objects are Cursors, Fonts and Forms.
            For Delphi compatibility also (invisible) DataModules are listed.
          </p><p>
            The currently active Form, Control and Cursor also are tracked.
          </p>
        </descr>
        <errors/>
        <seealso>
          <link id="TScreen.Cursors"/>
          <link id="TScreen.DataModules"/>
          <link id="TScreen.DesktopRect"/>
          <link id="TScreen.Fonts"/>
          <link id="TScreen.Forms"/>
          <link id="TScreen.Monitors"/>
          <link id="TScreen.WorkareaRect"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FActiveControl" link="TScreen.ActiveControl"/>
      <element name="TScreen.FActiveCustomForm" link="TScreen.ActiveCustomForm"/>
      <element name="TScreen.FActiveForm" link="TScreen.ActiveForm"/>
      <element name="TScreen.FCursor" link="TScreen.Cursor"/>
      <element name="TScreen.FCursorCount" link="TScreen.Cursors"/>
      <element name="TScreen.FCursorMap" link="TScreen.Cursors"/>
      <element name="TScreen.FCustomForms" link="TScreen.CustomForms"/>
      <element name="TScreen.FCustomFormsZOrdered" link="TScreen.CustomFormsZOrdered"/>
      <element name="TScreen.FDefaultCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FHintFont" link="TScreen.HintFont"/>
      <element name="TScreen.FFocusedForm" link="TScreen.FocusedForm"/>
      <element name="TScreen.FFonts" link="TScreen.Fonts"/>
      <element name="TScreen.FFormList" link="TScreen.Forms"/>
      <element name="TScreen.FDataModuleList" link="TScreen.DataModules"/>
      <element name="TScreen.FIconFont" link="TScreen.IconFont"/>
      <element name="TScreen.FMenuFont" link="TScreen.MenuFont"/>
      <element name="TScreen.FScreenHandlers">
        <short/>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FLastActiveControl">
        <short>The last active control, used to detect focus changes.</short>
        <descr/>
        <seealso>
          <link id="TScreen.RestoreLastActive"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FLastActiveCustomForm">
        <short>The last active form, used to detect focus changes.</short>
        <descr/>
        <seealso>
          <link id="TScreen.RestoreLastActive"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FMonitors" link="TScreen.Monitors"/>
      <element name="TScreen.FOnActiveControlChange" link="TScreen.OnActiveControlChange"/>
      <element name="TScreen.FOnActiveFormChange" link="TScreen.OnActiveFormChange"/>
      <element name="TScreen.FPixelsPerInch" link="TScreen.PixelsPerInch"/>
      <!-- variable Visibility: private -->
      <element name="TScreen.FSaveFocusedList">
        <short/>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FSystemFont" link="TScreen.SystemFont"/>
      <!-- procedure Visibility: private -->
      <element name="TScreen.DeleteCursor">
        <short>Removes an cursor from Cursors[].
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.DeleteCursor.AIndex">
        <short>The logical cursor ID.
        </short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.DestroyCursors">
        <short>Deletes the Cursors list.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.DestroyMonitors">
        <short>Clears the Monitors list.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCursors" link="TScreen.Cursors"/>
      <element name="TScreen.GetCursors.Result">
        <short/>
      </element>
      <element name="TScreen.GetCursors.AIndex">
        <short>The logical cursor ID.
        </short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCustomFormCount" link="TScreen.CustomFormCount"/>
      <element name="TScreen.GetCustomFormCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCustomFormZOrderCount" link="TScreen.CustomFormZOrderCount"/>
      <element name="TScreen.GetCustomFormZOrderCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCustomForms" link="TScreen.CustomForms"/>
      <element name="TScreen.GetCustomForms.Result">
        <short/>
      </element>
      <element name="TScreen.GetCustomForms.Index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCustomFormsZOrdered" link="TScreen.CustomFormZOrdered"/>
      <element name="TScreen.GetCustomFormsZOrdered.Result">
        <short/>
      </element>
      <element name="TScreen.GetCustomFormsZOrdered.Index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDataModuleCount" link="TScreen.DataModuleCount"/>
      <element name="TScreen.GetDataModuleCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDataModules" link="TScreen.DataModules"/>
      <element name="TScreen.GetDataModules.Result">
        <short/>
      </element>
      <element name="TScreen.GetDataModules.AIndex">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDesktopLeft" link="TScreen.DesktopLeft"/>
      <element name="TScreen.GetDesktopLeft.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDesktopTop" link="TScreen.DesktopTop"/>
      <element name="TScreen.GetDesktopTop.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDesktopHeight" link="TScreen.DesktopHeight"/>
      <element name="TScreen.GetDesktopHeight.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDesktopWidth" link="TScreen.DesktopWidth"/>
      <element name="TScreen.GetDesktopWidth.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDesktopRect" link="TScreen.DesktopRect"/>
      <element name="TScreen.GetDesktopRect.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetFonts" link="TScreen.Fonts"/>
      <element name="TScreen.GetFonts.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetFormCount" link="TScreen.FormCount"/>
      <element name="TScreen.GetFormCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetForms" link="TScreen.Forms"/>
      <element name="TScreen.GetForms.Result">
        <short/>
      </element>
      <element name="TScreen.GetForms.IIndex">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetHeight" link="TScreen.Height"/>
      <element name="TScreen.GetHeight.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetMonitor" link="TScreen.Monitors"/>
      <element name="TScreen.GetMonitor.Result">
      <short/>
      </element>
      <element name="TScreen.GetMonitor.Index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetMonitorCount" link="TScreen.MonitorCount"/>
      <element name="TScreen.GetMonitorCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetPrimaryMonitor" link="TScreen.PrimaryMonitor"/>
      <element name="TScreen.GetPrimaryMonitor.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWidth" link="TScreen.Width"/>
      <element name="TScreen.GetWidth.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.AddForm">
        <short>Internal notification handler, adds a new form to the lists.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TScreen.AddForm.AForm">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.RemoveForm">
        <short>Internal notification handler, removes the form from the lists.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TScreen.RemoveForm.AForm">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.SetFocusedForm" link="TScreen.FocusedForm"/>
      <element name="TScreen.SetFocusedForm.Result">
        <short/>
      </element>
      <element name="TScreen.SetFocusedForm.AForm">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetCursor" link="TScreen.Cursor"/>
      <element name="TScreen.SetCursor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetCursors" link="TScreen.Cursors"/>
      <element name="TScreen.SetCursors.AIndex">
        <short/>
      </element>
      <element name="TScreen.SetCursors.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetHintFont" link="TScreen.HintFont"/>
      <element name="TScreen.SetHintFont.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetIconFont" link="TScreen.IconFont"/>
      <element name="TScreen.SetIconFont.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetMenuFont" link="TScreen.MenuFont"/>
      <element name="TScreen.SetMenuFont.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetSystemFont" link="TScreen.SystemFont"/>
      <element name="TScreen.SetSystemFont.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.UpdateLastActive">
        <short>Remembers the currently active form and control as last active.
          Notifies all registered handlers of eventual changes.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.UpdateMonitors">
        <short>Builds the list of available monitors.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.RestoreLastActive">
        <short>Moves the Focus back to the previously focused control.
        </short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.AddHandler">
        <short>Adds an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.AddHandler.HandlerType">
        <short>The notification (event) type.</short>
      </element>
      <element name="TScreen.AddHandler.Handler">
        <short>The notification handler.</short>
      </element>
      <element name="TScreen.AddHandler.AsFirst">
        <short>Add the handler as the first (True) or last (False) handler.</short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.RemoveHandler">
        <short>Removes an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.RemoveHandler.HandlerType">
        <short>The notification (event) type.</short>
      </element>
      <element name="TScreen.RemoveHandler.Handler">
        <short>The notification handler.</short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.DoAddDataModule" link="TScreen.DataModules">
        <short>Adds the DataModule to the list.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.DoAddDataModule.DataModule">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.DoRemoveDataModule" link="TScreen.DataModules">
        <short>Removes the DataModule from the list.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.DoRemoveDataModule.DataModule">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.NotifyScreenFormHandler">
        <short>Notifies all registered handlers for the given event.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.NotifyScreenFormHandler.HandlerType">
        <short>The event type.</short>
      </element>
      <element name="TScreen.NotifyScreenFormHandler.Form">
        <short>The related form.</short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWorkAreaHeight" link="TScreen.WorkAreaHeight"/>
      <element name="TScreen.GetWorkAreaHeight.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWorkAreaLeft" link="TScreen.WorkAreaLeft"/>
      <element name="TScreen.GetWorkAreaLeft.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWorkAreaRect" link="TScreen.WorkAreaRect"/>
      <element name="TScreen.GetWorkAreaRect.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWorkAreaTop" link="TScreen.WorkAreaTop"/>
      <element name="TScreen.GetWorkAreaTop.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWorkAreaWidth" link="TScreen.WorkAreaWidth"/>
      <element name="TScreen.GetWorkAreaWidth.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScreen.GetHintFont" link="TScreen.HintFont"/>
      <element name="TScreen.GetHintFont.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScreen.GetIconFont" link="TScreen.IconFont"/>
      <element name="TScreen.GetIconFont.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScreen.GetMenuFont" link="TScreen.MenuFont"/>
      <element name="TScreen.GetMenuFont.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScreen.GetSystemFont" link="TScreen.SystemFont"/>
      <element name="TScreen.GetSystemFont.Result">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TScreen.Create" link="#rtl.Classes.TComponent.Create"/>
      <element name="TScreen.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TScreen.Destroy"/>
      <!-- function Visibility: public -->
      <element name="TScreen.CustomFormIndex" link="TScreen.CustomForms">
        <short>Returns the CustomForms[] Index of the form.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.CustomFormIndex.Result">
        <short>The form Index, -1 if not found.
        </short>
      </element>
      <element name="TScreen.CustomFormIndex.AForm">
        <short>The Form to which the Index refers.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.FormIndex">
        <short>Returns the Forms[] Index of the form.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.FormIndex.Result">
        <short>The form Index, -1 if not found.</short>
      </element>
      <element name="TScreen.FormIndex.AForm">
        <short>The Form to which the Index refers.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.CustomFormZIndex">
        <short>The index of the form  in the Z dimension (Front to Back).</short>
        <descr>The index reflects the activation order of the forms,
          with the currently active form at index zero.
        </descr>
        <errors>
        </errors>
        <seealso/>
      </element>
      <element name="TScreen.CustomFormZIndex.Result">
        <short/>
      </element>
      <element name="TScreen.CustomFormZIndex.AForm">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.MoveFormToFocusFront">
        <short>Moves the form to the front of all form lists.
        </short>
        <descr/>
        <errors>GDB exception when the form is (being) destroyed, or the application is shutting down.
        </errors>
        <seealso/>
      </element>
      <element name="TScreen.MoveFormToFocusFront.ACustomForm">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.MoveFormToZFront">
        <short>Moves the form to the front of the Z-order list (notification only).</short>
        <descr/>
        <errors>GDB exception when the form is (being) destroyed, or the application is shutting down.
        </errors>
        <seealso>
          <link id="TScreen.MoveFormToFocusFront"/>
        </seealso>
      </element>
      <element name="TScreen.MoveFormToZFront.ACustomForm">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.GetCurrentModalForm">
        <short>Returns the topmost Modal form (ie a form that is awaiting a user response).</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.GetCurrentModalForm.Result">
        <short>The modal form, or Nil if none is active.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.GetCurrentModalFormZIndex">
        <short>Returns the index of the tompost modal form in CustomFormsZOrdered[].
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.GetCurrentModalFormZIndex.Result">
        <short>The index, or -1 if no modal form is active.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.CustomFormBelongsToActiveGroup">
        <short>Checks whether the form is visible
          and either modal or not blocked by another modal form.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TScreen.CustomFormBelongsToActiveGroup.Result">
        <short/>
      </element>
      <element name="TScreen.CustomFormBelongsToActiveGroup.AForm">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.FindNonDesignerForm">
        <short>Finds the named form, excluding designer forms.
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TScreen.FindForm"/>
        </seealso>
      </element>
      <element name="TScreen.FindNonDesignerForm.Result">
        <short/>
      </element>
      <element name="TScreen.FindNonDesignerForm.FormName">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.FindForm">
        <short>Finds a form by its name.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TScreen.FindNonDesignerForm"/>
        </seealso>
      </element>
      <element name="TScreen.FindForm.Result">
        <short/>
      </element>
      <element name="TScreen.FindForm.FormName">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.FindNonDesignerDataModule">
        <short>Finds the named DataModule, excluding designer modules.
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TScreen.FindDataModule"/>
        </seealso>
      </element>
      <element name="TScreen.FindNonDesignerDataModule.Result">
        <short/>
      </element>
      <element name="TScreen.FindNonDesignerDataModule.DataModuleName">
        <short/>
      </element>
      <element name="TScreen.FindDataModule.Result">
        <short/>
      </element>
      <element name="TScreen.FindDataModule.DataModuleName">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.FindDataModule">
        <short>Finds the named DataModule.
        </short>
        <seealso>
          <link id="TScreen.FindNonDesignerDataModule"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.UpdateScreen">
        <short>Updates the <link id="TScreen.PixelsPerInch"/> property.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveAllHandlersOfObject" link="#LCL.LCLClasses.TLCLComponent.RemoveAllHandlersOfObject"/>
      <element name="TScreen.RemoveAllHandlersOfObject.AnObject">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerFormAdded">
        <short>Adds an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.AddHandlerFormAdded.OnFormAdded">
        <short/>
      </element>
      <element name="TScreen.AddHandlerFormAdded.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerFormAdded">
        <short>Removes an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.RemoveHandlerFormAdded.OnFormAdded">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerRemoveForm">
        <short>Adds an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.AddHandlerRemoveForm.OnRemoveForm">
        <short/>
      </element>
      <element name="TScreen.AddHandlerRemoveForm.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerRemoveForm">
        <short>Removes an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.RemoveHandlerRemoveForm.OnRemoveForm">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerActiveControlChanged">
        <short>Adds an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.AddHandlerActiveControlChanged.OnActiveControlChanged">
        <short/>
      </element>
      <element name="TScreen.AddHandlerActiveControlChanged.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerActiveControlChanged">
        <short>Removes an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.RemoveHandlerActiveControlChanged.OnActiveControlChanged">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerActiveFormChanged">
        <short>Adds an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.AddHandlerActiveFormChanged.OnActiveFormChanged">
        <short/>
      </element>
      <element name="TScreen.AddHandlerActiveFormChanged.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerActiveFormChanged">
        <short>Removes an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.RemoveHandlerActiveFormChanged.OnActiveFormChanged">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerFormVisibleChanged">
        <short>Adds an notification handler.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.AddHandlerFormVisibleChanged.OnFormVisibleChanged">
        <short/>
      </element>
      <element name="TScreen.AddHandlerFormVisibleChanged.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerFormVisibleChanged">
        <short>Removes an notification handler.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.RemoveHandlerFormVisibleChanged.OnFormVisibleChanged">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.DisableForms">
        <short>Disable all forms except <var>SkipForm</var>.
        </short>
        <descr>
          <p>
             Used to show modal forms or dialogs.
          </p><p>
            The enabled state is determined from the widget, not from LCL properties.
          </p><p>
             If <var>DisabledList</var> is Nil, a new list is created.
             Then all disabled forms are added to that list.
          </p><p>
            When the modal form returns, call EnableForms to restore all forms.
          </p>
        </descr>
        <seealso>
          <link id="TScreen.EnableForms"/>
        </seealso>
      </element>
      <element name="TScreen.DisableForms.Result">
        <short>The list containing all disabled forms.</short>
      </element>
      <element name="TScreen.DisableForms.SkipForm">
        <short>Don't disable this form (ignored if Nil).</short>
      </element>
      <element name="TScreen.DisableForms.DisabledList">
        <short>The list to update. If Nil, a new list is created and returned.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.EnableForms">
        <short>Use this method to restore all
          <link id="TScreen.DisableForms">previously disabled</link> forms.
        </short>
        <seealso>
          <link id="TScreen.DisableForms"/>
        </seealso>
      </element>
      <element name="TScreen.EnableForms.AFormList">
        <short>The list containing the forms to enable. The list is destroyed on exit.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.MonitorFromPoint">
        <short>Find the monitor containing the given screen coordinates.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TScreen.MonitorFromRect"/>
        </seealso>
      </element>
      <element name="TScreen.MonitorFromPoint.Result">
        <short>The monitor found.</short>
      </element>
      <element name="TScreen.MonitorFromPoint.Point">
        <short>The screen coordinates to find.</short>
      </element>
      <element name="TScreen.MonitorFromPoint.MonitorDefault">
        <short>What to return when no monitor was found.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.MonitorFromRect">
        <short>Find the monitor containing (most of) the given screen coordinates.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TScreen.MonitorFromPoint"/>
        </seealso>
      </element>
      <element name="TScreen.MonitorFromRect.Result">
        <short>The monitor found.</short>
      </element>
      <element name="TScreen.MonitorFromRect.Rect">
        <short>The screen coordinates to find.</short>
      </element>
      <element name="TScreen.MonitorFromRect.MonitorDefault">
        <short>What to return when no monitor was found.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.MonitorFromWindow">
        <short>Find the monitor containing (most of) the given window.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.MonitorFromWindow.Result">
        <short>The monitor found.</short>
      </element>
      <element name="TScreen.MonitorFromWindow.Handle">
        <short>The window handle to use.</short>
      </element>
      <element name="TScreen.MonitorFromWindow.MonitorDefault">
        <short>What to return when no monitor was found.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.ActiveControl">
        <short>The control which has the Focus.
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TScreen.ActiveForm"/>
          <link id="TScreen.ActiveCustomForm"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.ActiveCustomForm">
        <short>The custom form which has the Focus.
        </short>
        <seealso>
          <link id="TScreen.ActiveForm"/>
          <link id="TScreen.ActiveControl"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.ActiveForm">
        <short>The form which has the Focus.
        </short>
        <seealso>
          <link id="TScreen.ActiveControl"/>
          <link id="TScreen.ActiveCustomForm"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Cursor">
        <short>The current mouse cursor shape.</short>
        <descr>Use one of the predefined cursor styles, e.g. crHourGlass.
        </descr>
        <seealso>
          <link id="Controls.crDefault"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Cursors">
        <short>The indexed list of available cursor shapes.
        </short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.Cursors.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.CustomFormCount">
        <short>The number of Custom Forms.</short>
        <seealso>
          <link id="TScreen.CustomForms"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.CustomForms">
        <short>The indexed list of Custom Forms.</short>
        <descr/>
        <seealso>
          <link id="TScreen.CustomFormCount"/>
        </seealso>
      </element>
      <element name="TScreen.CustomForms.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.CustomFormsZOrdered">
        <short>The list of Custom Forms, indexed by Z-order (zero is topmost).</short>
        <descr/>
        <seealso>
          <link id="TScreen.CustomFormZOrderCount"/>
        </seealso>
      </element>
      <element name="TScreen.CustomFormsZOrdered.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.CustomFormZOrderCount">
        <short>
          <var>CustomFormZOrderCount</var> - the number of forms arranged in Z-plane order (ie Front to Back)</short>
        <descr/>
        <seealso>
          <link id="TScreen.CustomFormsZOrdered"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DataModuleCount">
        <short>The number of existing data modules.</short>
        <seealso>
          <link id="TScreen.DataModules"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DataModules">
        <short>The indexed list of Data Modules.</short>
        <seealso>
          <link id="TScreen.DataModuleCount"/>
        </seealso>
      </element>
      <element name="TScreen.DataModules.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DesktopHeight" link="TScreen.DesktopRect">
        <short>The total vertical size of the desktop.
        </short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DesktopLeft" link="TScreen.DesktopRect">
        <short>The leftmost coordinate of the desktop.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DesktopRect">
        <short>The total extent of the desktop, spanning all monitors.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DesktopTop" link="TScreen.DesktopRect">
        <short>The topmost coordinate of the desktop.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DesktopWidth" link="TScreen.DesktopRect">
        <short>The total horizontal size of the display.
        </short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.FocusedForm">
        <short>The form that holds Focus</short>
        <descr>
        </descr>
        <seealso>
          <link id="TScreen.ActiveForm"/>
          <link id="TScreen.ActiveCustomForm"/>
        </seealso>
      <notes><note>really?</note><note>what's different from ActiveForm?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Fonts">
        <short>The names of the available (installed) fonts.</short>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.FormCount" link="TScreen.Forms">
        <short>The number of existing Forms.</short>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Forms">
        <short>The indexed list of all Forms, in Z-order.</short>
        <descr/>
        <seealso>
          <link id="TScreen.FormCount"/>
          <link id="TScreen.CustomForms"/>
        </seealso>
      </element>
      <element name="TScreen.Forms.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Height">
        <short>The height of the primary monitor.</short>
        <seealso>
          <link id="TScreen.PrimaryMonitor"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.HintFont">
        <short>The font used to display Hints.</short>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.IconFont">
        <short>The Icon font, used with desktop icons.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.MenuFont">
        <short>The font used in menus.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.MonitorCount" link="TScreen.Monitors">
        <short>The number of available Monitors.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Monitors">
        <short>The indexed list of available monitors.
        </short>
        <seealso>
          <link id="TScreen.MonitorCount"/>
        </seealso>
      </element>
      <element name="TScreen.Monitors.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.OnActiveControlChange">
        <short>Handler for a Focus changed notification.</short>
        <descr/>
        <seealso>
          <link id="TScreen.AddHandlerActiveControlChanged"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.OnActiveFormChange">
        <short>Handler for a Focus changed notification.</short>
        <descr/>
        <seealso>
          <link id="TScreen.AddHandlerActiveFormChanged"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.PixelsPerInch">
        <short>The number of screen pixels for an virtual inch (DPI), in vertical direction.
        </short>
        <descr>
          The display uses virtual inches,
          which typically are bigger than physical inches.
          This requires that text appears bigger on an screen than e.g. on an printer.
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.PrimaryMonitor">
        <short>The primary monitor typically shows the taskbar.
        </short>
        <seealso>
          <link id="TScreen.WorkareaRect"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.SystemFont">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Width">
        <short>The width of the primary monitor.</short>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.WorkAreaHeight" link="TScreen.WorkareaRect">
        <short>The usable height of the primary monitor.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.WorkAreaLeft" link="TScreen.WorkareaRect">
        <short>The usable left coordinate on the primary monitor.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.WorkAreaRect">
        <short>The usable display area on the primary monitor, excluding e.g. the taskbar.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TScreen.DesktopRect"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.WorkAreaTop" link="TScreen.WorkareaRect">
        <short>The usable top coordinate on the primary monitor.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.WorkAreaWidth" link="TScreen.WorkareaRect">
        <short>The usable width of the primary monitor.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
<!-- procedure type Visibility: default -->
      <element name="TQueryEndSessionEvent">
        <short>The type of an <link id="TApplication.OnQueryEndSession"/> handler.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TQueryEndSessionEvent.Cancel">
        <short>Set Cancel to True to prevent an logoff.</short>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TExceptionEvent">
        <short/>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TExceptionEvent.Sender">
        <short/>
      </element>
      <element name="TExceptionEvent.E">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TGetHandleEvent">
        <short/>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TGetHandleEvent.Handle">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TIdleEvent">
        <short>Type of an Idle event handler.</short>
        <descr>Lengthy operations should be broken into parts,
          to keep the application responsive.
          The handlers are called repeatedly, until all signal Done.
        </descr>
        <seealso/>
      </element>
      <element name="TIdleEvent.Sender">
        <short/>
      </element>
      <element name="TIdleEvent.Done">
        <short>Set to True when everything is done.</short>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TOnUserInputEvent">
        <short/>
        <descr/>
        <seealso/>
      <notes><note>when?</note>
        </notes>
      </element>
      <element name="TOnUserInputEvent.Sender">
        <short/>
      </element>
      <element name="TOnUserInputEvent.Msg">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TDataEvent">
        <short>The type of an asynchronous callback method.</short>
        <descr/>
        <seealso>
          <link id="TApplication.QueueAsyncCall"/>
        </seealso>
      </element>
      <element name="TDataEvent.Data">
        <short>The argument passed to the method.</short>
      </element>
      <!-- record type Visibility: default -->
      <element name="TCMHintShow">
        <short/>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShow.Msg">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShow.Reserved">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShow.HintInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShow.Result">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TCMHintShowPause">
        <short/>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShowPause.Msg">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShowPause.WasActive">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShowPause.Pause">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShowPause.Result">
        <short/>
        <descr/>
        <seealso/>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TAppHintTimerType">
        <short>The TApplication hint timer state.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TAppHintTimerType.ahttNone">
        <short>The hint timer is off.</short>
      </element>
      <element name="TAppHintTimerType.ahttShowHint">
        <short>Waiting to show an hint</short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TAppHintTimerType.ahttHideHint">
        <short>Waiting to hide an hint</short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TAppHintTimerType.ahttReshowHint">
        <short>Waiting to show the next hint</short>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TShowHintEvent">
        <short/>
        <descr/>
        <seealso/>
      <notes><note>when?</note><note>what?</note>
        </notes>
      </element>
      <element name="TShowHintEvent.HintStr">
        <short/>
      </element>
      <element name="TShowHintEvent.CanShow">
        <short/>
      </element>
      <element name="TShowHintEvent.HintInfo">
        <short/>
      </element>
<!-- record type Visibility: default -->
      <element name="THintInfoAtMouse">
        <short/>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="THintInfoAtMouse.MousePos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="THintInfoAtMouse.Control">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="THintInfoAtMouse.ControlHasHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TApplicationFlag">
        <short>Application state flags.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplicationFlag.AppWaiting">
        <short>In Idle state</short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplicationFlag.AppIdleEndSent">
        <short>IdleEnd handlers have been notified</short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplicationFlag.AppHandlingException">
        <short>In exception handling</short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplicationFlag.AppNoExceptionMessages">
        <short>Suppress further exceptions</short>
      <notes><note>or Panic on?</note><note>?</note>
        </notes>
      </element>
      <element name="TApplicationFlag.AppActive">
        <short>Application has the focus.</short>
      </element>
      <element name="TApplicationFlag.AppDestroying">
        <short>Shutting down</short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplicationFlag.AppDoNotCallAsyncQueue">
        <short>Skip asynchronous callbacks between handling messages</short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplicationFlag.AppInitialized">
        <short>Application has been initialized.</short>
      </element>
      <!-- set type Visibility: default -->
      <element name="TApplicationFlags" link="TApplicationFlag"/>
<!-- enumeration type Visibility: default -->
      <element name="TApplicationNavigationOption">
        <short>Which keys can be used for the navigation within a form
        </short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplicationNavigationOption.anoTabToSelectNext">
        <short>The Tab key moves the Focus to the next (or previous) control in TabOrder.
        </short>
      </element>
      <element name="TApplicationNavigationOption.anoReturnForDefaultControl">
        <short>The Enter key triggers the default action.
        </short>
      </element>
      <element name="TApplicationNavigationOption.anoEscapeForCancelControl">
        <short>The Escape key triggers the Cancel action.
        </short>
      </element>
      <element name="TApplicationNavigationOption.anoF1ForHelp">
        <short>The F1 key brings up context sensitive help.
        </short>
      </element>
      <element name="TApplicationNavigationOption.anoArrowToSelectNextInParent">
        <short>The Arrow keys move the focus.
        </short>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- set type Visibility: default -->
      <element name="TApplicationNavigationOptions" link="TApplicationNavigationOption"/>
<!-- enumeration type Visibility: default -->
      <element name="TApplicationHandlerType">
        <short>Types of Application notification handlers.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplicationHandlerType.ahtIdle">
        <short>Application becoming idle</short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplicationHandlerType.ahtIdleEnd">
        <short>Application becoming busy</short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplicationHandlerType.ahtKeyDownBefore">
        <short>Handler for KeyDown events, invoked before interface and LCL handlers
        </short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplicationHandlerType.ahtKeyDownAfter">
        <short>Default handler for KeyDown events, invoked after interface and LCL handlers
        </short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplicationHandlerType.ahtActivate">
        <short>Handler invoked on
          application activated
        </short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplicationHandlerType.ahtDeactivate">
        <short>Handler invoked on
          application deactivated
        </short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplicationHandlerType.ahtUserInput">
        <short>Handler invoked on user input
        </short>
      <notes><note>what's this?</note>
        </notes>
      </element>
      <element name="TApplicationHandlerType.ahtException">
        <short>Handler invoked on handled exception.
        </short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplicationHandlerType.ahtEndSession">
        <short>Handler invoked on session end
        </short>
      <notes><note>what's this?</note>
        </notes>
      </element>
      <element name="TApplicationHandlerType.ahtQueryEndSession">
        <short>Handler invoked before
          session ends
        </short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplicationHandlerType.ahtMinimize">
        <short>Handler invoked when the application is minimized.
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtModalBegin">
        <short>Handler invoked when a form is shown modally.
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtModalEnd">
        <short>Handler invoked when the last modal form is closed.
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtRestore">
        <short>Handler invoked on
          application restored (from minimized state).
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtDropFiles">
        <short>Handler invoked on files dropped
        </short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplicationHandlerType.ahtHelp">
        <short>Handler invoked on F1 key (help request)
        </short>
      <notes><note>purpose?</note>
        </notes>
      </element>
      <element name="TApplicationHandlerType.ahtHint">
        <short>Handler invoked on Hint request
        </short>
      <notes><note>purpose?</note>
        </notes>
      </element>
      <element name="TApplicationHandlerType.ahtShowHint">
        <short>Handler invoked on Hint becoming visible
        </short>
      <notes><note>purpose?</note>
        </notes>
      </element>
      <element name="TApplicationHandlerType.ahtGetMainFormHandle">
        <short>Handler providing the Handle of the main form
        </short>
        <descr>
        </descr>
      <notes><note>?</note><note>application/taskbar window?</note><note>purpose?</note><note>what's the purpose for *not* returning MainForm.Handle???</note>
        </notes>
      </element>
<!-- pointer type Visibility: default -->
      <element name="PAsyncCallQueueItem" link="TAsyncCallQueueItem">
        <short>A queued asynchronous callback request node.</short>
        <descr/>
        <seealso/>
      </element>
<!-- record type Visibility: default -->
      <element name="TAsyncCallQueueItem">
        <short>A queued asynchronous callback request node.</short>
        <descr/>
        <seealso>
          <link id="TApplication.QueueAsyncCall"/>
        </seealso>
      </element>
      <element name="TAsyncCallQueueItem.Method">
        <short>The callback method.</short>
        <descr/>
      </element>
      <element name="TAsyncCallQueueItem.Data">
        <short>The method call argument.</short>
        <descr/>
      </element>
      <element name="TAsyncCallQueueItem.NextItem">
        <short>The next list node.</short>
        <descr/>
      </element>
      <element name="TAsyncCallQueueItem.PrevItem">
        <short>The preceding list node.
        </short>
        <descr>
        </descr>
      <notes><note>superfluous, could be removed?</note>
        </notes>
      </element>
<!-- record type Visibility: default -->
      <element name="TAsyncCallQueue">
        <short>The queue head for asynchronous callbacks.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.QueueAsyncCall"/>
        </seealso>
      </element>
      <element name="TAsyncCallQueue.Top">
        <short>The first queued method.</short>
      </element>
      <element name="TAsyncCallQueue.Last">
        <short>The last queued method.</short>
      </element>
<!-- record type Visibility: default -->
      <element name="TAsyncCallQueues">
        <short>Management information for asynchronous callbacks.</short>
        <descr>
          <p>
            Two queues are used:
          </p><p>
            New calls are added to the Next queue.
          </p><p>
            When the application starts processing the calls,
            the Next queue becomes the Cur queue, and a new Next queue is created.
            This simplifies thread-safe addition of further calls.
          </p>
        </descr>
        <seealso>
          <link id="TApplication.QueueAsyncCall"/>
        </seealso>
      </element>
      <element name="TAsyncCallQueues.CritSec">
        <short>The critical section for adding and removing queue elements.
        </short>
        <descr>
        </descr>
      </element>
      <element name="TAsyncCallQueues.Cur">
        <short>The currently processed queue. Processed entries are removed.
        </short>
        <descr>
        </descr>
      </element>
      <!-- variable Visibility: default -->
      <element name="TAsyncCallQueues.Next">
        <short>New calls are added to this queue.</short>
        <descr>
        </descr>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TApplicationType">
        <short/>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplicationType.atDefault">
        <short/>
      </element>
      <element name="TApplicationType.atDesktop">
        <short/>
      </element>
      <element name="TApplicationType.atPDA">
        <short/>
      </element>
      <element name="TApplicationType.atKeyPadDevice">
        <short/>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TApplicationShowGlyphs">
        <short>Describes the policy for the application of how to show menu and button glyphs</short>
        <descr>
          <p>sbgAlways - show glyphs always (inspite of system preferences)</p>
          <p>sbgNever - show glyphs never (inspite of system preferences)</p>
          <p>sbgSystem - use system preferences for glyphs showing</p>
        </descr>
        <seealso>
          <link id="#LCL.Menus.TGlyphShowMode"/>
        </seealso>
      <notes><note>on Button or Tab controls, and menus?</note>
        </notes>
      </element>
      <element name="TApplicationShowGlyphs.sbgAlways">
        <short>Show glyphs always.</short>
      </element>
      <element name="TApplicationShowGlyphs.sbgNever">
        <short>Show glyphs never.</short>
      </element>
      <element name="TApplicationShowGlyphs.sbgSystem">
        <short>Show glyphs according to the platform default.</short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TTaskBarBehavior">
        <short>How forms are represented in the TaskBar</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TTaskBarBehavior.tbDefault">
        <short>Show TaskBar buttons according to the platform default.</short>
      </element>
      <element name="TTaskBarBehavior.tbMultiButton">
        <short>Show buttons for Forms with ShowInTaskBar=stDefault.</short>
      </element>
      <element name="TTaskBarBehavior.tbSingleButton">
        <short>Hide buttons for Forms with ShowInTaskBar=stDefault.</short>
      </element>
<!-- object Visibility: default -->
      <element name="TApplication">
        <short>Application management and configuration for a GUI application.
        </short>
        <descr>
          <p>
            Provides a message loop, hooks for application event handlers, and more.
          </p><p>
            Includes the useful function <var>MessageBox</var>,
            a simple dialog intended for displaying error messages,
            but also usable as an alternative to the various Message Dialogs.
          </p><p>
            Other project types have a different Application class
          </p>
        </descr>
        <errors/>
        <seealso>
          <link id="TScreen"/>
        </seealso>
      <notes><note>or no?</note><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FApplicationHandlers">
        <short>Holds the registered notification handlers.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FApplicationType" link="TApplication.ApplicationType"/>
      <!-- variable Visibility: private -->
      <element name="TApplication.FAsyncCall">
        <short>Queues for asynchronous calls.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.QueueAsyncCall"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FBidiMode" link="TApplication.BiDiMode"/>
      <element name="TApplication.FBigIconHandle">
        <short>The Handle of the big application icon.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FCaptureExceptions" link="TApplication.CaptureExceptions"/>
      <!-- variable Visibility: private -->
      <element name="TApplication.FComponentsReleasing">
        <short>The list of components which currently are released (destroyed).</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.Release"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FComponentsToRelease">
        <short>The list of components marked for release.</short>
        <descr/>
        <seealso>
          <link id="TApplication.Release"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FCreatingForm">
        <short/>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FFindGlobalComponentEnabled" link="TApplication.FindGlobalComponentEnabled"/>
      <element name="TApplication.FFlags" link="TApplication.Flags"/>
      <element name="TApplication.FHint" link="TApplication.Hint"/>
      <element name="TApplication.FHintColor" link="TApplication.HintColor"/>
      <element name="TApplication.FHintControl" link="TApplication.HintControl"/>
      <element name="TApplication.FHintHidePause" link="TApplication.HintHidePause"/>
      <element name="TApplication.FHintHidePausePerChar" link="TApplication.HintHidePausePerChar"/>
      <element name="TApplication.FHintPause" link="TApplication.HintPause"/>
      <element name="TApplication.FHintRect">
        <short>The screen area of the current Hint window</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintShortCuts" link="TApplication.HintShortCuts"/>
      <element name="TApplication.FHintShortPause" link="TApplication.HintShortPause"/>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintTimer">
        <short>The timer for showing and hiding Hints</short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintTimerType">
        <short>The Hint time mode</short>
        <descr/>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintWindow">
        <short>The current Hint window</short>
        <descr/>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FIcon" link="TApplication.Icon"/>
      <element name="TApplication.FIdleLockCount">
        <short>Counter for nested Idle locks, preventing execution of OnIdle handlers</short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastKeyDownKey">
        <short>Cached key event parameter</short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastKeyDownSender">
        <short>Cached key event parameter</short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastKeyDownShift">
        <short>Cached key event parameter</short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastMouseControl">
        <short>Cached mouse event parameter</short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastMouseControlValid">
        <short>Cached mouse event parameter</short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastMousePos">
        <short>Cached mouse event parameter</short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FMainForm" link="TApplication.MainForm"/>
      <element name="TApplication.FMainFormOnTaskBar" link="TApplication.MainFormOnTaskBar"/>
      <element name="TApplication.FModalLevel" link="TApplication.ModalLevel"/>
      <element name="TApplication.FMouseControl" link="TApplication.MouseControl"/>
      <element name="TApplication.FNavigation" link="TApplication.Navigation"/>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOldExceptProc">
        <short>The previously installed exception handler</short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOldExitProc">
        <short>The previously installed Exit procedure</short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOnActionExecute" link="TApplication.OnActionExecute"/>
      <element name="TApplication.FOnActionUpdate" link="TApplication.OnActionUpdate"/>
      <element name="TApplication.FOnActivate" link="TApplication.OnActivate"/>
      <element name="TApplication.FOnDeactivate" link="TApplication.OnDeactivate"/>
      <element name="TApplication.FOnDestroy" link="TApplication.OnDestroy"/>
      <element name="TApplication.FOnDropFiles" link="TApplication.OnDropFiles"/>
      <element name="TApplication.FOnEndSession" link="TApplication.OnEndSession"/>
      <element name="TApplication.FOnGetMainFormHandle" link="TApplication.OnGetMainFormHandle"/>
      <element name="TApplication.FOnHelp" link="TApplication.OnHelp"/>
      <element name="TApplication.FOnHint" link="TApplication.OnHint"/>
      <element name="TApplication.FOnIdle" link="TApplication.OnIdle"/>
      <element name="TApplication.FOnIdleEnd" link="TApplication.OnIdleEnd"/>
      <element name="TApplication.FOnMinimize" link="TApplication.OnMinimize"/>
      <element name="TApplication.FOnModalBegin" link="TApplication.OnModalBegin"/>
      <element name="TApplication.FOnModalEnd" link="TApplication.OnModalEnd"/>
      <element name="TApplication.FOnQueryEndSession" link="TApplication.OnQueryEndSession"/>
      <element name="TApplication.FOnRestore" link="TApplication.OnRestore"/>
      <element name="TApplication.FOnShortcut" link="TApplication.OnShortcut"/>
      <element name="TApplication.FOnShowHint" link="TApplication.OnShowHint"/>
      <element name="TApplication.FOnUserInput" link="TApplication.OnUserInput"/>
      <element name="TApplication.FRestoreStayOnTop">
        <short>The list of all forms that should be restored to StayOnTop.</short>
        <descr>The list is created in RemoveStayOnTop, processed in RestoreStayOnTop.
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FShowButtonGlyphs" link="TApplication.ShowButtonGlyphs"/>
      <element name="TApplication.FShowHint" link="TApplication.ShowHint"/>
      <element name="TApplication.FShowMainForm" link="TApplication.ShowMainForm"/>
      <element name="TApplication.FShowMenuGlyphs" link="TApplication.ShowMenuGlyphs"/>
      <!-- variable Visibility: private -->
      <element name="TApplication.FSmallIconHandle">
        <short>The Handle of the small application icon.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FTaskBarBehavior" link="TApplication.TaskBarBehavior"/>
      <!-- procedure Visibility: private -->
      <element name="TApplication.DoOnIdleEnd">
        <short>Notifies the OnIdleEnd handlers; called when the application exits Idle state.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetActive" link="TApplication.Active"/>
      <element name="TApplication.GetActive.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetCurrentHelpFile">
        <short>Searches for an HelpFile name in the active form, then in Application.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.GetCurrentHelpFile.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetMainFormHandle">
        <short>Determines the main form handle, using all available handlers.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.OnGetMainFormHandle"/>
          <link id="TApplicationHandlerType.ahtOnGetMainFormHandle"/>
        </seealso>
      </element>
      <element name="TApplication.GetMainFormHandle.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetTitle">
        <short>When no Title was stored, extracts the program name from the commandline arguments.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.GetTitle.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.FreeIconHandles">
        <short>Destroys the application icons</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.IconChanged">
        <short>Loads the new application icons, notifies the widgetset and all forms.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.IconChanged.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetBidiMode" link="TApplication.BiDiMode"/>
      <element name="TApplication.SetBidiMode.AValue">
      <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetFlags" link="TApplication.Flags"/>
      <element name="TApplication.SetFlags.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetMainFormOnTaskBar" link="TApplication.MainFormOnTaskBar"/>
      <element name="TApplication.SetMainFormOnTaskBar.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetNavigation" link="TApplication.Navigation"/>
      <element name="TApplication.SetNavigation.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetShowButtonGlyphs" link="TApplication.ShowButtonGlyphs"/>
      <element name="TApplication.SetShowButtonGlyphs.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetShowMenuGlyphs" link="TApplication.ShowMenuGlyphs"/>
      <element name="TApplication.SetShowMenuGlyphs.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetTaskBarBehavior" link="TApplication.TaskBarBehavior"/>
      <element name="TApplication.SetTaskBarBehavior.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.UpdateMouseControl">
        <short>Handles mouse moving onto a new control.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.UpdateMouseControl.NewMouseControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.UpdateMouseHint">
        <short>Sets Hint to the (new) hint that applies to CurrentControl.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <element name="TApplication.UpdateMouseHint.CurrentControl">
        <short>The control under the mouse.</short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetCaptureExceptions" link="TApplication.CaptureExceptions"/>
      <element name="TApplication.SetCaptureExceptions.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetHint" link="TApplication.Hint"/>
      <element name="TApplication.SetHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetHintColor" link="TApplication.HintControl"/>
      <element name="TApplication.SetHintColor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetIcon" link="TApplication.Icon"/>
      <element name="TApplication.SetIcon.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetShowHint" link="TApplication.ShowHint"/>
      <element name="TApplication.SetShowHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.StopHintTimer">
        <short>Disables the Hint timer.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.ValidateHelpSystem">
        <short>Checks for an installed <link id="#lcl.HelpIntfs.HelpManager">HelpManager</link>.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ValidateHelpSystem.Result">
        <short>True when HelpManager is not Nil.</short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.WndProc" link="#LCL.Controls.TControl.WndProc"/>
      <element name="TApplication.WndProc.AMessage">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.DispatchAction">
        <short>Asks the active form and MainForm to handle the action.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.DispatchAction.Result">
        <short>True when the action was handled.</short>
      </element>
      <element name="TApplication.DispatchAction.Msg">
        <short/>
      </element>
      <element name="TApplication.DispatchAction.Action">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.AddHandler">
        <short>Adds an application notification handler.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TApplicationHandlerType"/>
        </seealso>
      </element>
      <element name="TApplication.AddHandler.HandlerType">
        <short/>
      </element>
      <element name="TApplication.AddHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.RemoveHandler">
        <short>Removes an application notification handler.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TApplicationHandlerType"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveHandler.HandlerType">
        <short/>
      </element>
      <element name="TApplication.RemoveHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.RunLoop">
        <short>Encapsulates the application message loop (HandleMessage).
        </short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.Activate">
        <short>Handler for application activation, notifies all activation handlers.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.Deactivate">
        <short>Handler for application deactivation, notifies all deactivation handlers.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.Deactivate.Force">
        <short>True when called from the widgetset.</short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TApplication.GetConsoleApplication">
        <short>Here: returns False, because this is a GUI application.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplication.GetConsoleApplication.Result">
        <short>False for a GUI application.</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.NotifyIdleHandler">
        <short>Notifies all Idle handlers.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TApplication.OnIdle"/>
          <link id="TApplicationHandlerType.ahtIdle"/>
        </seealso>
      </element>
      <element name="TApplication.NotifyIdleHandler.Done">
        <short>True when all handlers are done, meaning: wait for next message.</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.NotifyIdleEndHandler">
        <short>Notifies all Idle End handlers, when a new message arrived.
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.OnIdleEnd"/>
          <link id="TApplicationHandlerType.ahtIdleEnd"/>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.NotifyActivateHandler">
        <short>Notifies all Activation handlers.
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.OnActivate"/>
          <link id="TApplicationHandlerType.ahtActivate"/>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.NotifyDeactivateHandler">
        <short>Notifies all Deactivation handlers.
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.OnDeactivate"/>
          <link id="TApplicationHandlerType.ahtDeactivate"/>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.NotifyCustomForms">
        <short>Notifies all CustomForms of Msg arrived.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.NotifyCustomForms.Msg">
        <short>The message to process.</short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TApplication.IsHintMsg">
        <short>Nop, exists for Delphi compatibility only.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplication.IsHintMsg.Result">
        <short>Always False.</short>
      </element>
      <element name="TApplication.IsHintMsg.Msg">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TApplication.DoOnHelp">
        <short>OnHelp message handler. Tries OnHelp handlers of the active form, Application OnHelp and application Help handlers.
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.OnHelp"/>
          <link id="TApplicationHandlerType.ahtHelp"/>
        </seealso>
      </element>
      <element name="TApplication.DoOnHelp.Result">
        <short>True when the message was handled.</short>
      </element>
      <element name="TApplication.DoOnHelp.Command">
        <short/>
      </element>
      <element name="TApplication.DoOnHelp.Data">
        <short/>
      </element>
      <element name="TApplication.DoOnHelp.CallHelp">
        <short/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.DoOnMouseMove">
        <short>OnMouseMove message handler, updates the Hint.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.ShowHintWindow">
        <short>Shows or hides the Hint window.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplication.ShowHintWindow.Info">
        <short>Is updated with the Hint related information.</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.OnHintTimer">
        <short>Event handler for timing the duration of hints.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.OnHintTimer.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.SetTitle" link="TApplication.Title"/>
      <element name="TApplication.SetTitle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.StartHintTimer">
        <short>Starts the timer for display of a hint message.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <element name="TApplication.StartHintTimer.Interval">
        <short/>
      </element>
      <element name="TApplication.StartHintTimer.TimerType">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.UpdateVisible">
        <short>Asks the widgetset to update the TaskBar entries.
        </short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.DoIdleActions">
        <short>Updates all Actions, hides splash screens.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.MenuPopupHandler">
        <short>Hides the Hint window.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplication.MenuPopupHandler.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.ProcessAsyncCallQueue">
        <short>Calls all methods queued by QueueAsyncCall.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.FreeComponent" link="TApplication.ReleaseComponents"/>
      <element name="TApplication.FreeComponent.Data">
        <short>Ignored, should be zero.</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.ReleaseComponents">
        <short>Destroys all components marked for release.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.DoBeforeFinalization">
        <short>Destroys all components.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.GetParams">
        <short>Returns the indexed commandline argument.</short>
      </element>
      <element name="TApplication.GetParams.Result">
        <short/>
      </element>
      <element name="TApplication.GetParams.Index">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TApplication.Create" link="#rtl.Classes.TComponent.Create"/>
      <element name="TApplication.Create.AOwner">
        <short>The Owner object that invoked this instance of TApplication</short>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TApplication.Destroy"/>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ActivateHint">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplication.ActivateHint.CursorPos">
        <short/>
      </element>
      <element name="TApplication.ActivateHint.CheckHintControlChange">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetControlAtMouse">
        <short>Finds the control under the mouse.
        </short>
        <descr>Updates the LastMouse... info.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.GetControlAtMouse.Result">
        <short>The control, Nil if no control found.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ControlDestroyed">
        <short>Clears all references to the destroyed control.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ControlDestroyed.AControl">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.BigIconHandle">
        <short>The Handle of the large application Icon.</short>
        <seealso>
          <link id="TApplication.Icon"/>
        </seealso>
      </element>
      <element name="TApplication.BigIconHandle.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.SmallIconHandle">
        <short>The Handle of the small application Icon.</short>
        <seealso>
          <link id="TApplication.Icon"/>
        </seealso>
      </element>
      <element name="TApplication.SmallIconHandle.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.BringToFront">
        <short>Asks the widgetset to bring the application's form(s) to the front
        </short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.CreateForm">
        <short>Creates a Form or component, owned by Application.</short>
        <descr>
          <p>
            Note: The name is confusing and only kept for Delphi compatibility.
            It can actually create any kind of component.
          </p><p>
            Creates a Component instance of the given class,
            sets the pointer to the component variable.
          </p><p>
            If it is a form it will be added to the application's forms list.
          </p><p>
            A splash form is shown immediately.
          </p>
        </descr>
        <seealso/>
      <notes><note>and loads the component?</note><note>If it is a form it will be added to the application's forms list.?</note>
        </notes>
      </element>
      <element name="TApplication.CreateForm.InstanceClass">
        <short>The component class.</short>
      </element>
      <element name="TApplication.CreateForm.Reference">
        <short>The variable receiving the new component reference.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.UpdateMainForm">
        <short>When MainForm is Nil, this form becomes the application MainForm.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplication.UpdateMainForm.AForm">
        <short>The form that may become the MainForm.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.QueueAsyncCall">
        <short>Inserts an asynchronous call into the queue.</short>
        <descr>This is thread safe.</descr>
        <errors>Exceptions on various inconsistencies of the queue.
        </errors>
        <seealso/>
        <example file="forms/tapplication_queueasynccall.pas"/>
      </element>
      <element name="TApplication.QueueAsyncCall.AMethod">
        <short>The method to call asynchronously.</short>
      </element>
      <element name="TApplication.QueueAsyncCall.Data">
        <short>The argument passed to the method.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveAsyncCalls">
        <short>Removes all calls added via QueueAsyncCall.
        </short>
        <descr>This is thread safe.
        </descr>
        <errors>Exceptions on various inconsistencies of the queue.
        </errors>
      </element>
      <element name="TApplication.RemoveAsyncCalls.AnObject">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ReleaseComponent">
        <short>Safe destruction of a component, can be requested by the component itself.
        </short>
        <descr>Unless the application is shutting down, all requests are queued.
          Queued requests are processed when the application is not currently processing a message.
        </descr>
        <seealso/>
      </element>
      <element name="TApplication.ReleaseComponent.AComponent">
        <short>The component to destroy.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.ExecuteAction">
        <short>Invokes the <var>OnActionExecute</var> handler.
        </short>
        <descr>
        </descr>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.ExecuteAction">TComponent.ExecuteAction</link>
        </seealso>
      </element>
      <element name="TApplication.ExecuteAction.Result">
        <short>True when the Action was handled.</short>
      </element>
      <element name="TApplication.ExecuteAction.ExeAction">
        <short>The Action to execute.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.UpdateAction">
        <short>Invokes the <var>OnActionUpdate</var> handler.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.UpdateAction">TComponent.UpdateAction</link>
        </seealso>
      </element>
      <element name="TApplication.UpdateAction.Result">
        <short/>
      </element>
      <element name="TApplication.UpdateAction.TheAction">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.HandleException">
        <short>
          <var>HandleException</var> method for handling an exception;
          attempts to maintain program execution if possible, otherwise exits gracefully
        </short>
        <descr>Individual exception handler methods should be supplied by the application programmer,
          to override place-holder entries declared in ancestor classes.<br/>
          This method checks whether the application is required to halt if an exception occurs, or invokes the appropriate handler. <br/>
          It also writes details of the exception to the appropriate place for debugging.
        </descr>
        <errors/>
        <seealso>
          <link id="#fcl.CustApp.TCustomApplication.HandleException">TCustomApplication.HandleException</link>
        </seealso>
      </element>
      <element name="TApplication.HandleException.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.HandleMessage">
        <short>Handles all messages, then enters Idle state.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.HelpCommand">
        <short>Show help</short>
        <descr>Currently relies on OnHelp handlers, CallHelp is not implemented.
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      <notes><note>what?</note>
        </notes>
      </element>
      <element name="TApplication.HelpCommand.Result">
        <short/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplication.HelpCommand.Command">
        <short/>
      </element>
      <element name="TApplication.HelpCommand.Data">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.HelpContext">
        <short>Show context sensitive help.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplication.HelpContext.Result">
        <short>Request handled</short>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplication.HelpContext.Context">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.HelpKeyword">
        <short>Show help for a keyword.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.HelpKeyword.Result">
        <short/>
      </element>
      <element name="TApplication.HelpKeyword.Keyword">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ShowHelpForObject">
        <short>When Sender is a TControl, invoke its ShowHelp method.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ShowHelpForObject.Sender">
        <short>Should be a TControl, else nothing will happen.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveStayOnTop">
        <short>Remove StayOnTop from all forms. Builds a form list for use in RestoreStayOnTop.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.RestoreStayOnTop"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveStayOnTop.ASystemTopAlso">
        <short/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RestoreStayOnTop">
        <short>Restores StayOnTop for all forms changed by RemoveStayOnTop.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.RemoveStayOnTop"/>
        </seealso>
      </element>
      <element name="TApplication.RestoreStayOnTop.ASystemTopAlso">
        <short/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.IsWaiting">
        <short>True if the application is awaiting an event</short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplication.IsWaiting.Result">
        <short>True if the application is in AppWaiting state.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.CancelHint">
        <short>Called when the Hint time has expired, to stop showing the Hint.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.HideHint">
        <short>Hides the Hint window.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.HintMouseMessage">
        <short>Called when the the mouse is over a control with a Hint</short>
        <descr>Does nothing</descr>
        <errors/>
        <seealso/>
      <notes><note>?</note><note>exists for Delphi compatibility only?</note>
        </notes>
      </element>
      <element name="TApplication.HintMouseMessage.Control">
        <short/>
      </element>
      <element name="TApplication.HintMouseMessage.AMessage">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Initialize">
        <short>Initializes the widgetset (and more).
        </short>
        <descr>
        </descr>
        <errors/>
        <seealso>
          <link id="#fcl.CustApp.TCustomApplication.Initialize">TCustomApplication.Initialize</link>
        </seealso>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.MessageBox">
        <short>Display an message dialog with several response buttons.</short>
        <descr>
          <p>The function is used internally to display messages during the handling of <var>Exceptions</var>,
            but is also available to application programmers as an alternative to some of the message dialogs found in <var>Dialogs</var>.
          </p>
          <p>The function returns an integer value corresponding to the button that was pressed; its value can be determined by reference to the constants [IDOK..IDHELP].</p>
        </descr>
        <errors/>
        <seealso>
          <link id="#lcl.Dialogs.MessageDlg">MessageDlg</link>
        </seealso>
        <example file="dialogs/displaymessagebox.pas"/>
      </element>
      <element name="TApplication.MessageBox.Result">
        <short>Indicates the pressed button.</short>
        <descr>Can be one of the following values:<br/>
          IDOK<br/>
          IDCANCEL<br/>
          IDABORT<br/>
          IDRETRY<br/>
          IDIGNORE<br/>
          IDYES<br/>
          IDNO<br/>
          IDCLOSE<br/>
          IDHELP
    &#x9;&#x9;</descr>
      </element>
      <element name="TApplication.MessageBox.Text">
        <short>The text in the MessageBox.</short>
        <descr/>
      </element>
      <element name="TApplication.MessageBox.Caption">
        <short>The Caption of the MessageBox.</short>
        <descr/>
      </element>
      <element name="TApplication.MessageBox.Flags">
        <short>The icon and buttons appearing in the box.
        </short>
        <descr>
          <p>
            Several constants are declared in the LCLType unit.
          </p><p>
            Add (better: OR) an icon constant and a buttons constant, for example<br/>
  &#x9;&#x9;      MB_ABORTRETRYIGNORE + MR_ICONQUESTION will cause the application to display a query (?) icon in a box with three buttons: <br/>
            ABORT RETRY IGNORE.
          </p><p>
            Buttons can be one of:
          </p><p>
             MB_OK<br/>
             MB_OKCANCEL<br/>
             MB_ABORTRETRYIGNORE<br/>
             MB_YESNOCANCEL<br/>
             MB_YESNO<br/>
             MB_RETRYCANCEL
          </p><p>
            The icon can be one of:
          </p><p>
            MB_ICONHAND<br/>
            MB_ICONQUESTION<br/>
            MB_ICONEXCLAMATION<br/>
            MB_ICONASTERISK<br/>
            MB_ICONWARNING = MB_ICONEXCLAMATION<br/>
            MB_ICONERROR = MB_ICONHAND<br/>
            MB_ICONSTOP = MB_ICONHAND<br/>
            MB_ICONINFORMATION = MB_ICONASTERISK
          </p>
        </descr>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Minimize">
        <short>Asks the widgetset to minimize the application.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ModalStarted">
        <short>Called when a form is shown modally.</short>
        <descr>Invokes all OnModalBegin handlers when entering Modal state.
        </descr>
        <seealso>
          <link id="TApplication.ModalFinished"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ModalFinished">
        <short>Called when a modal form is closed.</short>
        <descr>Invokes all OnModalEnd handlers when exiting Modal state.
        </descr>
        <seealso>
          <link id="TApplication.ModalStarted"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Restore">
        <short>Restores the previously minimized application.
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.Minimize"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Notification">
        <short>Invokes the notification handlers.
        </short>
        <descr>Special handling, here: Clears the reference to a removed component,
          terminates the application when the MainForm is removed.
        </descr>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Notification">TComponent.Notification</link>
        </seealso>
      </element>
      <element name="TApplication.Notification.AComponent">
        <short/>
      </element>
      <element name="TApplication.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ProcessMessages">
        <short>
          Call this method during lengthy operations, to keep the GUI responsive.
        </short>
        <descr>
          Processes all waiting messages, then the queued asynchronous callbacks.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Idle">
        <short>Invoked when the application enters the idle state.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.Idle.Wait">
        <short>Wait for next message?</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Run" link="#fcl.CustApp.TCustomApplication.Run">
        <short>MainForm is loaded and control is passed to the event loop.
        </short>
        <descr>
        </descr>
        <errors/>
        <seealso>
          <link id="TApplication.RunLoop"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ShowException" link="#fcl.CustApp.TCustomApplication.ShowException">
        <short>Shows the exception message and asks the user to abort or continue.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ShowException.E">
        <short>The exception to show.
        </short>
        <seealso>
          <link id="#rtl.sysutils.exception"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Terminate" link="#fcl.CustApp.TCustomApplication.Terminate">
        <short>The application is terminated and the component engine is shutdown.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.DisableIdleHandler">
        <short>Blocks Idle handling. Can be called moreoften, every call must be followed by EnableIdleHandler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.EnableIdleHandler"/>
        </seealso>
      <notes><note>what does this mean to application behaviour?</note>
        </notes>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.EnableIdleHandler">
        <short>Resume Idle handling.
        </short>
        <descr/>
        <errors>GDB exception when not previously disabled.
        </errors>
        <seealso>
          <link id="TApplication.DisableIdleHandler"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.NotifyUserInputHandler">
        <short>Notifies all user input handlers
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtUserInput"/>
        </seealso>
      <notes><note>of what?</note>
        </notes>
      </element>
      <element name="TApplication.NotifyUserInputHandler.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.NotifyKeyDownBeforeHandler">
        <short>Notifies all ahtKeyDownBefore handlers.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtKeyDownBefore"/>
        </seealso>
      </element>
      <element name="TApplication.NotifyKeyDownBeforeHandler.Sender">
        <short/>
      </element>
      <element name="TApplication.NotifyKeyDownBeforeHandler.Key">
        <short/>
      </element>
      <element name="TApplication.NotifyKeyDownBeforeHandler.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.NotifyKeyDownHandler">
        <short>Notifies all ahtKeyDownAfter handlers, eventually reacts on F1 (Help).
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtKeyDownAfter"/>
        </seealso>
      </element>
      <element name="TApplication.NotifyKeyDownHandler.Sender">
        <short/>
      </element>
      <element name="TApplication.NotifyKeyDownHandler.Key">
        <short/>
      </element>
      <element name="TApplication.NotifyKeyDownHandler.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ControlKeyDown">
        <short>Handles KeyDown events in a Control, e.g. handles navigation keys.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ControlKeyDown.Sender">
        <short/>
      </element>
      <element name="TApplication.ControlKeyDown.Key">
        <short/>
      </element>
      <element name="TApplication.ControlKeyDown.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ControlKeyUp">
        <short>Handles KeyUp events in a Control, e.g. handles Enter and Esc keys.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ControlKeyUp.Sender">
        <short/>
      </element>
      <element name="TApplication.ControlKeyUp.Key">
        <short/>
      </element>
      <element name="TApplication.ControlKeyUp.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnIdleHandler">
        <short>Adds an application Idle handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtIdle"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnIdleHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnIdleHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnIdleHandler">
        <short>Removes an application Idle handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtIdle"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnIdleHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnIdleEndHandler">
        <short>Adds an application IdleEnd handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtIdleEnd"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnIdleEndHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnIdleEndHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnIdleEndHandler">
        <short>Removes an application IdleEnd handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtIdleEnd"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnIdleEndHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnUserInputHandler">
        <short>Adds an application user input handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtUserInput"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnUserInputHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnUserInputHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnUserInputHandler">
        <short>Removes an application user input handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtUserInput"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnUserInputHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnKeyDownBeforeHandler">
        <short>Adds an application key down before interface handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtKeyDownBefore"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnKeyDownBeforeHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnKeyDownBeforeHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnKeyDownBeforeHandler">
        <short>Removes an application key down before interface handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtKeyDownBefore"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnKeyDownBeforeHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnKeyDownHandler">
        <short>Adds an application key down after interface handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtKeyDownAfter"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnKeyDownHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnKeyDownHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnKeyDownHandler">
        <short>Removes an application key down after interface handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtKeyDownAfter"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnKeyDownHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnActivateHandler">
        <short>Adds an application activation handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtActivate"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnActivateHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnActivateHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnActivateHandler">
        <short>Removes an application activation handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtActivate"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnActivateHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnDeactivateHandler">
        <short>Adds an application deactivation handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtDeactivate"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnDeactivateHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnDeactivateHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnDeactivateHandler">
        <short>Removes an application deactivation handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtDeactivate"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnDeactivateHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnExceptionHandler">
        <short>Adds an application exception handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtException"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnExceptionHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnExceptionHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnExceptionHandler">
        <short>Removes an application exception handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtException"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnExceptionHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnEndSessionHandler">
        <short>Adds an application logoff handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtEndSession"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplication.AddOnEndSessionHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnEndSessionHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnEndSessionHandler">
        <short>Removes an application logoff handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtEndSession"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TApplication.RemoveOnEndSessionHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnQueryEndSessionHandler">
        <short>Adds an application logoff query handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtQueryEndSession"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnQueryEndSessionHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnQueryEndSessionHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnQueryEndSessionHandler">
        <short>Removes an application logoff query handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtQueryEndSession"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnQueryEndSessionHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnMinimizeHandler">
        <short>Adds an application minimizing handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtMinimize"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnMinimizeHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnMinimizeHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnMinimizeHandler">
        <short>Removes an application minimizing handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtMinimize"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnMinimizeHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnModalBeginHandler">
        <short>Adds an application becoming modal handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtModalBegin"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnModalBeginHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnModalBeginHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnModalBeginHandler">
        <short>Removes an application becoming modal handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtModalBegin"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnModalBeginHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnModalEndHandler">
        <short>Adds an application exiting modal state handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtModalEnd"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnModalEndHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnModalEndHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnModalEndHandler">
        <short>Removes an application exiting modal state handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtModalEnd"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnModalEndHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnRestoreHandler">
        <short>Adds an application exiting minimized state handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtRestore"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnRestoreHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnRestoreHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnRestoreHandler">
        <short>Removes an application exiting minimized state handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtRestore"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnRestoreHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnDropFilesHandler">
        <short>Adds an application dropped files handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtDropFiles"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnDropFilesHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnDropFilesHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnDropFilesHandler">
        <short>Removes an application dropped files handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtDropFiles"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnDropFilesHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnHelpHandler">
        <short>Adds an application Help handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtHelp"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnHelpHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnHelpHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnHelpHandler">
        <short>Removes an application Help handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtHelp"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnHelpHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnHintHandler">
        <short>Adds an application Hint handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtHint"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnHintHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnHintHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnHintHandler">
        <short>Removes an application Hint handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtHint"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnHintHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnShowHintHandler">
        <short>Adds an application Hint show handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtShowHint"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnShowHintHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnShowHintHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnShowHintHandler">
        <short>Removes an application Hint show handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtShowHint"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnShowHintHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnGetMainFormHandleHandler">
        <short>Adds an application MainForm Handle handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtGetMainFormHandle"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnGetMainFormHandleHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnGetMainFormHandleHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnGetMainFormHandleHandler">
        <short>Removes an application MainForm Handle handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtGetMainFormHandle"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnGetMainFormHandleHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveAllHandlersOfObject">
        <short>Removes all handlers implemented in the given object.
         </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveAllHandlersOfObject.AnObject">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.DoBeforeMouseMessage">
        <short>Things to be done before a mouse message is processed.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.DoBeforeMouseMessage.CurMouseControl">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.IsShortcut">
        <short>Asks all shortcut handlers to handle the key.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.IsShortcut.Result">
        <short>True when the shortcut was handled.</short>
      </element>
      <element name="TApplication.IsShortcut.Message">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfQueryEndSession">
        <short>Called by the interface to confirm the end of a session.</short>
        <descr>Asks all QueryEndSession handlers to confirm termination of the application.
        </descr>
        <seealso>
          <link id="TApplication.OnQueryEndSession"/>
          <link id="TApplicationHandlerType.ahtQueryEndSession"/>
        </seealso>
      </element>
      <element name="TApplication.IntfQueryEndSession.Cancel">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfEndSession">
        <short>Called by the interface when the session ends.
        </short>
        <descr>Notifies all OnEndSession handlers.
        </descr>
        <seealso>
          <link id="TApplication.OnEndSession"/>
          <link id="TApplicationHandlerType.ahtEndSession"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfAppActivate">
        <short>Called by the interface on application activation
        </short>
        <descr>Notifies all activation handlers.
        </descr>
        <seealso>
          <link id="TApplication.OnActivate"/>
          <link id="TApplicationHandlerType.ahtActivate"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfAppDeactivate">
        <short>Called by the interface on application deactivation
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.OnDeactivate"/>
          <link id="TApplicationHandlerType.ahtDeactivate"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfAppMinimize">
        <short>Called by the interface when the application is minimized.
          </short>
        <descr/>
        <seealso>
          <link id="TApplication.OnMinimize"/>
          <link id="TApplicationHandlerType.ahtMinimize"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfAppRestore">
        <short>Called by the interface when the application is restored.
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.OnRestore"/>
          <link id="TApplicationHandlerType.ahtRestore"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfDropFiles">
        <short>Called by the interface when files have been dropped.
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.OnDropFiles"/>
          <link id="TApplicationHandlerType.ahtDropFiles"/>
        </seealso>
      </element>
      <element name="TApplication.IntfDropFiles.FileNames">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfThemeOptionChange">
        <short>Called by the interface when a theme option has changed.
        </short>
        <descr/>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.IntfThemeOptionChange.AThemeServices">
        <short/>
      </element>
      <element name="TApplication.IntfThemeOptionChange.AOption">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.IsRTLLang">
        <short>Checks the given language name for right-to-left reading.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.IsRTLLang.Result">
        <short/>
      </element>
      <element name="TApplication.IsRTLLang.ALang">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.Direction">
        <short>Checks the given language name for right-to-left reading.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.Direction.Result">
        <short/>
      </element>
      <element name="TApplication.Direction.ALang">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.DoArrowKey">
        <short>Uses arrow keys for navigation, if enabled.
        </short>
      </element>
      <element name="TApplication.DoArrowKey.AControl">
        <short>The control receiving the key.</short>
      </element>
      <element name="TApplication.DoArrowKey.Key">
        <short>The virtual key; becomes VK_UNKNOWN when handled.</short>
      </element>
      <element name="TApplication.DoArrowKey.Shift">
        <short>The active modifier keys.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.DoEscapeKey">
        <short>Interprets Esc as Cancel action, if applicable.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplication.DoEscapeKey.AControl">
        <short>The control receiving the key.</short>
      </element>
      <element name="TApplication.DoEscapeKey.Key">
        <short>The virtual key; becomes VK_UNKNOWN when handled.</short>
      </element>
      <element name="TApplication.DoEscapeKey.Shift">
        <short>The active modifier keys.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.DoReturnKey">
        <short>Interprets Enter as the default action, if applicable.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplication.DoReturnKey.AControl">
        <short>The control receiving the key.</short>
      </element>
      <element name="TApplication.DoReturnKey.Key">
        <short>The virtual key; becomes VK_UNKNOWN when handled.</short>
      </element>
      <element name="TApplication.DoReturnKey.Shift">
        <short>The active modifier keys.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.DoTabKey">
        <short>Uses the Tab key for navigation, if enabled.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.DoTabKey.AControl">
        <short>The control receiving the key.</short>
      </element>
      <element name="TApplication.DoTabKey.Key">
        <short>The virtual key; becomes VK_UNKNOWN when handled.</short>
      </element>
      <element name="TApplication.DoTabKey.Shift">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Active">
        <short>True if the application has the focus.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ApplicationType">
        <short>The type of the application (ie the sort of device for which it is intended).</short>
        <descr>
          <p>The type of the application:</p>
          <p>Default, Desktop, Handheld, PDA, Smartphone</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.BidiMode">
        <short>The bidirectional mode to use.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.CaptureExceptions">
        <short>Enables exception handling by Application.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.FindGlobalComponentEnabled">
        <short>Enables searching for global components by name.
        </short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Flags">
        <short>Application state flags.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Hint">
        <short>The current Hint text.</short>
        <descr>
          <p>
            A hint is a small pop-up mesage that appears briefly
            while the mouse hovers over a control.
          </p><p>
            It usually displays useful information about how to use an object or what data should be entered, etc
          </p><p>
            Several properties allow to customize the delay before a Hint is shown,
            after an mouse move, and how long it will stay visible.
          </p>
        </descr>
        <seealso>
          <link id="TApplication.HintPause"/>
          <link id="TApplication.HintHidePause"/>
          <link id="TApplication.HintHidePausePerChar"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintColor">
        <short>The color of Hint windows.</short>
        <descr/>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintHidePause">
        <short>How long a Hint stays visible, after an mouse move.
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintHidePausePerChar">
        <short>How much a keystroke extends the time a Hint stays visible (added to HintHidePause).
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.HintHidePause"/>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintPause">
        <short>The delay before a Hint is shown.
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintShortCuts">
        <short>Enables the display of keyboard shortcuts (e.g. on menu entries).
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      <notes><note>not implemented?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintShortPause">
        <short>The pause before a different Hint is displayed.</short>
        <descr/>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Icon">
        <short>The icon associated with this application.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.MainForm">
        <short>The application terminates when this form is closed.
        </short>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.MainFormHandle">
        <short>The Handle of the MainForm</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.OnGetMainFormHandle"/>
          <link id="TApplicationHandlerType.ahtGetMainFormHandle"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.MainFormOnTaskBar">
        <short>
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ModalLevel">
        <short>The number of modal forms shown.</short>
        <descr>Tracks modal forms showing another form modally.
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.MouseControl">
        <short>The control currently under the mouse.</short>
        <descr>Used to detect mouse entering and leaving a control.
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Navigation">
        <short>Allows to switch between controls by pressing keys.
        </short>
        <descr>
          <p>These keys can be enabled for navigation:</p>
          <ul>
          <li>
            The Tab key moves the Focus to the next (or previous) control in TabOrder.
          </li><li>
            The Enter key triggers the default action.
          </li><li>
            The Escape key triggers the Cancel action.
          </li><li>
            The F1 key brings up context sensitive help.
          </li><li>
            The Arrow keys move the focus.
          </li>
          </ul>
        </descr>
        <seealso>
          <link id="TApplicationNavigationOptions"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnActionExecute">
        <short>Default handler for unhandled Actions
        </short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnActionUpdate">
        <short>Default handler for unhandled Action updates
        </short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnActivate">
        <short>Event handler for activation of the application.</short>
        <seealso>
          <link id="TApplicationHandlerType.ahtActivate"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnDeactivate">
        <short>Event handler for deactivation of the application.</short>
        <seealso>
          <link id="TApplicationHandlerType.ahtDeactivate"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnDestroy">
        <short>
        </short>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnDropFiles">
        <short>The default handler for dropped files
        </short>
        <seealso>
          <link id="TCustomForm.OnDropFiles"/>
          <link id="TCustomForm.AllowDropFiles"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnEndSession">
        <short>Event handler for ending a session of the application
        </short>
        <seealso>
          <link id="TApplicationHandlerType.ahtEndSession"/>
        </seealso>
      <notes><note>or logoff?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnGetMainFormHandle">
        <short/>
        <descr>
        </descr>
        <seealso>
          <link id="TApplicationHandlerType.ahtGetMainFormHandle"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnHelp">
        <short>Event handler when help is requested.</short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtHelp"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnHint">
        <short>Event handler when a hint is requested.</short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtHint"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnIdle">
        <short>Event handler for application entering Idle state.</short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtIdle"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnIdleEnd">
        <short>Event handler for application leaving Idle state.</short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtIdleEnd"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnMinimize">
        <short>Event handler for application minimized.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnModalBegin">
        <short>Event handler for a modal form opened (application entering modal mode).
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplicationHandlerType.ahtModalBegin"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnModalEnd">
        <short>Event handler for all modal forms closed (application exiting modal mode).
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplicationHandlerType.ahtModalEnd"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnQueryEndSession">
        <short>This event handler can deny to end the session.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtQueryEndSession"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnRestore">
        <short>Event handler for application restored (from minimized/maximized state).</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnShortcut">
        <short>This event handler can interpret keystrokes as shortcuts,
          before the normal target handles the key.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtKeyDownBefore"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnShowHint">
        <short>Event handler for showing an Hint.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtShowHint"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnUserInput">
        <short/>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtUserInput"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ShowButtonGlyphs">
        <short>Allows to override the platform default for glyphs on buttons.
        </short>
        <descr>Some platforms show glyphs on all buttons, others don't.
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ShowHint">
        <short>Enables Hint display</short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ShowMainForm">
        <short>Allows to show or hide the main form, on application start.
          Default TRUE.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ShowMenuGlyphs">
        <short>Sets the default policy for showing or hiding glyph images in menus</short>
        <descr>
        </descr>
        <seealso>
          <link id="#LCL.Menus.TGlyphShowMode"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.TaskBarBehavior">
        <short>How forms are represented in the TaskBar.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Title" link="#fcl.CustApp.TCustomApplication.Title"/>
<!-- constant Visibility: default -->
      <element name="DefHintColor">
        <short>The default hint window color.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefHintPause">
        <short>The default pause before hint window displays (ms).</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefHintShortPause">
        <short>The default Hint reshow pause.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefHintHidePause">
        <short>The default pause before hint is hidden (ms).</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefHintHidePausePerChar">
        <short>The default pause added to DefHintHidePause (ms).</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
<!-- object Visibility: default -->
      <element name="TApplicationProperties">
        <short>A component that simplifies access to the properties of the current application.</short>
        <descr>
          <p>TApplication Properties can be set as a local default set of properties to be used for any new instance of TApplication</p>
        </descr>
        <errors/>
        <seealso/>
      <notes><note>?</note><note>???</note>
        </notes>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FCaptureExceptions" link="TApplicationProperties.CaptureExceptions"/>
      <element name="TApplicationProperties.FHelpFile" link="TApplicationProperties.HelpFile"/>
      <element name="TApplicationProperties.FHint" link="TApplicationProperties.Hint"/>
      <element name="TApplicationProperties.FHintColor" link="TApplicationProperties.HintColor"/>
      <element name="TApplicationProperties.FHintHidePause" link="TApplicationProperties.HintHidePause"/>
      <element name="TApplicationProperties.FHintPause" link="TApplicationProperties.HintPause"/>
      <element name="TApplicationProperties.FHintShortCuts" link="TApplicationProperties.HintShortCuts"/>
      <element name="TApplicationProperties.FHintShortPause" link="TApplicationProperties.HintShortPause"/>
      <element name="TApplicationProperties.FOnDropFiles" link="TApplicationProperties.OnDropFiles"/>
      <element name="TApplicationProperties.FOnEndSession" link="TApplicationProperties.OnEndSession"/>
      <element name="TApplicationProperties.FOnException" link="TApplicationProperties.OnException"/>
      <element name="TApplicationProperties.FOnGetMainFormHandle" link="TApplicationProperties.OnGetMainFormHandle"/>
      <element name="TApplicationProperties.FOnHelp" link="TApplicationProperties.OnHelp"/>
      <element name="TApplicationProperties.FOnHint" link="TApplicationProperties.OnHint"/>
      <element name="TApplicationProperties.FOnIdle" link="TApplicationProperties.OnIdle"/>
      <element name="TApplicationProperties.FOnIdleEnd" link="TApplicationProperties.OnIdleEnd"/>
      <element name="TApplicationProperties.FOnMinimize" link="TApplicationProperties.OnMinimize"/>
      <element name="TApplicationProperties.FOnModalBegin" link="TApplicationProperties.OnModalBegin"/>
      <element name="TApplicationProperties.FOnModalEnd" link="TApplicationProperties.OnModalEnd"/>
      <element name="TApplicationProperties.FOnQueryEndSession" link="TApplicationProperties.OnQueryEndSession"/>
      <element name="TApplicationProperties.FOnRestore" link="TApplicationProperties.OnRestore"/>
      <element name="TApplicationProperties.FOnShowHint" link="TApplicationProperties.OnShowHint"/>
      <element name="TApplicationProperties.FOnUserInput" link="TApplicationProperties.OnUserInput"/>
      <element name="TApplicationProperties.FShowButtonGlyphs" link="TApplicationProperties.ShowButtonGlyphs"/>
      <element name="TApplicationProperties.FShowHint" link="TApplicationProperties.ShowHint"/>
      <element name="TApplicationProperties.FShowMainForm" link="TApplicationProperties.ShowMainForm"/>
      <element name="TApplicationProperties.FShowMenuGlyphs" link="TApplicationProperties.ShowMenuGlyphs"/>
      <element name="TApplicationProperties.FTitle" link="TApplicationProperties.Title"/>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetCaptureExceptions" link="TApplicationProperties.CaptureExceptions"/>
      <element name="TApplicationProperties.SetCaptureExceptions.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHelpFile" link="TApplicationProperties.HelpFile"/>
      <element name="TApplicationProperties.SetHelpFile.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHint" link="TApplicationProperties.Hint"/>
      <element name="TApplicationProperties.SetHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintColor" link="TApplicationProperties.HintColor"/>
      <element name="TApplicationProperties.SetHintColor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintHidePause" link="TApplicationProperties.HintHidePause"/>
      <element name="TApplicationProperties.SetHintHidePause.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintPause" link="TApplicationProperties.HintPause"/>
      <element name="TApplicationProperties.SetHintPause.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintShortCuts" link="TApplicationProperties.HintShortCuts"/>
      <element name="TApplicationProperties.SetHintShortCuts.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintShortPause" link="TApplicationProperties.HintShortPause"/>
      <element name="TApplicationProperties.SetHintShortPause.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetShowButtonGlyphs" link="TApplicationProperties.ShowButtonGlyphs"/>
      <element name="TApplicationProperties.SetShowButtonGlyphs.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetShowMenuGlyphs" link="TApplicationProperties.ShowMenuGlyphs"/>
      <element name="TApplicationProperties.SetShowMenuGlyphs.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetShowHint" link="TApplicationProperties.ShowHint"/>
      <element name="TApplicationProperties.SetShowHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetShowMainForm" link="TApplicationProperties.ShowMainForm"/>
      <element name="TApplicationProperties.SetShowMainForm.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetTitle" link="TApplicationProperties.Title"/>
      <element name="TApplicationProperties.SetTitle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnException" link="TApplicationProperties.OnException"/>
      <element name="TApplicationProperties.SetOnException.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnGetMainFormHandle" link="TApplicationProperties.OnGetMainFormHandle"/>
      <element name="TApplicationProperties.SetOnGetMainFormHandle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnIdle" link="TApplicationProperties.OnIdle"/>
      <element name="TApplicationProperties.SetOnIdle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnIdleEnd" link="TApplicationProperties.OnIdleEnd"/>
      <element name="TApplicationProperties.SetOnIdleEnd.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnEndSession" link="TApplicationProperties.OnEndSession"/>
      <element name="TApplicationProperties.SetOnEndSession.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnQueryEndSession" link="TApplicationProperties.OnQueryEndSession"/>
      <element name="TApplicationProperties.SetOnQueryEndSession.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnMinimize" link="TApplicationProperties.OnMinimize"/>
      <element name="TApplicationProperties.SetOnMinimize.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnModalBegin" link="TApplicationProperties.OnModalBegin"/>
      <element name="TApplicationProperties.SetOnModalBegin.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnModalEnd" link="TApplicationProperties.OnModalEnd"/>
      <element name="TApplicationProperties.SetOnModalEnd.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnRestore" link="TApplicationProperties.OnRestore"/>
      <element name="TApplicationProperties.SetOnRestore.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnDropFiles" link="TApplicationProperties.OnDropFiles"/>
      <element name="TApplicationProperties.SetOnDropFiles.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnHelp" link="TApplicationProperties.OnHelp"/>
      <element name="TApplicationProperties.SetOnHelp.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnHint" link="TApplicationProperties.OnHint"/>
      <element name="TApplicationProperties.SetOnHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnShowHint" link="TApplicationProperties.OnShowHint"/>
      <element name="TApplicationProperties.SetOnShowHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnUserInput" link="TApplicationProperties.OnUserInput"/>
      <element name="TApplicationProperties.SetOnUserInput.AValue">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TApplicationProperties.Create">
        <short>
          <var>Create</var> - constructor for TApplicationProperties: calls inherited <var>Create</var>, then sets some defaults if new application is being designed, or loads local values from existing application </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
          <link id="#LCL.LCLClasses.TLCLComponent.Create">TLCLComponent.Create</link>
        </seealso>
      </element>
      <element name="TApplicationProperties.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TApplicationProperties.Destroy"/>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.CaptureExceptions" link="TApplication.CaptureExceptions"/>
      <element name="TApplicationProperties.HelpFile" link="TApplication.HelpFile"/>
      <element name="TApplicationProperties.Hint" link="TApplication.Hint"/>
      <element name="TApplicationProperties.HintColor" link="TApplication.HintColor"/>
      <element name="TApplicationProperties.HintHidePause" link="TApplication.HintHidePause"/>
      <element name="TApplicationProperties.HintPause" link="TApplication.HintPause"/>
      <element name="TApplicationProperties.HintShortCuts" link="TApplication.HintShortCuts"/>
      <element name="TApplicationProperties.HintShortPause" link="TApplication.HintShortPause"/>
      <element name="TApplicationProperties.OnDropFiles" link="TApplication.OnDropFiles"/>
      <element name="TApplicationProperties.OnEndSession" link="TApplication.OnEndSession"/>
      <element name="TApplicationProperties.OnException" link="TApplication.OnException"/>
      <element name="TApplicationProperties.OnGetMainFormHandle" link="TApplication.OnGetMainFormHandle"/>
      <element name="TApplicationProperties.OnHelp" link="TApplication.OnHelp"/>
      <element name="TApplicationProperties.OnHint" link="TApplication.OnHint"/>
      <element name="TApplicationProperties.OnIdle" link="TApplication.OnIdle"/>
      <element name="TApplicationProperties.OnIdleEnd" link="TApplication.OnIdleEnd"/>
      <element name="TApplicationProperties.OnMinimize" link="TApplication.OnMinimize"/>
      <element name="TApplicationProperties.OnModalBegin" link="TApplication.OnModalBegin"/>
      <element name="TApplicationProperties.OnModalEnd" link="TApplication.OnModalEnd"/>
      <element name="TApplicationProperties.OnQueryEndSession" link="TApplication.OnQueryEndSession"/>
      <element name="TApplicationProperties.OnRestore" link="TApplication.OnRestore"/>
      <element name="TApplicationProperties.OnShowHint" link="TApplication.OnShowHint"/>
      <element name="TApplicationProperties.OnUserInput" link="TApplication.OnUserInput"/>
      <element name="TApplicationProperties.ShowButtonGlyphs" link="TApplication.ShowButtonGlyphs"/>
      <element name="TApplicationProperties.ShowHint" link="TApplication.ShowHint"/>
      <element name="TApplicationProperties.ShowMainForm" link="TApplication.ShowMainForm"/>
      <element name="TApplicationProperties.ShowMenuGlyphs" link="TApplication.ShowMenuGlyphs"/>
      <element name="TApplicationProperties.Title" link="TApplication.Title"/>
<!-- object Visibility: default -->
      <element name="TIDesigner">
        <short>The abstract base class for visual Form Designers</short>
        <descr>The whole description looks like guesswork :-(
          <br/>It should become more informative.
        </descr>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- function Visibility: public -->
      <element name="TIDesigner.IsDesignMsg">
        <short>
          <var>IsDesignMsg</var> - receives a message from Sender, and returns True if it is a design message</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TIDesigner.IsDesignMsg.Result">
        <short/>
      </element>
      <element name="TIDesigner.IsDesignMsg.Sender">
        <short/>
      </element>
      <element name="TIDesigner.IsDesignMsg.Message">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.Modified">
        <short>Method when design is <var>Modified</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.Notification">
        <short>
          <var>Notification</var> that the supplied Operation has been applied to the specified Component</short>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>???</note>
        </notes>
      </element>
      <element name="TIDesigner.Notification.AComponent">
        <short/>
      </element>
      <element name="TIDesigner.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.PaintGrid">
        <short>
          <var>PaintGrid</var> - method for painting the grid in the designer</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.ValidateRename">
        <short>
          <var>ValidateRename</var> - method to validate the Rename process</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TIDesigner.ValidateRename.AComponent">
        <short/>
      </element>
      <element name="TIDesigner.ValidateRename.CurName">
        <short/>
      </element>
      <element name="TIDesigner.ValidateRename.NewName">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TIDesigner.GetShiftState">
        <short>
          <var>GetShiftState</var> - returns the value of the shift state (whether shifted, Cntl key, Alt key etc)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TIDesigner.GetShiftState.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.SelectOnlyThisComponent">
        <short>
          <var>SelectOnlyThisComponent</var> - method to select only the currrent component in the designer</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TIDesigner.SelectOnlyThisComponent.AComponent">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TIDesigner.UniqueName">
        <short>
          <var>UniqueName</var> - returns a Unique name for the designer, using the BaseName as a starting point</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TIDesigner.UniqueName.Result">
        <short/>
      </element>
      <element name="TIDesigner.UniqueName.BaseName">
        <short/>
      </element>
<!-- object Visibility: default -->
      <element name="TFormPropertyStorage">
        <short>
          <var>TFormPropertyStorage</var> - class for storage of a Form's properties</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFormPropertyStorage.FormCreate">
        <short/>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TFormPropertyStorage.FormCreate.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFormPropertyStorage.FormClose">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TFormPropertyStorage.FormClose.Sender">
        <short/>
      </element>
      <element name="TFormPropertyStorage.FormClose.CloseAction">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TFormPropertyStorage.Create" link="#rtl.Classes.TComponent.Create"/>
      <element name="TFormPropertyStorage.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TFormPropertyStorage.Destroy" link="#rtl.Classes.TComponent.Destroy"/>
<!-- function Visibility: default -->
      <element name="KeysToShiftState">
        <short>Converts modifier keys from the LParam of a mouse message to a TShiftState.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#RTL.Classes.TShiftState"/>
          <link id="ShiftStateToKeys"/>
          <link id="KeyDataToShiftState"/>
          <link id="#LCL.LCLType.MK_Shift"/>
          <link id="#LCL.LCLType.MK_Control"/>
          <link id="#LCL.LCLType.MK_LButton"/>
          <link id="#LCL.LCLType.MK_RButton"/>
          <link id="#LCL.LCLType.MK_MButton"/>
          <link id="#LCL.LCLType.MK_XBUTTON1"/>
          <link id="#LCL.LCLType.MK_XBUTTON2"/>
        </seealso>
      </element>
      <element name="KeysToShiftState.Result">
        <short/>
      </element>
      <element name="KeysToShiftState.Keys">
        <short>The asynchronous keyboard state</short>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- function Visibility: default -->
      <element name="KeyDataToShiftState">
        <short>Converts modifier keys from the LParam of a keyboard message (WM_KEYUP for example) to a TShiftState
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#RTL.Classes.TShiftState"/>
          <link id="KeysToShiftState"/>
          <link id="ShiftStateToKeys"/>
          <link id="#LCL.LCLType.MK_Shift"/>
          <link id="#LCL.LCLType.MK_Control"/>
          <link id="#LCL.LCLType.MK_LButton"/>
          <link id="#LCL.LCLType.MK_RButton"/>
          <link id="#LCL.LCLType.MK_MButton"/>
          <link id="#LCL.LCLType.MK_XBUTTON1"/>
          <link id="#LCL.LCLType.MK_XBUTTON2"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="KeyDataToShiftState.Result">
        <short/>
      </element>
      <element name="KeyDataToShiftState.KeyData">
        <short/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- function Visibility: default -->
      <element name="ShiftStateToKeys">
        <short>Converts a shift state into a key state value compatible with the key state of a Windows API LParam</short>
        <descr>The Keys value is of the type PtrUInt and is a or'ed combination of the following constants:
        MK_Shift, MK_Control, MK_LButton, MK_RButton, MK_MButton, MK_XBUTTON1 and MK_XBUTTON2</descr>
        <errors>
        </errors>
        <seealso>
          <link id="#RTL.Classes.TShiftState"/>
          <link id="KeysToShiftState"/>
          <link id="KeyDataToShiftState"/>
          <link id="#LCL.LCLType.MK_Shift"/>
          <link id="#LCL.LCLType.MK_Control"/>
          <link id="#LCL.LCLType.MK_LButton"/>
          <link id="#LCL.LCLType.MK_RButton"/>
          <link id="#LCL.LCLType.MK_MButton"/>
          <link id="#LCL.LCLType.MK_XBUTTON1"/>
          <link id="#LCL.LCLType.MK_XBUTTON2"/>
        </seealso>
      <notes><note>into what?</note>
        </notes>
      </element>
      <element name="ShiftStateToKeys.Result">
        <short/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="ShiftStateToKeys.ShiftState">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="WindowStateToStr">
        <short>
          <var>WindowStateToStr</var> - converts a Window state to a string</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="WindowStateToStr.Result">
        <short/>
      </element>
      <element name="WindowStateToStr.State">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="StrToWindowState">
        <short>
          <var>StrToWindowState</var> - converts a string to a Window state</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="StrToWindowState.Result">
        <short/>
      </element>
      <element name="StrToWindowState.Name">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="dbgs">
        <short>Formats various typed values into readable text.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="dbgs.Result">
        <short>The formatted value.</short>
      </element>
      <element name="dbgs.State">
        <short/>
      </element>
      <element name="dbgs.Action">
        <short/>
      </element>
      <element name="dbgs.Kind">
        <short/>
      </element>
<!-- alias type Visibility: default -->
      <element name="TFocusState">
        <short/>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- function Visibility: default -->
      <element name="SaveFocusState">
        <short>Returns the remembered control</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="RestoreFocusState"/>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="SaveFocusState.Result">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="RestoreFocusState">
        <short>Remembers the control in LastFocusedControl.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="SaveFocusState"/>
        </seealso>
      </element>
      <element name="RestoreFocusState.FocusState">
        <short/>
      </element>
      <!-- function type Visibility: default -->
      <element name="TGetDesignerFormEvent">
        <short/>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="TGetDesignerFormEvent.Result">
        <short/>
      </element>
      <element name="TGetDesignerFormEvent.APersistent">
        <short/>
      </element>
      <!-- variable Visibility: default -->
      <element name="OnGetDesignerForm">
        <short/>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- function Visibility: default -->
      <element name="GetParentForm">
        <short>The topmost Form containing Control.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetParentForm.Result">
        <short/>
      </element>
      <element name="GetParentForm.Control">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetFirstParentForm">
        <short>Does a recursive search for the first Parent of type TCustomForm.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetFirstParentForm.Result">
        <short/>
      </element>
      <element name="GetFirstParentForm.Control">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetDesignerForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="GetDesignerForm.Result">
        <short/>
      </element>
      <element name="GetDesignerForm.APersistent">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FindRootDesigner">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="FindRootDesigner.Result">
        <short/>
      </element>
      <element name="FindRootDesigner.APersistent">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="IsAccel">
        <short>Searches for the given virtual key, used as an accelerator.</short>
        <descr>An accelerator consists of an ampersand followed by the accelerator key.
          Duplicate ampersands are ignored, they denote an literal (displayed) ampersand.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="IsAccel.Result">
        <short>True when the key is used as an accelerator.</short>
      </element>
      <element name="IsAccel.VK">
        <short>The virtual key (uppercase ASCII) to find.</short>
      </element>
      <element name="IsAccel.Str">
        <short>The string to scan.</short>
      </element>
      <!-- procedure Visibility: default -->
      <element name="NotifyApplicationUserInput">
        <short>Invokes all application user input handlers.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="NotifyApplicationUserInput.Msg">
        <short>The message to process.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="GetShortHint">
        <short>Returns the short version of an Hint string.</short>
        <descr>A short Hint is separated from the long Hint by an '|'.
          When no such character is found, the whole Hint is returned.
        </descr>
        <seealso/>
      </element>
      <element name="GetShortHint.Result">
        <short>The short (or complete) Hint.</short>
      </element>
      <element name="GetShortHint.Hint">
        <short>The string containing both an short and long Hint.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="GetLongHint">
        <short>Returns the long version of an Hint string.</short>
        <descr/>
        <seealso>
          <link id="GetShortHint"/>
        </seealso>
      </element>
      <element name="GetLongHint.Result">
        <short/>
      </element>
      <element name="GetLongHint.Hint">
        <short/>
      </element>
<!-- variable Visibility: default -->
      <element name="Application">
        <short>The TApplication singleton.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="Screen">
        <short>The TScreen singleton.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="ExceptionObject">
        <short>The current exception object</short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: default -->
      <element name="HintWindowClass">
        <short>The class to be used for hints</short>
        <descr/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- variable Visibility: default -->
      <element name="RequireDerivedFormResource">
        <short>When True every form must have a resource. An exception is raised if the resource is missing when creating a form.</short>
        <descr>The form resource is the lfm file compiled into the executable of your application. For this flag it does not matter if it was compiled via an lrs file or via fpcres. The resource is automatically loaded by TForm and therfore any descendant when it is created via Create(Owner). If the resource is missing there is something wrong with either a resource or the unit which contains the faulty form. If the flag is false you will see a blank form and probably search a long time what is wrong. If you set this flag to true you get an exception. 

For creating forms without resources you have 3 options:
<ul><li>Create a TForm class (not a descendant)</li><li>Construct your form using the CreateNew() constructor.</li><li>It is also possible to disable the exception by setting the global variable RequireDerivedFormResource to False. </li>
          </ul>
History:<br/>
Before 0.9.31 there was no exception. Therefore some resourceless forms might use the standard constructor Create(Owner) and will now get exceptions. This change is Delphi compatible and compatible with TFrame and TDataModule components.
</descr>
        <seealso>
        </seealso>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- function type Visibility: default -->
      <element name="TMessageBoxFunction">
        <short>The type of a MessageBox function.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TMessageBoxFunction.Result">
        <short/>
      </element>
      <element name="TMessageBoxFunction.Text">
        <short/>
      </element>
      <element name="TMessageBoxFunction.Caption">
        <short/>
      </element>
      <element name="TMessageBoxFunction.Flags">
        <short/>
      </element>
      <!-- variable Visibility: default -->
      <element name="MessageBoxFunction">
        <short/>
        <descr/>
        <seealso/>
      <notes><note>used where?</note>
        </notes>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefaultBorderIcons">
        <short>Maps form border styles into their border icons.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="CreateWidgetset">
        <short>Creates the widgetset</short>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <element name="CreateWidgetset.AWidgetsetClass">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="FreeWidgetSet">
        <short>Destroys almost all singletons</short>
        <descr/>
        <errors/>
        <seealso/>
      <notes><note>?</note>
        </notes>
      </element>
      <!-- procedure Visibility: default -->
      <element name="Register">
        <short>Registers a few components, declared in this unit.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
    </module>
    <!-- Forms -->
  </package>
</fpdoc-descriptions>
