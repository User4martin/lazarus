<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
  ====================================================================
    MaskEdit
  ====================================================================
-->
    <module name="MaskEdit">
      <short>Defines classes for Mask Editing, ie editing with a masking string in place to obscure the text being entered</short>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="StdCtrls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Controls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LMessages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Graphics">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefaultBlank">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="MaskFieldSeparator">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="MaskNoSave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="mDirReverse">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="mDirUpperCase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="mDirLowerCase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="mDirLiteral">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="mMskAlpha">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="mMskAlphaOpt">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="mMskAlphaNum">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="mMskAlphaNumOpt">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="mMskAscii">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="mMskAsciiOpt">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="mMskNumeric">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="mMskNumericOpt">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="mMskNumSymOpt">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="mMskTimeSeparator">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="mMskDateSeparator">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="EDBEditError">
        <short>
          <i>EDBEditError</i> - Exception class for handling an error in a data-aware Edit box</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TMbcsByteType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMbcsByteType.mbSingleByte">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMbcsByteType.mbLeadByte">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMbcsByteType.mbTrailByte">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TMaskCharType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMaskCharType.mcNone">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMaskCharType.mcLiteral">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMaskCharType.mcIntlLiteral">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMaskCharType.mcDirective">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMaskCharType.mcMask">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMaskCharType.mcMaskOpt">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMaskCharType.mcFieldSeparator">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMaskCharType.mcField">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TMaskDirectives">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMaskDirectives.mdReverseDir">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMaskDirectives.mdUpperCase">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMaskDirectives.mdLowerCase">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMaskDirectives.mdLiteralChar">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TMaskedState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMaskedState.msMasked">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMaskedState.msReEnter">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMaskedState.msDBSetText">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomMaskEdit">
        <short>
          <i>TCustomMaskEdit</i> - base class for <i>TMaskEdit</i>, an Edit box with characters masked out to avoid unauthorised reading</short>
        <descr>Custom Mask Edit: the base type for Mask Edit
</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMaskEdit.FEditMask">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMaskEdit.FMaskBlank">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMaskEdit.FMaxChars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMaskEdit.FMaskSave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMaskEdit.FMaskState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMaskEdit.FCaretPos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMaskEdit.FBtnDownX">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMaskEdit.FOldValue">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomMaskEdit.IsCharAlpha">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.IsCharAlpha.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.IsCharAlpha.AChar">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomMaskEdit.IsCharAlphaNumeric">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.IsCharAlphaNumeric.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.IsCharAlphaNumeric.AChar">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomMaskEdit.DoInputChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.DoInputChar.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.DoInputChar.NewChar">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.DoInputChar.MaskOffset">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomMaskEdit.InputChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.InputChar.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.InputChar.NewChar">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.InputChar.Offset">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomMaskEdit.DeleteSelection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.DeleteSelection.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.DeleteSelection.Value">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.DeleteSelection.Offset">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.DeleteSelection.Len">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomMaskEdit.InputString">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.InputString.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.InputString.Value">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.InputString.NewValue">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.InputString.Offset">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomMaskEdit.AddEditFormat">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.AddEditFormat.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.AddEditFormat.Value">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.AddEditFormat.Active">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomMaskEdit.RemoveEditFormat">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.RemoveEditFormat.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.RemoveEditFormat.Value">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomMaskEdit.FindLiteralChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.FindLiteralChar.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.FindLiteralChar.MaskOffset">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.FindLiteralChar.InChar">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomMaskEdit.GetEditText">
        <short>Get the text in the edit box (the string that has been masked)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.GetEditText.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomMaskEdit.GetMasked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.GetMasked.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomMaskEdit.GetMaskText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.GetMaskText.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomMaskEdit.GetMaxLength">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.GetMaxLength.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomMaskEdit.CharKeys">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.CharKeys.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.CharKeys.CharCode">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomMaskEdit.SetEditText">
        <short>
          <var>SetEditText</var> - specifies the text to appear in the Edit box</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.SetEditText.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomMaskEdit.SetEditMask">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.SetEditMask.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomMaskEdit.SetMaxLength">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.SetMaxLength.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomMaskEdit.SetMaskText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.SetMaskText.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomMaskEdit.DeleteKeys">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.DeleteKeys.CharCode">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomMaskEdit.HomeEndKeys">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.HomeEndKeys.CharCode">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.HomeEndKeys.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomMaskEdit.CursorInc">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.CursorInc.CursorPos">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.CursorInc.Incr">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomMaskEdit.CursorDec">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.CursorDec.CursorPos">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomMaskEdit.ArrowKeys">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.ArrowKeys.CharCode">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.ArrowKeys.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomMaskEdit.CMTextChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.CMTextChanged.Message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMaskEdit.ReformatText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.ReformatText.NewMask">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMaskEdit.SetCursor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.SetCursor.Pos">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMaskEdit.KeyDown" link="#LCL.Controls.TWinControl.KeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.KeyDown.Key">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.KeyDown.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMaskEdit.KeyUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.KeyUp.Key">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.KeyUp.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMaskEdit.KeyPress" link="#LCL.Controls.TWinControl.KeyPress">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.KeyPress.Key">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomMaskEdit.EditCanModify">
        <short>If True, the Edit box is allowed to modify the contents</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.EditCanModify.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMaskEdit.MouseDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.MouseDown.Button">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.MouseDown.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.MouseDown.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.MouseDown.Y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMaskEdit.MouseUp" link="#LCL.Controls.TControl.MouseUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.MouseUp.Button">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.MouseUp.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.MouseUp.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.MouseUp.Y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMaskEdit.DoEnter" link="#LCL.Controls.TWinControl.DoEnter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMaskEdit.DoExit" link="#LCL.Controls.TWinControl.DoExit">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMaskEdit.Reset">
        <short>Reset - put back to its default state with mask appearing in Text box and no string input</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomMaskEdit.GetFirstEditChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.GetFirstEditChar.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomMaskEdit.GetLastEditChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.GetLastEditChar.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomMaskEdit.GetNextEditChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.GetNextEditChar.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.GetNextEditChar.Offset">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomMaskEdit.GetPriorEditChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.GetPriorEditChar.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.GetPriorEditChar.Offset">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomMaskEdit.GetMaxChars">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.GetMaxChars.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomMaskEdit.Validate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMaskEdit.Validate.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.Validate.Value">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.Validate.Pos">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMaskEdit.ValidateError">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMaskEdit.CheckCursor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomMaskEdit.EditMask">
        <short>EditMask - the sequence of characters used to obscure the string being typed (typically a sequence of asterisks)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomMaskEdit.MaskState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomMaskEdit.MaxLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomMaskEdit.Create" link="#rtl.Classes.TComponent.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMaskEdit.Create.AOwner">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomMaskEdit.ValidateEdit">
        <short>Validate the string that has been typed in the edit box</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomMaskEdit.Clear" link="#LCL.StdCtrls.TCustomEdit.Clear">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomMaskEdit.IsMasked">
        <short>
          <var>isMasked</var> - True if the text is masked</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomMaskEdit.EditText">
        <short>The string that has been typed in the Edit Box and obscured by the Masking characters</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomMaskEdit.Text">
        <short>The <var>Text</var> string that is to be masked (or not)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TMaskEdit">
        <short>
          <i>TMaskEdit</i> - an Edit box with characters masked out to avoid unauthorised reading</short>
        <descr>Mask Edit: Displays an Edit Box with the input text masked by a selected character specified by PasswordChar, usually an asterisk, or by EditMask (a complete string), specified in TCustomMaskEdit. <br/>
Useful for inputting passwords etc.
</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.Align">
        <short>Used to align the control in one of four directions.</short>
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Either reads a flag containing alignment instructions (<i>FAlign</i>) or writes alignment instructions (<i>SetAlign</i>)</p>
          <p>May have no alignment, may have custom or client alignment, or can be aligned to top, bottom, left or right</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.Anchors" link="#LCL.Controls.TControl.Anchors">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines how the control is to be anchored to its client or parent conrol</p>
          <p>Either reads a flag containing the set of anchors to be used, or writes a set of anchors. If they have been written, this is indicated in <i>IsAnchorsStored</i>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.AutoSize" link="#LCL.Controls.TControl.AutoSize">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>AutoSize permits the size of a control to be adjusted automatically, for example a button can become bigger or smaller to accommodate a longer or shorter caption.</p>
          <p>Reads logical (boolean) flag to see whether auto-sizing is to be operated, or writes the flag to say it should be done. Default is false, ie no auto-sizing</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.BorderSpacing">
        <short>Determines the border spacing for this control</short>
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines the border spacing for this control</p>
          <p>Reads flag to find stored spacing values required for the border of the control, or writes the flag to set the spacing.</p>
          <p>The properties are defined in the parent class <link id="#lcl.Controls.TControlBorderSpacing">TControlBorderSpacing</link>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.CharCase" link="#LCL.StdCtrls.TCustomEdit.CharCase">
        <descr>
          <p>Indicates how text is displayed in a text editing control in the following ways:</p>
          <ul>
            <li>Normal case letters</li>
            <li>Upper case letters</li>
            <li>Lower case letters</li>
          </ul>
          <p>The rules can, of course, be overridden by use of the shift key.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.Color" link="#LCL.Controls.TControl.Color">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Reads the value for colour, or stores the value, and sets a flag if the colour is stored.</p>
          <p>The default colour is the same as the window in which the control is located.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.Constraints" link="#LCL.Controls.TControl.Constraints">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determine <i>Constraints</i> (max and min height and width) for this control; reads the size constraints or stores new ones.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.Ctl3D" link="#LCL.Controls.TControl.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.DragCursor" link="#LCL.Controls.TControl.DragCursor">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.DragKind" link="#LCL.Controls.TControl.DragKind">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.DragMode" link="#LCL.Controls.TControl.DragMode">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.Enabled" link="#LCL.Controls.TControl.Enabled">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Whether the control is <i>Enabled</i>. If not, it usually appears 'greyed-out'</p>
          <p>Reads a flag to see whether the control is enabled, or stores a new value. If stored, sets a flag to say so.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.EditMask" link="#LCL.MaskEdit.TCustomMaskEdit.EditMask">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.Font" link="#LCL.Controls.TControl.Font">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Reads a flag to see what font should be used, or sets a flag to store it. If stored, sets a flag to say so</p>
          <p>The properties of <i>Font</i> are defined in the parent class <link id="#lcl.Graphics.TFont">TFont</link>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.MaxLength" link="#LCL.StdCtrls.TCustomEdit.MaxLength">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.ParentColor" link="#LCL.Controls.TControl.ParentColor">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.ParentCtl3D" link="#LCL.Controls.TWinControl.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.ParentFont" link="#LCL.Controls.TControl.ParentFont">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.PasswordChar">
        <short>
          <i>PasswordChar</i>: the character which appears in the Edit box replacing and masking the actual character typed</short>
        <descr>
          <p>
            <i>PasswordChar</i>



: the character which appears in the Edit box replacing and masking the actual character typed.</p>
          <p>Typically used in password input, to prevent the typed characters from being seen by passers-by or casual observers (or even malicious observers!)</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.PopupMenu">
        <short>PopupMenu - a context-sensitive menu that pops up when the right mouse button is clicked over this control</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
 Reads the details of the pop-up menu, or stores them.<br/>
Properties are defined in the parent class <link id="#lcl.Menus.TPopupMenu">TPopupMenu</link>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.ReadOnly">
        <short>
          <i>ReadOnly </i>- the contents of the edit box may only be read, not written or erased</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.ShowHint">
        <short>Flag to determine: Is hint to be displayed for this control?</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads flag or writes one to determine if a hint is to be shown when mouse hovers over this control. If value is stored, a storage flag is set. Display of the actual hint is controlled by OnShowHint
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <descr>Reads or writes information in flag; default is -1
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <descr>
          <p>Reads or writes boolean flag; default is False</p>
          <p>Use the TabStop to allow or disallow access to the control using the Tab key.</p>
          <p>If <i>TabStop</i> is True, the control is in the tab order. If <i>TabStop</i> is False, the control is not in the tab order and the user can't use the Tab key to move to the control.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.Text" link="#LCL.MaskEdit.TCustomMaskEdit.Text">
        <descr>
          <i>Text</i>



: the character string contained in the Edit Box
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.Visible" link="#LCL.Controls.TControl.Visible">
        <descr>
          <pre>The Visible property represents the ability to see a visual control. 
          If Visible is True the control is shown, otherwise it is hidden.
          Calling Show sets, among others, Visible to True.
          Setting Visible to False is equivalent to calling Hide method.</pre>
          <remark>The Visible property does not depend on control's parent visibility. Use IsVisible method to consider this and get real visibility.</remark>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.OnChange" link="#LCL.StdCtrls.TCustomEdit.OnChange">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.OnClick" link="#LCL.Controls.TControl.OnClick">
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>This is often the default action for many controls, and is often the ONLY action specified by the programmer. The action can be spcified by the user, either by typing explicit code into the implementation section for this control, or by selecting an action from a pre-supplied <i>ActionList</i>
          </p>
          <p>Reads or writes a flag if  a mouse click is detected, and sets a flag if a value is stored.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.OnDblClick" link="#LCL.Controls.TControl.OnDblClick">
        <descr>
          <p>Double-clicking is much more common in a Windows environment than in Unix or Linux, where single-clicking is the default method for selecting an object. However, in all environments there could be valid use for a double-click, and a method should be supplied if appropriate.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.OnDragOver" link="#LCL.Controls.TControl.OnDragOver">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown">
        <descr>
          <p>
            <i>OnKeyDown</i>
 - event handler for instance when key is down while control has focus</p>
          <p>Differs from <link id="#lcl.Controls.TWinControl.OnKeyPress">OnKeyPress</link> in that the key may have already been down when the control received focus; with <i>OnKeyPress</i> the key needs to become pressed while the control has focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress">
        <descr>
          <p>
            <i>OnKeyPress</i>
 - event controller for a key being pressed while the control has focus</p>
          <p>Differs from <link id="#lcl.Controls.TWinControl.OnKeyDown">OnKeyDown</link> in that the key needs to become pressed while the control has focus; with <i>OnKeyDown</i>  the key may have already been down when the control received focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp">
        <descr>
          <p>
            <i>OnKeyUp</i>
  - event handler for instance when a key is up (not pressed) while the control has focus</p>
          <p>The key may already have been up when the control received focus, or a pressed key may become released during the time the control has focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMaskEdit.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag">
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="FormatMaskText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FormatMaskText.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FormatMaskText.EditMask">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FormatMaskText.Value">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="MaskGetMaskSave">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="MaskGetMaskSave.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskGetMaskSave.EditMask">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="MaskGetMaskBlank">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="MaskGetMaskBlank.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskGetMaskBlank.EditMask">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="MaskGetFldSeparator">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="MaskGetFldSeparator.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskGetFldSeparator.EditMask">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="Register">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TMaskEdit.AutoSelect" link="#LCL.StdCtrls.TCustomEdit.AutoSelect"/>
      <element name="TMaskEdit.EchoMode">
        <short>
          <i>EchoMode </i>- how to echo keypresses on screen: normal (returning the actual character for that key), all upper or lower case, or a masking character as used in entering passwords</short>
      </element>
      <element name="TMaskEdit.OnChangeBounds">
        <short>Event handler for a change in bounds of the control</short>
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Reads or Writes flag if bounds are changed</p>
        </descr>
      </element>
      <element name="TMaskEdit.OnEditingDone">
        <short>Event handler when editing is done</short>
      </element>
      <element name="TMaskEdit.OnResize">
        <short>Event Handler for resize of control</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads or Writes flag if control is re-sized.
</descr>
      </element>
      <element name="TEditMask">
        <short>
          <i>TEditMask</i> - a string type containing a sequence of characters to act as a mask in an edit box</short>
      </element>
      <element name="TCustomMaskEdit.CMEnter">
        <short>
          <var>CMEnter</var> - control message method for pressing the Enter key</short>
      </element>
      <element name="TCustomMaskEdit.LMMButtonUp">
        <short>
          <var>LMMButtonUp</var> - LCL message method for Button Up</short>
      </element>
      <element name="TCustomMaskEdit.LMPasteFromClip">
        <short>
          <var>LMPasteFromClip</var> - LCL message method for pasting from clipboard</short>
      </element>
      <element name="TCustomMaskEdit.LMCutToClip">
        <short>
          <var>LMCutToClip</var> - LCL message method for cutting to clipboard</short>
      </element>
      <element name="TCustomMaskEdit.LMClearSel">
        <short>
          <var>LMClearSel</var> - LCL message method for clearing selected items</short>
      </element>
      <element name="TCustomMaskEdit.GetSel">
        <short>
          <var>GetSel</var> - finds the start and end positions of the selection</short>
      </element>
      <element name="TCustomMaskEdit.SetSel">
        <short>
          <var>SetSel</var> - specifies the start and end positions of the selection</short>
      </element>
      <element name="TCustomMaskEdit.SpaceChar">
        <short>
          <var>SpaceChar</var> - the character that is to be used as a Space character</short>
      </element>
      <element name="TMaskEdit.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TMaskEdit.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle"/>
      <element name="TMaskEdit.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TMaskEdit.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TMaskEdit.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TMaskEdit.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TMaskEdit.SpaceChar" link="#LCL.MaskEdit.TCustomMaskEdit.SpaceChar"/>
      <element name="TCustomMaskEdit.GetText" link="#LCL.Controls.TControl.GetText"/>
      <element name="TCustomMaskEdit.SetText" link="#LCL.Controls.TControl.SetText"/>
      <element name="TCustomMaskEdit.TextChanged" link="#LCL.Controls.TControl.TextChanged"/>
      <element name="TCustomMaskEdit.Loaded" link="#rtl.Classes.TComponent.Loaded"/>
      <element name="TCustomMaskEdit.CutToClipBoard" link="#LCL.StdCtrls.TCustomEdit.CutToClipboard"/>
      <element name="TCustomMaskEdit.PasteFromClipBoard" link="#LCL.StdCtrls.TCustomEdit.PasteFromClipboard"/>
    </module>
    <!-- MaskEdit -->
  </package>
</fpdoc-descriptions>
