<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
  ====================================================================
    Grids
  ====================================================================
-->
    <module name="Grids">
      <short>Classes for displaying tabular data in the form of a grid of rows and columns
      </short>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLStrConsts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLIntf">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Controls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GraphType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Graphics">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Forms">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="DynamicArray">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LMessages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="XMLCfg">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="StdCtrls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LResources">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="MaskEdit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="GRIDFILEVERSION">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="GM_SETVALUE">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="GM_GETVALUE">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="GM_SETGRID">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="GM_SETPOS">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="GM_SELECTALL">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="GM_SETMASK">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="CA_LEFT">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="CA_CENTER">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="CA_RIGHT">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="CL_TOP">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="CL_CENTER">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="CL_BOTTOM">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="EO_AUTOSIZE">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="EO_HOOKKEYDOWN">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="EO_HOOKKEYPRESS">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="EO_HOOKKEYUP">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="EO_HOOKEXIT">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="EO_SELECTALL">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="EO_WANTCHAR">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="EGridException">
        <short>
          <var>EGridException</var> - exception handler for an error in a Grid class</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TGridOption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goFixedVertLine">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goFixedHorzLine">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goVertLine">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goHorzLine">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goRangeSelect">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goDrawFocusSelected">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goRowSizing">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goColSizing">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goRowMoving">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goColMoving">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goEditing">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goTabs">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goRowSelect">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goAlwaysShowEditor">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goThumbTracking">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goColSpanning">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goRelaxedRowSelect">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goDblClickAutoSize">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goSmoothScroll">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TGridOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TGridSaveOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridSaveOptions.soDesign">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridSaveOptions.soAttributes">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridSaveOptions.soContent">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridSaveOptions.soPosition">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TSaveOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TGridDrawState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridDrawState.gdSelected">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridDrawState.gdFocused">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridDrawState.gdFixed">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TGridState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridState.gsNormal">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridState.gsSelecting">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridState.gsRowSizing">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridState.gsColSizing">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridState.gsRowMoving">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridState.gsColMoving">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TGridZone">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridZone.gzNormal">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridZone.gzFixedCols">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridZone.gzFixedRows">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridZone.gzFixedCells">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TUpdateOption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TUpdateOption.uoNone">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TUpdateOption.uoQuick">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TUpdateOption.uoFull">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TAutoAdvance">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TAutoAdvance.aaNone">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TAutoAdvance.aaDown">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TAutoAdvance.aaRight">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TAutoAdvance.aaLeft">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TGridStatus">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridStatus.stNormal">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridStatus.stEditorHiding">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridStatus.stEditorShowing">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridStatus.stFocusing">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TItemType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TItemType.itNormal">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TItemType.itCell">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TItemType.itColumn">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TItemType.itRow">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TItemType.itFixed">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TItemType.itFixedColumn">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TItemType.itFixedRow">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TItemType.itSelected">
        <short/>
      </element>
      <!-- constant Visibility: default -->
      <element name="soAll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="constRubberSpace">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- pointer type Visibility: default -->
      <element name="PCellProps">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TCellProps">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCellProps.Attr">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCellProps.Data">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCellProps.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- pointer type Visibility: default -->
      <element name="PColRowProps">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TColRowProps">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TColRowProps.Size">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TColRowProps.FixedAttr">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TColRowProps.NormalAttr">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- pointer type Visibility: default -->
      <element name="PGridMessage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TGridMessage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridMessage.MsgID">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridMessage.Grid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridMessage.Col">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridMessage.Row">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridMessage.Value">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridMessage.CellRect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridMessage.Options">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TStringCellEditor">
        <short>
          <var>TStringCellEditor</var> - the default editor for <var>TStringGrid</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStringCellEditor.FGrid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringCellEditor.Change" link="#LCL.StdCtrls.TCustomEdit.Change">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringCellEditor.KeyDown" link="#LCL.Controls.TWinControl.KeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringCellEditor.KeyDown.Key">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringCellEditor.KeyDown.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringCellEditor.msg_SetMask">
        <short>
          <var>msg_SetMask</var> - issues message for specifying mask</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringCellEditor.msg_SetMask.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringCellEditor.msg_SetValue">
        <short>
          <var>msg_SetValue</var> - issue message for specifying value</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringCellEditor.msg_SetValue.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringCellEditor.msg_GetValue">
        <short>
          <var>msg_GetValue</var> - issues message for obtaining value</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringCellEditor.msg_GetValue.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringCellEditor.msg_SetGrid">
        <short>
          <var>msg_SetGrid</var> - issues message for specifying grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringCellEditor.msg_SetGrid.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringCellEditor.msg_SelectAll">
        <short>
          <var>msg_SelectAll</var> - issues message for Selecting All</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringCellEditor.msg_SelectAll.Msg">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TOnDrawCell">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnDrawCell.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnDrawCell.Col">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnDrawCell.Row">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnDrawCell.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnDrawCell.aState">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TOnSelectCellEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnSelectCellEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnSelectCellEvent.Col">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnSelectCellEvent.Row">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnSelectCellEvent.CanSelect">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TOnSelectEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnSelectEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnSelectEvent.Col">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnSelectEvent.Row">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TGridOperationEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridOperationEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridOperationEvent.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridOperationEvent.sIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridOperationEvent.tIndex">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="THdrEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="THdrEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="THdrEvent.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="THdrEvent.index">
        <short/>
      </element>
      <!-- function type Visibility: default -->
      <element name="TOnCompareCells">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TOnCompareCells.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnCompareCells.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnCompareCells.Acol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnCompareCells.ARow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnCompareCells.Bcol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnCompareCells.BRow">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TSelectEditorEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSelectEditorEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSelectEditorEvent.Col">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSelectEditorEvent.Row">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSelectEditorEvent.Editor">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TOnPrepareCanvasEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnPrepareCanvasEvent.sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnPrepareCanvasEvent.Col">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnPrepareCanvasEvent.Row">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnPrepareCanvasEvent.aState">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TVirtualGrid">
        <short>
          <var>TVirtualGrid</var> - an array of rows and columns containing data, which never gets displayed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TVirtualGrid.FColCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TVirtualGrid.FRowCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TVirtualGrid.FCells">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TVirtualGrid.FCols">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TVirtualGrid.FRows">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TVirtualGrid.GetCells">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TVirtualGrid.GetCells.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.GetCells.Col">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.GetCells.Row">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TVirtualGrid.Getrows">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TVirtualGrid.Getrows.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.Getrows.Row">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TVirtualGrid.Getcols">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TVirtualGrid.Getcols.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.Getcols.Col">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TVirtualGrid.SetCells">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.SetCells.Col">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.SetCells.Row">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.SetCells.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TVirtualGrid.Setrows">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.Setrows.Row">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.Setrows.Avalue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TVirtualGrid.Setcolcount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.Setcolcount.Avalue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TVirtualGrid.Setrowcount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.Setrowcount.Avalue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TVirtualGrid.Setcols">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.Setcols.Col">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.Setcols.Avalue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TVirtualGrid.doDestroyItem">
        <short>
          <var>doDestroyItem</var> - method for destroying an Item at the given Row and Column location</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.doDestroyItem.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.doDestroyItem.Col">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.doDestroyItem.Row">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.doDestroyItem.Item">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TVirtualGrid.doNewItem">
        <short>
          <var>doNewItem</var> - method for producing a new item at the given location specified by Row, Col</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.doNewItem.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.doNewItem.Col">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.doNewItem.Row">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.doNewItem.Item">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TVirtualGrid.DeleteColRow">
        <short>
          <var>DeleteColRow</var> - remove either a column or a row, depending on the value of <var>IsColumn</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.DeleteColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.DeleteColRow.index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TVirtualGrid.MoveColRow">
        <short>
          <var>MoveColRow</var> - move either a column or a row (depending on value of <var>IsColumn</var>) at <var>FromIndex</var> to the location <var>ToIndex</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.MoveColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.MoveColRow.FromIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.MoveColRow.ToIndex">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TVirtualGrid.ExchangeColRow">
        <short>
          <var>ExchangeColRow</var> - exchange either the current column or row (depending on the value of <var>IsColumn</var>) with the entity specified by <var>WithIndex</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.ExchangeColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.ExchangeColRow.index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.ExchangeColRow.WithIndex">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TVirtualGrid.DisposeCell">
        <short>
          <var>DisposeCell</var> - dispose of the resources and pointer for the given cell</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.DisposeCell.P">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TVirtualGrid.DisposeColRow">
        <short>
          <var>DisposeColRow</var> - dispose of the specified row or column, freeing its pointer</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.DisposeColRow.p">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TVirtualGrid.Create" link="#rtl.System.TObject.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TVirtualGrid.Destroy" link="#rtl.System.TObject.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TVirtualGrid.Clear">
        <short>
          <var>Clear</var> the grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TVirtualGrid.GetDefaultCell">
        <short>
          <var>GetDefaultCell</var> - returns the properties of the default cell</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TVirtualGrid.GetDefaultCell.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TVirtualGrid.GetDefaultColRow">
        <short>
          <var>GetDefaultColRow</var> - returns the properties of the default column and row</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TVirtualGrid.GetDefaultColRow.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TVirtualGrid.ColCount">
        <short>
          <var>ColCount</var> - the number of columns in the current grid</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TVirtualGrid.RowCount">
        <short>
          <var>RowCount</var> - the number of rows in the current grid</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TVirtualGrid.Celda">
        <short>
          <var>Celda</var> - the current cell as defined by its column and row</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.Celda.Col">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.Celda.Row">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TVirtualGrid.Cols">
        <short>
          <var>Cols</var> - the columns to which the grid applies</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.Cols.Col">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TVirtualGrid.Rows">
        <short>The <var>Rows</var>  to which the grid applies</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.Rows.Row">
        <short/>
      </element>
      <!-- alias type Visibility: default -->
      <element name="TGridCoord">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- alias type Visibility: default -->
      <element name="TGridRect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TGridDataCache">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.FixedWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.FixedHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.GridWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.GridHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.ClientWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.ClientHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.ScrollWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.ScrollHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.VisibleGrid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.MaxClientXY">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.ValidGrid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.AccumWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.AccumHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.HScrDiv">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.VScrDiv">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.TLColOff">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.TLRowOff">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.MaxTopLeft">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomGrid">
        <short>
          <var>TCustomGrid</var> - the base class for all grid controls</short>
        <descr>
          <p>A grid is a collection of cells that are organized in columns and rows. 
Grids are suitable for showing data that have tabular nature, for example tables in a database, or formulae and data in a spreadsheet.  
</p>
          <p>
            <b>Key properties:</b>
          </p>
          <p>The <link id="TCustomGrid.ColCount">ColCount</link> and  <link id="TCustomGrid.RowCount">RowCount</link> properties contain the column and row count of the grid. </p>
          <p>The <link id="TCustomGrid.FixedCols">FixedCols</link> and <link id="TCustomGrid.FixedRows">FixedRows</link> properties specify the count of fixed columns or rows that are used for headings. </p>
          <p>The column widths and row heights of the grid are accessible with the <link id="TCustomGrid.ColWidths">ColWidths</link> and <link id="TCustomGrid.RowHeights">RowHeights</link> properties. </p>
          <p>The <link id="TCustomGrid.DefaultColWidth">DefaultColWidth</link> and DefaultRowHeight properties are used to specify default column widths or row heights respectively. </p>
          <p>The colors of the cells and the grid elements are specified with the <link id="TCustomGrid.AlternateColor">AlternateColor</link>, <link id="TCustomGrid.BorderColor">BorderColor</link>, <link id="TCustomGrid.FixedColor">FixedColor</link>, <link id="TCustomGrid.FixedHotColor">FixedHotColor</link>, <link id="TCustomGrid.FocusColor">FocusColor</link>, <link id="TCustomGrid.GridLineColor">GridLineColor</link> and <link id="TCustomGrid.SelectedColor">SelectedColor</link>   properties. The <link id="TCustomGrid.GridWidth">GridWidth</link> and <link id="TCustomGrid.GridHeight">GridHeight</link> properties contain the dimension of the entire grid.</p>
          <p>The <link id="TCustomGrid.ScrollBars">ScrollBars</link> property controls the creation of scrollbars for the grid. </p>
          <p>The <link id="TCustomGrid.LeftCol">LeftCol</link>, <link id="TCustomGrid.TopRow">TopRow</link>, <link id="TCustomGrid.VisibleColCount">VisibleColCount</link> and <link id="TCustomGrid.VisibleRowCount">VisibleRowCount</link> properties contain information about the visible area of the grid. </p>
          <p>The <link id="TCustomGrid.Options">Options</link> property controls options for the grid. 
</p>
          <p>
            <b>Key methods and events:</b>
          </p>
          <p>If the user highlights a cell of the grid, the <link id="TCustomGrid.SelectCell">SelectCell</link> method is called that triggers the <link id="TCustomGrid.OnSelectCell">OnSelectCell</link> event. The position of the highlighted cell is stored within the <link id="TCustomGrid.Col">Col</link> and <link id="TCustomGrid.Row">Row</link> property.</p>
          <p>The <link id="TCustomGrid.MouseToCell">MouseToCell</link> method calculates a grid cell from a given screen position.</p>
          <p>Huge changes to the grid should be encapsulated in calls to <link id="TCustomGrid.BeginUpdate">BeginUpdate</link> and <link id="TCustomGrid.EndUpdate">EndUpdate</link> to speed up the application. </p>
          <p>Component developers must override the <link id="TCustomGrid.DrawCell">DrawCell</link> method in customized grids.</p>
        </descr>
        <seealso>
          <link id="TStringGrid"/>
          <link id="TDrawGrid"/>
          <link id="HowToUseGrids"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FAutoAdvance">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FAutoFillColumns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FDefaultDrawing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FEditor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FEditorHiding">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FEditorMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FEditorShowing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FEditorKey">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FEditorOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FFlat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FOnCompareCells">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FGridLineStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FGridLineWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FDefColWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FDefRowHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FCol">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FRow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FFixedCols">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FFixedRows">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FOnPrepareCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FOnSelectEditor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FGridLineColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FFixedcolor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FFocusColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FSelectedColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FFocusRectVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FCols">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FRows">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FsaveOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FScrollBars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FSelectActive">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FTopLeft">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FSplitter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FPivot">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FRange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FDragDx">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FMoveLast">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FUpdateCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FUpdateScrollBarsCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FGCache">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FOnDrawCell">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FOnBeforeSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FOnSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FOnTopLeftChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FGSMHBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FGSMVBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FVSbVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FHSbVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FDefaultTextStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FLastWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.AdjustCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.AdjustCount.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.AdjustCount.OldValue">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.AdjustCount.NewValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.CacheVisibleGrid">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.CalcColumnWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.CalcColumnWidth.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CalcColumnWidth.Index">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.CheckFixedCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CheckFixedCount.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CheckFixedCount.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CheckFixedCount.aFCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CheckFixedCount.aFRow">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.CheckCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CheckCount.aNewColCount">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CheckCount.aNewRowCount">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.CheckTopLeft">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.CheckTopLeft.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CheckTopLeft.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CheckTopLeft.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CheckTopLeft.CheckCols">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CheckTopLeft.CheckRows">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetAutoFillColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetAutoFillColumns.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetFlat">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetFlat.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetFocusRectVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetFocusRectVisible.AValue">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.doColSizing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.doColSizing.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.doColSizing.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.doColSizing.Y">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.doRowSizing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.doRowSizing.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.doRowSizing.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.doRowSizing.Y">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.doColMoving">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.doColMoving.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.doColMoving.Y">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.doRowMoving">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.doRowMoving.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.doRowMoving.Y">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.doTopleftChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.doTopleftChange.DimChg">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.EditorCanProcessKey">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.EditorCanProcessKey.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorCanProcessKey.Key">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.EditorGetValue">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.EditorHide">
        <short>
          <var>EditorHide</var> - method for hiding the editor</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.EditorPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.EditorSelectAll">
        <short>
          <var>EditorSelectAll</var> - editor procedure to Select All</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.EditorShowChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorShowChar.Ch">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.EditorSetMode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorSetMode.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.EditorSetValue">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.EditorAlwaysShown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.EditorAlwaysShown.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.EditorShow">
        <short>
          <var>EditorShow</var> - shows the cell contents in the Editor</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorShow.SelAll">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.GetLeftCol">
        <short>Read specifier for LeftCol</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetLeftCol.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.GetColCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetColCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.GetColWidths">
        <short>Read specifier for ColWidths</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetColWidths.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetColWidths.Acol">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.GetRowCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetRowCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.GetRowHeights">
        <short>Read specifier for RowHeights</short>
        <descr>Returns the current rowheight</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetRowHeights.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetRowHeights.Arow">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.GetSelection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetSelection.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.GetSystemMetricsGapSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetSystemMetricsGapSize.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetSystemMetricsGapSize.Index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.GetTopRow">
        <short>Read specifier for TopRow</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetTopRow.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.GetVisibleColCount">
        <short>Read specifier for VisibleRowCount</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetVisibleColCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.GetVisibleGrid">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetVisibleGrid.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.GetVisibleRowCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetVisibleRowCount.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.InternalAutoFillColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.MyTextRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MyTextRect.R">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MyTextRect.Offx">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MyTextRect.Offy">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MyTextRect.S">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MyTextRect.Clipping">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.ReadColWidths">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ReadColWidths.Reader">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.ReadRowHeights">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ReadRowHeights.Reader">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.ScrollToCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.ScrollToCell.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ScrollToCell.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ScrollToCell.aRow">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.ScrollGrid">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.ScrollGrid.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ScrollGrid.Relative">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ScrollGrid.DCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ScrollGrid.DRow">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetCol">
        <short>Write specifier for Col</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetCol.Valor">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetColwidths">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetColwidths.Acol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetColwidths.Avalue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetRawColWidths">
        <short>Write specifier for RawColWidths</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetRawColWidths.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetRawColWidths.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetColCount">
        <short>Write specifier for ColCount</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetColCount.Valor">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetDefColWidth">
        <short>Write specifier for DefColWidth</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetDefColWidth.Valor">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetDefRowHeight">
        <short>Write specifier for DefRowHeight</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetDefRowHeight.Valor">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetDefaultDrawing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetDefaultDrawing.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetEditor">
        <short>Write specifier for Editor</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetEditor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetFixedCols">
        <short>Write specifier for FixedCols</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetFixedCols.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetFixedRows">
        <short>Write specifier for FixedRows</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetFixedRows.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetFocusColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetFocusColor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetGridLineColor">
        <short>Write specifier for GridLineColor</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetGridLineColor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetGridLineStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetGridLineStyle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetGridLineWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetGridLineWidth.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetLeftCol">
        <short>Write specifier for LeftCol</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetLeftCol.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetOptions">
        <short>Write specifier for Options</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetOptions.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetRow">
        <short>Write specifier for Row</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetRow.Valor">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetRowCount">
        <short>Write specifier for RowCount</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetRowCount.Valor">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetRowheights">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetRowheights.Arow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetRowheights.Avalue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetScrollBars">
        <short>Write specifier for ScrollBars</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetScrollBars.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetSelectActive">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetSelectActive.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetSelection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetSelection.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetTopRow">
        <short>Write specifier for TopRow</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetTopRow.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.TryScrollTo">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.TryScrollTo.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.TryScrollTo.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.UpdateScrollBarPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.UpdateScrollBarPos.Which">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.UpdateSelectionRange">
        <short>
          <var>UpdateSelectionRange</var> - updates the range of the current selection</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.WriteColWidths">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.WriteColWidths.Writer">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.WriteRowHeights">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.WriteRowHeights.Writer">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.WMEraseBkgnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.WMEraseBkgnd.message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.WMGetDlgCode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.WMGetDlgCode.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.WMChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.WMChar.message">
        <short/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomGrid.fGridState">
        <short>
          <var>fGridState</var> - local variable to hold current state of the grid (whether being edited, updated etc)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.AutoAdjustColumn">
        <short>
          <var>AutoAdjustColumn</var> - automatically adjust column properties to accommodate largest object</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.AutoAdjustColumn.aCol">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.BeforeMoveSelection">
        <short>
          <var>BeforeMoveSelection</var> - method to use before a selection is moved</short>
        <descr>This method is called from <i>TCustomGrid.MoveExtend</i> method whenever the current grid cursor location is about to change. The destination column and row are specified in <i>DCol</i> and <i>DRow</i> parameters respectively. 

The new location is known to be a valid selectable cell (see <link id="TCustomGrid.SelectCell"/>
 ), and is given in absolute cell coordinates. At this point the current grid location has not changed and can be retrieved with Col and Row properties.

The purpose of this method is to call event handler <i>OnBeforeSelection</i>.
</descr>
        <seealso>
          <link id="TCustomGrid.MoveExtend"/>
          <link id="TCustomDrawGrid.OnBeforeSelection"/>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.BeforeMoveSelection.DCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.BeforeMoveSelection.DRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.CalcAutoSizeColumn">
        <short>
          <var>CalcAutoSizeColumn</var> - method for automatically calculating the size of a column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CalcAutoSizeColumn.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CalcAutoSizeColumn.AMin">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CalcAutoSizeColumn.AMax">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CalcAutoSizeColumn.APriority">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.CalcFocusRect">
        <short>
          <var>CalcFocusRect</var> - method for calculating the bounds of a focused rectangle</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CalcFocusRect.ARect">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.CellClick">
        <short>
          <var>CellClick</var> - method for processing a click in a cell</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CellClick.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CellClick.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.CheckLimits">
        <short>
          <var>CheckLimits</var> - method for checking limits of specified cell</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CheckLimits.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CheckLimits.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ColRowDeleted">
        <short>
          <var>ColRowDeleted</var> - method for dealing with deletion of either a column or a row (depending on value of <var>IsCol</var>)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowDeleted.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowDeleted.index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ColRowExchanged">
        <short>
          <var>ColRowExchanged</var> - method for exchanging the current Column or Row (depending on value of <var>IsCol</var>) with the indexed other column or row</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowExchanged.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowExchanged.index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowExchanged.WithIndex">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ColRowMoved">
        <short>
          <var>ColRowMoved</var> - the column or row (determined by <var>IsColumn</var>) is moved from one index to another</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowMoved.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowMoved.FromIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowMoved.ToIndex">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.ColRowToOffset">
        <short>
          <var>ColRowToOffset</var> - method for moving column or row (depending on value of <var>IsCol</var>); if <var>Relative</var> is True, moves by the amount of <var>Index</var>, otherwise moves from <var>StartPos</var> to <var>EndPos</var>. Returns True if successful </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.ColRowToOffset.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowToOffset.IsCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowToOffset.Fisical">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowToOffset.index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowToOffset.Ini">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowToOffset.Fin">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ColWidthsChanged">
        <short>
          <var>ColWidthsChanged</var> - method for dealing with changes in column width</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.CreateWnd" link="#LCL.Controls.TWinControl.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.CreateParams" link="#LCL.Controls.TWinControl.CreateParams">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CreateParams.Params">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DblClick" link="#LCL.Controls.TControl.DblClick">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DefineProperties" link="#rtl.Classes.TComponent.DefineProperties">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DefineProperties.Filer">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DestroyHandle" link="#LCL.Controls.TWinControl.DestroyHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DoExit" link="#LCL.Controls.TWinControl.DoExit">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DoEnter" link="#LCL.Controls.TWinControl.DoEnter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DoOnChangeBounds" link="#LCL.Controls.TControl.DoOnChangeBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DoSetBounds" link="#LCL.Controls.TControl.DoSetBounds">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoSetBounds.ALeft">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoSetBounds.ATop">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoSetBounds.AWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoSetBounds.AHeight">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DrawBackGround">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DrawBorder">
        <short>
          <var>DrawBorder</var> - draws the border of the grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DrawByRows">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DrawCell">
        <short>
          <var>DrawCell</var> - draws a cell at the given grid location (Col, Row) or in the specified Rectangle</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCell.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCell.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCell.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCell.aState">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DrawCellGrid">
        <short>
          <var>DrawCellGrid</var> draws a grid of cells at the specified location</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCellGrid.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCellGrid.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCellGrid.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCellGrid.astate">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DrawColRowMoving">
        <short>
          <var>DrawColRowMoving</var> - draw a column or row while it is moving</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DrawEdges">
        <short>
          <var>DrawEdges</var> of the current grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DrawFocusRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawFocusRect.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawFocusRect.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawFocusRect.ARect">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DrawRow">
        <short>
          <var>DrawRow</var> - draws the specified row</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawRow.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.EditordoGetValue">
        <short>
          <var>EditordoGetValue</var> - method for geting a value in the Editor</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.EditordoSetValue">
        <short>
          <var>EditordoSetValue</var> - method for specifying a value in the Editor</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.EditorCanAcceptKey">
        <short>
          <var>EditorCanAcceptKey</var> - returns True if the Editor is able to accept the nominated (UTF8) key</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.EditorCanAcceptKey.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorCanAcceptKey.ch">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.EditorIsReadOnly">
        <short>
          <var>EditorIsReadOnly</var> - returns True if the Editor has Read Only status</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.EditorIsReadOnly.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.GetAutoFillColumnInfo">
        <short>
          <var>GetAutoFillColumnInfo</var> - finds out information (max, min, priority) about the auto-fill properties of the indexed column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetAutoFillColumnInfo.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetAutoFillColumnInfo.aMin">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetAutoFillColumnInfo.aMax">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetAutoFillColumnInfo.aPriority">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetFixedcolor">
        <short>
          <var>GetFixedcolor</var> - returns a value for the fixed colour</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetFixedcolor.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetSelectedColor">
        <short>
          <var>GetSelectedColor</var> - returns the value for the colour of tems that have been selected</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetSelectedColor.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetEditMask">
        <short>
          <var>GetEditMask</var> - returns the edit mask string for the specified cell</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetEditMask.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetEditMask.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetEditMask.ARow">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetEditText">
        <short>
          <var>GetEditText</var> - returns the Edit text string for the specified cell</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetEditText.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetEditText.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetEditText.ARow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.SetEditText">
        <short>
          <var>SetEditText</var> - specifies the text-string to be placed in the Editor for processing</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetEditText.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetEditText.ARow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetEditText.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.HeaderClick">
        <short>
          <var>HeaderClick</var> - method to deal with a click on the column (if <var>IsColumn</var> is True) or row Header</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.HeaderClick.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.HeaderClick.index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.HeaderSized">
        <short>
          <var>HeaderSized</var> - method to deal with re-sizing of a column (IsColumn True) or row header</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.HeaderSized.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.HeaderSized.index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.InvalidateCell">
        <short>
          <var>InvalidateCell</var> - render a cell non-valid, and redraw if required</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.InvalidateCell.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.InvalidateCell.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.InvalidateCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.InvalidateCell.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.InvalidateCell.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.InvalidateCell.Redraw">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.InvalidateCol">
        <short>
          <var>InvalidateCol</var> - render the specified column non-valid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.InvalidateCol.ACol">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.InvalidateGrid">
        <short>
          <var>InvalidateGrid</var> - render the whole grid non-valid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.InvalidateRow">
        <short>
          <var>InvalidateRow</var> - render the specified row non-valid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.InvalidateRow.ARow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.KeyDown" link="#LCL.Controls.TWinControl.KeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.KeyDown.Key">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.KeyDown.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.KeyUp" link="#LCL.Controls.TWinControl.KeyUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.KeyUp.Key">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.KeyUp.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.LoadContent">
        <short>
          <var>LoadContent</var> - method to load a configuration</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.LoadContent.cfg">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.LoadContent.Version">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.Loaded" link="#rtl.Classes.TComponent.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.MouseDown" link="#LCL.Controls.TControl.MouseDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseDown.Button">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseDown.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseDown.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseDown.Y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.MouseMove" link="#LCL.Controls.TControl.MouseMove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseMove.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseMove.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseMove.Y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.MouseUp" link="#LCL.Controls.TControl.MouseUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseUp.Button">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseUp.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseUp.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseUp.Y">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.MoveExtend">
        <short>
          <var>MoveExtend</var> - move an extended selection; if <var>Relative</var> is true, use Delta column and row to find position; returns True if successful</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.MoveExtend.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MoveExtend.Relative">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MoveExtend.DCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MoveExtend.DRow">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.MoveNextAuto">
        <short>
          <var>MoveNextAuto</var> - move to next cell in automatic sequence; if <var>Relative</var> is True, use delta col and row to find position; returns True if successful</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.MoveNextAuto.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.MoveNextSelectable">
        <short>
          <var>MoveNextSelectable</var> - move to next selectable cel; use delta col and row if <var>Relative</var> is True; returns True if successful</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.MoveNextSelectable.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MoveNextSelectable.Relative">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MoveNextSelectable.DCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MoveNextSelectable.DRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.MoveSelection">
        <short>
          <var>MoveSelection</var> - moves the selected text, cell or group of cells</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.OffsetToColRow">
        <short>
          <var>OffsetToColRow</var> - move by the value of <var>Offset</var> to another column or row (determined by the value of <var>IsCol</var>), returning True if successful</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.OffsetToColRow.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.OffsetToColRow.IsCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.OffsetToColRow.Fisical">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.OffsetToColRow.Offset">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.OffsetToColRow.Rest">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.Paint" link="#LCL.Controls.TCustomControl.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.PrepareCanvas">
        <short>
          <var>PrepareCanvas</var> - method to get the canvas ready for drawing at the specified location</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.PrepareCanvas.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.PrepareCanvas.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.PrepareCanvas.aState">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ProcessEditor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ProcessEditor.LastEditor">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ProcessEditor.DCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ProcessEditor.DRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ProcessEditor.WasVis">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ResetOffset">
        <short>
          <var>ResetOffset</var> - resets the offset, checking columns and rows if demanded</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ResetOffset.chkCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ResetOffset.ChkRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.RowHeightsChanged">
        <short>
          <var>RowHeightsChanged</var> - method invoked when row heights are changes</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.SaveContent">
        <short>
          <var>SaveContent</var> as specified in the XML configuration variable</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SaveContent.cfg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ScrollBarRange">
        <short>
          <var>ScrollBarRange</var> - specify the range of the scrollbar; <var>Which</var> determines whether it is horizontal or vertical</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ScrollBarRange.Which">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ScrollBarRange.aRange">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ScrollBarRange.aPage">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ScrollBarPosition">
        <short>
          <var>ScrollBarPosition</var> - records the position (<var>Value</var>) of the scrollbar; <var>Which</var> determines horizontal or vertical</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ScrollBarPosition.Which">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ScrollBarPosition.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ScrollBarPage">
        <short>
          <var>ScrollBarPage</var> - a Page movement of the scrollbar (specified by <var>Which</var>)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ScrollBarPage.Which">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ScrollBarPage.aPage">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ScrollBarShow">
        <short>ScrollBarShow method</short>
        <descr>Change the appearance of the scrollbars in the grid.

'Which' can be any of : SB_BOTH, SB_VERT, SB_HORZ
'aValue' can be True or False</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ScrollBarShow.Which">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ScrollBarShow.aValue">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.ScrollBarAutomatic">
        <short>ScrollBarAutomatic method</short>
        <descr>Check if scrollbars are shown automatically by the grid or not.

'Which' can be any of : SB_BOTH, SB_VERT, SB_HORZ</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.ScrollBarAutomatic.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ScrollBarAutomatic.Which">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.SelectEditor">
        <short>
          <var>SelectEditor</var> - chooses the editor for current use</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.SelectCell">
        <short>Is called if a grid cell is highlighted.</short>
        <descr>
          <p>The SelectCell  method is called if a grid cell will be highlighted.</p>
          <p>The <i>aCol</i> and <i>aRow</i> parameters contain the column and the row of the highlighted cell. </p>
          <p>Component developers may use the <i>SelectCell</i> method to react on focus changes. The <i>Result</i> is true if the cell is allowed to be selected.
Application developers should use the <link id="TCustomGrid.SelectCell.OnSelectCell">OnSelectCell</link> event instead.</p>
        </descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.SelectCell.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SelectCell.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SelectCell.ARow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.SetBorderStyle">
        <short>
          <var>SetBorderStyle</var> - specifies a new border style</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetBorderStyle.NewStyle">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.SetFixedcolor">
        <short>
          <var>SetFixedcolor</var> - specifies colour for fixed cells</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetFixedcolor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.SetSelectedColor">
        <short>
          <var>SetSelectedColor</var> - specifies colour for cells that have been selected</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetSelectedColor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.SizeChanged">
        <short>
          <var>SizeChanged</var> - specifies the old number of columns and rows</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SizeChanged.OldColCount">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SizeChanged.OldRowCount">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.Sort">
        <short>Sort method</short>
        <descr>
          <p>Method to sort all items in the grid</p>
          <p>If <var>ColSorting</var> is True, sorts the items in a column; otherwise sorts a row
</p>
          <p>The three given indexes specify the items to be sorted</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.Sort.ColSorting">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.Sort.index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.Sort.IndxFrom">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.Sort.IndxTo">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.TopLeftChanged">
        <short>
          <var>TopLeftChanged</var> - the top left cell has changed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.TryMoveSelection">
        <short>
          <var>TryMoveSelection</var> - attempts to move the selection by the specified offset; returns True if sucessful</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.TryMoveSelection.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.TryMoveSelection.Relative">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.TryMoveSelection.DCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.TryMoveSelection.DRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.UpdateHorzScrollBar">
        <short>
          <var>UpdateHorzScrollBar</var> - updates the scrollbar in the given range by the given page, if it is visible</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.UpdateHorzScrollBar.aVisible">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.UpdateHorzScrollBar.aRange">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.UpdateHorzScrollBar.aPage">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.UpdateVertScrollbar">
        <short>
          <var>UpdateVertScrollbar</var> - updates the scrollbar in the given range by the given page, if it is visible</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.UpdateVertScrollbar.aVisible">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.UpdateVertScrollbar.aRange">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.UpdateVertScrollbar.aPage">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.VisualChange">
        <short>
          <var>VisualChange</var> - a change in the visual properties</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.WMHScroll">
        <short>
          <var>WMHScroll</var> - system message for horizontal scrolling</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.WMHScroll.message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.WMVScroll">
        <short>
          <var>WMVScroll</var> - system message for vertical scrolling</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.WMVScroll.message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.WndProc" link="#LCL.Controls.TControl.WndProc">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.WndProc.TheMessage">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.AutoAdvance">
        <short>Automatically advance down the grid on successive mouse clicks or presses of the ENTER or TAB key</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.AutoFillColumns">
        <short>Automatically fill columns with default values if nothing else specified</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle">
        <descr>Only a restricted series of options is available: none or a single border.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.Col">
        <short>Current column index.</short>
        <descr>Col property holds the column index of the current grid cell cursor. The current grid column can be changed programatically by setting a new value to this property.</descr>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.ColCount">
        <short>Number of columns of the grid.</short>
        <descr>This is the number of columns in the grid, including fixed and normal columns.</descr>
        <seealso>
          <link id="TCustomGrid.Col"/>
          <link id="TCustomGrid.FixedCols"/>
          <link id="TCustomGrid.ColWidths"/>
        </seealso>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.ColWidths">
        <short>Column widths for the grid.</short>
        <descr>
          <p>The column is specified with the <i>aCol</i> parameter. The <i>aCol</i> parameter must fall within the valid index range of 0 to <link id="TCustomGrid.ColWidths.ColCoun">ColCount</link>-1. </p>
          <p>The return value of the property is the width of this column, measured in pixels. </p>
          <p>The initial width of a newly created column is specified with the <link id="TCustomGrid.ColWidths.DefaultColWidth">DefaultColWidth</link> property. After that the user may redefine this value. </p>
          <p>If the <link id="TCustomGrid.ColWidths.Options">Options</link> property includes the appropriate value, the column width may also be changed by the user at runtime.</p>
        </descr>
        <seealso>
          <link id="TCustomGrid.RowHeights"/>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColWidths.aCol">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.DefaultColWidth">
        <short>Default value for the width of newly created grid columns.</short>
        <descr>
          <p>If new columns of the grid are created by changing the <link id="TCustomGrid.DefaultColWidth.ColCount">ColCount</link> property, the width of these new columns will be set to the value of the <i>DefaultColWidth</i> property. </p>
          <p>After that the user may redefine this value. If the <link id="TCustomGrid.DefaultColWidth.Options">Options</link> property includes the appropriate value, the column width may also be changed by the user at runtime.</p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DefaultRowHeight"/>
        </seealso>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.DefaultRowHeight">
        <short>Default value for the height of newly created grid rows.</short>
        <descr>
          <p>If new rows of the grid are created by changing the <link id="TCustomGrid.DefaultRowHeight.RowCount">RowCount</link> property, the height of these new rows will be set to the value of the <i>DefaultRowHeight</i>  property. </p>
          <p>After that the user may redefine this value. If the <link id="TCustomGrid.DefaultRowHeight.Options">Options</link> property includes the appropriate value, the row height may also be changed by the user at runtime.</p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DefaultColWidth"/>
        </seealso>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.DefaultDrawing">
        <short>Is the default drawing method to be used for this grid? Default is TRUE</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.DefaultTextStyle">
        <short>Default style for displaying text - includes alignment, layout, single or multi-lines</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.DragDx">
        <short>
          <var>DragDx</var> - the amount (DeltaX) by which an object should be dragged</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.Editor">
        <short>The editor to be used for modifying information in the cells of the grid</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.EditorMode">
        <short>Is grid ready to accept edits? (EditorMode True)</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.EditorKey">
        <short>
          <var>EditorKey</var> - is the current key available to the editor?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.EditorShowing">
        <short>Is the editor for the grid displayed?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.FixedCols">
        <short>Number of the fixed columns of the grid (ie the columns containing title or identifier material, that don't get scrolled when the rest of the grid moves).</short>
        <descr>
          <p>Contains the fixed column count of a grid. </p>
          <p>Fixed columns are normally used for headings.</p>
        </descr>
        <seealso>
          <link id="TCustomGrid.FixedRows"/>
          <link id="TCustomGrid.ColCount"/>
        </seealso>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.FixedRows">
        <short>Number of the fixed rows of the grid (ie the rows containing title or identifier material, that don't get scrolled when the rest of the grid moves).</short>
        <descr>
          <p>Contains the fixed row count of a grid. </p>
          <p>Fixed rows are normally used for headings.</p>
        </descr>
        <seealso>
          <link id="TCustomGrid.RowCount"/>
          <link id="TCustomGrid.FixedCols"/>
        </seealso>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.FixedColor">
        <short>The color for the fixed cells of the grid.</short>
        <descr>The color used by headings.</descr>
        <seealso>
          <link id="TCustomGrid.FixedColor"/>
          <link id="TCustomGrid.FixedRows"/>
        </seealso>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.Flat">
        <short>Is the cell to be displayed <var>Flat</var>, ie with no texturing or raised/lowered effect</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.FocusColor">
        <short>The colour to be used for the cell receiving focus</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.FocusRectVisible">
        <short>
          <var>FocusRectVisible</var> - is the rectangle receiving focus visible?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.GCache">
        <short>
          <var>GCache</var> - the cache to be used for grid data</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.GridHeight">
        <short>
          <var>GridHeight</var> - the height of the grid</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.GridLineColor">
        <short>Colour to be used for GridLines</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.GridLineStyle">
        <short>Style to be used for GridLines</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.GridLineWidth">
        <short>Width (thickness) of GridLines</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.GridWidth">
        <short>Width of the whole Grid</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.LeftCol">
        <short>
          <var>LeftCol</var> - the left-most column</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.Options">
        <short>The options available for use in this grid</short>
        <descr>For a list of options see<link id="TGridOptions"/>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.Row">
        <short>The current <var>Row </var>(record) within the grid</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.RowCount">
        <short>Number of rows in the grid</short>
        <descr>This is the number of rows in the grid, including fixed and normal rows.</descr>
        <seealso>
          <link id="TCustomGrid.Row"/>
          <link id="TCustomGrid.RowHeights"/>
          <link id="TCustomGrid.RowCount"/>
        </seealso>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.RowHeights">
        <short>The row heights for the grid.</short>
        <descr>
          <p>The row is specified with the <i>aRow</i> parameter. The <i>aRow</i> parameter must fall within the valid index range of 0 to <link id="TCustomGrid.RowHeights.RowCount">RowCount</link>-1.</p>
          <p>The return value of the property is the height of this row, measured in pixels.</p>
          <p>The initial height of a newly created row is specified with the <link id="TCustomGrid.RowHeights.DefaultRowHeight">DefaultRowHeight</link> property. After that the user may redefine this value. If the <link id="TCustomGrid.RowHeights.Options">Options</link> property includes the appropriate value, the row height may also be changed by the user at runtime.</p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ColWidths"/>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.RowHeights.aRow">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.SaveOptions">
        <short>The set of options for saving information from the grid (design, attributes, content or position)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.SelectActive">
        <short>
          <var>SelectActive</var> - if True, the current active cell is selected</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.SelectedColor">
        <short>Colour to be used for selected cells</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.Selection">
        <short>The current selection (rows and columns) in the grid</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.ScrollBars">
        <short>The <var>ScrollBars</var> to be used with this grid</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.TopRow">
        <short>The first row (record) in the grid</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.VisibleColCount">
        <short>The number of visible columns</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.VisibleRowCount">
        <short>The number of visible rows</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.OnBeforeSelection">
        <short>
          <var>OnBeforeSelection</var> - event handler for use before a selection is made</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.OnCompareCells">
        <short>Event handler for comparing the contents of grid cells</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.OnPrepareCanvas">
        <short>Event handler to prepare the <var>Canvas</var> for drawing</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.OnDrawCell">
        <short>Event handler for drawing a cell</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.OnSelection">
        <short>Event handler for when an area of a grid (one or a group of cells) is selected</short>
        <descr>The Col and Row parameters contain the column and the row of the highlighted cell. 

Application developers may use the OnSelection and OnBeforeSelection events to react on focus changes. Component developers should use the  method instead.
</descr>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.OnSelectEditor">
        <short>Event handler for selecting an editor </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.OnTopLeftChanged">
        <short>Event handler when the top left cell is changed (ie the grid has been scrolled so that a different cell occupies top left)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomGrid.Create" link="#rtl.Classes.TComponent.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomGrid.Destroy" link="#rtl.Classes.TComponent.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.Invalidate" link="#LCL.Controls.TControl.Invalidate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.AutoAdjustColumns">
        <short>
          <var>AutoAdjustColumns</var> - automatically adjust the columns according to the size of their contents</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.BeginUpdate">
        <short>Begin updating the grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomGrid.CellRect">
        <short>The coordinates of the current cell (column, row) expressed as a standard rectangle (TRect)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.CellRect.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CellRect.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CellRect.ARow">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.Clear">
        <short>Clear all cells from the grid.</short>
        <descr>
          <p>Reset Column and Row counts to 0. Grid is completely emptied.</p>
          <p>Compatibility: This property applies to Lazarus grids only , under Delphi/Kylix a grid can't be completly emptied.</p>
        </descr>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.DeleteColRow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DeleteColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DeleteColRow.index">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.EditorExit">
        <short>Leave the cell editor</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorExit.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.EditorKeyDown">
        <short>Emulate the <var>OnKeyDown</var> event handler in the cell editor</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorKeyDown.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorKeyDown.Key">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorKeyDown.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.EditorKeyPress">
        <short>Emulate the <var>OnKeyPress</var> event handler in the cell editor</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorKeyPress.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorKeyPress.Key">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.EditorKeyUp">
        <short>Emulate the <var>OnKeyUp</var> event handler in the cell editor</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorKeyUp.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorKeyUp.key">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorKeyUp.shift">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.EndUpdate">
        <short>Finish updating the grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EndUpdate.UO">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.EndUpdate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EndUpdate.FullUpdate">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.ExchangeColRow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ExchangeColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ExchangeColRow.index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ExchangeColRow.WithIndex">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomGrid.IscellSelected">
        <short>
          <var>IsCellSelected</var> - is the cell specified by <var>aCol, aRow</var> selected?</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.IscellSelected.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.IscellSelected.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.IscellSelected.aRow">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomGrid.IscellVisible">
        <short>Finds out whether a particular cell is visible</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.IscellVisible.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.IscellVisible.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.IscellVisible.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.LoadFromFile">
        <short>Load the grid data from a file with the specified name</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.LoadFromFile.FileName">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomGrid.MouseToCell">
        <short>Convert mouse coordinates to the position of a cell in the grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.MouseToCell.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseToCell.Mouse">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.MouseToCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseToCell.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseToCell.Y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseToCell.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseToCell.ARow">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomGrid.MouseToLogcell">
        <short>Convert mouse coordinates to the position of a logical cell in the grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.MouseToLogcell.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseToLogcell.Mouse">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomGrid.MouseToGridZone">
        <short>
          <var>MouseToGridZone</var> - convert muse coordinates to a gid zone</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.MouseToGridZone.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseToGridZone.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseToGridZone.Y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseToGridZone.CellCoords">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.MoveColRow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MoveColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MoveColRow.FromIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MoveColRow.ToIndex">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.SaveToFile">
        <short>Save the data in the grid to a file with specified name</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SaveToFile.FileName">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.SortColRow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SortColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SortColRow.index">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.SortColRow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SortColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SortColRow.index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SortColRow.FromIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SortColRow.ToIndex">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TGetEditEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGetEditEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGetEditEvent.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGetEditEvent.ARow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGetEditEvent.Value">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TSetEditEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSetEditEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSetEditEvent.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSetEditEvent.ARow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSetEditEvent.Value">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDrawGrid">
        <short>
          <var>TDrawGrid</var> - a drawn grid. May contain images in its cells</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="HowToUseGrids"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDrawGrid.FOnColRowDeleted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDrawGrid.FOnColRowExchanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDrawGrid.FOnColRowMoved">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDrawGrid.FOnGetEditMask">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDrawGrid.FOnGetEditText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDrawGrid.FOnHeaderClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDrawGrid.FOnHeaderSized">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDrawGrid.FOnSelectCell">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDrawGrid.FOnSetEditText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TDrawGrid.FGrid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDrawGrid.CalcCellExtent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.CalcCellExtent.acol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.CalcCellExtent.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.CalcCellExtent.aRect">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDrawGrid.ColRowDeleted">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.ColRowDeleted.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.ColRowDeleted.index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDrawGrid.ColRowExchanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.ColRowExchanged.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.ColRowExchanged.index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.ColRowExchanged.WithIndex">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDrawGrid.ColRowMoved">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.ColRowMoved.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.ColRowMoved.FromIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.ColRowMoved.ToIndex">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TDrawGrid.CreateVirtualGrid">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDrawGrid.CreateVirtualGrid.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDrawGrid.DrawCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.DrawCell.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.DrawCell.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.DrawCell.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.DrawCell.aState">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDrawGrid.DrawFocusRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.DrawFocusRect.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.DrawFocusRect.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.DrawFocusRect.ARect">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDrawGrid.HeaderClick">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.HeaderClick.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.HeaderClick.index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDrawGrid.HeaderSized">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.HeaderSized.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.HeaderSized.index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDrawGrid.GetAutoFillColumnInfo">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.GetAutoFillColumnInfo.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.GetAutoFillColumnInfo.aMin">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.GetAutoFillColumnInfo.aMax">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.GetAutoFillColumnInfo.aPriority">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TDrawGrid.GetEditMask">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDrawGrid.GetEditMask.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.GetEditMask.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.GetEditMask.aRow">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TDrawGrid.GetEditText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDrawGrid.GetEditText.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.GetEditText.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.GetEditText.aRow">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TDrawGrid.SelectCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDrawGrid.SelectCell.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.SelectCell.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.SelectCell.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDrawGrid.SetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.SetColor.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDrawGrid.SetEditText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.SetEditText.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.SetEditText.ARow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.SetEditText.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDrawGrid.SizeChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.SizeChanged.OldColCount">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.SizeChanged.OldRowCount">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDrawGrid.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TDrawGrid.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TDrawGrid.DefaultDrawCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.DefaultDrawCell.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.DefaultDrawCell.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.DefaultDrawCell.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.DefaultDrawCell.aState">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.Canvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.Col">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.ColWidths">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.Editor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.EditorMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.FocusColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.FocusRectVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.GridHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.GridLineColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.GridLineStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.GridWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.LeftCol">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.Row">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.RowHeights">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.SaveOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.SelectedColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.Selection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.TopRow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.Align" link="#LCL.Controls.TControl.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.Anchors" link="#LCL.Controls.TControl.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.AutoAdvance" link="#LCL.Grids.TCustomGrid.AutoAdvance">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.Color" link="#LCL.Controls.TControl.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.ColCount" link="#LCL.Grids.TCustomGrid.ColCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.DefaultColWidth" link="#LCL.Grids.TCustomGrid.DefaultColWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.DefaultDrawing" link="#LCL.Grids.TCustomGrid.DefaultDrawing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.DefaultRowHeight" link="#LCL.Grids.TCustomGrid.DefaultRowHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.Enabled" link="#LCL.Controls.TControl.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.FixedColor" link="#LCL.Grids.TCustomGrid.FixedColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.FixedCols" link="#LCL.Grids.TCustomGrid.FixedCols">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.FixedRows" link="#LCL.Grids.TCustomGrid.FixedRows">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.Flat" link="#LCL.Grids.TCustomGrid.Flat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.Font" link="#LCL.Controls.TControl.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.GridLineWidth" link="#LCL.Grids.TCustomGrid.GridLineWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.Options" link="#LCL.Grids.TCustomGrid.Options">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.RowCount" link="#LCL.Grids.TCustomGrid.RowCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.ScrollBars" link="#LCL.Grids.TCustomGrid.ScrollBars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.VisibleColCount" link="#LCL.Grids.TCustomGrid.VisibleColCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.VisibleRowCount" link="#LCL.Grids.TCustomGrid.VisibleRowCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnBeforeSelection" link="#LCL.Grids.TCustomGrid.OnBeforeSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnClick" link="#LCL.Controls.TControl.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnColRowDeleted" link="#LCL.Grids.TCustomDrawGrid.OnColRowDeleted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnColRowExchanged" link="#LCL.Grids.TCustomDrawGrid.OnColRowExchanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnColRowMoved" link="#LCL.Grids.TCustomDrawGrid.OnColRowMoved">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnCompareCells" link="#LCL.Grids.TCustomDrawGrid.OnCompareCells">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnDblClick" link="#LCL.Controls.TControl.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnDrawCell" link="#LCL.Grids.TCustomGrid.OnDrawCell">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnGetEditMask" link="#LCL.Grids.TCustomDrawGrid.OnGetEditMask">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnGetEditText" link="#LCL.Grids.TCustomDrawGrid.OnGetEditText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnHeaderClick" link="#LCL.Grids.TCustomDrawGrid.OnHeaderClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnHeaderSized" link="#LCL.Grids.TCustomDrawGrid.OnHeaderSized">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnPrepareCanvas" link="#LCL.Grids.TCustomGrid.OnPrepareCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnSelectEditor" link="#LCL.Grids.TCustomGrid.OnSelectEditor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnSelection" link="#LCL.Grids.TCustomGrid.OnSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnSelectCell" link="#LCL.Grids.TCustomDrawGrid.OnSelectCell">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnSetEditText" link="#LCL.Grids.TCustomDrawGrid.OnSetEditText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnTopleftChanged" link="#LCL.Grids.TCustomGrid.OnTopLeftChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TStringGrid">
        <short>
          <var>TStringGrid</var> - a specialised grid for displaying strings (text material) in a matrix of columns and rows</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="HowToUseGrids"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStringGrid.FDefEditor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TStringGrid.GetCells">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStringGrid.GetCells.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.GetCells.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.GetCells.ARow">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TStringGrid.GetCols">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStringGrid.GetCols.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.GetCols.index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TStringGrid.GetObjects">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStringGrid.GetObjects.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.GetObjects.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.GetObjects.ARow">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TStringGrid.GetRows">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStringGrid.GetRows.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.GetRows.index">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TStringGrid.ReadCells">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.ReadCells.Reader">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TStringGrid.SetCells">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SetCells.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SetCells.ARow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SetCells.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TStringGrid.SetCols">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SetCols.index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SetCols.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TStringGrid.SetObjects">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SetObjects.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SetObjects.ARow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SetObjects.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TStringGrid.SetRows">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SetRows.index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SetRows.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TStringGrid.WriteCells">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.WriteCells.Writer">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringGrid.AutoAdjustColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.AutoAdjustColumn.aCol">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringGrid.CalcCellExtent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.CalcCellExtent.acol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.CalcCellExtent.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.CalcCellExtent.aRect">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringGrid.DefineProperties">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.DefineProperties.Filer">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringGrid.DrawCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.DrawCell.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.DrawCell.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.DrawCell.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.DrawCell.aState">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TStringGrid.GetEditText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStringGrid.GetEditText.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.GetEditText.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.GetEditText.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringGrid.LoadContent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.LoadContent.cfg">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.LoadContent.Version">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringGrid.SaveContent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SaveContent.cfg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringGrid.SelectEditor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringGrid.SetEditText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SetEditText.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SetEditText.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SetEditText.aValue">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TStringGrid.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.Create.AOWner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TStringGrid.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TStringGrid.AutoSizeColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TStringGrid.Cells">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.Cells.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.Cells.ARow">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TStringGrid.Cols">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.Cols.index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TStringGrid.Objects">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.Objects.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.Objects.ARow">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TStringGrid.Rows">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.Rows.index">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="DebugRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DebugRect.S">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DebugRect.R">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="DebugPoint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DebugPoint.S">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DebugPoint.P">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="DrawRubberRect">
        <short>Draw rubberband rect</short>
        <descr>Draw a rubberband around the provided cellrect
Segunda linea de texto</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DrawRubberRect.Canvas">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DrawRubberRect.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DrawRubberRect.Color">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="register">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="DEFCOLWIDTH">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="DEFROWHEIGHT">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goFixedRowNumbering">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goScrollKeepVisible">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goHeaderHotTracking">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridOption.goHeaderPushedLook">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridDrawState.gdHot">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridDrawState.gdPushed">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridState.gsHeaderClicking">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridZone.gzInvalid">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TGridZoneSet">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TAutoAdvance.aaRightDown">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TAutoAdvance.aaLeftDown">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TAutoAdvance.aaRightUp">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TAutoAdvance.aaLeftUp">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TColumnButtonStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TColumnButtonStyle.cbsAuto">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TColumnButtonStyle.cbsEllipsis">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TColumnButtonStyle.cbsNone">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TColumnButtonStyle.cbsPickList">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TColumnButtonStyle.cbsCheckboxColumn">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TTitleStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTitleStyle.tsLazarus">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTitleStyle.tsStandard">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTitleStyle.tsNative">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TGridFlagsOption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridFlagsOption.gfEditorUpdateLock">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridFlagsOption.gfNeedsSelectActive">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridFlagsOption.gfEditorTab">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridFlagsOption.gfRevEditorTab">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridFlagsOption.gfVisualChange">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridFlagsOption.gfDefRowHeightChanged">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TGridFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TSortOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TSortOrder.soAscending">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TSortOrder.soDescending">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TGridColumn">
        <short>
          <var>TGridColumn</var> - a column of similar data items in a grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStringCellEditor.FCol">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStringCellEditor.FRow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringCellEditor.WndProc" link="#LCL.Controls.TControl.WndProc">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringCellEditor.WndProc.TheMessage">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TStringCellEditor.EditingDone" link="#LCL.Controls.TControl.EditingDone">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TButtonCellEditor">
        <short>
          <var>TButtonCellEditor</var> - the editor for button cells in a grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TButtonCellEditor.FGrid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TButtonCellEditor.FCol">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TButtonCellEditor.FRow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TButtonCellEditor.msg_SetGrid">
        <short>
          <var>msg_SetGrid</var> - issues message for specifying grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TButtonCellEditor.msg_SetGrid.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TButtonCellEditor.msg_SetPos">
        <short>
          <var>msg_SetPos</var> - issues message for specifying position</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TButtonCellEditor.msg_SetPos.Msg">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TButtonCellEditor.Col">
        <short>
          <var>Col</var> - the column in which the edited cell resides</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TButtonCellEditor.Row">
        <short>
          <var>Row</var> - the row in which the edited cell resides</short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TPickListCellEditor">
        <short>
          <var>TPickListCellEditor</var> - the editor for a picklist cell in a grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TPickListCellEditor.FGrid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TPickListCellEditor.FCol">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TPickListCellEditor.FRow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TPickListCellEditor.WndProc" link="#LCL.Controls.TControl.WndProc">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPickListCellEditor.WndProc.TheMessage">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TPickListCellEditor.KeyDown" link="#LCL.Controls.TWinControl.KeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPickListCellEditor.KeyDown.Key">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPickListCellEditor.KeyDown.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TPickListCellEditor.DropDown" link="#LCL.StdCtrls.TCustomComboBox.DropDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TPickListCellEditor.CloseUp" link="#LCL.StdCtrls.TCustomComboBox.CloseUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TPickListCellEditor.Select" link="#LCL.StdCtrls.TCustomComboBox.Select">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TPickListCellEditor.msg_GetValue">
        <short>
          <var>msg_GetValue</var> - issues a message to find the value</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPickListCellEditor.msg_GetValue.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TPickListCellEditor.msg_SetGrid">
        <short>
          <var>msg_SetGrid</var> - issues a message to specify the grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPickListCellEditor.msg_SetGrid.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TPickListCellEditor.msg_SetValue">
        <short>
          <var>msg_SetValue</var> - issues a message to specify the value</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPickListCellEditor.msg_SetValue.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TPickListCellEditor.EditingDone" link="#LCL.Controls.TControl.EditingDone">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TPickListCellEditor.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnDrawCell.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnDrawCell.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnSelectCellEvent.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnSelectCellEvent.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnSelectEvent.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnSelectEvent.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSelectEditorEvent.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSelectEditorEvent.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnPrepareCanvasEvent.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnPrepareCanvasEvent.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TVirtualGrid.InsertColRow">
        <short>
          <var>InsertColRow</var> - insert either a column or a row (depending on value of <var>IsColumn</var>) at the specified index position</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.InsertColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TVirtualGrid.InsertColRow.Index">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TGridColumnTitle">
        <short>
          <var>TGridColumnTitle</var> - the title for a column in a grid</short>
        <descr>
          <p>
            <var>TGridColumnTitle</var> - the title for a column in a grid</p>
          <p>The actual title is held in <var>Caption</var>
          </p>
          <p>
            <var>Column</var> refers to the Grid Column to which the Title is attached</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumnTitle.FColumn">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumnTitle.FCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumnTitle.FColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumnTitle.FAlignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumnTitle.FFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumnTitle.FIsDefaultTitleFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumnTitle.FLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumnTitle.FontChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumnTitle.FontChanged.Sender">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumnTitle.GetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumnTitle.GetAlignment.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumnTitle.GetCaption">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumnTitle.GetCaption.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumnTitle.GetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumnTitle.GetColor.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumnTitle.GetFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumnTitle.GetFont.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumnTitle.GetLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumnTitle.GetLayout.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumnTitle.IsAlignmentStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumnTitle.IsAlignmentStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumnTitle.IsCaptionStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumnTitle.IsCaptionStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumnTitle.IsColorStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumnTitle.IsColorStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumnTitle.IsFontStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumnTitle.IsFontStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumnTitle.IsLayoutStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumnTitle.IsLayoutStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumnTitle.SetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumnTitle.SetAlignment.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumnTitle.SetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumnTitle.SetColor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumnTitle.SetFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumnTitle.SetFont.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumnTitle.SetLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumnTitle.SetLayout.AValue">
        <short/>
      </element>
      <!-- property Visibility: private -->
      <element name="TGridColumnTitle.IsDefaultFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TGridColumnTitle.Assign" link="#rtl.Classes.TPersistent.Assign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumnTitle.Assign.Source">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TGridColumnTitle.GetDefaultCaption">
        <short>
          <var>GetDefaultCaption</var> - returns th e default caption for this column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumnTitle.GetDefaultCaption.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TGridColumnTitle.GetDefaultAlignment">
        <short>
          <var>GetDefaultAlignment</var> - returns the default alignment</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumnTitle.GetDefaultAlignment.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TGridColumnTitle.GetDefaultColor">
        <short>
          <var>GetDefaultColor</var> - returns the default colour</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumnTitle.GetDefaultColor.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TGridColumnTitle.GetDefaultLayout">
        <short>
          <var>GetDefaultLayout</var> - returns the default layout</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumnTitle.GetDefaultLayout.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TGridColumnTitle.SetCaption">
        <short>
          <var>SetCaption</var> - specifies the caption to use (rather than using default)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumnTitle.SetCaption.AValue">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TGridColumnTitle.Create" link="#rtl.System.TObject.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumnTitle.Create.TheColumn">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TGridColumnTitle.Destroy" link="#rtl.Classes.TPersistent.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TGridColumnTitle.FillTitleDefaultFont">
        <short>
          <var>FillTitleDefaultFont</var> - use the default font for the whole of the title</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TGridColumnTitle.IsDefault">
        <short>
          <var>IsDefault</var> - returns True if this is the default title</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumnTitle.IsDefault.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TGridColumnTitle.Column">
        <short>The <var>Column</var> to which the title applies</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumnTitle.Alignment">
        <short>The <var>Alignment</var> (whether justified or centred) for this title</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumnTitle.Layout">
        <short>The <var>Layout</var> for the text of the title</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumnTitle.Caption">
        <short>The <var>Caption</var> for this title</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumnTitle.Color">
        <short>The <var>Color</var> to use for this title</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumnTitle.Font">
        <short>The <var>Font</var> for this title</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumn.FButtonStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumn.FDropDownRows">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumn.FTitle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumn.FWidthChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumn.FAlignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumn.FColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumn.FLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumn.FVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumn.FReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumn.FWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumn.FFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumn.FisDefaultFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumn.FPickList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumn.FMinSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumn.FMaxSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumn.FSizePriority">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumn.FontChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumn.FontChanged.Sender">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.GetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetAlignment.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.GetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetColor.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.GetExpanded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetExpanded.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.GetFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetFont.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.GetGrid">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetGrid.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.GetLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetLayout.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.GetMaxSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetMaxSize.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.GetMinSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetMinSize.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.GetSizePriority">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetSizePriority.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.GetPickList">
        <short>
          <var>GetPickList</var> - returns the picklist as a list of strings</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetPickList.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.GetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetReadOnly.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.GetVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetVisible.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.GetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetWidth.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.IsAlignmentStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.IsAlignmentStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.IsColorStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.IsColorStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.IsFontStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.IsFontStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.IsLayoutStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.IsLayoutStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.IsMinSizeStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.IsMinSizeStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.IsMaxSizeStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.IsMaxSizeStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.IsReadOnlyStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.IsReadOnlyStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.IsSizePriorityStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.IsSizePriorityStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.IsVisibleStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.IsVisibleStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumn.IsWidthStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.IsWidthStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumn.SetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumn.SetAlignment.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumn.SetButtonStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumn.SetButtonStyle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumn.SetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumn.SetColor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumn.SetExpanded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumn.SetExpanded.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumn.SetFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumn.SetFont.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumn.SetLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumn.SetLayout.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumn.SetMaxSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumn.SetMaxSize.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumn.SetMinSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumn.SetMinSize.Avalue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumn.SetPickList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumn.SetPickList.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumn.SetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumn.SetReadOnly.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumn.SetSizePriority">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumn.SetSizePriority.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumn.SetTitle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumn.SetTitle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumn.SetVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumn.SetVisible.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumn.SetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumn.SetWidth.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TGridColumn.Assign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumn.Assign.Source">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TGridColumn.GetDisplayName" link="#rtl.Classes.TCollectionItem.GetDisplayName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetDisplayName.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TGridColumn.GetDefaultAlignment">
        <short>
          <var>GetDefaultAlignment</var> - returns the default alignment</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetDefaultAlignment.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TGridColumn.GetDefaultColor">
        <short>
          <var>GetDefaultColor</var> - returns the default colour</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetDefaultColor.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TGridColumn.GetDefaultLayout">
        <short>
          <var>GetDefaultLayout</var> - returns the default layout for text</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetDefaultLayout.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TGridColumn.GetDefaultMaxSize">
        <short>
          <var>GetDefaultMaxSize</var> -returns the default maximum size</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetDefaultMaxSize.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TGridColumn.GetDefaultMinSize">
        <short>
          <var>GetDefaultMinSize</var> - returns the default minimum size</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetDefaultMinSize.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TGridColumn.GetDefaultReadOnly">
        <short>
          <var>GetDefaultReadOnly</var> - returns the default value for the <var>ReadOnly</var> property</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetDefaultReadOnly.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TGridColumn.GetDefaultSizePriority">
        <short>
          <var>GetDefaultSizePriority</var> - returns the default value for size priority</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetDefaultSizePriority.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TGridColumn.GetDefaultVisible">
        <short>
          <var>GetDefaultVisible</var> - returns the default value for the <var>Visible</var> property</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetDefaultVisible.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TGridColumn.GetDefaultWidth">
        <short>
          <var>GetDefaultWidth</var> - returns the default value for width</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.GetDefaultWidth.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TGridColumn.ColumnChanged">
        <short>
          <var>ColumnChanged</var> - method for dealing with change of column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TGridColumn.AllColumnsChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TGridColumn.CreateTitle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.CreateTitle.Result">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TGridColumn.IsDefaultFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TGridColumn.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumn.Create.ACollection">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TGridColumn.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TGridColumn.FillDefaultFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TGridColumn.IsDefault">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumn.IsDefault.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TGridColumn.Grid">
        <short>The <var>Grid</var> to which this column belongs</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TGridColumn.WidthChanged">
        <short>
          <var>WidthChanged</var> - if True, width has been changed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumn.Alignment">
        <short>
          <var>Alignment</var> - whether justified, centred etc</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumn.ButtonStyle">
        <short>
          <var>ButtonStyle</var> - the style of any column button</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumn.Color">
        <short>the <var>Color</var> for this column</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumn.DropDownRows">
        <short>
          <var>DropDownRows</var> - the number of rows in the drop-down list</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumn.Expanded">
        <short>Whether the column has been <var>Expanded</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumn.Font">
        <short>The <var>Font</var> for the column</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumn.Layout">
        <short>The <var>Layout</var> for text</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumn.MinSize">
        <short>
          <var>MinSize</var> - the minimum size</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumn.MaxSize">
        <short>
          <var>MaxSize</var> - the maximum size</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumn.PickList">
        <short>
          <var>PickList</var> - the list of items selected from this column</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumn.ReadOnly">
        <short>
          <var>ReadOnly</var> - if True, only reading (not writing) is allowed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumn.SizePriority">
        <short>
          <var>SizePriority</var> - the value of the size priority in the sorted order</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumn.Title">
        <short>The <var>Title</var> for the column</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumn.Width">
        <short>The <var>Width</var> of the column</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridColumn.Visible">
        <short>
          <var>Visible</var> - if True, the column can be seen (ie not hidden)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TGridPropertyBackup">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridPropertyBackup.ValidData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridPropertyBackup.FixedRowCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridPropertyBackup.FixedColCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TGridColumns">
        <short>
          <var>TGridColumns</var> - the group of columns in the grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridColumns.FGrid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumns.GetColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumns.GetColumn.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumns.GetColumn.Index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumns.GetEnabled">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumns.GetEnabled.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGridColumns.SetColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumns.SetColumn.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumns.SetColumn.Value">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TGridColumns.GetVisibleCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumns.GetVisibleCount.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TGridColumns.Update" link="#rtl.Classes.TCollection.Update">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumns.Update.Item">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TGridColumns.TitleFontChanged">
        <short>
          <var>TitleFontChanged</var> - method to deal with a change in title font</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TGridColumns.FontChanged">
        <short>
          <var>FontChanged</var> - method to deal with a change in font for the columns</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TGridColumns.RemoveColumn">
        <short>
          <var>RemoveColumn</var> - method to remove the specified column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumns.RemoveColumn.Index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TGridColumns.MoveColumn">
        <short>
          <var>MoveColumn</var> from the first index to the second</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumns.MoveColumn.FromIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumns.MoveColumn.ToIndex">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TGridColumns.ExchangeColumn">
        <short>
          <var>ExchangeColumn</var> - exchange the position of the current column with the specified other column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumns.ExchangeColumn.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumns.ExchangeColumn.WithIndex">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TGridColumns.InsertColumn">
        <short>
          <var>InsertColumn</var> with the specified index</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumns.InsertColumn.Index">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TGridColumns.Create" link="#rtl.Classes.TCollection.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumns.Create.AGrid">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumns.Create.aItemClass">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TGridColumns.Add" link="#rtl.Classes.TCollection.Add">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumns.Add.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TGridColumns.Clear" link="#rtl.Classes.TCollection.Clear">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TGridColumns.RealIndex">
        <short>
          <var>RealIndex</var> - the proper index for this column</short>
        <descr>Real in this sense means proper or correct, not a Real number (as it is specified as an integer)</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumns.RealIndex.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumns.RealIndex.Index">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TGridColumns.IndexOf">
        <short>
          <var>IndexOf</var> this column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumns.IndexOf.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumns.IndexOf.Column">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TGridColumns.IsDefault">
        <short>
          <var>IsDefault</var> returns True if this is the default column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumns.IsDefault.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TGridColumns.HasIndex">
        <short>
          <var>HasIndex</var> - returns True if the current column has an index value</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumns.HasIndex.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumns.HasIndex.Index">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TGridColumns.VisibleIndex">
        <short>
          <var>VisibleIndex</var> - the index value of a visible column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGridColumns.VisibleIndex.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumns.VisibleIndex.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TGridColumns.Grid">
        <short>The <var>Grid</var> to which the current collection of columns belongs</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TGridColumns.Items">
        <short>
          <var>Items</var> - the list of columns in this collection</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridColumns.Items.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TGridColumns.VisibleCount">
        <short>
          <var>VisibleCount</var> - the number of visible columns</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TGridColumns.Enabled">
        <short>If True, the columns are <var>Enabled</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.ValidRows">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.ValidCols">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.HotCell">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.HotCellPainted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.HotGridZone">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.ClickCell">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.ClickMouse">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.PushedCell">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.PushedMouse">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TGridDataCache.ClickCellPushed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FAlternateColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FAutoEdit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FBorderColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FEditorHidingCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FExtendedSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FFastEditing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FAltColorStartNormal">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FSortOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FTitleStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FOnEditButtonClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FOnPickListSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FFixedHotColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FUseXORFeatures">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FTitleFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FLastFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FTitleFontIsDefault">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FColumns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FButtonEditor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FStringEditor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FPickListEditor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FExtendedColSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FExtendedRowSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FUpdatingAutoFillCols">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FPrevLine">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FPrevValue">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FGridBorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FGridFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FGridPropBackup">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FStrictSort">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FIgnoreClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FAllowOutboundEvents">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FHeaderHotZones">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FHeaderPushZones">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.CancelSelection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.CheckIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CheckIndex.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CheckIndex.Index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.GetSelectedColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetSelectedColumn.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.IsDefRowHeightStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.IsDefRowHeightStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetAlternateColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetAlternateColor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetBorderColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetBorderColor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetColumns.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetEditorOptions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetEditorOptions.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetEditorBorderStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetEditorBorderStyle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetAltColorStartNormal">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetAltColorStartNormal.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetTitleFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetTitleFont.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetTitleStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetTitleStyle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetUseXorFeatures">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetUseXorFeatures.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.DrawXORVertLine">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawXORVertLine.X">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.DrawXORHorzLine">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawXORHorzLine.Y">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.FixPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.GetColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetColumns.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.GetEditorBorderStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetEditorBorderStyle.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.GetBorderWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetBorderWidth.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.HeadersMouseMove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.HeadersMouseMove.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.HeadersMouseMove.Y">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.InternalNeedBorder">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.InternalNeedBorder.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.InternalSetColWidths">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.InternalSetColWidths.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.InternalSetColWidths.aValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.InternalSetFixedCols">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.InternalSetFixedCols.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.InternalUpdateColumnWidths">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.InvalidateMovement">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.InvalidateMovement.DCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.InvalidateMovement.DRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.InvalidateMovement.OldRange">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.IsAltColorStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.IsAltColorStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.IsColumnsStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.IsColumnsStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.IsPushCellActive">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.IsPushCellActive.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.OnTitleFontChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.OnTitleFontChanged.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.ReadColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ReadColumns.Reader">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.ResetHotCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.ResetPushedCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ResetPushedCell.ResetColRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetCol.AValue">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetColCount.AValue">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetDefColWidth.AValue">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetDefRowHeight.AValue">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetRow.AValue">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetRowCount.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.UpdateCachedSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.UpdateSBVisibility">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.UpdateSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.WriteColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.WriteColumns.Writer">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.AdjustDefaultRowHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.CanEditShow">
        <short>
          <var>CanEditShow</var> - returns True if the editing data can be shown</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.CanEditShow.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.CanGridAcceptKey">
        <short>
          <var>CanGridAcceptKey</var> - returns True is the grid is able to accept the given key</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.CanGridAcceptKey.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CanGridAcceptKey.Key">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CanGridAcceptKey.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.CheckLimitsWithError">
        <short>
          <var>CheckLimitsWithError</var> - method for checking limits of specified cel, with error trapping</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CheckLimitsWithError.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CheckLimitsWithError.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.CMMouseLeave">
        <short>
          <var>CMMouseLeave</var> - Control Message for a mouse leaving a cell</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CMMouseLeave.Message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ColRowInserted">
        <short>
          <var>ColRowInserted</var> - method for dealing with insertion of a column or row (depending on value of <var>IsCol</var>)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowInserted.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowInserted.index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowToOffset.Relative">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowToOffset.StartPos">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColRowToOffset.EndPos">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.ColumnIndexFromGridColumn">
        <short>
          <var>ColumnIndexFromGridColumn</var> - extracts the index of the specified grid column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.ColumnIndexFromGridColumn.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColumnIndexFromGridColumn.Column">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.ColumnFromGridColumn">
        <short>
          <var>ColumnFromGridColumn</var> - returns the actual grid column given its index</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.ColumnFromGridColumn.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColumnFromGridColumn.Column">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ColumnsChanged">
        <short>
          <var>ColumnsChanged</var> - method for dealing with changed columns</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColumnsChanged.aColumn">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.CreateColumns">
        <short>
          <var>CreateColumns</var> - returns the identity of the created columns</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.CreateColumns.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.CheckNewCachedSizes">
        <short>
          <var>CheckNewCachedSizes</var> - check the new values of cached sizes</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CheckNewCachedSizes.AGCache">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.Click" link="#LCL.Controls.TControl.Click">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.DoCompareCells">
        <short>
          <var>DoCompareCells</var> - perform the comparison of two or more cells in a grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.DoCompareCells.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoCompareCells.Acol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoCompareCells.ARow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoCompareCells.Bcol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoCompareCells.BRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DoCopyToClipboard">
        <short>
          <var>DoCopyToClipboard</var> - copy the selected data to the clipboard, leaving the original data in place</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DoCutToClipboard">
        <short>
          <var>DoCutToClipboard</var> - cut the data from its current site and place it on the clipboard</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DoEditorHide">
        <short>
          <var>DoEditorHide</var> - hide the data in the editor</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DoEditorShow">
        <short>
          <var>DoEditorShow</var> - show the data in the editor</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.DoMouseWheelDown" link="#LCL.Controls.TControl.DoMouseWheelDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.DoMouseWheelDown.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoMouseWheelDown.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoMouseWheelDown.MousePos">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.DoMouseWheelUp" link="#LCL.Controls.TControl.DoMouseWheelUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.DoMouseWheelUp.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoMouseWheelUp.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoMouseWheelUp.MousePos">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DoOPDeleteColRow">
        <short>
          <var>DoOPDeleteColRow</var> performs the operation for deleting a column or row (depending on value of <var>IsCol</var>)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoOPDeleteColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoOPDeleteColRow.index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DoOPExchangeColRow">
        <short>
          <var>DoOPExchangeColRow</var> - perform the operation for exchanging either the current column or row (depending on value of <var>IsCol</var>) with the column or row specified by <var>WithIndex</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoOPExchangeColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoOPExchangeColRow.index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoOPExchangeColRow.WithIndex">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DoOPInsertColRow">
        <short>
          <var>DoOPInsertColRow</var> - perform th eoperation for inserting either a column or a row (depending on the value of <var>IsCol</var>) at th indexed position</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoOPInsertColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoOPInsertColRow.index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DoOPMoveColRow">
        <short>
          <var>DoOPMoveColRow</var> - performs the operation for moving either a column or a row (depending on the value of <var>IsCol</var>)  between <var>FromIndex</var> and <var>ToIndex</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoOPMoveColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoOPMoveColRow.FromIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoOPMoveColRow.ToIndex">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DoPasteFromClipboard">
        <short>
          <var>DoPasteFromClipboard</var> paste the data from the clipboard to the current location</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DoPrepareCanvas">
        <short>
          <var>DoPrepareCanvas</var> - get the canvas ready for drawing</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoPrepareCanvas.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoPrepareCanvas.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DoPrepareCanvas.aState">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DrawAllRows" link=" ">
        <short>
          <var>DrawAllRows</var> - draws all the rows</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DrawCellText">
        <short>
          <var>DrawCellText</var> - draws the given text string in the cell specified by Col, Row or by Rectangle</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCellText.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCellText.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCellText.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCellText.aState">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCellText.aText">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DrawColumnText">
        <short>
          <var>DrawColumnText</var> - draw the text of the specified column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawColumnText.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawColumnText.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawColumnText.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawColumnText.aState">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.EditButtonClicked">
        <short>
          <var>EditButtonClicked</var> - calls <var>OnEditButtonClick</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditButtonClicked.Sender">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.EditorLocked">
        <short>
          <var>EditorLocked</var> - returns True if the Editor is locked, ie unable to accept input or make changes</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.EditorLocked.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.EditorShowInCell">
        <short>
          <var>EditorShowInCell</var> - shows the Editor's content <i>in situ</i> in the Cell</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorShowInCell.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorShowInCell.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.EditorWidthChanged">
        <short>
          <var>EditorWidthChanged</var> - method for dealing with a change in editor width</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorWidthChanged.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorWidthChanged.aWidth">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.FixedGrid">
        <short>
          <var>FixedGrid</var> - returns True if the Grid is fixed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.FixedGrid.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.FontChanged">
        <short>
          <var>FontChanged</var> - method to deal with a change in font</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.FontChanged.Sender">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetColumnAlignment">
        <short>
          <var>GetColumnAlignment</var> - returns the Alignment value for the nominated column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetColumnAlignment.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetColumnAlignment.Column">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetColumnAlignment.ForTitle">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetColumnColor">
        <short>
          <var>GetColumnColor</var> - returns the Colour for the specified column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetColumnColor.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetColumnColor.Column">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetColumnColor.ForTitle">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetColumnFont">
        <short>
          <var>GetColumnFont</var> - returns the font for the specified column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetColumnFont.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetColumnFont.Column">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetColumnFont.ForTitle">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetColumnLayout">
        <short>
          <var>GetColumnLayout</var> - returns the Text Layout value for the specified column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetColumnLayout.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetColumnLayout.Column">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetColumnLayout.ForTitle">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetColumnReadonly">
        <short>
          <var>GetColumnReadonly</var> - returns True if the column is marked ReadOnly</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetColumnReadonly.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetColumnReadonly.Column">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetColumnTitle">
        <short>
          <var>GetColumnTitle</var> - returns the column title string</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetColumnTitle.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetColumnTitle.Column">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetColumnWidth">
        <short>
          <var>GetColumnWidth</var> - returns the width of the column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetColumnWidth.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetColumnWidth.Column">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetDeltaMoveNext">
        <short>
          <var>GetDeltaMoveNext</var> return the relative cell coordinate of the next cell to which movement will occur</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetDeltaMoveNext.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetDeltaMoveNext.Inverse">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetDeltaMoveNext.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetDeltaMoveNext.ARow">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetDefaultColumnAlignment">
        <short>
          <var>GetDefaultColumnAlignment</var> - returns the default alignment for the specified column </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetDefaultColumnAlignment.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetDefaultColumnAlignment.Column">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetDefaultColumnWidth">
        <short>
          <var>GetDefaultColumnWidth</var> - returns the default width for the specified column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetDefaultColumnWidth.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetDefaultColumnWidth.Column">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetDefaultColumnLayout">
        <short>
          <var>GetDefaultColumnLayout</var> - returns the default text layout for the nominated column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetDefaultColumnLayout.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetDefaultColumnLayout.Column">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetDefaultColumnReadOnly">
        <short>
          <var>GetDefaultColumnReadOnly</var> - returns the default setting of the ReadOnly flag for the specified column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetDefaultColumnReadOnly.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetDefaultColumnReadOnly.Column">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetDefaultColumnTitle">
        <short>
          <var>GetDefaultColumnTitle</var> - returns the default title string for the specified column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetDefaultColumnTitle.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetDefaultColumnTitle.Column">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetDefaultEditor">
        <short>
          <var>GetDefaultEditor</var> - returns the default editor for the specified column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetDefaultEditor.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetDefaultEditor.Column">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetDefaultRowHeight">
        <short>
          <var>GetDefaultRowHeight</var> - returns the default row height</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetDefaultRowHeight.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetScrollBarPosition">
        <short>
          <var>GetScrollBarPosition</var> - returns the position of the scroll bar specified by <var>Which</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetScrollBarPosition.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetScrollBarPosition.Which">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.GetSBVisibility">
        <short>
          <var>GetSBVisibility</var> - finds the values of the visibility flags for the scrollbars</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetSBVisibility.HsbVisible">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetSBVisibility.VsbVisible">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.GetSBRanges">
        <short>
          <var>GetSBRanges</var> - finds the ranges of values for the scrollbars, if they are visible</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetSBRanges.HsbVisible">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetSBRanges.VsbVisible">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetSBRanges.HsbRange">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetSBRanges.VsbRange">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetSBRanges.HsbPage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetSBRanges.VsbPage">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GridColumnFromColumnIndex">
        <short>
          <var>GridColumnFromColumnIndex</var> - returns the number of the column given its column index</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GridColumnFromColumnIndex.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GridColumnFromColumnIndex.ColumnIndex">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.InternalSetColCount">
        <short>
          <var>InternalSetColCount</var> - specify the column count</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.InternalSetColCount.ACount">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.InvalidateRange">
        <short>
          <var>InvalidateRange</var> - render a range of the grid non-valid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.InvalidateRange.aRange">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.InvalidateFromCol">
        <short>
          <var>InvalidateFromCol</var> - render the grid non-valid from the specified column onwards</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.InvalidateFromCol.ACol">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.InvalidateFocused">
        <short>
          <var>InvalidateFocused</var> - render the focused item non-valid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.GetIsCellSelected">
        <short>
          <var>GetIsCellSelected</var> - returns True if the given cell is selected</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetIsCellSelected.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetIsCellSelected.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetIsCellSelected.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.LockEditor">
        <short>
          <var>LockEditor</var> - lock the editor so that it will not accept input or changes</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MoveNextAuto.Inverse">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.OffsetToColRow.Index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ParentFormHandleInitialized">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.PickListItemSelected">
        <short>
          <var>PickListItemSelected</var> - indicates that an item was selected from the pick-list</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.PickListItemSelected.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ResetEditor">
        <short>
          <var>ResetEditor</var> - resets the current editor for the grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ResetSizes">
        <short>
          <var>ResetSizes</var> - resets the sizes</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ResizeColumn">
        <short>
          <var>ResizeColumn</var> - resizes the nominated column to the specified width</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ResizeColumn.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ResizeColumn.aWidth">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ResizeRow">
        <short>
          <var>ResizeRow</var> - resizes the nominated row to the specified height</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ResizeRow.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ResizeRow.aHeight">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.ScrollBarIsVisible">
        <short>
          <var>ScrollBarIsVisible</var> - Returns True if visible; <var>Which</var> determines whether horizontal or vertical</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.ScrollBarIsVisible.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ScrollBarIsVisible.Which">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.SetCanvasFont">
        <short>
          <var>SetCanvasFont</var> to specified value</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetCanvasFont.aFont">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.SetColor">
        <short>
          <var>SetColor</var> to specified value</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetColor.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.SetColRow">
        <short>
          <var>SetColRow</var> - specifies the column and row for addressing</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetColRow.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetColRow.ARow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.UnLockEditor">
        <short>
          <var>UnLockEditor</var> - frees a previously locked Editor</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.UpdateBorderStyle">
        <short>
          <var>UpdateBorderStyle</var> - brings the border style up to date</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.WMKillFocus" link="#LCL.Controls.TWinControl.WMKillFocus">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.WMKillFocus.message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.WMSetFocus" link="#LCL.Controls.TWinControl.WMSetFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.WMSetFocus.message">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.AllowOutboundEvents">
        <short>
          <var>AllowOutboundEvents</var> - permits mouse click on an imaginary (out-of-bounds) cell; moves cursor to nearest valid cell</short>
        <descr>
          <p>Normally when a user clicks on a point over the empty space after cells (for example if grid has three rows but user clicks on imaginary fourth row) the current focused cell will move to the nearest cell to clicked point; we call this an outbound event. </p>
          <p>Default value is true, as this has been the grid's behaviour since the  beginning. </p>
          <p>This property was added to simulate Delphi behaviour where outbound events are not available; to enable Delphi compatibility set this property to false.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.AlternateColor">
        <short>The colour to be used for the background on alternate rows of the grid. Having alternate rows in different colours can make the grid easier to read.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.AutoEdit">
        <short>Whether the Edit mode is automatically entered when a cell is selected</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.BorderColor">
        <short>The colour of the border for this control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.Columns">
        <short>The properties of the columns in this grid</short>
        <descr>
          <p>The <i>Columns</i> property of a grid refers to the physical column in the table, and determines its size, shape, colour etc. It should not be confused with the COLUMNS construct frequently used in SQL programming, which refers to <i>Fields</i> of data. The contents of Fields can be displayed as Columns in a Grid, but they must be seen as separate and distinct. It is irrelevant to refer to the colour, font or width of a data field from a database, but these are all very relevant in specifying the appearance of a column in a grid.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.EditorBorderStyle">
        <short>The border style for the editor used in this grid</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.EditorOptions">
        <short>The set of options available for the grid's editor</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.ExtendedColSizing">
        <short>
          <var>ExtendedColSizing</var> - the sizing to be used for extended columns</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.ExtendedRowSizing">
        <short>
          <var>ExtendedRowSizing</var> - the sizing to be used for extended rows</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.ExtendedSelect">
        <short>
          <var>ExtendedSelect</var> - the ability to select cells beyond the boundary of the visible part of the grid</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.FastEditing">
        <short>Is the <var>FastEditing</var> method being used?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.AltColorStartNormal">
        <short>
          <var>AltColorStartNormal</var> - using a second colour to display alternate rows, but starting the first row with the normal colour</short>
        <descr>
          <p>
            <var>AltColorStartNormal</var> - using a second colour to display alternate rows, but starting the first row with the normal colour</p>
          <p>Using a different colour for the background of alternate rows often makes the data in a grid much easier to read</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.FixedHotColor">
        <short>
          <var>FixedHotColor</var> - the 'Hot' colour for the active (selected, etc) fixed cells of the grid</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.GridFlags">
        <short>
          <var>GridFlags</var> - the flags that are set for the grid</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.HeaderHotZones">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.HeaderPushZones">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.InplaceEditor">
        <short>
          <var>InplaceEditor</var> - the editor to be used in-place, ie in the cell itself instead of outside the grid</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.SelectedColumn">
        <short>The column (field) currently selected</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.StrictSort">
        <short>
          <var>StrictSort</var> - is strict sorting to be used?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.TitleFont">
        <short>The font to be used in the grid's title</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.TitleStyle">
        <short>The style to be used for the grid's title</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.UseXORFeatures">
        <short>
          <var>UseXORFeatures</var>: When True, the dotted focus rectangle is painted using the XOR raster operation</short>
        <descr>
          <p>This property controls how the dotted focus rectangle appears in the grid. When True, the rectangle is painted using the XOR raster operation. This allow us to see the focus rectangle no matter what the cells' background color is. When False, the user can control the color of the dotted focus rectangle using the <var>FocusColor</var> property</p>
          <p>It also controls the look of the column/row resizing. When True, a line shows visually the size that the the column or row will have if the user ends the operation. When False, the column or row resizing takes effect just as the user drags the mouse</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.OnEditButtonClick">
        <short>Event handler for when the Edit button is clicked</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.OnPickListSelect">
        <short>Event handler for selecting an item from a picklist (eg drop-down list in <var>TComboBox</var>)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.EditingDone" link="#LCL.Controls.TControl.EditingDone">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomGrid.CellToGridZone">
        <short>Convert the coordinates of the current cell (col, row) to a grid zone</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.CellToGridZone.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CellToGridZone.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.CellToGridZone.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.CheckPosition">
        <short>Check the position of the cursor</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomGrid.EditorByStyle">
        <short>Select a cell editor control with the specified style</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.EditorByStyle.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EditorByStyle.Style">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EndUpdate.aRefresh">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.EraseBackground">
        <short>Clear the background to the grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.EraseBackground.DC">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomGrid.MouseCoord">
        <short>Find the mouse coordinates relative to the grid origin</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.MouseCoord.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseCoord.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.MouseCoord.Y">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGrid.SetFocus">
        <short>Set focus on the grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomGrid.SortOrder">
        <short>Order of sorting - ascending or descending</short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomDrawGrid">
        <short>
          <var>TCustomDrawGrid </var>- Base Class for drawn grids including <var>TDrawGrid</var> and <var>TStringGrid</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="HowToUseGrids"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDrawGrid.FOnColRowDeleted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDrawGrid.FOnColRowExchanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDrawGrid.FOnColRowInserted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDrawGrid.FOnColRowMoved">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDrawGrid.FOnGetEditMask">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDrawGrid.FOnGetEditText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDrawGrid.FOnHeaderClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDrawGrid.FOnHeaderSized">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDrawGrid.FOnSelectCell">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDrawGrid.FOnSetEditText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomDrawGrid.FGrid">
        <short>
          <var>FGrid</var> - local variable holding a virtual grid on which to work</short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDrawGrid.CalcCellExtent">
        <short>
          <var>CalcCellExtent</var> - calculate the dimensions required for the cell specified by <var>aCol, aRow</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.CalcCellExtent.acol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.CalcCellExtent.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.CalcCellExtent.aRect">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDrawGrid.ColRowDeleted" link="#LCL.Grids.TCustomGrid.ColRowDeleted">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.ColRowDeleted.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.ColRowDeleted.index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDrawGrid.ColRowExchanged" link="#LCL.Grids.TCustomGrid.ColRowExchanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.ColRowExchanged.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.ColRowExchanged.index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.ColRowExchanged.WithIndex">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDrawGrid.ColRowInserted" link="#LCL.Grids.TCustomGrid.ColRowInserted">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.ColRowInserted.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.ColRowInserted.index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDrawGrid.ColRowMoved" link="#LCL.Grids.TCustomGrid.ColRowMoved">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.ColRowMoved.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.ColRowMoved.FromIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.ColRowMoved.ToIndex">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDrawGrid.CreateVirtualGrid">
        <short>
          <var>CreateVirtualGrid</var> - returns the created virtual grid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDrawGrid.CreateVirtualGrid.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDrawGrid.DrawCell" link="#LCL.Grids.TCustomGrid.DrawCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.DrawCell.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.DrawCell.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.DrawCell.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.DrawCell.aState">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDrawGrid.DrawCellAutonumbering">
        <short>
          <var>DrawCellAutonumbering</var> - draws a cell using auto numbering</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.DrawCellAutonumbering.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.DrawCellAutonumbering.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.DrawCellAutonumbering.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.DrawCellAutonumbering.aValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDrawGrid.DrawFocusRect">
        <short>
          <var>DrawFocusRect</var> - draws the rectangle currently receiving focus</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.DrawFocusRect.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.DrawFocusRect.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.DrawFocusRect.ARect">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDrawGrid.GetEditMask" link="#LCL.Grids.TCustomGrid.GetEditMask">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDrawGrid.GetEditMask.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.GetEditMask.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.GetEditMask.aRow">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDrawGrid.GetEditText" link="#LCL.Grids.TCustomGrid.GetEditText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDrawGrid.GetEditText.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.GetEditText.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.GetEditText.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDrawGrid.HeaderClick" link="#LCL.Grids.TCustomGrid.HeaderClick">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.HeaderClick.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.HeaderClick.index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDrawGrid.HeaderSized" link="#LCL.Grids.TCustomGrid.HeaderSized">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.HeaderSized.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.HeaderSized.index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDrawGrid.NotifyColRowChange">
        <short>
          <var>NotifyColRowChange</var> tells the system that a column or row has been changed (determined by <var>IsColumn</var>) and whether this was an Insert</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.NotifyColRowChange.WasInsert">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.NotifyColRowChange.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.NotifyColRowChange.FromIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.NotifyColRowChange.ToIndex">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDrawGrid.SelectCell" link="#LCL.Grids.TCustomGrid.SelectCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDrawGrid.SelectCell.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.SelectCell.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.SelectCell.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDrawGrid.SetColor" link="#LCL.Grids.TCustomGrid.SetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.SetColor.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDrawGrid.SetEditText" link="#LCL.Grids.TCustomGrid.SetEditText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.SetEditText.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.SetEditText.ARow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.SetEditText.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDrawGrid.SizeChanged" link="#LCL.Grids.TCustomGrid.SizeChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.SizeChanged.OldColCount">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.SizeChanged.OldRowCount">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomDrawGrid.Create" link="#rtl.Classes.TComponent.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomDrawGrid.Destroy" link="#rtl.Classes.TComponent.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomDrawGrid.DeleteColRow">
        <short>Delete either a column or a row (specified by index), depending on the value of the boolean <var>IsColumn</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.DeleteColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.DeleteColRow.index">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomDrawGrid.ExchangeColRow">
        <short>Exchange either a column or a row, specified by <var>index</var>, with the col or row specified by <var>WithIndex</var>; boolean <var>IsColumn</var> determines whether rows or columns are to be exchanged</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.ExchangeColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.ExchangeColRow.index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.ExchangeColRow.WithIndex">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomDrawGrid.InsertColRow">
        <short>
          <var>InsertColRow</var> inserts a column or row (specified by <var>Iscolumn</var>) at the stated index location</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.InsertColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.InsertColRow.index">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomDrawGrid.MoveColRow">
        <short>Move column or row from <var>FromIndex</var> to <var>ToIndex</var>; boolean <var>IsColumn</var> specifies whether col or row is to be moved</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.MoveColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.MoveColRow.FromIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.MoveColRow.ToIndex">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomDrawGrid.SortColRow">
        <short>Sort column or row specified by <var>index</var> and optionally by <var>FromIndex</var> and <var>ToIndex</var>; <var>IsColumn</var> specifies whether col or row is to be sorted</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.SortColRow.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.SortColRow.index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.SortColRow.FromIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.SortColRow.ToIndex">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomDrawGrid.DefaultDrawCell">
        <short>Use the default method for drawing a cell specified by <var>aCol</var>, <var>aRow</var>, at location <var>aRect</var> with state <var>aState</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.DefaultDrawCell.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.DefaultDrawCell.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.DefaultDrawCell.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDrawGrid.DefaultDrawCell.aState">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.AllowOutboundEvents" link="#LCL.Grids.TCustomGrid.AllowOutboundEvents">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.BorderColor" link="#LCL.Grids.TCustomGrid.BorderColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.Canvas" link="#LCL.Controls.TCustomControl.Canvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.Col" link="#LCL.Grids.TCustomGrid.Col">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.ColWidths" link="#LCL.Grids.TCustomGrid.ColWidths">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.Editor" link="#LCL.Grids.TCustomGrid.Editor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.EditorBorderStyle" link="#LCL.Grids.TCustomGrid.EditorBorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.EditorMode" link="#LCL.Grids.TCustomGrid.EditorMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.ExtendedColSizing" link="#LCL.Grids.TCustomGrid.ExtendedColSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.AltColorStartNormal" link="#LCL.Grids.TCustomGrid.AltColorStartNormal">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.FastEditing" link="#LCL.Grids.TCustomGrid.FastEditing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.FocusColor" link="#LCL.Grids.TCustomGrid.FocusColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.FocusRectVisible" link="#LCL.Grids.TCustomGrid.FocusRectVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.GridHeight" link="#LCL.Grids.TCustomGrid.GridHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.GridLineColor" link="#LCL.Grids.TCustomGrid.GridLineColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.GridLineStyle" link="#LCL.Grids.TCustomGrid.GridLineStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.GridWidth" link="#LCL.Grids.TCustomGrid.GridWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.IsCellSelected" link="#LCL.Grids.TCustomGrid.IsCellSelected">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.LeftCol" link="#LCL.Grids.TCustomGrid.LeftCol">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.Row" link="#LCL.Grids.TCustomGrid.Row">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.RowHeights" link="#LCL.Grids.TCustomGrid.RowHeights">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.SaveOptions" link="#LCL.Grids.TCustomGrid.SaveOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.SelectedColor" link="#LCL.Grids.TCustomGrid.SelectedColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.SelectedColumn" link="#LCL.Grids.TCustomGrid.SelectedColumn">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.Selection" link="#LCL.Grids.TCustomGrid.Selection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.StrictSort" link="#LCL.Grids.TCustomGrid.StrictSort">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.TopRow" link="#LCL.Grids.TCustomGrid.TopRow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.UseXORFeatures" link="#LCL.Grids.TCustomGrid.UseXORFeatures">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.Align" link="#LCL.Controls.TControl.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.Anchors" link="#LCL.Controls.TControl.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.AutoAdvance" link="#LCL.Grids.TCustomGrid.AutoAdvance">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.AutoFillColumns" link="#LCL.Grids.TCustomGrid.AutoFillColumns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.Color" link="#LCL.Controls.TControl.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.ColCount" link="#LCL.Grids.TCustomGrid.ColCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.Columns" link="#LCL.Grids.TCustomGrid.Columns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.DefaultColWidth" link="#LCL.Grids.TCustomGrid.DefaultColWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.DefaultDrawing" link="#LCL.Grids.TCustomGrid.DefaultDrawing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.DefaultRowHeight" link="#LCL.Grids.TCustomGrid.DefaultRowHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.Enabled" link="#LCL.Controls.TControl.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.FixedColor" link="#LCL.Grids.TCustomGrid.FixedColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.FixedCols" link="#LCL.Grids.TCustomGrid.FixedCols">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.FixedHotColor" link="#LCL.Grids.TCustomGrid.FixedHotColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.FixedRows" link="#LCL.Grids.TCustomGrid.FixedRows">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.Flat" link="#LCL.Grids.TCustomGrid.Flat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.Font" link="#LCL.Controls.TControl.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.GridLineWidth" link="#LCL.Grids.TCustomGrid.GridLineWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.Options" link="#LCL.Grids.TCustomGrid.Options">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.RowCount" link="#LCL.Grids.TCustomGrid.RowCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.ScrollBars" link="#LCL.Grids.TCustomGrid.ScrollBars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.VisibleColCount" link="#LCL.Grids.TCustomGrid.VisibleColCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.VisibleRowCount" link="#LCL.Grids.TCustomGrid.VisibleRowCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnBeforeSelection" link="#LCL.Grids.TCustomGrid.OnBeforeSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnClick" link="#LCL.Controls.TControl.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnColRowDeleted">
        <short>Event handler when a grid column or row is deleted</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnColRowExchanged">
        <short>Event handler when a grid column or row has its position exchanged with another</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnColRowInserted">
        <short>Event handler when a column or row is inserted into the grid</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnColRowMoved">
        <short>Event handler when a grid column or row is moved</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnCompareCells">
        <short>Event handler for comparing the contents of cells</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnDblClick" link="#LCL.Controls.TControl.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnDrawCell" link="#LCL.Grids.TCustomGrid.OnDrawCell">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnEditButtonClick" link="#LCL.Grids.TCustomGrid.OnEditButtonClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnGetEditMask">
        <short>Event handler for finding the edit mask while editing a grid cell</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnGetEditText">
        <short>Event handler for finding the text to be edited in a grid cell</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnHeaderClick">
        <short>Event handler when a column or row header is clicked</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnHeaderSized">
        <short>Event handler when a column or row header is re-sized</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnPickListSelect" link="#LCL.Grids.TCustomGrid.OnPickListSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnPrepareCanvas" link="#LCL.Grids.TCustomGrid.OnPrepareCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnSelectEditor" link="#LCL.Grids.TCustomGrid.OnSelectEditor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnSelection" link="#LCL.Grids.TCustomGrid.OnSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnSelectCell">
        <short>Event handler when a grid cell is selected</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnSetEditText">
        <short>Event handler for storing the text that has been edited in a cell</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDrawGrid.OnTopleftChanged" link="#LCL.Grids.TCustomGrid.OnTopLeftChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.AlternateColor" link="#LCL.Grids.TCustomGrid.AlternateColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.AutoEdit" link="#LCL.Grids.TCustomGrid.AutoEdit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.AutoFillColumns" link="#LCL.Grids.TCustomGrid.AutoFillColumns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.Columns" link="#LCL.Grids.TCustomGrid.Columns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.DragCursor" link="#LCL.Controls.TControl.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.DragMode" link="#LCL.Controls.TControl.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.HeaderHotZones">
        <short>
          <var>HeaderHotZones</var> - the header zones corresponding to the position of the mouse cursor</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.HeaderPushZones">
        <short>
          <var>HeaderPushZones</var> - the zones of the header that have been pushed down (selected)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.TitleFont" link="#LCL.Grids.TCustomGrid.TitleFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.TitleStyle" link="#LCL.Grids.TCustomGrid.TitleStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnColRowInserted" link="#LCL.Grids.TCustomDrawGrid.OnColRowInserted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnEditButtonClick" link="#LCL.Grids.TCustomGrid.OnEditButtonClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnEditingDone" link="#LCL.Controls.TControl.OnEditingDone">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnPickListSelect" link="#LCL.Grids.TCustomGrid.OnPickListSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnDragOver" link="#LCL.Controls.TControl.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomStringGrid">
        <short>
          <var>TCustomStringGrid</var> - base class for <var>TStringGrid</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="HowToUseGrids"/>
        </seealso>
      </element>
      <!-- object Visibility: default -->
      <element name="TStringGridStrings">
        <short>
          <var>TStringGridStrings</var> - the strings that populate the cells of a TStringGrid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStringGridStrings.FGrid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStringGridStrings.FIsCol">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStringGridStrings.FIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStringGridStrings.FOwner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TStringGridStrings.ConvertIndexLineCol">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStringGridStrings.ConvertIndexLineCol.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.ConvertIndexLineCol.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.ConvertIndexLineCol.Line">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.ConvertIndexLineCol.Col">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringGridStrings.Clear" link="#rtl.Classes.TStrings.Clear">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TStringGridStrings.Add" link="#rtl.Classes.TStrings.Add">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStringGridStrings.Add.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.Add.S">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TStringGridStrings.Get" link="#rtl.Classes.TStrings.Get">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStringGridStrings.Get.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.Get.Index">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TStringGridStrings.GetCount" link="#rtl.Classes.TStrings.GetCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStringGridStrings.GetCount.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TStringGridStrings.GetObject" link="#rtl.Classes.TStrings.GetObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStringGridStrings.GetObject.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.GetObject.Index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringGridStrings.Put" link="#rtl.Classes.TStrings.Put">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.Put.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.Put.S">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStringGridStrings.PutObject" link="#rtl.Classes.TStrings.PutObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.PutObject.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.PutObject.aObject">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TStringGridStrings.Create" link="#rtl.System.TObject.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.Create.aGrid">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.Create.OwnerMap">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.Create.aIsCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.Create.aIndex">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TStringGridStrings.Destroy" link="#rtl.Classes.TStrings.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TStringGridStrings.Assign" link="#rtl.Classes.TStrings.Assign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.Assign.Source">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TStringGridStrings.Delete" link="#rtl.Classes.TStrings.Delete">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.Delete.Index">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TStringGridStrings.Insert" link="#rtl.Classes.TStrings.Insert">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.Insert.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGridStrings.Insert.S">
        <short/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomStringGrid.FModified">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomStringGrid.FColsMap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomStringGrid.FRowsMap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomStringGrid.GetCells">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomStringGrid.GetCells.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.GetCells.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.GetCells.ARow">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomStringGrid.GetCols">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomStringGrid.GetCols.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.GetCols.index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomStringGrid.GetObjects">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomStringGrid.GetObjects.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.GetObjects.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.GetObjects.ARow">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomStringGrid.GetRows">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomStringGrid.GetRows.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.GetRows.index">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomStringGrid.MapFree">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.MapFree.aMap">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomStringGrid.MapGetColsRows">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomStringGrid.MapGetColsRows.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.MapGetColsRows.IsCols">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.MapGetColsRows.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.MapGetColsRows.AMap">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomStringGrid.ReadCells">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.ReadCells.Reader">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomStringGrid.SetCells">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.SetCells.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.SetCells.ARow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.SetCells.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomStringGrid.SetCols">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.SetCols.index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.SetCols.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomStringGrid.SetObjects">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.SetObjects.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.SetObjects.ARow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.SetObjects.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomStringGrid.SetRows">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.SetRows.index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.SetRows.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomStringGrid.WriteCells">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.WriteCells.Writer">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStringGrid.AutoAdjustColumn" link="#LCL.Grids.TCustomGrid.AutoAdjustColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.AutoAdjustColumn.aCol">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStringGrid.CalcCellExtent" link="#LCL.Grids.TCustomDrawGrid.CalcCellExtent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.CalcCellExtent.acol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.CalcCellExtent.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.CalcCellExtent.aRect">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStringGrid.DefineProperties" link="#rtl.Classes.TComponent.DefineProperties">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.DefineProperties.Filer">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomStringGrid.DoCompareCells" link="#LCL.Grids.TCustomGrid.DoCompareCells">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomStringGrid.DoCompareCells.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.DoCompareCells.Acol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.DoCompareCells.ARow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.DoCompareCells.Bcol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.DoCompareCells.BRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStringGrid.DoCopyToClipboard" link="#LCL.Grids.TCustomGrid.DoCopyToClipboard">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStringGrid.DoCutToClipboard" link="#LCL.Grids.TCustomGrid.DoCutToClipboard">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStringGrid.DoPasteFromClipboard" link="#LCL.Grids.TCustomGrid.DoPasteFromClipboard">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStringGrid.DrawCell" link="#LCL.Grids.TCustomGrid.DrawCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.DrawCell.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.DrawCell.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.DrawCell.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.DrawCell.aState">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStringGrid.DrawCellAutonumbering" link="#LCL.Grids.TCustomDrawGrid.DrawCellAutonumbering">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.DrawCellAutonumbering.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.DrawCellAutonumbering.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.DrawCellAutonumbering.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.DrawCellAutonumbering.aValue">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomStringGrid.GetEditText" link="#LCL.Grids.TCustomGrid.GetEditText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomStringGrid.GetEditText.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.GetEditText.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.GetEditText.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStringGrid.LoadContent" link="#LCL.Grids.TCustomGrid.LoadContent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.LoadContent.cfg">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.LoadContent.Version">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStringGrid.Loaded" link="#rtl.Classes.TComponent.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStringGrid.SaveContent" link="#LCL.Grids.TCustomGrid.SaveContent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.SaveContent.cfg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStringGrid.SelectionSetText">
        <short>
          <var>SelectionSetText</var> - stores the text in the selection</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.SelectionSetText.TheText">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStringGrid.SetEditText" link="#LCL.Grids.TCustomGrid.SetEditText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.SetEditText.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.SetEditText.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.SetEditText.aValue">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomStringGrid.Modified">
        <short>Whether or not the current cell has been <var>Modified</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomStringGrid.Create" link="#rtl.Classes.TComponent.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomStringGrid.Destroy" link="#rtl.Classes.TComponent.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomStringGrid.AutoSizeColumn">
        <short>
          <var>AutoSizeColumn</var> - automatically adjust width of column to accommodate widest text</short>
        <descr>
          <p>This procedure sets the column width to the size of the widest text it finds in all rows for the column <var>aCol.</var>
          </p>
          <p>Tip: see the <var>goDblClickAutoSize</var> option to allow columns to be automatically resized when doubleClicking the column border.</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.AutoSizeColumn.aCol">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomStringGrid.AutoSizeColumns">
        <short>
          <var>AutoSizeColumns</var> - automatically resizes all columns by adjusting them to fit in the longest text in each column</short>
        <descr>Automatically resizes all columns by adjusting them to fit in the longest text in each column. This is a quick method of applying <var>AutoSizeColumn()</var> for every column in the grid.
</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomStringGrid.Clean">
        <short>
          <var>Clean </var>all cells in the grid subject to the given <var>CleanOptions</var>, optionally specifying a range of cells or a rectangular region.</short>
        <descr>
          <p>Cleans all cells in the grid subject to the given <var>CleanOptions</var>, optionally specifying a range of cells or a rectangular region. See <link id="TGridZoneSet"/> for more information.</p>
          <p>Some examples:</p>
          <ul>
            <li>Clean all cells: grid.Clean([]); (the same as grid.clean)</li>
            <li>Clean all non fixed cells: grid.Clean([gzNormal]);</li>
            <li>Clean all cells but don't touch grid column headers: Grid.Clean([gzNormal, gzFixedRows]); </li>
          </ul>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.Clean.CleanOptions">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.Clean.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.Clean.StartCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.Clean.StartRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.Clean.EndCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.Clean.EndRow">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomStringGrid.Cells">
        <short>
          <var>Cells</var> - the text content of a cell or cells, indexed by <var>aCol, aRow</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.Cells.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.Cells.ARow">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomStringGrid.Cols">
        <short>
          <var>Cols</var> - get or set a list of strings for column names as specified by the <var>index</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.Cols.index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomStringGrid.DefaultTextStyle" link="#LCL.Grids.TCustomGrid.DefaultTextStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomStringGrid.EditorMode" link="#LCL.Grids.TCustomGrid.EditorMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomStringGrid.ExtendedSelect" link="#LCL.Grids.TCustomGrid.ExtendedSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomStringGrid.Objects">
        <short>The <var>Objects</var> present in the specified cell</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.Objects.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.Objects.ARow">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomStringGrid.Rows">
        <short>
          <var>Rows</var> - gets or sets a list of strings for row names as specified by <var>index</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStringGrid.Rows.index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomStringGrid.UseXORFeatures" link="#LCL.Grids.TCustomGrid.UseXORFeatures">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TStringGrid.Modified" link="#LCL.Grids.TCustomStringGrid.Modified">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.Align" link="#LCL.Controls.TControl.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.AlternateColor" link="#LCL.Grids.TCustomGrid.AlternateColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.Anchors" link="#LCL.Controls.TControl.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.AutoAdvance" link="#LCL.Grids.TCustomGrid.AutoAdvance">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.AutoEdit" link="#LCL.Grids.TCustomGrid.AutoEdit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.AutoFillColumns" link="#LCL.Grids.TCustomGrid.AutoFillColumns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.Color" link="#LCL.Controls.TControl.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.ColCount" link="#LCL.Grids.TCustomGrid.ColCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.Columns" link="#LCL.Grids.TCustomGrid.Columns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.DefaultColWidth" link="#LCL.Grids.TCustomGrid.DefaultColWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.DefaultDrawing" link="#LCL.Grids.TCustomGrid.DefaultDrawing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.DefaultRowHeight" link="#LCL.Grids.TCustomGrid.DefaultRowHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.Enabled" link="#LCL.Controls.TControl.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.FixedColor" link="#LCL.Grids.TCustomGrid.FixedColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.FixedCols" link="#LCL.Grids.TCustomGrid.FixedCols">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.FixedRows" link="#LCL.Grids.TCustomGrid.FixedRows">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.Flat" link="#LCL.Grids.TCustomGrid.Flat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.GridLineWidth" link="#LCL.Grids.TCustomGrid.GridLineWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.HeaderHotZones">
        <short>
          <var>HeaderHotZones</var> - the header zones corresponding to the position of the mouse cursor</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.HeaderPushZones">
        <short>
          <var>HeaderPushZones</var> - the zones of the header that have been pushed down (selected)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.Options" link="#LCL.Grids.TCustomGrid.Options">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.RowCount" link="#LCL.Grids.TCustomGrid.RowCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.ScrollBars" link="#LCL.Grids.TCustomGrid.ScrollBars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.TitleFont" link="#LCL.Grids.TCustomGrid.TitleFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.TitleStyle" link="#LCL.Grids.TCustomGrid.TitleStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.VisibleColCount" link="#LCL.Grids.TCustomGrid.VisibleColCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.VisibleRowCount" link="#LCL.Grids.TCustomGrid.VisibleRowCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnBeforeSelection" link="#LCL.Grids.TCustomGrid.OnBeforeSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnClick" link="#LCL.Controls.TControl.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnColRowDeleted" link="#LCL.Grids.TCustomDrawGrid.OnColRowDeleted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnColRowExchanged" link="#LCL.Grids.TCustomDrawGrid.OnColRowExchanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnColRowInserted" link="#LCL.Grids.TCustomDrawGrid.OnColRowInserted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnColRowMoved" link="#LCL.Grids.TCustomDrawGrid.OnColRowMoved">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnCompareCells" link="#LCL.Grids.TCustomDrawGrid.OnCompareCells">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnDblClick" link="#LCL.Controls.TControl.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnDrawCell" link="#LCL.Grids.TCustomGrid.OnDrawCell">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnEditButtonClick" link="#LCL.Grids.TCustomGrid.OnEditButtonClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnEditingDone" link="#LCL.Controls.TControl.OnEditingDone">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnGetEditMask" link="#LCL.Grids.TCustomDrawGrid.OnGetEditMask">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnGetEditText" link="#LCL.Grids.TCustomDrawGrid.OnGetEditText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnHeaderClick" link="#LCL.Grids.TCustomDrawGrid.OnHeaderClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnHeaderSized" link="#LCL.Grids.TCustomDrawGrid.OnHeaderSized">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnPickListSelect" link="#LCL.Grids.TCustomGrid.OnPickListSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnPrepareCanvas" link="#LCL.Grids.TCustomGrid.OnPrepareCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnResize" link="#LCL.Controls.TControl.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnSelectEditor" link="#LCL.Grids.TCustomGrid.OnSelectEditor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnSelection" link="#LCL.Grids.TCustomGrid.OnSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnSelectCell" link="#LCL.Grids.TCustomDrawGrid.OnSelectCell">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnSetEditText" link="#LCL.Grids.TCustomDrawGrid.OnSetEditText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnShowHint" link="#LCL.Controls.TControl.OnShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStringGrid.OnTopLeftChanged" link="#LCL.Grids.TCustomGrid.OnTopLeftChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStringGrid.CopyToClipboard">
        <short>
          <var>CopyToClipboard</var> - copy the selected text to the clipboard</short>
      </element>
      <topic name="HowToUseGrids">
        <short>How to use <var>Grids</var> including <var>StringGrids</var>, <var>DrawGrids</var> and <var>DbGrids</var>
        </short>
        <descr>
          <p>How to use <var>Grids</var> including <var>StringGrids</var>, <var>DrawGrids</var> and <var>DbGrids</var>
          </p>
          <p>
            <b>Customizing grids</b>
          </p>
          <p>Grid are components derived from the <var>TCustomControl</var> class and don't have a native widget associated with them, so they are not restricted by the look of the current interface theme. This can be both an advantage and a disadvantage: usually programmers want to create a uniform-look application. Lazarus grids are flexible enough to allow programmers to make them look similar to other native controls; alternatively they can customize the grid to obtain almost the same look in any platform or widget interface (with the exception of scrollbars, whose look is still determined by the current theme).</p>
          <p>Some properties can affect the way the grid looks by acting when the cell is about to be painted in <var>PrepareCanvas/OnPrepareCanvas</var> by changing default canvas properties like brush color or font. Following is a list of such properties:</p>
          <table>
            <caption>
              <b>Properties and Events for customizing grids</b>
            </caption>
            <th>
              <td>Property</td>
              <td>Meaning</td>
            </th>
            <tr>
              <td>AlternateColor</td>
              <td>The user can change the background color appears on alternated rows. This is to allow easy reading of grid rows data.</td>
            </tr>
            <tr>
              <td>Color</td>
              <td>Sets the primary color used to draw non fixed cells background.</td>
            </tr>
            <tr>
              <td>FixedColor</td>
              <td>The color used to draw fixed cells background.</td>
            </tr>
            <tr>
              <td>Flat</td>
              <td>Eliminates the 3d look of fixed cells.</td>
            </tr>
            <tr>
              <td>TitleFont</td>
              <td>Font used to draw the text in fixed cells.</td>
            </tr>
            <tr>
              <td>TitleStyle</td>
              <td>Changes the 3D look of fixed cells. There are 3 settings:<br/>
                <var>tsLazarus</var> The default look<br/>
                <var>tsNative</var> Tries to set a look that is in concordance with current widgetset theme.<br/>
                <var>tsStandard</var> A more contrasted look, like Delphi grids.<br/>
              </td>
            </tr>
            <tr>
              <td>AltColorStartNormal</td>
              <td>(Boolean). If true, alternate color is always in the second row after fixed rows; the first row after fixed rows will always be the default color. If false, default color is set to the first row as if there were no fixed rows.</td>
            </tr>
            <tr>
              <td>BorderColor</td>
              <td>Sets the grid's border color used when <var>Flat</var>=True and <var>BorderStyle</var>=bsSingle;</td>
            </tr>
            <tr>
              <td>EditorBorderStyle</td>
              <td>If set to <var>bsNone</var> under Windows the cell editors will not have the border, like in Delphi; set to <var>bsSingle</var> by default because the border can be theme specific in some widgetsets and to allow a uniform look.</td>
            </tr>
            <tr>
              <td>FocusColor</td>
              <td>The color used to draw the current focused cell if <var>UseXORFeatures</var> is not set; by default this is <var>clRed</var>.</td>
            </tr>
            <tr>
              <td>FocusRectVisible</td>
              <td>Turns on/off the drawing of focused cell.</td>
            </tr>
            <tr>
              <td>GridLineColor</td>
              <td>Color of grid lines in non fixed area.</td>
            </tr>
            <tr>
              <td>GridLineStyle</td>
              <td>Pen style used to draw lines in non fixed area, possible choices are: <var>psSolid</var>, <var>psDash</var>, <var>psDot</var>, <var>psDashDot</var>, <var>psDashDotDot</var>, <var>psinsideFrame</var>, <var>psPattern</var>, <var>psClear</var>; default is <var>psSolid</var>.</td>
            </tr>
            <tr>
              <td>SelectedColor</td>
              <td>Color used to draw cell background on selected cells.</td>
            </tr>
            <tr>
              <td>UseXORFeatures</td>
              <td>If set, focus rect is drawn using XOR mode so it should make visible the focus rect in combination with any cell color ackground. It also affects the way that moving columns look.</td>
            </tr>
            <tr>
              <td>DefaultDrawing</td>
              <td>(Boolean). Normally the grids prepare the grid canvas using some properties according to the kind of cell is being painted. If the user has written an <var>OnDrawCell</var> event handler, <var>DefaultDrawing</var> (if set) also paints the cell background; if the user is taking full responsibility for drawing the cell it is better to turn off this property so painting is not duplicated. In a StringGrid, if DefaultDrawing is set it draws the text in each cell.</td>
            </tr>
            <tr>
              <td>AutoAdvance</td>
              <td>Where the cell cursor will go when pressing enter or tab/shift tab, or after editing.</td>
            </tr>
            <tr>
              <td>ExtendedColSizing</td>
              <td>If true, the  user can resize columns, not just at the headers, but anywhere along the column's height.</td>
            </tr>
          </table>
          <p>Other properties that also affect the grid's look:</p>
          <p>
            <var>Options</var>: This property is a set of zero or more choices, with some elements that enable diverse functionality but others that are related directly with grid's look. Options can be set at designtime or runtime.</p>
          <ul>
            <li>
              <var>goFixedVertLine, goFixedHorzLine</var>: draws a vertical or horizontal line respectively, delimiting cells or columns in the fixed area; active by default.</li>
            <li>
              <var>goVertLine, goHorzLine</var>: the same as previous, but for the normal browseable area. A grid can be made to simulate a listbox by unsetting both of these options.</li>
            <li>
              <var>goDrawFocusSelected</var>: if this option is enabled, a selection background is painted in the focused cell in addition to the focused dotted rectangle (note this doesn't work yet when the <var>goRowSelect</var> option is set; in such case the row is always painted as if <var>goDrawFocusSelected</var> is set)</li>
            <li>
              <var>goRowSelect</var>: selects the full row instead of individual cells</li>
            <li>
              <var>goFixedRowNumbering</var>: if set, grid will do numbering of rows in first fixed column</li>
            <li>
              <var>goHeaderHotTracking</var>: if set, the grid will try to show a different look when the mouse cursor is overlying any fixed cell. In order for this to work, desired cell zone needs to be enabled with the property <var>HeaderHotZones</var>. Try combining this option with property <var>TitleStyle</var>=<var>tsNative</var> to get themed hot tracking look.</li>
            <li>
              <var>goHeaderPushedLook</var>: if set, this opton enables a pushed look when clicking any fixed cell. The zone of "pushable" cells is enabled using <var>HeaderPusedZones</var> property.</li>
          </ul>
          <p>
            <b>Description of grid's drawing process</b>
          </p>
          <p>Like other custom controls, the grid is drawn using the paint method. In general terms the grid is drawn by painting all rows, and each row by painting its individual cells.</p>
          <p>The process is as follow:</p>
          <ul>
            <li>First the visible cells area is determined: each row is tested to see if it intersects the canvas clipping region; if it's ok, then the visible area is painted by drawing columns of each row.</li>
            <li>The column and row values are used to identify the cell that is about to be painted and again each column is tested for intersection with the clippling region; if everything is ok, some additional properties like the cell's rectangular extent and visual state are passed as arguments to the DrawCell method.</li>
            <li>As the drawing process is running, the visual state of each cell is adjusted according to grid options and position within grid. The visual state is retained in a variable of type <var>TGridDrawState</var> which is a set with following elements:
			     <table>
                <tr>
                  <td>gdSelected</td>
                  <td>The cell will have a selected look.</td>
                </tr>
                <tr>
                  <td>gdFocused</td>
                  <td>The cell will have a focused look.</td>
                </tr>
                <tr>
                  <td>gdFixed</td>
                  <td>Cell have to be painted with fixed cell look.</td>
                </tr>
                <tr>
                  <td>gdHot</td>
                  <td>the mouse is over this cell, so paint it with hot tracking look</td>
                </tr>
                <tr>
                  <td>gdPushed</td>
                  <td>the cell is being clicked, paint it with pushed look </td>
                </tr>
              </table>
            </li>
            <li>
              <var>DrawCell</var>. The DrawCell method is virtual and may be overriden in descendent grids to do custom drawing. The information passed to <var>DrawCell</var> helps to identify which particular cell is being painted, the physical area occupied on the screen and its visible status. See <link id="TCustomGrid.DrawCell">DrawCell</link> reference for details. For each cell the following occurs:
			    <ul>
                <li>
                  <b>PrepareCanvas.</b> If the DefaultDrawing property is set, the grid canvas is setup with default properties for brush and font based on current visual state. For several design and runtime properties, the text alignment is set to match programmer selection in custom columns if they exists.  If DefaultDrawing is false, brush color is set to clWindow and Font color to clWindowText, the text alignment is set with grids defaultTextStyle property value.</li>
                <li>
                  <b>OnPrepareCanvas.</b> If the programmer wrote an event handler for the <var>OnPrepareCanvas</var> event, it is called at this point. This event can be used for doing simple customization like changing a cell's background color, font's properties like color, fontface and style, Text layout like different combinations of left, center, top, bottom, right alignment, etc. Any change made to the canvas fo a particular cell in this event would be lost, because the next cell drawing will reset canvas again to a default state. So it's safe doing changes only for particular cell or cells and forget about it for the rest. Using this event sometimes helps to avoid using the <var>OnDrawCell</var> grid event, where users would be forced to duplicate the grid's drawing code.     Todo: samples of what can be made and what to leave for OnDrawCell?</li>
                <li>
                  <b>OnDrawCell.</b> Next, if no handler for the <var>OnDrawCell</var> event was specified, the grid calls the <var>DefaultDrawCell</var> method which simply paints the cell background using the current canvas brush color and style. <br/>
					    If the <var>OnDrawCell</var> handler exists, the grid first paints the cell background, but only if the  <var>DefaultDrawing</var> property was set; then it calls the <var>OnDrawCell</var> event to do custom cell painting. <br/>
					    Usually programmers want to do custom drawing only for particular cells, but standard drawing for others: in this case, they can restrict custom operation to certain cell or cells by looking into <var>ACol, ARow</var> and <var>AState</var> arguments, and for other cells simply call the <var>DefaultDrawCell</var> method and let the grid to take care of it.</li>
                <li>
                  <b>Text.</b> At this point, if the <var>DefaultDrawing</var> property is true, the cell's text content is painted (only for <var>TStringGrid</var>) .</li>
                <li>
                  <b>Grid lines</b> The last step for each cell is to paint the grid lines: if grid options <var>goVertLine, goHorzLine, goFixedVertLine</var> and <var>goFixedHorzLine</var> are specified the cell grid is drawn at this point. Grids with only rows or only cols can be obtained by changing these options. If the programmer elected to have a "themed" look it is done at this point also (see property TitleStyle).</li>
                <li>
                  <b>FocusRect</b> When all columns of the current row have been painted it is time to draw the focus rectangle for the current selected cell or for the whole row if the <var>goRowSelect</var> option is set.</li>
              </ul>
            </li>
          </ul>
          <p>
            <b>Grid's cell selection</b>
          </p>
          <p>The location of a grid's current (focused) cell (or row) can be changed using keyboard, mouse or through code. In order to change cell focus successfully to another position, we must test  the target position to see if it is allowed to receive cell focus. When using the keyboard, <var>AutoAdvance</var> performs part of the process by finding what should be the next focused cell. When using mouse clicks or moving by code, focus will not move from the current cell unless the target cell is permitted to receive focus.</p>
          <p>The grid calls <var>SelectCell</var> to see if a cell is focusable: if this function returns true, then the target cell identified with arguments <var>aCol</var> and <var>aRow</var> is focusable (the current implementation of <var>TCustomGrid</var> simply returns true). <var>TCustomDrawGrid</var> and hence <var>TDrawGrid</var> and <var>TStringGrid</var> override this method and check first if  a cell is any wider than 0; normally you don't want a 0 width cell selected so a cell with this characteristics is skipped automatically in the process of finding a suitable cell. The the overriden method <var>SelectCell</var> also calls the user configurable event <var>OnSelectCell</var>: this event receives the cell coordinates as arguments and always returns a default result of True.</p>
          <p>Once a cell is known to be focusable and we are sure a movement will take place, the method <var>BeforeMoveSelection</var> is called; this in turns triggers the <var>OnBeforeSelection</var> event. This method's arguments are the coordinates for the new focused cell; at this point any visible editor is hidden too. The "before" word means that selection is not yet changed and current focused coordinates can be accessed with <var>grid.Col</var> and <var>grid.Row</var> properties. </p>
          <p>After that, the internal focused cell coordinates are changed and <var>MoveSelection</var> is called; this method's purpose (if set) is to trigger the <var>OnSelection</var> event (this is a notification that the focused cell has changed and the new cell coordinates are available through grid.row and grid.col properties).</p>
          <p>Note that is not good to use the <var>OnSelectCell</var> event to detect cell focus changes, as this event will be triggered several times even for the same cell in the process of finding a suitable cell. Is better to use <var>OnBeforeSelection</var> or <var>OnSelection</var> events for this purpose.</p>
          <p>
            <b>Using cell editors</b>
          </p>
          <p>Users can specify what editor will be used for a cell using one of two methods.</p>
          <ol>
            <li>
              <b>Using a custom column and selecting the ButtonStyle property of the column.</b> In this method the user can select the style of the editor that will be shown. Available values are: <var>cbsAuto, cbsEllipsis, cbsNone, cbsPickList, cbsCheckboxColumn</var>.</li>
            <li>
              <b>Using the OnSelectEditor grid event</b>. Here the user specifies in the <var>Editor</var> parameter which editor to use for a cell identified by <var>aCol</var>, <var>ARow</var> in a <var>TCustomDrawGrid</var> derived grid or <var>TColumn</var> in <var>TCustomDBGrid</var>. The public <var>EditorByStyle()</var> function takes as parameter one of the following values: <var>cbsAuto, cbsEllipsis, cbsNone, cbsPickList, cbsCheckboxColumn</var>. <br/>
			    This method takes precedence over the first one using custom columns. A Custom cell editor can be specified here, with values specific to the cell, row or column.</li>
          </ol>
          <p>
            <b>Description of editor styles</b>
          </p>
          <p>The following is a description of the editor styles. They are enumerated values of type <var>TColumnButtonStyle</var> and so they are prefixed by 'cbs'. This type was used to remain compatible with Delphi's <var>DBGrid</var>.</p>
          <ul>
            <li>
              <b>cbsAuto</b> This is the default editor style for TCustomGrid derived grids. The TStringCellEditor derived from TCustomMaskEdit is specialized to edit single line strings and is used by default in TStringGrid and TDrawGrid. When using Custom Columns, if the programmer filled the Column's PickList property, this behaves as if cbsPickList editor style was set. For a TCustomDBGrid that has a field of type boolean, it behaves as if cbsCheckBoxColumn editor style was specified. This is the recommended value for Custom Cell Editors.   TODO: related OnEditingDone.</li>
            <li>
              <b>cbsEllipsis</b> This editor style is the most generic one. A button with ellipsis (...) appears in the editing cell and the programmer can use the OnEditButtonClick grid event to take any programmed action  when the user presses the button. For example a calendar dialog could pop up to allow the user to select a specific date,  a file open dialog could appear to find files, or a calculator could appear so the user could enter the numeric result of calculations, etc.<br/>
				   OnEditButtonClick is just a notification, to find out in which cell a button has been clicked by taking  a look at the grid.Row and grid.Col properties.<br/>
				   A DBGrid has specific properties to retrieve the active column or field and because this event occurs in the active record, it could update the information in the active field.<br/>
				   This editor style is implemented using TButtonCellEditor, a direct descendant of TButton.</li>
            <li>
              <b>cbsNone</b> This editor style instructs the grid not to use any editor for a specific cell or column; it behaves then, as if the grid were readonly for such a cell or column.</li>
            <li>
              <b>cbsPickList</b> Used to present the user with a list of values that can be entered. This editor style is implemented using TPickListCellEditor, a component derived from TCustomComboBox. The list of values that are shown is filled in one of two ways depending on the method used to select the editor style.<br/>
				   When using custom columns, programmers can enter a list of values using the column's PickList property. [FOR BEGINNERS: TODO: exact procedure to edit the list]</li>
            <li>
              <b>cbsCheckboxColumn</b> This editor style is at the moment only available in TDBGrid. If a field's contents associated with the column are restricted to a pair of values, for example, yes-no, true-false, on-off, 1-0, etc then cbsCheckboxColumn is used to modify the apearance of a column by using a checkbox representation that the user can toggle by using a mouse click or pressing the SPACE key.<br/>
				   If a columns' ButtonStyle property is set to cbsAuto and DBGrid detects that the field associated with the column is a boolean field, then the grid uses this editor style automatically. This automatic selection can be disabled or enabled using DBGrid's OptionsExtra property; setting dgeCheckboxColumn element to false disables this feature.<br/>
				   The values that are used to recognize the checked or unchecked states are set in a column's properties ValueChecked and ValueUnchecked.<br/>
				   At any moment, the field value can be in one to three states: Unchecked, Checked or Grayed.</li>
          </ul>
        </descr>
      </topic>
      <element name="TStringCellEditor.msg_SetPos">
        <short>
          <var>msg_SetPos</var> - issues message for specifying position</short>
      </element>
      <element name="TButtonCellEditor.msg_SetBounds">
        <short>
          <var>msg_SetBounds</var> - issues message for specifying bounds</short>
      </element>
      <element name="TButtonCellEditor.msg_Ready">
        <short>
          <var>msg_Ready</var> - issues message when ready</short>
      </element>
      <element name="TPickListCellEditor.msg_SetPos">
        <short>
          <var>msg_SetPos</var> - issues a message to specify the position</short>
      </element>
      <element name="TEditorItem">
        <short>
          <var>TEditorItem</var> - a single item on which a Composite Cell Editor operates</short>
      </element>
      <element name="TEditorItem.Editor">
        <short>The <var>Editor</var> to be used for this item</short>
      </element>
      <element name="TEditorItem.Align">
        <short>
          <var>Align</var> - how this item is to be aligned</short>
      </element>
      <element name="TEditorItem.ActiveControl">
        <short>
          <var>ActiveControl</var> - returns True if this item is part of an active control</short>
      </element>
      <element name="TCompositeCellEditor">
        <short>
          <var>TCompositeCellEditor</var> - a general purpose editor for cells in a grid</short>
      </element>
      <element name="TCompositeCellEditor.DoUTF8KeyPress" link="#LCL.Controls.TWinControl.DoUTF8KeyPress"/>
      <element name="TCompositeCellEditor.msg_GetValue">
        <short>
          <var>msg_GetValue</var> - issues a message to find the value</short>
      </element>
      <element name="TCompositeCellEditor.msg_SetGrid">
        <short>
          <var>msg_SetGrid</var> - issues message for specifying grid</short>
      </element>
      <element name="TCompositeCellEditor.msg_SetValue">
        <short>
          <var>msg_SetValue</var> - issues a message to specify the value</short>
      </element>
      <element name="TCompositeCellEditor.msg_SetBounds">
        <short>
          <var>msg_SetBounds</var> - issues message for specifying bounds</short>
      </element>
      <element name="TCompositeCellEditor.msg_SetMask">
        <short>
          <var>msg_SetMask</var> - issues message for specifying mask</short>
      </element>
      <element name="TCompositeCellEditor.msg_SelectAll">
        <short>
          <var>msg_SelectAll</var> - issues message for Selecting All</short>
      </element>
      <element name="TCompositeCellEditor.CMControlChange">
        <short>
          <var>CMControlChange</var> - issues Control Message for a change in a control</short>
      </element>
      <element name="TCompositeCellEditor.msg_SetPos">
        <short>
          <var>msg_SetPos</var> - issues a message to specify the position</short>
      </element>
      <element name="TCompositeCellEditor.VisibleChanging">
        <short>
          <var>VisibleChanging</var> - method for a change in the Visibility property</short>
      </element>
      <element name="TCompositeCellEditor.SendChar">
        <short>
          <var>SendChar</var> - transmits the specified character and returns an integer status result</short>
        <descr>0 - failure
1 - success</descr>
      </element>
      <element name="TCompositeCellEditor.WndProc" link="#LCL.Controls.TControl.WndProc"/>
      <element name="TCompositeCellEditor.Destroy" link="#rtl.Classes.TComponent.Destroy"/>
      <element name="TCompositeCellEditor.AddEditor">
        <short>
          <var>AddEditor</var> - adds the specified Editor with the given alignment and specified ActiveControl propery</short>
      </element>
      <element name="TCompositeCellEditor.SetFocus" link="#LCL.Controls.TWinControl.SetFocus"/>
      <element name="TGridColumnTitle.ImageIndex">
        <short>
          <var>ImageIndex</var> - the index for any image to be used in the title (default=0, ie no image)</short>
      </element>
      <element name="TGridColumnTitle.ImageLayout">
        <short>
          <var>ImageLayout</var> - the layout to use for any image in the title</short>
      </element>
      <element name="TCustomGrid.AdjustEditorBounds">
        <short>
          <var>AdjustEditorBounds</var> - method to adjust the editor's bounds to include a new row and column</short>
      </element>
      <element name="TCustomGrid.DoUTF8KeyPress" link="#LCL.Controls.TWinControl.DoUTF8KeyPress"/>
      <element name="TCustomGrid.DrawColumnTitleImage">
        <short>
          <var>DrawColumnTitleImage</var> - draw the title image of the specified column</short>
      </element>
      <element name="TCustomGrid.EditingAllowed">
        <short>
          <var>EditingAllowed</var> - Returns true if grid and current column allow editing</short>
      </element>
      <element name="TCustomGrid.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TCustomDrawGrid.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TCustomDrawGrid.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TCustomDrawGrid.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TCustomDrawGrid.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TCustomDrawGrid.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TCustomDrawGrid.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TCustomDrawGrid.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TCustomDrawGrid.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TCustomDrawGrid.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TDrawGrid.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TDrawGrid.ExtendedSelect" link="#LCL.Grids.TCustomGrid.ExtendedSelect"/>
      <element name="TDrawGrid.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TDrawGrid.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TDrawGrid.TitleImageList" link="#LCL.Grids.TCustomGrid.TitleImageList"/>
      <element name="TCustomGrid.TitleImageList">
        <short>
          <var>TitleImageList</var> - the list of images to be used with the titles</short>
      </element>
      <element name="TDrawGrid.UseXORFeatures" link="#LCL.Grids.TCustomGrid.UseXORFeatures"/>
      <element name="TDrawGrid.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TDrawGrid.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TDrawGrid.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TDrawGrid.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TStringGrid.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TStringGrid.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TStringGrid.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TStringGrid.ExtendedSelect" link="#LCL.Grids.TCustomGrid.ExtendedSelect"/>
      <element name="TStringGrid.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TStringGrid.TitleImageList" link="#LCL.Grids.TCustomGrid.TitleImageList"/>
      <element name="TStringGrid.UseXORFeatures" link="#LCL.Grids.TCustomGrid.UseXORFeatures"/>
      <element name="TStringGrid.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TStringGrid.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TStringGrid.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TStringGrid.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TStringGrid.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TStringGrid.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TStringGrid.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TStringGrid.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
    </module>
    <!-- Grids -->
  </package>
</fpdoc-descriptions>
