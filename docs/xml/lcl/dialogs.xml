<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
      ====================================================================
        Dialogs
      ====================================================================
    -->
    <module name="Dialogs">
      <short>Contains common dialogs used in Lazarus LCL applications.</short>
      <descr>
        <p>
          <file>dialogs.pp</file> contains classes, types, and routines used to implement common dialogs in an application. This file is part of the Lazarus Component Library (<b>LCL</b>).
        </p>
        <p>
          The following components are added to the Lazarus IDE component palette:
        </p>
        <p>
          <b>Dialogs</b> Tab
        </p>
        <ul>
          <li>TOpenDialog</li>
          <li>TSaveDialog</li>
          <li>TSelectDirectoryDialog</li>
          <li>TColorDialog</li>
          <li>TFontDialog</li>
          <li>TFindDialog</li>
          <li>TReplaceDialog</li>
          <li>TTaskDialog</li>
        </ul>
        <p>
          <b>Misc</b> Tab
        </p>
        <ul>
          <li>TColorButton</li>
        </ul>
      </descr>

      <element name="Types"/>
      <element name="TypInfo"/>
      <element name="Classes"/>
      <element name="SysUtils"/>
      <element name="LMessages"/>
      <element name="LResources"/>
      <element name="LCLIntf"/>
      <element name="InterfaceBase"/>
      <element name="LCLStrConsts"/>
      <element name="LCLType"/>
      <element name="Forms"/>
      <element name="Controls"/>
      <element name="Themes"/>
      <element name="Graphics"/>
      <element name="Buttons"/>
      <element name="ButtonPanel"/>
      <element name="StdCtrls"/>
      <element name="ExtCtrls"/>
      <element name="LCLClasses"/>
      <element name="ClipBrd"/>
      <element name="Menus"/>
      <element name="LCLTaskDialog"/>
      <element name="GraphType"/>
      <element name="UITypes"/>
      <element name="FileUtil"/>
      <element name="LazFileUtils"/>
      <element name="LazStringUtils"/>
      <element name="LazLoggerBase"/>

      <element name="TMsgDlgType">
        <short>Identifies a dialog type or style.</short>
        <descr>
          <p>
            <var>TMsgDlgType</var> is an alias to the <var>TMsgDlgType</var> type in <file>uitypes.pas</file>.
          </p>
        </descr>
        <seealso>
          <link id="#lazutils.uitypes.TMsgDlgType">UITypes.TMsgDlgType</link>
        </seealso>
      </element>

      <element name="TMsgDlgBtn">
        <short>Identifies dialog button types.</short>
        <descr>
          <p>
            <var>TMsgDlgBtn</var> is an alias to the <var>TMsgDlgBtn</var> type in <file>uitypes.pas</file>.
          </p>
        </descr>
        <seealso>
          <link id="#lazutils.uitypes.TMsgDlgBtn">UITypes.TMsgDlgBtn</link>
        </seealso>
      </element>

      <element name="TMsgDlgButtons">
        <short>Set with button messages for dialogs.</short>
        <descr>
          <p>
            <var>TMsgDlgButtons</var> is an alias to the <var>TMsgDlgButtons</var> type in <file>uitypes.pas</file>.
          </p>
        </descr>
        <seealso>
          <link id="#lazutils.uitypes.TMsgDlgButtons">UITypes.TMsgDlgButtons</link>
        </seealso>
      </element>

      <element name="mtWarning">
        <short>Alias to the TMsgDlgType enumeration value in uitypes.</short>
      </element>
      <element name="mtError">
        <short>Alias to the TMsgDlgType enumeration value in uitypes.</short>
      </element>
      <element name="mtInformation">
        <short>Alias to the TMsgDlgType enumeration value in uitypes.</short>
      </element>
      <element name="mtConfirmation">
        <short>Alias to the TMsgDlgType enumeration value in uitypes.</short>
      </element>
      <element name="mtCustom">
        <short>Alias to the TMsgDlgType enumeration value in uitypes.</short>
      </element>

      <element name="mbYes">
        <short>Alias to the TMsgDlgBtn enumeration value in uitypes.</short>
      </element>
      <element name="mbNo">
        <short>Alias to the TMsgDlgBtn enumeration value in uitypes.</short>
      </element>
      <element name="mbOK">
        <short>Alias to the TMsgDlgBtn enumeration value in uitypes.</short>
      </element>
      <element name="mbCancel">
        <short>Alias to the TMsgDlgBtn enumeration value in uitypes.</short>
      </element>
      <element name="mbAbort">
        <short>Alias to the TMsgDlgBtn enumeration value in uitypes.</short>
      </element>
      <element name="mbRetry">
        <short>Alias to the TMsgDlgBtn enumeration value in uitypes.</short>
      </element>
      <element name="mbIgnore">
        <short>Alias to the TMsgDlgBtn enumeration value in uitypes.</short>
      </element>
      <element name="mbAll">
        <short>Alias to the TMsgDlgBtn enumeration value in uitypes.</short>
      </element>
      <element name="mbNoToAll">
        <short>Alias to the TMsgDlgBtn enumeration value in uitypes.</short>
      </element>
      <element name="mbYesToAll">
        <short>Alias to the TMsgDlgBtn enumeration value in uitypes.</short>
      </element>
      <element name="mbHelp">
        <short>Alias to the TMsgDlgBtn enumeration value in uitypes.</short>
      </element>
      <element name="mbClose">
        <short>Alias to the TMsgDlgBtn enumeration value in uitypes.</short>
      </element>

      <element name="mbYesNoCancel">
        <short>A set constant with Yes, No, Cancel buttons.</short>
        <descr>
          A set constant used to show Yes, No, and Cancel buttons on a message dialog.
        </descr>
        <seealso/>
      </element>

      <element name="mbYesNo">
        <short>A set constant with Yes, No buttons.</short>
        <descr>
          A set constant used to show Yes and No buttons on a message dialog.
        </descr>
        <seealso/>
      </element>

      <element name="mbOKCancel">
        <short>A set constant to show an OK and a Cancel button on a message dialog.</short>
        <descr>A set constant to show an OK and a Cancel button on a message dialog.</descr>
        <seealso/>
      </element>

      <element name="mbAbortRetryIgnore">
        <short>
          A set constant to show an Abort, Retry , Ignore buttons on a message dialog.
        </short>
        <descr>
          A set constant to show an Abort, Retry and Ignore buttons on a message dialog.
        </descr>
        <seealso/>
      </element>

      <element name="MsgDlgBtnToBitBtnKind">
        <short>
          A constant array used to convert the kind of message buttons to the kind of BitButton.
        </short>
        <descr>
          <p>
            This array gives you for each possible button type in a messagebox the corresponding kind of BitButton.
          </p>
          <p>
            For instance MsgDlgBtnToBitBtnKind[mbYes] has the value of bkYes.
          </p>
          <p>
            It is the reverse of BitBtnKindToMsgDlgBtn.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="BitBtnKindToMsgDlgBtn">
        <short>
          A constant array used to convert the kind of BitButton to the kind of message buttons.
        </short>
        <descr>
          <p>
            This array gives you for each BitButton the corresponding type of button on a message dialog. For instance BitBtnKindToMsgDlgBtn[bkOK] has the value of mbOK. It is the reverse if MsgDlgBtnToBitBtnKind.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCDWSEventCapability">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCDWSEventCapability.cdecWSPerformsDoShow">
        <short/>
      </element>
      <element name="TCDWSEventCapability.cdecWSPerformsDoCanClose">
        <short/>
      </element>
      <element name="TCDWSEventCapability.cdecWSPerformsDoClose">
        <short/>
      </element>
      <element name="TCDWSEventCapability.cdecWSNOCanCloseSupport">
        <short/>
      </element>

      <element name="TCDWSEventCapabilities">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TDialogResultEvent">
        <short>Specifies an event signalled when a result is returned in a dialog.</short>
        <descr>
          <p>
            <var>TDialogResultEvent</var> is the type used to implement the <var>OnDialogResult</var> event handler in <var>TCommonDialog</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCommonDialog.OnDialogResult"/>
        </seealso>
      </element>
      <element name="TDialogResultEvent.Sender">
        <short>Object for the event notification.</short>
      </element>
      <element name="TDialogResultEvent.Success">
        <short>True if the dialog was successfully executed.</short>
      </element>

      <element name="TCommonDialog">
        <short>The base type from which other dialogs are derived.</short>
        <descr>
          <p>
            TCommonDialog is the base type from which all other dialogs are derived.
          </p>
          <p>
            Use Create to make an instance of the dialog, and the Execute method to show it to the user. Use the Close method to release it and free the used resources.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCommonDialog.FAttachTo"/>
      <element name="TCommonDialog.FHandle"/>
      <element name="TCommonDialog.FHeight"/>
      <element name="TCommonDialog.FOnDialogResult"/>
      <element name="TCommonDialog.FWidth"/>
      <element name="TCommonDialog.FOnCanClose"/>
      <element name="TCommonDialog.FOnShow"/>
      <element name="TCommonDialog.FTitle"/>
      <element name="TCommonDialog.FUserChoice"/>
      <element name="TCommonDialog.FHelpContext"/>
      <element name="TCommonDialog.FDoCanCloseCalled"/>
      <element name="TCommonDialog.FDoShowCalled"/>
      <element name="TCommonDialog.FDoCloseCalled"/>
      <element name="TCommonDialog.FClosing"/>
      <element name="TCommonDialog.FWSEventCapabilities"/>

      <element name="TCommonDialog.SetHandle">
        <short>Sets th value for the Handle property.</short>
        <descr/>
        <seealso>
          <link id="TCommonDialog.Handle"/>
        </seealso>
      </element>
      <element name="TCommonDialog.SetHandle.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCommonDialog.IsTitleStored">
        <short>Implements the storage specifier for the the Title property.</short>
        <descr>
          <p>
            Returns <b>True</b> when <var>Title</var> contains a value other than <var>DefaultTitle</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCommonDialog.Title"/>
          <link id="TCommonDialog.DefaultTitle"/>
        </seealso>
      </element>
      <element name="TCommonDialog.IsTitleStored.Result">
        <short>True when an explicit value has been assigned to Title.</short>
      </element>

      <element name="TCommonDialog.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCommonDialog.DoExecute">
        <short>The function that actually takes care of executing the dialog.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCommonDialog.DoExecute.Result">
        <short>Returns True if the correct exit button was pressed.</short>
      </element>

      <element name="TCommonDialog.DefaultTitle">
        <short>
          <var>DefaultTitle</var> returns the default title for a dialog.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCommonDialog.DefaultTitle.Result">
        <short/>
      </element>

      <element name="TCommonDialog.GetHeight">
        <short>Gets the value for the Height property.</short>
        <descr/>
        <seealso>
          <link id="TCommonDialog.Height"/>
        </seealso>
      </element>
      <element name="TCommonDialog.GetHeight.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCommonDialog.GetWidth">
        <short>Gets the value for the Width property.</short>
        <descr/>
        <seealso>
          <link id="TCommonDialog.Width"/>
        </seealso>
      </element>
      <element name="TCommonDialog.GetWidth.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCommonDialog.SetHeight">
        <short>Sets the value for the Height property.</short>
        <descr/>
        <seealso>
          <link id="TCommonDialog.Height"/>
        </seealso>
      </element>
      <element name="TCommonDialog.SetHeight.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCommonDialog.SetWidth">
        <short>Sets the value for the Width property.</short>
        <descr/>
        <seealso>
          <link id="TCommonDialog.Width"/>
        </seealso>
      </element>
      <element name="TCommonDialog.SetWidth.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCommonDialog.ResetShowCloseFlags">
        <short>Resets the values in internal state flags for the dialog.</short>
        <descr>
          <p>
            Called from the <var>Execute</var> method before the widgetset handle is allocated and the dialog is displayed.
          </p>
        </descr>
        <seealso>
          <link id="TCommonDialog.Execute"/>
          <link id="TCommonDialog.DoExecute"/>
        </seealso>
      </element>

      <element name="TCommonDialog.AttachTo">
        <short/>
        <descr>
          <p>
            AttachTo is a platform-specific property which provides the form instance which created the dialog. It is used primarily for the MacOS Cocoa interface to provide the window handle needed for the platform.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCommonDialog.OnDialogResult">
        <short>Event handler signalled when a result is available for the dialog.</short>
        <descr>
          <p>
            <var>OnDialogResult</var> is a <var>TDialogResultEvent</var> property with the event handlr signalled when a result is available for the dialog.
          </p>
          <p>
            OnDialogResult is a platform-specific  property, and may not be used in all widgetsets. It provides a way for platforms which use native dialogs in their  implementation to notify the dialog that a result is availabile.
          </p>
        </descr>
        <seealso>
          <link id="TDialogResultEvent"/>
        </seealso>
      </element>

      <element name="TCommonDialog.FCompStyle">
        <short>Internal member used to store component style flags.</short>
      </element>

      <element name="TCommonDialog.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TCommonDialog</var>, and calls the inherited <var>Create</var> method and adds default Title.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
        </seealso>
      </element>
      <element name="TCommonDialog.Create.TheOwner">
        <short>The owner of the dialog: the component that called it.</short>
      </element>

      <element name="TCommonDialog.Execute">
        <short>Displays the dialog and captures the result.</short>
        <descr>
          <p>
            Use the Execute method to display the dialog and capture the result.
          </p>
          <p>
            Execute notifies the Application that a modal display is started, and disables the  current form. The widgetset handle is allocated for the dialog, and the <var>DoExecute</var> method is called to process the modal dialog. The form is re-enabled and its active control is re-selected. The Application is notified that the modal display is completed.
          </p>
          <p>
            The return value is set to <b>True</b> if the <b>OK</b> button was pressed to exit the dialog.
          </p>
        </descr>
        <seealso>
          <link id="TCommonDialog.DoExecute"/>
          <link id="#lcl.forms.Application">Application</link>
          <link id="#lcl.forms.TApplication.ModalStarted">TApplication.ModalStarted</link>
          <link id="#lcl.forms.TApplication.ModalFinished">TApplication.ModalFinished</link>
        </seealso>
      </element>
      <element name="TCommonDialog.Execute.Result">
        <short>Returns True if the user pressed the OK button.</short>
      </element>

      <element name="TCommonDialog.Handle">
        <short>Operating system <var>Handle</var> for the dialog.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCommonDialog.UserChoice">
        <short><var>UserChoice</var> - the value selected by the user.</short>
        <descr>
          <p>
            <var>UserChoice</var> is an <var>name</var> property which contains the modal result value returned for the dialog. It uses modal result constants like mrOk, mrCancel, et. al. as defined in the <file>UITypes</file> unit. Its value is updated by methods in the widgetset class when they display and process the dialog for the platform.
          </p>
        </descr>
        <seealso>
          <link id="TCommonDialog.Execute"/>
          <link id="TCommonDialog.DoExecute"/>
          <link id="#lazutils.uitypes.TModalResult"/>
        </seealso>
      </element>

      <element name="TCommonDialog.Close">
        <short>Closes the dialog and frees its resources.</short>
        <descr>
          <p>
            <var>Close</var> is a method used to perform actions needed to close the dialog. This can include signalling the <var>OnClose</var> event handler (when assigned and used for the platform). Close frees the widgetset <var>Handle</var> allocated for the dialog.
          </p>
          <p>
            No actions are performed in the method if a Handle is not allocated for the dialog, or the Close method has already been called.
          </p>
          <p>
            Close is called from the <var>Execute</var> method when the <var>DoExecute</var> method has been completed, and occurs before the active form is re-enabled  and focused.
          </p>
        </descr>
        <seealso>
          <link id="TCommonDialog.Execute"/>
          <link id="TCommonDialog.DoExecute"/>
          <link id="TCommonDialog.Handle"/>
          <link id="TCommonDialog.OnClose"/>
        </seealso>
      </element>

      <element name="TCommonDialog.DoShow">
        <short>Performs actions needed when the dialog is displayed.</short>
        <descr>
          <p>
            <var>DoShow</var> is a method used to perform actions needed when the form for the modal dialog is displayed. DoShow sets an internal flag to indicate that the dialog has been displayed, and signals the <var>OnShow</var> event handler (when assigned).
          </p>
          <p>
            No actions are performed in the method if the dialog has already been displayed.
          </p>
          <p>
            DoShow is called from the <var>DoExecute</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCommonDialog.Execute"/>
          <link id="TCommonDialog.DoExecute"/>
          <link id="TCommonDialog.OnShow"/>
        </seealso>
      </element>

      <element name="TCommonDialog.DoCanClose">
        <short>Performs actions needed to determine if the dialog can be closed.</short>
        <descr>
          <p>
            <var>DoCanClose</var> is a method which determines if the dialog can be closed. It updates an internal flag which indicates the method has been called, and signals the <var>OnCanClose</var> event handler (when assigned and supported for the platform).
          </p>
          <p>
            Use the OnCanClose to implement any required logic to determine if the dialog can actually be closed. The value in the CanClose argument is updated in the event handler.
          </p>
          <p>
            DoCanClose is called from the <var>DoExecute</var> method when the widgetset class has attempted to close the dialog.
          </p>
        </descr>
        <seealso>
          <link id="TCommonDialog.OnCanClose"/>
          <link id="TCommonDialog.Execute"/>
          <link id="TCommonDialog.DoExecute"/>
        </seealso>
      </element>
      <element name="TCommonDialog.DoCanClose.CanClose">
        <short>True if the OnCanClose event handler determines the dialog can be closed.</short>
      </element>

      <element name="TCommonDialog.DoClose">
        <short>Performs actions needed when the dialog is closed.</short>
        <descr>
          <p>
            <var>DoClose</var> is a method used to perform actions needed when the dialog is closed. It updates an internal flag which indicates the method has been called, and signals the <var>OnClose</var> event handler (when assigned).
          </p>
          <p>
            DoClose is called from the <var>Close</var> method, and occurs before the widgetset <var>Handle</var> for the dialog is freed.
          </p>
        </descr>
        <seealso>
          <link id="TCommonDialog.OnClose"/>
          <link id="TCommonDialog.Execute"/>
          <link id="TCommonDialog.DoExecute"/>
          <link id="TCommonDialog.Close"/>
          <link id="TCommonDialog.Handle"/>
        </seealso>
      </element>

      <element name="TCommonDialog.HandleAllocated">
        <short>Returns True if a widgetset handle has been allocated for the dialog.</short>
        <descr/>
        <seealso>
          <link id="TCommonDialog.Handle"/>
        </seealso>
      </element>
      <element name="TCommonDialog.HandleAllocated.Result">
        <short>True if a widgetset handle has been allocated for the dialog.</short>
      </element>

      <element name="TCommonDialog.Width">
        <short>The width of the dialog.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCommonDialog.Height">
        <short>The height of the dialog.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCommonDialog.OnClose">
        <short>Event handler signalled when the dialog is closed.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCommonDialog.OnCanClose">
        <short>Event handler signalled to determine if the dialog can be closed.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCommonDialog.OnShow">
        <short>Event handler signalled when the dialog is displayed.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCommonDialog.HelpContext">
        <short>Help context identifier for the help message displayed for the dialog.</short>
        <descr/>
        <seealso>
          <link id="#lcl.forms.TApplication.HelpContext">TApplication.HelpContext</link>
          <link id="#lcl.forms.TCustomForm.HelpFile">TCustomForm.HelpFile</link>
        </seealso>
      </element>

      <element name="TCommonDialog.Title">
        <short>The Title or Caption displayed for the dialog.</short>
        <descr>
          <p>
            <var>Title</var> can be used to provide a usage context for the re-usable dialog. The default value for the property is provided by the <var>DefaultTitle</var> method, and assigned in the <var>Create</var> constructor.
          </p>
        </descr>
        <seealso>
          <link id="TCommonDialog.DefaultTitle"/>
          <link id="TCommonDialog.Create"/>
        </seealso>
      </element>

      <element name="TFileDialog">
        <short>
          <var>TFileDialog</var> allows selection of a file from the current directory.
        </short>
        <descr>
          <p>
            <var>TFileDialog</var> allows selection of a file from the current directory. This is also the base class for the Open and Save (As) dialogs.
          </p>
        </descr>
      </element>

      <element name="TFileDialog.FInternalFilterIndex"/>
      <element name="TFileDialog.FDefaultExt"/>
      <element name="TFileDialog.FFileName"/>
      <element name="TFileDialog.FFiles"/>
      <element name="TFileDialog.FFilter"/>
      <element name="TFileDialog.FFilterIndex"/>
      <element name="TFileDialog.FHistoryList"/>
      <element name="TFileDialog.FInitialDir"/>
      <element name="TFileDialog.FOnHelpClicked"/>
      <element name="TFileDialog.FOnTypeChange"/>

      <element name="TFileDialog.SetDefaultExt">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFileDialog.SetDefaultExt.AValue">
        <short/>
      </element>

      <element name="TFileDialog.SetFilterIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFileDialog.SetFilterIndex.AValue">
        <short/>
      </element>

      <element name="TFileDialog.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

      <element name="TFileDialog.GetFilterIndex">
        <short>
          <var>GetFilterIndex</var> - returns the Index value for the filename filter.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TFileDialog.GetFilterIndex.Result">
        <short/>
      </element>

      <element name="TFileDialog.SetFileName">
        <short>
          <var>SetFileName</var> - specifies the filename in the file dialog.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TFileDialog.SetFileName.Value">
        <short/>
      </element>

      <element name="TFileDialog.SetFilter">
        <short>
          <var>SetFilter</var> - specifies the Filter for use in filename searching.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TFileDialog.SetFilter.Value">
        <short/>
      </element>

      <element name="TFileDialog.SetHistoryList">
        <short>
          <var>SetHistoryList</var> - specifies a list of strings that have been used in searching.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TFileDialog.SetHistoryList.AValue">
        <short/>
      </element>

      <element name="TFileDialog.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TFileDialog</var>, and calls the inherited <var>Create</var> method. It  allocates resources needed for the files and history, and initializes the filter index.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.Dialogs.TCommonDialog.Create">TCommonDialog.Create</link>
        </seealso>
      </element>
      <element name="TFileDialog.Create.TheOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TFileDialog.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the destructor for <var>TFileDialog</var>, and frees file and history lists then calls the inherited <var>Destroy</var> method.
          </p>
        </descr>
        <seealso>
        </seealso>
      </element>

      <element name="TFileDialog.DoCanClose">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFileDialog.DoCanClose.CanClose">
        <short/>
      </element>

      <element name="TFileDialog.DoTypeChange">
        <short>
          <var>DoTypeChange</var> - perform the code for the <var>OnTypeChange</var> event.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileDialog.Files">
        <short>Stringlist which stores the names of the selected files.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileDialog.HistoryList">
        <short>
          <var>HistoryList</var> - stringlist containing the names of files recently accessed.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileDialog.IntfFileTypeChanged">
        <short>
          <var>IntfFileTypeChanged</var> - interface method for file type change.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TFileDialog.IntfFileTypeChanged.NewFilterIndex">
        <short/>
      </element>

      <element name="TFileDialog.Title" link="#lcl.dialogs.TCommonDialog.Title"/>

      <element name="TFileDialog.DefaultExt">
        <short>Sets the default file extension for the file dialog box.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileDialog.FileName">
        <short>String storing the name of the file chosen by the user as UTF8</short>
        <descr>
          <p>
            If you need the filename as system encoded, you can use UTF8ToSys from the unit FileUtil.
          </p>
        </descr>
      </element>

      <element name="TFileDialog.Filter">
        <short>A string which contains possible filename filters (e.g. .doc, .xmp, .pas etc).</short>
        <descr>
          <p>
            This is a string which contains the filters a user can choose from. The available filters and their description are separated by pipe symbols.
          </p>
          <p>
            To set this property at run-time assign a value like:
          </p>
          <code>"All files|*.*|Lazarus Project files|*.lpr"</code>
          <p>
            An entry can contain multiple masks separated by semicolon, like:
          </p>
          <code>"Pascal units|*.pas;*.pp;*.p"</code>
        </descr>
      </element>

      <element name="TFileDialog.FilterIndex">
        <short>This property sets which file filter is the default.</short>
        <descr>
          <p>
            This property sets which file filter is the default. For example, set this property to 2 to set the second filter as default.
          </p>
        </descr>
      </element>

      <element name="TFileDialog.InitialDir">
        <short>Set the directory the dialog shows on opening.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileDialog.OnHelpClicked">
        <short>Event handler when the Help button is clicked.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileDialog.OnTypeChange">
        <short>Event Handler when the selected file type is changed.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TOpenOption">
        <short>Options which can be used in OpenDialog.</short>
        <descr>
          <p>
            <var>TOpenOption</var> contains a list of possible options which can be used in an Open dialog.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TOpenOption.ofReadOnly">
        <short/>
      </element>
      <element name="TOpenOption.ofOverwritePrompt">
        <short>If selected file exists shows a message, that file will be overwritten.</short>
      </element>
      <element name="TOpenOption.ofHideReadOnly">
        <short>hide read only file.</short>
      </element>
      <element name="TOpenOption.ofNoChangeDir">
        <short>do not change current directory.</short>
      </element>
      <element name="TOpenOption.ofShowHelp">
        <short>show a help button.</short>
      </element>
      <element name="TOpenOption.ofNoValidate">
        <short/>
      </element>
      <element name="TOpenOption.ofAllowMultiSelect">
        <short>allow multiselection.</short>
      </element>
      <element name="TOpenOption.ofExtensionDifferent">
        <short/>
      </element>
      <element name="TOpenOption.ofPathMustExist">
        <short>shows an error message if selected path does not exist.</short>
      </element>
      <element name="TOpenOption.ofFileMustExist">
        <short>shows an error message if selected file does not exist.</short>
      </element>
      <element name="TOpenOption.ofCreatePrompt">
        <short/>
      </element>
      <element name="TOpenOption.ofShareAware">
        <short/>
      </element>
      <element name="TOpenOption.ofNoReadOnlyReturn">
        <short>do not return filenames that are readonly.</short>
      </element>
      <element name="TOpenOption.ofNoTestFileCreate">
        <short/>
      </element>
      <element name="TOpenOption.ofNoNetworkButton">
        <short/>
      </element>
      <element name="TOpenOption.ofNoLongNames">
        <short/>
      </element>
      <element name="TOpenOption.ofOldStyleDialog">
        <short/>
      </element>
      <element name="TOpenOption.ofNoDereferenceLinks">
        <short>do not resolve links while dialog is shown (only on Windows, see OFN_NODEREFERENCELINKS).</short>
      </element>
      <element name="TOpenOption.ofNoResolveLinks">
        <short>do not resolve links after Execute.</short>
      </element>
      <element name="TOpenOption.ofEnableIncludeNotify">
        <short/>
      </element>
      <element name="TOpenOption.ofEnableSizing">
        <short>dialog can be resized, e.g. via the mouse.</short>
      </element>
      <element name="TOpenOption.ofDontAddToRecent">
        <short>do not add the path to the history list.</short>
      </element>
      <element name="TOpenOption.ofForceShowHidden">
        <short>show hidden files.</short>
      </element>
      <element name="TOpenOption.ofViewDetail">
        <short>details are OS and interface dependent.</short>
      </element>
      <element name="TOpenOption.ofAutoPreview">
        <short>OS and interface dependent.</short>
      </element>

      <element name="TOpenOptions">
        <short>
          Set used to store <var>TOpenOption</var> enumeration values.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="DefaultOpenDialogOptions">
        <short>Set constant with the default Open Dialog options.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TOpenDialog">
        <short>Opens a file in the current directory, selected by File Dialog.</short>
        <descr>
          <p>
            <var>TOpenDialog</var> opens a file in the current directory, selected by File Dialog. If the required file is not in the current directory, another directory can be selected with SelectDirectory.
          </p>
        </descr>
      </element>

      <element name="TOpenDialog.FOnFolderChange"/>
      <element name="TOpenDialog.FOnSelectionChange"/>
      <element name="TOpenDialog.FOptions"/>
      <element name="TOpenDialog.FLastSelectionChangeFilename"/>

      <element name="TOpenDialog.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

      <element name="TOpenDialog.ResolveLinks">
        <short>
          Gets physical file names for file references or symbolic links.
        </short>
        <descr>
          <p>
            <var>ResolveLinks</var> is a procedure used to get physical file names for file references or symbolic links used in the <var>Filename</var> and <var>Files</var> properties.
          </p>
          <p>
            Called from <var>DereferenceLinks</var> when the dialog is executed and <var>ofNoResolveLinks</var> is <b>NOT</b> included in the <var>Options</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TOpenDialog.DoExecute"/>
          <link id="TOpenDialog.DereferenceLinks"/>
          <link id="TOpenDialog.Options"/>
          <link id="TFileDialog.Filename"/>
          <link id="TFileDialog.Files"/>
          <link id="TOpenOption"/>
        </seealso>
      </element>

      <element name="TOpenDialog.DereferenceLinks">
        <short>Resolves referential links.</short>
        <descr>
          <p>
            Deprecated since LCL version 1.9. Use or override ResolveLinks instead.
          </p>
        </descr>
        <seealso>
          <link id="TOpenDialog.ResolveLinks"/>
        </seealso>
      </element>

      <element name="TOpenDialog.CheckFile">
        <short>
          Determines if the specified file name meets the requirements for the dialog.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TOpenDialog.CheckFile.Result">
        <short/>
      </element>
      <element name="TOpenDialog.CheckFile.AFilename">
        <short/>
      </element>

      <element name="TOpenDialog.CheckFileMustExist">
        <short>
          <var>CheckFileMustExist</var> returns True if a file with the specified name exists.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TOpenDialog.CheckFileMustExist.Result">
        <short/>
      </element>
      <element name="TOpenDialog.CheckFileMustExist.AFileName">
        <short/>
      </element>

      <element name="TOpenDialog.CheckAllFiles">
        <short>
          Calls <var>CheckFile</var> for each selected file, returns True if all are OK.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TOpenDialog.CheckAllFiles.Result">
        <short/>
      </element>

      <element name="TOpenDialog.DoExecute" link="#lcl.dialogs.TCommonDialog.DoExecute">
        <descr/>
        <seealso/>
      </element>
      <element name="TOpenDialog.DoExecute.Result">
        <short/>
      </element>

      <element name="TOpenDialog.DefaultTitle">
        <short>Gets the default title used for the Open Dialog.</short>
        <descr>
          <p>
            <var>DefaultTitle</var> is overridden in <var>TOpenDialog</var> to return the default title for the dialog. Uses the value in <var>rsfdOpenFile</var> as the return value.
          </p>
          <p>
            Used in the inherited constructor to set the default value for the <var>Title</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TFileDialog.Title"/>
          <link id="TCommonDialog.Create"/>
          <link id="#lcl.lclstrconsts.rsfdOpenFile">rsfdOpenFile</link>
        </seealso>
      </element>
      <element name="TOpenDialog.DefaultTitle.Result">
        <short>Default title for the dialog.</short>
      </element>

      <element name="TOpenDialog.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TOpenDialog</var>, and calls the inherited <var>Create</var> method then loads the default options for the dialog.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.Dialogs.TFileDialog.Create">TFileDialog.Create</link>
        </seealso>
      </element>
      <element name="TOpenDialog.Create.TheOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TOpenDialog.DoCanClose">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOpenDialog.DoCanClose.CanClose">
        <short/>
      </element>

      <element name="TOpenDialog.DoFolderChange">
        <short>
          <var>DoFolderChange</var> - execute the code for a folder change.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TOpenDialog.DoSelectionChange">
        <short>
          <var>DoSelectionChange</var> - execute the code for a change in selection.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TOpenDialog.IntfSetOption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOpenDialog.IntfSetOption.AOption">
        <short/>
      </element>
      <element name="TOpenDialog.IntfSetOption.AValue">
        <short/>
      </element>

      <element name="TOpenDialog.Options">
        <short>Options to be used for this dialog.</short>
        <descr>
          <p>
            Options to be used for the Open File dialog. A full list of available options is found in <link id="TOpenOptions"/>.
          </p>
        </descr>
        <seealso>
          <link id="TOpenOptions"/>
        </seealso>
      </element>

      <element name="TOpenDialog.OnFolderChange">
        <short>Event triggered when the user changes the folder in the OpenDialog.</short>
        <descr>
          <p>
            This event is called when the user changes the folder (directory) in the OpenDialog.
          </p>
          <p>
            Note: changing the folder will also trigger the OnSelectionChange event.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TOpenDialog.OnSelectionChange">
        <short>
          Event triggered when the user changes the selection made in the OpenDialog.
        </short>
        <descr>
          <p>
            This event is triggered when the user changes the selected file in the OpenDialog.
          </p>
          <p>
            Note: When the user changes the folder OnSelectionChange will be called first.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TSaveDialog">
        <short>
          <var>TSaveDialog</var> - Dialog for saving the current buffer to a file.
        </short>
        <descr>
          <p>
            Save Dialog:  invoked when the application requires to save a file.
          </p>
          <p>
            If the file is already open or a filename has been specified, then the current buffer is written to that file. If no file is specified, the Save File As dialog is invoked and the buffer is saved to that file.
          </p>
        </descr>
      </element>

      <element name="TSaveDialog.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

      <element name="TSaveDialog.DefaultTitle" link="#lcl.dialogs.TOpenDialog.DefaultTitle">
        <short/>
        <descr/>
        <seealso>
          <link id="TOpenDialog.DefaultTitle"/>
        </seealso>
      </element>
      <element name="TSaveDialog.DefaultTitle.Result">
        <short>Default title for the dialog.</short>
      </element>

      <element name="TSaveDialog.Create" link="#lcl.dialogs.TOpenDialog.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            Create is the overridden constructor for the class instance, and calls the inherited constructor on entry. Create update the component style flags to the value used for the dialog type.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TSaveDialog.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TSelectDirectoryDialog">
        <short>Select Directory Dialog.</short>
        <descr>
          <p>
            SelectDirectoryDialog allows the user to select a directory when the directory structure is displayed as a tree.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.editbtn.TDirectoryEdit">TDirectoryEdit</link>
        </seealso>
      </element>

      <element name="TSelectDirectoryDialog.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

      <element name="TSelectDirectoryDialog.CheckFileMustExist" link="#lcl.dialogs.TOpenDialog.CheckFileMustExist">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TSelectDirectoryDialog.CheckFileMustExist.Result">
        <short/>
      </element>
      <element name="TSelectDirectoryDialog.CheckFileMustExist.AFilename">
        <short/>
      </element>

      <element name="TSelectDirectoryDialog.DefaultTitle" link="#lcl.dialogs.TCommonDialog.DefaultTitle"/>

      <element name="TSelectDirectoryDialog.Create" link="#lcl.dialogs.TOpenDialog.Create">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TSelectDirectoryDialog.Create.AOwner">
        <short/>
      </element>

      <element name="TColorDialog">
        <short>
          <var>TColorDialog</var> - dialog for selecting a color to use in graphics and text.
        </short>
        <descr>
          <p>
            <var>TColorDialog</var> presents a palette of colors to allow the user to select the required color for text or graphics.
          </p>
          <p>
            Call the <var>Execute</var> method to display the color dialog.
          </p>
        </descr>
        <seealso>
          <link id="TCommonDialog"/>
          <link id="TCommonDialog.Execute"/>
        </seealso>
      </element>

      <element name="TColorDialog.FColor">
        <short>Internal member used to store the value for he selected  color.</short>
      </element>

      <element name="TColorDialog.FCustomColors">
        <short>Internal member used to store user-specified colors.</short>
      </element>

      <element name="TColorDialog.SetCustomColors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TColorDialog.SetCustomColors.AValue">
        <short/>
      </element>

      <element name="TColorDialog.AddDefaultColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TColorDialog.AddDefaultColor.s">
        <short/>
      </element>

      <element name="TColorDialog.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

      <element name="TColorDialog.DefaultTitle" link="#lcl.dialogs.TCommonDialog.DefaultTitle"/>

      <element name="TColorDialog.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TColorDialog</var>, and calls the inherited <var>Create</var> method. Create allocates resources and initializes  the Color and CustomColors properties.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.Dialogs.TCommonDialog.Create">TCommonDialog.Create</link>
        </seealso>
      </element>
      <element name="TColorDialog.Create.TheOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TColorDialog.Destroy">
        <short>Destructor for the class instance.</short>
        <descr>
          <p>
            <var>Destroy</var> is the destructor for <var>TColorDialog</var>, and frees custom colors then calls the inherited <var>Destroy</var> method.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TColorDialog.Title" link="#lcl.dialogs.TCommonDialog.Title">
        <descr>
          You can set the caption of the color dialog by changing this property.
        </descr>
        <seealso/>
      </element>

      <element name="TColorDialog.Color">
        <short>
          <var>Color</var> the color that is selected by the dialog (a value may have been pre-set and may be accepted, but a new value can be chosen).
        </short>
        <descr>
          When the Color dialog has been shown and the user pressed OK, the FColor property contains the chosen color.
        </descr>
        <seealso/>
      </element>

      <element name="TColorDialog.CustomColors">
        <short>
          <var>CustomColors</var> - a customized list of colors that can be used instead of the system-supplied list.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TColorButton">
        <short>
          <var>TColorButton</var> - a SpeedButton designed to be used with the Color dialog, allowing a color to be selected for text or graphics.
        </short>
        <descr>
          <p>
            <var>TColorButton</var> - a SpeedButton designed to be used with the Color dialog, allowing a color to be selected for text or graphics.
          </p>
          <p>
            To use the ColorButton, first select the ColorButton icon from the Component Palette and place it on the Form Designer in the location you want it to occupy, then place a TColorDialog on the Form Designer, give it a name (or accept the default name) and select this named dialog as the ColorDialog property in the Object Inspector for the ColorButton.
          </p>
          <p>
            The default appearance of the ColorButton is a rectangle containing a color; if you wish to include a caption beside the block of color, you may need to adjust the size of the control to accommodate the text, and you can then enter some text in the Caption property of the ColorButton; this text will appear next to the color block.
          </p>
          <p>
            At run-time the ColorButton is visible with a default or preselected ButtonColor in the block, and any optional caption beside it; the ColorDialog is not visible until the ColorButton is clicked, when the ColorDialog pops up and offers a choice of colors, either from a list or a palette, and if the user makes a selection and closes the dialog by pressing OK, the ColorButton will display the color that was chosen in the ColorDialog.
          </p>
          <p>
            Note that in the context of ColorButton, properties with the name ButtonColor refer to the color that has been selected and is displayed in the color block; properties entitled Color without 'Button' attached refer to the color of the control itself, usually the same as the background or the default button face color.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TColorButton.FBorderWidth"/>
      <element name="TColorButton.FButtonColorAutoSize"/>
      <element name="TColorButton.FButtonColorSize"/>
      <element name="TColorButton.FButtonColor"/>
      <element name="TColorButton.FColorDialog"/>
      <element name="TColorButton.FOnColorChanged"/>
      <element name="TColorButton.FDisabledPattern"/>

      <element name="TColorButton.IsButtonColorAutoSizeStored">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TColorButton.IsButtonColorAutoSizeStored.Result">
        <short/>
      </element>

      <element name="TColorButton.SetBorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TColorButton.SetBorderWidth.AValue">
        <short/>
      </element>

      <element name="TColorButton.SetButtonColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TColorButton.SetButtonColor.AValue">
        <short/>
      </element>

      <element name="TColorButton.SetButtonColorAutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TColorButton.SetButtonColorAutoSize.AValue">
        <short/>
      </element>

      <element name="TColorButton.SetButtonColorSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TColorButton.SetButtonColorSize.AValue">
        <short/>
      </element>

      <element name="TColorButton.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

      <element name="TColorButton.DrawGlyph">
        <short>
          <var>DrawGlyph</var> - draw the glyph on the button face.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TColorButton.DrawGlyph.Result">
        <short/>
      </element>
      <element name="TColorButton.DrawGlyph.ACanvas">
        <short/>
      </element>
      <element name="TColorButton.DrawGlyph.AClient">
        <short/>
      </element>
      <element name="TColorButton.DrawGlyph.AOffset">
        <short/>
      </element>
      <element name="TColorButton.DrawGlyph.AState">
        <short/>
      </element>
      <element name="TColorButton.DrawGlyph.ATransparent">
        <short/>
      </element>
      <element name="TColorButton.DrawGlyph.BiDiFlags">
        <short/>
      </element>

      <element name="TColorButton.GetDisabledPattern">
        <short>
          <var>GetDisabledPattern</var> returns a BitMap with a disabled pattern.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TColorButton.GetDisabledPattern.Result">
        <short/>
      </element>

      <element name="TColorButton.GetGlyphSize">
        <short>
          <var>GetGlyphSize</var> returns a value with the size for glyphs on the button.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TColorButton.GetGlyphSize.Result">
        <short/>
      </element>
      <element name="TColorButton.GetGlyphSize.PaintRect">
        <short/>
      </element>

      <element name="TColorButton.GetControlClassDefaultSize" link="#lcl.controls.TControl.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TColorButton.GetControlClassDefaultSize.Result">
        <short/>
      </element>

      <element name="TColorButton.ShowColorDialog">
        <short>Displays a Color dialog and captures its result.</short>
        <descr>
          <p>
            <var>ShowColorDialog</var> is a method used to display a <var>TColorDialog</var> and capture its result.
          </p>
          <p>
            ShowColorDialog uses an existing dialog instance in <var>ColorDialog</var> when assigned. Otherwise, a new <var>TColorDialog</var> instance is created and temporarily stored in the property. The value in <var>ButtonColor</var> is used as the default color value in the dialog. The <var>Execute</var> method in the dialog is called to get the selected Color value, and it is stored in the <var>ButtonColor</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TColorButton.ButtonColor"/>
          <link id="TColorButton.ColorDialog"/>
          <link id="TCommonDialog.Execute"/>
        </seealso>
      </element>

      <element name="TColorButton.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TColorButton</var>, and calls the inherited <var>Create</var> method. Create sets initial bounds for the controls, as well as its size and pattern.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.Buttons.TCustomSpeedButton.Create">TCustomSpeedButton.create</link>
        </seealso>
      </element>
      <element name="TColorButton.Create.AnOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TColorButton.Destroy" link="#lcl.buttons.TCustomSpeedButton.Destroy">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TColorButton.Click" link="#lcl.controls.TControl.Click">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TColorButton.Action" link="#lcl.controls.TControl.Action"/>
      <element name="TColorButton.Align" link="#lcl.controls.TControl.Align"/>
      <element name="TColorButton.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TColorButton.AllowAllUp" link="#lcl.buttons.TCustomSpeedButton.AllowAllUp"/>
      <element name="TColorButton.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>

      <element name="TColorButton.BorderWidth">
        <short>Width for the borders on the button.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TColorButton.ButtonColorAutoSize">
        <short>True if the button can be automatically re-sized.</short>
        <descr>
          <p>
            <var>ButtonColorAutoSize</var> is a Boolean property which indicates if the button can be automatically re-sized.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TColorButton.ButtonColorSize">
        <short>
          <var>ButtonColorSize</var> - the size of the button color block.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TColorButton.ButtonColor">
        <short>
          <var>ButtonColor</var> - the color that has been selected by the ColorDialog and is displayed in the button.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TColorButton.ColorDialog">
        <short>The <var>ColorDialog</var> that opens when the button is activated.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TColorButton.Constraints" link="#lcl.controls.TControl.Constraints"/>

      <element name="TColorButton.Caption">
        <short>
          <var>Caption</var> - a string that can be placed beside the block of color.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TColorButton.Color">
        <short>
          The <var>Color</var> of the control itself, i.e. the parts that are not the color display block; edges, background etc.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TColorButton.Down" link="#lcl.buttons.TCustomSpeedButton.Down"/>
      <element name="TColorButton.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TColorButton.Flat" link="#lcl.buttons.TCustomSpeedButton.Flat"/>
      <element name="TColorButton.Font" link="#lcl.controls.TControl.Font"/>
      <element name="TColorButton.Hint" link="#lcl.controls.TControl.Hint"/>
      <element name="TColorButton.Layout" link="#lcl.buttons.TCustomSpeedButton.Layout"/>
      <element name="TColorButton.Margin" link="#lcl.buttons.TCustomSpeedButton.Margin"/>
      <element name="TColorButton.Spacing" link="#lcl.buttons.TCustomSpeedButton.Spacing"/>
      <element name="TColorButton.Transparent" link="#lcl.buttons.TCustomSpeedButton.Transparent"/>
      <element name="TColorButton.Visible" link="#lcl.controls.TControl.Visible"/>
      <element name="TColorButton.OnClick" link="#lcl.controls.TControl.OnClick"/>

      <element name="TColorButton.OnColorChanged">
        <short>
          <var>OnColorChanged</var> - event handler for a change in button color.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TColorButton.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
      <element name="TColorButton.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TColorButton.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TColorButton.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TColorButton.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TColorButton.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TColorButton.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TColorButton.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TColorButton.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TColorButton.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TColorButton.OnPaint" link="#lcl.controls.TGraphicControl.OnPaint"/>
      <element name="TColorButton.OnResize" link="#lcl.controls.TControl.OnResize"/>
      <element name="TColorButton.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
      <element name="TColorButton.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TColorButton.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
      <element name="TColorButton.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TColorButton.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>

      <element name="TFontDialogOption">
        <short>An enumerated list of constants to set the options of a Font dialog.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TFontDialogOption.fdAnsiOnly">
        <short>Limits the font name selection list to font using ANSI character sets.</short>
      </element>
      <element name="TFontDialogOption.fdTrueTypeOnly">
        <short>Limits the font name selection list to TrueType fonts.</short>
      </element>
      <element name="TFontDialogOption.fdEffects">
        <short>
          Displays check boxes for strikethrough, underline, et. al. font effects in the dialog.
        </short>
      </element>
      <element name="TFontDialogOption.fdFixedPitchOnly">
        <short>Limits the font name selection list to fixed-pitch (mono-spaced) fonts.</short>
      </element>
      <element name="TFontDialogOption.fdForceFontExist">
        <short/>
      </element>
      <element name="TFontDialogOption.fdNoFaceSel">
        <short>Hides the font name selection list in the dialog.</short>
      </element>
      <element name="TFontDialogOption.fdNoOEMFonts">
        <short>Excludes OEM fonts from the font selection list.</short>
      </element>
      <element name="TFontDialogOption.fdNoSimulations">
        <short>Excludes bitmapped fonts that emulate sizes by scaling.</short>
      </element>
      <element name="TFontDialogOption.fdNoSizeSel">
        <short>Hides the Size selection list in the dialog.</short>
      </element>
      <element name="TFontDialogOption.fdNoStyleSel">
        <short>Hides the style selection list in the dialog.</short>
      </element>
      <element name="TFontDialogOption.fdNoVectorFonts">
        <short>Excludes vector fonts from the list of font names.</short>
      </element>
      <element name="TFontDialogOption.fdShowHelp">
        <short>Makes the Help button visible in the dialog.</short>
      </element>
      <element name="TFontDialogOption.fdWysiwyg">
        <short>Displays font names using a WYSIWYG preview.</short>
      </element>
      <element name="TFontDialogOption.fdLimitSize">
        <short>Restricts font sizes to the range in MinFontSize and MaxFontSize.</short>
      </element>
      <element name="TFontDialogOption.fdScalableOnly">
        <short>Limits the font selection list to scalable fonts; no bitmapped fonts.</short>
      </element>
      <element name="TFontDialogOption.fdApplyButton">
        <short>Makes the Apply button visible in the dialog.</short>
      </element>

      <element name="TFontDialogOptions">
        <short>Set type used to store font dialog options.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFontDialog">
        <short>Dialog used to select a font typeface and size.</short>
        <descr>
          <p>
            <var>TFontDialog</var> is a <var>TCommonDialog</var> descendant which implements a font selection dialog.
          </p>
          <p>
            TFontDialog displays selection lists for font name, size, style, and color. It can be configured to limit the available typefaces, sizes, and visual presentations using the Options, MinFontSize and MaxFontSize properties.
          </p>
          <p>
            When the dialog is executed, the selected font is made available in the Font property. The OnApplyClicked event handler can be used to perform actions needed when the optional Apply button is clicked in the dialog.
          </p>
        </descr>
        <seealso>
          <link id="TCommonDialog"/>
          <link id="TFontDialogOption"/>
        </seealso>
      </element>

      <element name="TFontDialog.FFont"/>
      <element name="TFontDialog.FMaxFontSize"/>
      <element name="TFontDialog.FMinFontSize"/>
      <element name="TFontDialog.FOnApplyClicked"/>
      <element name="TFontDialog.FOptions"/>
      <element name="TFontDialog.FPreviewText"/>

      <element name="TFontDialog.SetFont">
        <short>Sets the value for the Font property.</short>
        <descr/>
        <seealso>
          <link id="TFontDialog.Font"/>
        </seealso>
      </element>
      <element name="TFontDialog.SetFont.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TFontDialog.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>
      <element name="TFontDialog.DefaultTitle" link="#lcl.dialogs.TCommonDialog.DefaultTitle"/>

      <element name="TFontDialog.ApplyClicked">
        <short>Performs actions needed when a font is selected using the dialog.</short>
        <descr>
          <p>
            <var>ApplyClicked</var> is a used to perform actions needed when a font is applied using the Apply button in the dialog. The Apply button is made visible by a setting in Options, and must be enabled; the default buttons are Ok and Cancel.
          </p>
          <p>
            ApplyClicked signals the OnApplyClicked event handler (when assigned).
          </p>
          <remark>
            Widgetset classes in the current LCL implementaion do not call ApplyClicked; they signal the OnApplyClicked event handler directly.
          </remark>
        </descr>
        <seealso>
          <link id="TFontDialog.OnApplyClicked"/>
          <link id="TFontDialog.Options"/>
        </seealso>
      </element>

      <element name="TFontDialog.Create" link="#rtl.classes.TComponent.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance, and calls the inherited constructor on entry. Create allocates resources needed for the Font property, and sets the default values in the Options property.
          </p>
        </descr>
        <seealso>
          <link id="TFontDialog.Font"/>
          <link id="TFontDialog.Options"/>
        </seealso>
      </element>
      <element name="TFontDialog.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TFontDialog.Destroy" link="#rtl.classes.TComponent.Destroy">
        <short>Destructor for the class instance.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFontDialog.Title" link="#lcl.dialogs.TCommonDialog.Title"/>

      <element name="TFontDialog.Font">
        <short>Contains the Font selected in the dialog.</short>
        <descr>
          <p>
            <var>Font</var> is a <var>TFont</var> property with the font selected using the dialog. The value in Font is updated in widgetset classes when the <b>OK</b> or <b>Apply</b> button is clicked during execution of the dialog.
          </p>
          <p>
            Use the <var>OnApplyClicked</var> event handler to perform actions needed when the <b>Apply</b> button is enabled and clicked in the dialog.
          </p>
        </descr>
        <seealso>
          <link id="TFontDialog.Options"/>
          <link id="TFontDialog.OnApplyClicked"/>
          <link id="TFontDialog.ApplyClicked"/>
          <link id="#lcl.graphics.TFont">TFont</link>
        </seealso>
      </element>

      <element name="TFontDialog.MinFontSize">
        <short>Minimum font size allowed in the font selection dialog.</short>
        <descr>
          <p>
            <var>MinFontSize</var> is an Integer property which contains the minimum font size allowed in the font selection dialog. Limiting font size selection to the range in <var>MinFontSize</var> and <var>MaxFontSize</var> must be enabled using the <var>Options</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TFontDialog.MaxFontSize"/>
          <link id="TFontDialog.Options"/>
        </seealso>
      </element>

      <element name="TFontDialog.MaxFontSize">
        <short>Maximum font size allowed in the font selection dialog.</short>
        <descr>
          <p>
            <var>MaxFontSize</var> is an Integer property which contains the maximum font size allowed in the font selection dialog. Limiting font size selection to the range in <var>MinFontSize</var> and <var>MaxFontSize</var> must be enabled using the <var>Options</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TFontDialog.MinFontSize"/>
          <link id="TFontDialog.Options"/>
        </seealso>
      </element>

      <element name="TFontDialog.Options">
        <short>A set of options available from TFontDialogOptions.</short>
        <descr>
          <p>
            <var>Options</var> is a <var>TFontDialogOptions</var> property which controls the options enabled for the font selection dialog. Options contains zero or more values from the <var>TFontDialogOption</var> enumeration. The default value for the property is <var>[fdEffects]</var>, and enables the font effects check boxes in the dialog.
          </p>
          <p>
            See <link id="TFontDialogOption">TFontDialogOption</link> for more information about the values in the enumeration and their usage.
          </p>
          <p>
            Set (or Include and Exclude) values in the property prior to calling the Execute method.
          </p>
        </descr>
        <seealso>
          <link id="TFontDialogOptions"/>
          <link id="TFontDialogOption"/>
          <link id="TCommonDialog.Execute"/>
        </seealso>
      </element>

      <element name="TFontDialog.OnApplyClicked">
        <short>
          Event handler signalled when the Apply button is clicked in the font dialogs.
        </short>
        <descr>
          <p>
            <var>OnApplyClicked</var> is a <var>TNotifyEvent</var> property with the event handler signalled when the Apply button is clicked in the font dialog. The Apply button must be enabled in the Options property to receive the event notification.
          </p>
          <p>
            OnApplyClicked allows the application to perform actions needed when a Font has been applied. This can include assigning the value in Font to another control. SImilar actions need to be performed when the Execute method returns True, indicating that the OK button was clicked.
          </p>
          <p>
            OnApplyClicked is signalled from the ApplyClicked method, and triggered directly from methods in widgetset classes.
          </p>
        </descr>
        <seealso>
          <link id="TFontDialog.ApplyClicked"/>
          <link id="TFontDialog.Options"/>
          <link id="TFontDialog.Font"/>
          <link id="TCommonDialog.Execute"/>
          <link id="TFontDialogOption"/>
          <link id="TFontDialogOptions"/>
        </seealso>
      </element>

      <element name="TFontDialog.PreviewText">
        <short>
          A text snippet displayed as a preview for the selected font in the dialog.
        </short>
        <descr>
          <p>
            <var>PreviewText</var> is a <var>String</var> property with a short snippet of text to display using the currently selected font in the dialog. It acts as a WYSIWYG preview mechanism.
          </p>
          <p>
            Please note that use of PreviewText is dependent on platform / widgetset support. For instance, Windows does render PreviewText. It uses its own "Sample", and renders the font name in the selection list using the typeface. QT and QT5 have  the same behavior as Windows. It is implemented for the GTK, GTK2 and MUI widgetsets.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TFindOption">
        <short>A list of possible options which can be used in Find-dialogs.</short>
        <descr>A list of possible options which can be used in Find-dialogs.</descr>
        <seealso/>
      </element>
      <element name="TFindOption.frDown">
        <short>If set the "Down" radiobutton is selected.</short>
      </element>
      <element name="TFindOption.frFindNext">
        <short>This option will be set when the user presses "Find Next"</short>
      </element>
      <element name="TFindOption.frHideMatchCase">
        <short>If set the "Match case" checkbox is hidden from the Find dialog.</short>
      </element>
      <element name="TFindOption.frHideWholeWord">
        <short>If set the "Whole word" checkbox is hidden from the Find dialog.</short>
      </element>
      <element name="TFindOption.frHideUpDown">
        <short>If set the "Up" and "Down" radiobuttons are hidden from the Find dialog.</short>
      </element>
      <element name="TFindOption.frMatchCase">
        <short>This flag is set when the user checks the "Match case" checkbox.</short>
      </element>
      <element name="TFindOption.frDisableMatchCase">
        <short>If set the "Match case" checkbox is disabled in the Find dialog.</short>
      </element>
      <element name="TFindOption.frDisableUpDown">
        <short>If set the "Up" and "Down" radiobuttons are disabled in the Find dialog.</short>
      </element>
      <element name="TFindOption.frDisableWholeWord">
        <short>If set the "Whole word" checkbox is disabled in the Find dialog.</short>
      </element>
      <element name="TFindOption.frReplace">
        <short>This flag is set if only the first occurrence of the search string is to be replaced with the replace string.</short>
      </element>
      <element name="TFindOption.frReplaceAll">
        <short>This flag is set if all occurrences of the search string are to be replaced with the replace string.</short>
      </element>
      <element name="TFindOption.frWholeWord">
        <short>This flag is set when the user checks the "Whole word" checkbox.</short>
      </element>
      <element name="TFindOption.frShowHelp">
        <short>If set the dialog will display a help button.</short>
      </element>
      <element name="TFindOption.frPromptOnReplace">
        <short>This flag is set when the user checks the "Prompt on replace" checkbox.</short>
      </element>
      <element name="TFindOption.frHidePromptOnReplace">
        <short>If set the "Prompt on replace" checkbox is hidden from the Find dialog.</short>
      </element>

      <element name="TFindOptions">
        <short>A set of TFindOption.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog">
        <short>
          <var>TFindDialog</var> - a dialog used for finding text within the current editor or text buffer.
        </short>
        <descr>
          <p>
            Opens a dialog box allowing the user to enter text for searching, for example in a text editor.
          </p>
          <p>
            As TFindDialog is the parent class for the TReplaceDialog, it contains definitions for the Replace method, but the Replace option does not actually appear when the dialog is displayed: you need to use TReplaceDialog to do that.
          </p>
        </descr>
        <seealso>
          <link id="TReplaceDialog"/>
        </seealso>
      </element>

      <element name="TFindDialog.FFormLeft"/>
      <element name="TFindDialog.FFormTop"/>

      <element name="TFindDialog.GetReplaceText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.GetReplaceText.Result">
        <short/>
      </element>

      <element name="TFindDialog.GetFindText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.GetFindText.Result">
        <short/>
      </element>

      <element name="TFindDialog.GetLeft">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.GetLeft.Result">
        <short/>
      </element>

      <element name="TFindDialog.GetPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.GetPosition.Result">
        <short/>
      </element>

      <element name="TFindDialog.GetTop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.GetTop.Result">
        <short/>
      </element>

      <element name="TFindDialog.SetFindText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.SetFindText.AValue">
        <short/>
      </element>

      <element name="TFindDialog.SetLeft">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.SetLeft.AValue">
        <short/>
      </element>

      <element name="TFindDialog.SetPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.SetPosition.AValue">
        <short/>
      </element>

      <element name="TFindDialog.SetTop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.SetTop.AValue">
        <short/>
      </element>

      <element name="TFindDialog.SetReplaceText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.SetReplaceText.AValue">
        <short/>
      </element>

      <element name="TFindDialog.FFindForm">
        <short>
          <var>FFindForm</var> - local variable holding the form used for the Find dialog.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.FOnReplace">
        <short>
          <var>FOnReplace</var> - local variable identifying the event handler for replacing.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.FOnFind">
        <short>
          <var>FOnFind</var> - local variable identifying the event handler for finding.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.FOptions">
        <short>
          <var>FOptions</var> - local variable holding the set of current options.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.FOnHelpClicked">
        <short>
          <var>FOnHelpClicked</var> - local variable identifying the help event handler.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.FReplaceText">
        <short>
          <var>FReplaceText</var> - local variable holding the Replace text.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.FFindText">
        <short>
          <var>FFindText</var> - local variable containing the text to be found.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.DefaultTitle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.DefaultTitle.Result">
        <short/>
      </element>

      <element name="TFindDialog.FindClick">
        <short>
          <var>FindClick</var> - method for execution when the Find button is clicked.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.FindClick.Sender">
        <short/>
      </element>

      <element name="TFindDialog.HelpClick">
        <short>
          <var>HelpClick</var> - method to execute when the Help button is clicked.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.HelpClick.Sender">
        <short/>
      </element>

      <element name="TFindDialog.CancelClick">
        <short>
          <var>CancelClick</var> - method to execute when the Cancel button is clicked.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.CancelClick.Sender">
        <short/>
      </element>

      <element name="TFindDialog.GetHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.GetHeight.Result">
        <short/>
      </element>

      <element name="TFindDialog.GetWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.GetWidth.Result">
        <short/>
      </element>

      <element name="TFindDialog.DoCloseForm">
        <short>
          <var>DoCloseForm</var> - execute the code for closing the Find/Replace dialog form.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.DoCloseForm.Sender">
        <short/>
      </element>
      <element name="TFindDialog.DoCloseForm.CloseAction">
        <short/>
      </element>

      <element name="TFindDialog.Find">
        <short>
          <var>Find</var> - software emulation of the <var>OnFind</var> event.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.Help">
        <short>
          <var>Help</var> - software emulation of the <var>OnHelpClicked</var> event.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.Replace">
        <short>
          <var>Replace</var> - software emulation of the <var>OnReplace</var> event.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.CreateForm">
        <short>
          <var>CreateForm</var> - function result returns the form that was created.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.CreateForm.Result">
        <short/>
      </element>

      <element name="TFindDialog.SetFormValues">
        <short>
          <var>SetFormValues</var> - specifies the values for the form.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.GetFormValues">
        <short>
          <var>GetFormValues</var> - finds the values for the form.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.CalcPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TFindDialog.CalcPosition.AForm">
        <short/>
      </element>

      <element name="TFindDialog.ReplaceText">
        <short>
          <var>ReplaceText</var> - the text string that is to be substituted for the Find text.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.OnReplace">
        <short>
          <var>OnReplace</var> - event handler for replacing text.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TFindDialog</var>, and calls the inherited <var>Create</var> method. It sets the initial option values for Find only.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
          <link id="#LCL.Dialogs.TCommonDialog.Create">TCommonDialog.Create</link>
        </seealso>
      </element>
      <element name="TFindDialog.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TFindDialog.Destroy">
        <short>Destructor for the class instance.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.CloseDialog">
        <short>
          <var>CloseDialog</var> and returns its resources.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.Execute" link="#lcl.dialogs.TCommonDialog.Execute">
        <short/>
        <descr/>
        <seealso>
          <link id="#lcl.dialogs.TCommonDialog.Execute">TCommonDialog.Execute</link>
        </seealso>
      </element>
      <element name="TFindDialog.Execute.Result">
        <short>True if the dialog was successfully completed.</short>
      </element>

      <element name="TFindDialog.Left">
        <short>The <var>Left</var> side of the dialog display.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.Position">
        <short>The <var>Position</var> of the dialog display.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.Top">
        <short>the <var>Top</var> of the dialog display.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.FindText">
        <short><var>FindText</var> - the text string that the dialog will try to find.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.Options">
        <short>The current <var>Options</var> for the seeking and replacing process.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.OnFind">
        <short><var>OnFind</var> - event handler for a click on the Find button.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFindDialog.OnHelpClicked">
        <short><var>OnHelpClicked</var> - event handler for a click on the Help button.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TReplaceDialog">
        <short>A dialog allowing the user to replace text.</short>
        <descr>
          <p>
            The dialog appears and offers boxes for the user to enter text for searching and text to replace it, for example while editing a file or large piece of text.
          </p>
          <p>
            A number of buttons appear, offering the choice to replace this instance, find next, replace all.
          </p>
        </descr>
        <seealso>
          <link id="TFindDialog"/>
        </seealso>
      </element>

      <element name="TReplaceDialog.DefaultTitle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TReplaceDialog.DefaultTitle.Result">
        <short/>
      </element>

      <element name="TReplaceDialog.ReplaceClick">
        <short>
          <var>ReplaceClick</var> - code to execute when the Replace button is clicked (replace just the current instance).
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TReplaceDialog.ReplaceClick.Sender">
        <short/>
      </element>

      <element name="TReplaceDialog.ReplaceAllClick">
        <short>
          <var>ReplaceAllClick</var> - code to execute when the Replace All button is clicked (replace all remaining instances).
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TReplaceDialog.ReplaceAllClick.Sender">
        <short/>
      </element>

      <element name="TReplaceDialog.CreateForm" link="#lcl.dialogs.TFindDialog.CreateForm">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TReplaceDialog.CreateForm.Result">
        <short/>
      </element>

      <element name="TReplaceDialog.SetFormValues" link="#lcl.dialogs.TFindDialog.SetFormValues">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TReplaceDialog.GetFormValues" link="#lcl.dialogs.TFindDialog.GetFormValues">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TReplaceDialog.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TReplaceDialog</var>, and calls the  inherited <var>Create</var> method. It sets the intial option values for find and replace.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.Dialogs.TFindDialog.Create">TFindDialog.Create</link>
        </seealso>
      </element>
      <element name="TReplaceDialog.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TReplaceDialog.ReplaceText" link="#lcl.dialogs.TFindDialog.ReplaceText">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TReplaceDialog.OnReplace" link="#lcl.dialogs.TFindDialog.OnReplace">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomPrinterSetupDialog">
        <short>
          Base class for <var>TPrinterSetupDialog</var> and <var>TPageSetupDialog</var>.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TPrintRange">
        <short>Enumerated type which represents page ranges in a print dialog.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TPrintRange.prAllPages">
        <short>Print all pages.</short>
      </element>
      <element name="TPrintRange.prSelection">
        <short>Print the selected range of pages.</short>
      </element>
      <element name="TPrintRange.prPageNums">
        <short>Print the selection of individual pages.</short>
      </element>
      <element name="TPrintRange.prCurrentPage">
        <short>Print the current page.</short>
      </element>

      <element name="TPrintDialogOption">
        <short>Enumerated type with available options for a print dialog.</short>
        <descr/>
        <seealso>
          <link id="TPrintDialogOptions"/>
        </seealso>
      </element>
      <element name="TPrintDialogOption.poPrintToFile">
        <short>Enables and checks the print to a file check box.</short>
      </element>
      <element name="TPrintDialogOption.poPageNums">
        <short>Selects the Pages radio button in the dialog.</short>
      </element>
      <element name="TPrintDialogOption.poSelection">
        <short>Selects the Selection radio button in a print dialog.</short>
      </element>
      <element name="TPrintDialogOption.poWarning">
        <short>Displays a warning message for a print error.</short>
      </element>
      <element name="TPrintDialogOption.poHelp">
        <short>Displays a Help button in a print dialog.</short>
      </element>
      <element name="TPrintDialogOption.poDisablePrintToFile">
        <short>Disables the print to file check box in a print dialog.</short>
      </element>

      <element name="TPrintDialogOptions">
        <short>A set for options in a print dialog.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomPrintDialog">
        <short>
          <var>TCustomPrintDialog</var> - base class for <var>TPrintDialog</var>.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomPrintDialog.FFromPage"/>
      <element name="TCustomPrintDialog.FToPage"/>
      <element name="TCustomPrintDialog.FCollate"/>
      <element name="TCustomPrintDialog.FOptions"/>
      <element name="TCustomPrintDialog.FPrintToFile"/>
      <element name="TCustomPrintDialog.FPrintRange"/>
      <element name="TCustomPrintDialog.FMinPage"/>
      <element name="TCustomPrintDialog.FMaxPage"/>
      <element name="TCustomPrintDialog.FCopies"/>

      <element name="TCustomPrintDialog.Create" link="#rtl.classes.TComponent.Create">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomPrintDialog.Create.TheOwner">
        <short/>
      </element>

      <element name="TCustomPrintDialog.Collate">
        <short>Enables page collation when multiple copies are produced.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomPrintDialog.Copies">
        <short>Number of <var>Copies</var> of the document.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomPrintDialog.FromPage">
        <short><var>FromPage</var> - first page of selection for printing.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomPrintDialog.MinPage">
        <short><var>MinPage</var> - smallest number of page in print range.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomPrintDialog.MaxPage">
        <short><var>MaxPage</var> - highest number of page in print range.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomPrintDialog.Options">
        <short>The set of <var>Options</var> for printing.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomPrintDialog.PrintToFile">
        <short>When True, printing is spooled to a file instead of the printer.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomPrintDialog.PrintRange">
        <short><var>PrintRange</var> - the range of pages for printing.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomPrintDialog.ToPage">
        <short><var>ToPage</var> - the final page number in the range for printing.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTaskDialogFlag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogFlag.tfEnableHyperlinks">
        <short>
          Allow HTML-like hyperlinks in the dialog (in Text, Footer, and ExpandedText) using HTML tag "a href=..."
        </short>
      </element>
      <element name="TTaskDialogFlag.tfUseHiconMain">
        <short>Use custom main icon with CustomMainIcon property.</short>
      </element>
      <element name="TTaskDialogFlag.tfUseHiconFooter">
        <short>Use custom footer icon with CustomFooterIcon property.</short>
      </element>
      <element name="TTaskDialogFlag.tfAllowDialogCancellation">
        <short>Allow canceling the dialog by Esc key, or Alt+F4 (i.e. OS default hotkey).</short>
      </element>
      <element name="TTaskDialogFlag.tfUseCommandLinks">
        <short>
          Custom buttons will be shown as big buttons in the middle of the dialog. Use "\n" to add info to buttons (shown in hint in emulated dialog).
        </short>
      </element>
      <element name="TTaskDialogFlag.tfUseCommandLinksNoIcon">
        <short>Don't show glyphs for custom buttons in the "command links" mode.</short>
      </element>
      <element name="TTaskDialogFlag.tfExpandFooterArea">
        <short>Show ExpandedText in the footer, instead of near the main text.</short>
      </element>
      <element name="TTaskDialogFlag.tfExpandedByDefault">
        <short>Initially show dialog in expanded state.</short>
      </element>
      <element name="TTaskDialogFlag.tfVerificationFlagChecked">
        <short>Bottom check-box (verification) shows in the checked state.</short>
      </element>
      <element name="TTaskDialogFlag.tfShowProgressBar">
        <short>Show additional progress-bar.</short>
      </element>
      <element name="TTaskDialogFlag.tfShowMarqueeProgressBar">
        <short>Show additional progress-bar, in the marquee style, never ending progress.</short>
      </element>
      <element name="TTaskDialogFlag.tfCallbackTimer">
        <short>Execute the timer callback event every 200 milliseconds.</short>
      </element>
      <element name="TTaskDialogFlag.tfPositionRelativeToWindow">
        <short>Form position will be poOwnerFormCenter, instead of poScreenCenter.</short>
      </element>
      <element name="TTaskDialogFlag.tfRtlLayout">
        <short>Use Right-to-Left layout for texts.</short>
      </element>
      <element name="TTaskDialogFlag.tfNoDefaultRadioButton">
        <short>Don't check any of radio-buttons.</short>
      </element>
      <element name="TTaskDialogFlag.tfCanBeMinimized">
        <short>Allow minimizing the dialog.</short>
      </element>

      <element name="TTaskDialogFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTaskDialogCommonButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogCommonButton.tcbOk">
        <short/>
      </element>
      <element name="TTaskDialogCommonButton.tcbYes">
        <short/>
      </element>
      <element name="TTaskDialogCommonButton.tcbNo">
        <short/>
      </element>
      <element name="TTaskDialogCommonButton.tcbCancel">
        <short/>
      </element>
      <element name="TTaskDialogCommonButton.tcbRetry">
        <short/>
      </element>
      <element name="TTaskDialogCommonButton.tcbClose">
        <short/>
      </element>

      <element name="TTaskDialogCommonButtons">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTaskDlgClickEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDlgClickEvent.Sender">
        <short/>
      </element>
      <element name="TTaskDlgClickEvent.AModalResult">
        <short/>
      </element>
      <element name="TTaskDlgClickEvent.ACanClose">
        <short/>
      </element>

      <element name="TTaskDialogIcon">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogIcon.tdiNone">
        <short/>
      </element>
      <element name="TTaskDialogIcon.tdiWarning">
        <short/>
      </element>
      <element name="TTaskDialogIcon.tdiError">
        <short/>
      </element>
      <element name="TTaskDialogIcon.tdiInformation">
        <short/>
      </element>
      <element name="TTaskDialogIcon.tdiShield">
        <short/>
      </element>
      <element name="TTaskDialogIcon.tdiQuestion">
        <short/>
      </element>

      <element name="TTaskDialogBaseButtonItem">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTaskDialogBaseButtonItem.FCaption"/>
      <element name="TTaskDialogBaseButtonItem.FClient"/>
      <element name="TTaskDialogBaseButtonItem.FModalResult"/>

      <element name="TTaskDialogBaseButtonItem.GetDefault">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogBaseButtonItem.GetDefault.Result">
        <short/>
      </element>

      <element name="TTaskDialogBaseButtonItem.SetCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogBaseButtonItem.SetCaption.ACaption">
        <short/>
      </element>

      <element name="TTaskDialogBaseButtonItem.SetDefault">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogBaseButtonItem.SetDefault.Value">
        <short/>
      </element>

      <element name="TTaskDialogBaseButtonItem.Client">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTaskDialogBaseButtonItem.GetDisplayName">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogBaseButtonItem.GetDisplayName.Result">
        <short/>
      </element>

      <element name="TTaskDialogBaseButtonItem.TaskButtonCollection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogBaseButtonItem.TaskButtonCollection.Result">
        <short/>
      </element>

      <element name="TTaskDialogBaseButtonItem.Create">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogBaseButtonItem.Create.ACollection">
        <short/>
      </element>

      <element name="TTaskDialogBaseButtonItem.ModalResult">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTaskDialogBaseButtonItem.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTaskDialogBaseButtonItem.Default">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTaskDialogButtonItem">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTaskDialogButtonItem.Create">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogButtonItem.Create.ACollection">
        <short/>
      </element>

      <element name="TTaskDialogButtonItem.ModalResult">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTaskDialogRadioButtonItem">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTaskDialogRadioButtonItem.Create">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogRadioButtonItem.Create.ACollection">
        <short/>
      </element>

      <element name="TTaskDialogButtonsEnumerator">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTaskDialogButtonsEnumerator.FIndex"/>
      <element name="TTaskDialogButtonsEnumerator.FCollection"/>

      <element name="TTaskDialogButtonsEnumerator.Create">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogButtonsEnumerator.Create.ACollection">
        <short/>
      </element>

      <element name="TTaskDialogButtonsEnumerator.GetCurrent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogButtonsEnumerator.GetCurrent.Result">
        <short/>
      </element>

      <element name="TTaskDialogButtonsEnumerator.MoveNext">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogButtonsEnumerator.MoveNext.Result">
        <short/>
      </element>

      <element name="TTaskDialogButtonsEnumerator.Current">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTaskDialogButtons">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTaskDialogButtons.FDefaultButton"/>

      <element name="TTaskDialogButtons.GetItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogButtons.GetItem.Result">
        <short/>
      </element>
      <element name="TTaskDialogButtons.GetItem.Index">
        <short/>
      </element>

      <element name="TTaskDialogButtons.SetDefaultButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogButtons.SetDefaultButton.Value">
        <short/>
      </element>

      <element name="TTaskDialogButtons.SetItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogButtons.SetItem.Index">
        <short/>
      </element>
      <element name="TTaskDialogButtons.SetItem.Value">
        <short/>
      </element>

      <element name="TTaskDialogButtons.Add">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogButtons.Add.Result">
        <short/>
      </element>

      <element name="TTaskDialogButtons.FindButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogButtons.FindButton.Result">
        <short/>
      </element>
      <element name="TTaskDialogButtons.FindButton.AModalResult">
        <short/>
      </element>

      <element name="TTaskDialogButtons.GetEnumerator">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogButtons.GetEnumerator.Result">
        <short/>
      </element>

      <element name="TTaskDialogButtons.DefaultButton">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTaskDialogButtons.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTaskDialogButtons.Items.Index">
        <short/>
      </element>

      <element name="TCustomTaskDialog">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.FButton"/>
      <element name="TCustomTaskDialog.FButtons"/>
      <element name="TCustomTaskDialog.FCaption"/>
      <element name="TCustomTaskDialog.FCommonButtons"/>
      <element name="TCustomTaskDialog.FDefaultButton"/>
      <element name="TCustomTaskDialog.FExpandButtonCaption"/>
      <element name="TCustomTaskDialog.FExpandedText"/>
      <element name="TCustomTaskDialog.FFlags"/>
      <element name="TCustomTaskDialog.FFooterIcon"/>
      <element name="TCustomTaskDialog.FFooterText"/>
      <element name="TCustomTaskDialog.FMainIcon"/>
      <element name="TCustomTaskDialog.FModalResult"/>
      <element name="TCustomTaskDialog.FRadioButton"/>
      <element name="TCustomTaskDialog.FRadioButtons"/>
      <element name="TCustomTaskDialog.FTask"/>
      <element name="TCustomTaskDialog.FTitle"/>
      <element name="TCustomTaskDialog.FVerificationText"/>
      <element name="TCustomTaskDialog.FOnButtonClicked"/>

      <element name="TCustomTaskDialog.DoOnButtonClickedHandler">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTaskDialog.DoOnButtonClickedHandler.Sender">
        <short/>
      </element>
      <element name="TCustomTaskDialog.DoOnButtonClickedHandler.AButtonID">
        <short/>
      </element>
      <element name="TCustomTaskDialog.DoOnButtonClickedHandler.ACanClose">
        <short/>
      </element>

      <element name="TCustomTaskDialog.SetButtons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTaskDialog.SetButtons.Value">
        <short/>
      </element>

      <element name="TCustomTaskDialog.SetRadioButtons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTaskDialog.SetRadioButtons.Value">
        <short/>
      </element>

      <element name="TCustomTaskDialog.ButtonIDToModalResult">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTaskDialog.ButtonIDToModalResult.Result">
        <short/>
      </element>
      <element name="TCustomTaskDialog.ButtonIDToModalResult.AButtonID">
        <short/>
      </element>

      <element name="TCustomTaskDialog.DoExecute">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTaskDialog.DoExecute.Result">
        <short/>
      </element>
      <element name="TCustomTaskDialog.DoExecute.ParentWnd">
        <short/>
      </element>

      <element name="TCustomTaskDialog.DoOnButtonClicked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTaskDialog.DoOnButtonClicked.AModalResult">
        <short/>
      </element>
      <element name="TCustomTaskDialog.DoOnButtonClicked.ACanClose">
        <short/>
      </element>

      <element name="TCustomTaskDialog.Create">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTaskDialog.Create.AOwner">
        <short/>
      </element>

      <element name="TCustomTaskDialog.Destroy">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.Execute">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTaskDialog.Execute.Result">
        <short/>
      </element>
      <element name="TCustomTaskDialog.Execute.ParentWnd">
        <short/>
      </element>

      <element name="TCustomTaskDialog.Button">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.Buttons">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.CommonButtons">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.DefaultButton">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.ExpandButtonCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.ExpandedText">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.Flags">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.FooterIcon">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.FooterText">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.MainIcon">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.ModalResult">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.RadioButton">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.RadioButtons">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.Title">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.VerificationText">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTaskDialog.OnButtonClicked">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTaskDialog">
        <short>Creates full-features modal dialogs at run-time.</short>
        <descr>
          <p>
            A non-visual component which creates modal dialogs at run-time, with rich UI elements. Like the Windows TaskDialog API.
          </p>
        </descr>
      </element>

      <element name="TTaskDialog.Buttons">
        <short>
          Collection of items that describe buttons in dialog. Additional to CommonButtons.
        </short>
      </element>

      <element name="TTaskDialog.Caption">
        <short>Caption of the dialog form.</short>
      </element>

      <element name="TTaskDialog.CommonButtons">
        <short>Set of standard buttons in dialog: OK, Cancel, Yes etc. Additional to Buttons.</short>
      </element>

      <element name="TTaskDialog.DefaultButton">
        <short>Index of default button, from set of CommonButtons property.</short>
      </element>

      <element name="TTaskDialog.ExpandButtonCaption">
        <short>
          Dialog can have "expand button", with specified caption that shows additional info.
        </short>
      </element>

      <element name="TTaskDialog.ExpandedText">
        <short>Text that is shown when dialog is expanded. Use "\n" for new lines.</short>
      </element>

      <element name="TTaskDialog.Flags">
        <short>Set of advanced options for dialog.</short>
      </element>

      <element name="TTaskDialog.FooterIcon">
        <short>Icon for the footer area, at the bottom.</short>
      </element>

      <element name="TTaskDialog.FooterText">
        <short>Text that shows in the footer area, at the bottom. Use "\n" for new lines.</short>
      </element>

      <element name="TTaskDialog.MainIcon">
        <short>Icon for the main info in dialog.</short>
      </element>

      <element name="TTaskDialog.RadioButtons">
        <short>
          Collection of items that describe radio-buttons; they are shown in the lower part. Use "\n" to add info to buttons (shown in hint in emulated dialog, or in a new line in native Windows dialog.).
        </short>
      </element>

      <element name="TTaskDialog.Text">
        <short>
          Text that is shown as main information in the dialog. Use "\n" for new lines.
        </short>
      </element>

      <element name="TTaskDialog.Title">
        <short>
          Header text that is shown on the top, with big font and bold style. Use "\n" for new lines.
        </short>
      </element>

      <element name="TTaskDialog.VerificationText">
        <short>If not empty, dialog shows check-box with this caption, at the bottom.</short>
      </element>

      <element name="MinimumDialogButtonWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="MinimumDialogButtonHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="MessageDlg">
        <short>Message Dialog.</short>
        <descr>
          <p>
            Show a message to the user and receive his response. There are four versions of this function.
          </p>
          <p>
            The first version displays a dialog with the standard caption. The second, third and fourth versions enable you to set the caption.
          </p>
          <p>
            The third version allows for a Default button;.
          </p>
          <p>
            The fourth version contains a help keyword instead of using context-based help.
          </p>
          <p>
            If the first Caption argument is missing, no caption is shown on the box.
          </p>
          <p>
            This is the most complete and elaborate of the message dialogs, and allows the programmer considerable control over the appearance of the dialog box.
          </p>
          <p>
            The arguments defining the kind of box and its icon are types rather than integer constants, and the buttons can be specified as a set in square brackets e.g. [mbRetry, mbIgnore, mbAbort, mbCancel].
          </p>
          <p>
            The HelpCtx argument allows the use of Context Help
          </p>
          <p>
            The return value from the Function is the identity of the button pressed, expressed as an integer (see the constant definitions in <link id="Controls.TControl">TControl</link> , [mrNone..mrAll]).
          </p>
          <p>
            If the user clicks the [X]-bordericon, the return value will be mrCancel.
          </p>
          <p>
            If the user presses the escape key, the result depends on the widgetset:
          </p>
          <ul>
            <li>If the widgetset has implemented a native dialog, the result will be mrCancel.</li>
            <li>Otherwise the result will be mrCancel, mrNo or mrOk (in that order) when mbCancel, mbNo or mbOk is present. The dialog will not close when the Escape key is pressed if none of these buttons are present.</li>
          </ul>
        </descr>
        <seealso/>
        <example file="dialogs/trymessagedlg.pas"/>
      </element>
      <element name="MessageDlg.Result">
        <short>
          The result of this function is either the button the user pressed to close the dialog, or mrCancel.
        </short>
        <descr>
          <p>
            The result of this function is the button the user pressed to close the dialog expressed as an integer.
          </p>
          <p>
            If the user clicks the [X]-bordericon, the return value will be mrCancel.
          </p>
          <p>
            If the user presses the escape key, the result depends on the widgetset:
          </p>
          <ul>
            <li>If the widgetset has implemented a native dialog, the result will be mrCancel.</li>
            <li>
              Otherwise the result will be mrCancel, mrNo or mrOk (in that order) if mbCancel, mbNo or mbOk is present. The dialog will not close when the Escape key is pressed if none of these buttons are present.
            </li>
          </ul>
        </descr>
      </element>
      <element name="MessageDlg.aMsg">
        <short>The message to be shown.</short>
        <descr>The message shown to the user.</descr>
      </element>
      <element name="MessageDlg.DlgType">
        <short>The type of dialog to be shown.</short>
        <descr>
          <p>
            The DlgType parameter indicates the type of dialog to show. You can choose from mtWarning, mtError, mtInformation, mtConfirmation or mtCustom.
          </p>
        </descr>
      </element>
      <element name="MessageDlg.Buttons">
        <short>Determines the buttons shown on the message dialog.</short>
        <descr>
          <p>
            Buttons indicate which set of button captions have to be shown on the dialog. You can choose from predefined sets:
          </p>
          <ul>
            <li>mbAbortRetryIgnore</li>
            <li>mbOKCancel</li>
            <li>mbYesNo</li>
            <li>mbYesNoCancel</li>
          </ul>
          <p>
            Or,  you can make your own set.
          </p>
        </descr>
      </element>
      <element name="MessageDlg.HelpCtx">
        <short>HelpCtx is used to specify which topic from the help should be shown.</short>
        <descr>HelpCtx is used to specify which topic from the help should be shown.</descr>
      </element>
      <element name="MessageDlg.aCaption">
        <short>Used to set the caption of the message dialog.</short>
        <descr>Sets the caption of the message dialog shown by this function.</descr>
      </element>
      <element name="MessageDlg.DefaultButton">
        <short/>
      </element>
      <element name="MessageDlg.HelpKeyword">
        <short/>
      </element>

      <element name="MessageDlgPos">
        <short>An extended MessageDlg function.</short>
        <descr>
          <p>
            This function performs the same function as the <link id="MessageDlg">MessageDlg</link> function. It has been extended with parameters to place the dialog on a certain position on the screen instead of in the center of the screen.
          </p>
          <p>
            The MessageDlgPos function does not enable you to choose the caption of the dialog.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="MessageDlgPos.Result">
        <short>
          The result of this function is either the button the user pressed to close the dialog, or mrCancel.
        </short>
        <descr>
          <p>
            The result of this function is the button the user pressed to close the dialog expressed as an integer.
          </p>
          <p>
            If the user clicks the [X]-bordericon, the return value will be mrCancel.
          </p>
          <p>
            If the user presses the escape key, the result depends on the widgetset:
          </p>
          <ul>
            <li>If the widgetset has implemented a native dialog, the result will be mrCancel.</li>
            <li>Otherwise the result will be mrCancel, mrNo or mrOk (in that order) if mbCancel, mbNo or mbOk is present. The dialog will not close when the Escape key is pressed if none of these buttons are present.</li>
          </ul>
        </descr>
      </element>
      <element name="MessageDlgPos.aMsg">
        <short>The message to be shown.</short>
        <descr>The message shown to the user.</descr>
      </element>
      <element name="MessageDlgPos.DlgType">
        <short>The type of dialog to be shown.</short>
        <descr>
          <p>
            The DlgType parameter indicates the type of dialog to show. You can choose from mtWarning, mtError, mtInformation, mtConfirmation or mtCustom.
          </p>
        </descr>
      </element>
      <element name="MessageDlgPos.Buttons">
        <short>Determines the buttons shown on the message dialog.</short>
        <descr>
          <p>
            Buttons indicate which buttons have to be shown on the dialog. You can choose from predefined sets:
          </p>
          <ul>
            <li>mbAbortRetryIgnore</li>
            <li>mbOKCancel</li>
            <li>mbYesNo</li>
            <li>mbYesNoCancel</li>
          </ul>
          <p>
            Or, you can make your own set.
          </p>
        </descr>
      </element>
      <element name="MessageDlgPos.HelpCtx">
        <short>HelpCtx is used to specify which topic from the help should be shown.</short>
        <descr>HelpCtx is used to specify which topic from the help should be shown.</descr>
      </element>
      <element name="MessageDlgPos.X">
        <short>X specifies the position of the left side of the dialog.</short>
        <descr>X specifies the position of the left side of the dialog.</descr>
      </element>
      <element name="MessageDlgPos.Y">
        <short>Y specifies the position of the top side of the dialog.</short>
        <descr>Y specifies the position of the top side of the dialog</descr>
      </element>

      <element name="MessageDlgPosHelp">
        <short>An extended MessageDlgPos function.</short>
        <descr>
          <p>
            This function enables you to specify a Helpfile which has to be shown when the user presses F1.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="MessageDlgPosHelp.Result">
        <short>
          The result of this function is either the button the user pressed to close the dialog, or mrCancel.
        </short>
        <descr>
          <p>
            The result of this function is the button the user pressed to close the dialog expressed as an integer.
          </p>
          <p>
            If the user clicks the [X]-bordericon, the return value will be mrCancel.
          </p>
          <p>
            If the user presses the escape key, the result depends on the widgetset:
          </p>
          <ul>
            <li>If the widgetset has implemented a native dialog, the result will be mrCancel.</li>
            <li>Otherwise the result will be mrCancel, mrNo or mrOk (in that order) if mbCancel, mbNo or mbOk is present. The dialog will not close when the Escape key is pressed if none of these buttons are present.</li>
          </ul>
        </descr>
      </element>
      <element name="MessageDlgPosHelp.aMsg">
        <short>The message to be shown.</short>
        <descr>The message shown to the user.</descr>
      </element>
      <element name="MessageDlgPosHelp.DlgType">
        <short>The type of dialog to be shown.</short>
        <descr>
          <p>
            The DlgType parameter indicates the type of dialog to show. You can choose from mtWarning, mtError, mtInformation, mtConfirmation or mtCustom.
          </p>
        </descr>
      </element>
      <element name="MessageDlgPosHelp.Buttons">
        <short>Determines the buttons shown on the message dialog.</short>
        <descr>
          <p>
            Buttons indicate which buttons have to be shown on the dialog. You can choose from predefined sets:
          </p>
          <ul>
            <li>mbAbortRetryIgnore</li>
            <li>mbOKCancel</li>
            <li>mbYesNo</li>
            <li>mbYesNoCancel</li>
          </ul>
          <p>
            Or, you can make your own set.
          </p>
        </descr>
      </element>
      <element name="MessageDlgPosHelp.HelpCtx">
        <short>HelpCtx is used to specify which topic from the help should be shown.</short>
        <descr>HelpCtx is used to specify which topic from the help should be shown.</descr>
      </element>
      <element name="MessageDlgPosHelp.X">
        <short>X specifies the position of the left side of the dialog.</short>
        <descr>X specifies the position of the left side of the dialog</descr>
      </element>
      <element name="MessageDlgPosHelp.Y">
        <short>Y specifies the position of the top side of the dialog.</short>
        <descr>Y specifies the position of the top side of the dialog</descr>
      </element>
      <element name="MessageDlgPosHelp.HelpFileName">
        <short>The Helpfile that has to be shown when the user presses F1</short>
        <descr>
          The name of the helpfile to be shown when the user presses F1 in the dialog.
        </descr>
      </element>

      <element name="CreateMessageDialog">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="CreateMessageDialog.Result">
        <short/>
      </element>
      <element name="CreateMessageDialog.AMsg">
        <short/>
      </element>
      <element name="CreateMessageDialog.ACaption">
        <short/>
      </element>
      <element name="CreateMessageDialog.DlgType">
        <short/>
      </element>
      <element name="CreateMessageDialog.Buttons">
        <short/>
      </element>

      <element name="DefaultPromptDialog">
        <short>Widgetset-independent implementation.</short>
        <descr/>
        <seealso>
          <link id="#lcl.interfacebase.PromptDialogFunction">PromptDialogFunction</link>
        </seealso>
      </element>
      <element name="DefaultPromptDialog.Result">
        <short/>
      </element>
      <element name="DefaultPromptDialog.DialogCaption">
        <short/>
      </element>
      <element name="DefaultPromptDialog.DialogMessage">
        <short/>
      </element>
      <element name="DefaultPromptDialog.DialogType">
        <short/>
      </element>
      <element name="DefaultPromptDialog.Buttons">
        <short/>
      </element>
      <element name="DefaultPromptDialog.ButtonCount">
        <short/>
      </element>
      <element name="DefaultPromptDialog.DefaultIndex">
        <short/>
      </element>
      <element name="DefaultPromptDialog.EscapeResult">
        <short/>
      </element>
      <element name="DefaultPromptDialog.UseDefaultPos">
        <short/>
      </element>
      <element name="DefaultPromptDialog.X">
        <short/>
      </element>
      <element name="DefaultPromptDialog.Y">
        <short/>
      </element>

      <element name="QuestionDlg">
        <short>Show a question to the user and get a response.</short>
        <descr>
          <p>
            QuestionDlg has the same functionality as MessageDlg except for the parameter Buttons which is of a different type. You can define your own captions and return values of this function.
          </p>
          <p>
            Buttons is a list of TModalResult (defined as constants [mrNone..MrYesToAll] in <link id="Controls"/>) and strings. For each TModalResult a button is created. To set a custom caption, add a string after a button. You can use the special string parameters 'isdefault' and 'iscancel' to setup the default and cancel buttons.
          </p>
          <p>
            The default TModalResults defined in controls.pp (mrNone..mrLast) don't need a caption. The default captions will be used.
          </p>
          <p>
            You can mark one default button using the 'IsDefault' option. When the user presses 'Return' this button is triggered.
          </p>
          <p>
            Some widgetsets provide an Escape key and/or a close button. This results in mrCancel even if it is not in the given button list. Use the 'IsCancel' option to redirect it to a button of your choice. You can combine 'IsDefault' and 'IsCancel'.
          </p>
<code>
case QuestionDlg('COPYING',
    'Abort?',
    mtConfirmation,
    [mrNo, '&amp;No','IsDefault',
    mrYes,'&amp;Yes'],0)
of
   mrYes : ShowMessage('You clicked Yes');
   mrNo : ShowMessage('You clicked No');
else
  // mrCancel
  ShowMessage('You cancelled the dialog.');
end;
</code>
        </descr>
        <seealso>
          <link id="MessageDlg"/>
          <link id="InputQuery"/>
        </seealso>
      </element>
      <element name="QuestionDlg.Result">
        <short>
          The result of this function is the button the user pressed to close the dialog.
        </short>
        <descr>
          The result of this function is the button the user pressed to close the dialog.
        </descr>
      </element>
      <element name="QuestionDlg.aCaption">
        <short>Used to set the caption of the question dialog.</short>
        <descr>Set the caption of the question dialog shown by this function.</descr>
      </element>
      <element name="QuestionDlg.aMsg">
        <short>The question to be shown.</short>
        <descr>The question the user has to answer.</descr>
      </element>
      <element name="QuestionDlg.DlgType">
        <short>The type of dialog to be shown in fact which icon will be shown.</short>
      </element>
      <element name="QuestionDlg.Buttons">
        <short>
          An array of return values and caption for the buttons on the question dialog.
        </short>
        <descr>
          <p>
            Buttons is defined as a array of const. This means you can define any number of buttons to be shown. If your array consists of only predefined return values like mrOK and mrCancel, the standard OK and Cancel buttons will be shown.
          </p>
          <p>
            The strength of this function is however that you can fill the array like:
          </p>
          <code>[400, 'Yes!!!', 401, 'Are you mad?', 402, 'My mistake']</code>
          <p>
            This will create a dialog with three buttons; the captions of the buttons will be the strings given in the array.
          </p>
          <p>
            The return value of the function will be 400, 401 or 402, depending on whether the user clicked the 'Yes!!!', the 'Are you mad?' or the 'My mistake' button.
          </p>
        </descr>
      </element>
      <element name="QuestionDlg.HelpCtx">
        <short>HelpCtx is used to specify which topic from the help should be shown.</short>
        <descr>HelpCtx is used to specify which topic from the help should be shown.</descr>
      </element>
      <element name="QuestionDlg.HelpKeyword">
        <short/>
      </element>

      <element name="ShowMessage">
        <short>Show Message.</short>
        <descr>
          <p>
            The simplest message dialog: takes a simple string as argument, displays it in a box, and waits for a mouse-click or enter-key event before returning to the calling routine or program.
          </p>
          <p>
            This is a modal procedure call; the box is displayed, receives focus, and does not relinquish focus until the OK box is clicked or otherwise selected.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.forms.TApplication.MessageBox">TApplication.MessageBox</link>
        </seealso>
        <example file="dialogs/tryshowmessage.pas"/>
      </element>
      <element name="ShowMessage.aMsg">
        <short>A string constant containing the message to be shown.</short>
        <descr>A string constant containing the message to be shown.</descr>
      </element>

      <element name="ShowMessageFmt">
        <short>Shows a message assembled from a format string and an array of arguments.</short>
        <descr>
          <p>
            This procedure is an extension to the <link id="ShowMessage">ShowMessage</link> procedure. The parameters it takes are the same as the <link id="#rtl.sysutils.Format">Format</link> function.
          </p>
        </descr>
        <seealso>
          <link id="ShowMessage"/>
        </seealso>
      </element>
      <element name="ShowMessageFmt.aMsg">
        <short>The format string.</short>
      </element>
      <element name="ShowMessageFmt.Params">
        <short>The parameters to be inserted in the message.</short>
      </element>

      <element name="ShowMessagePos">
        <short>Shows a message box at a given screen position.</short>
        <descr>Shows a message box at a given screen position.</descr>
        <seealso>
          <link id="ShowMessage"/>
        </seealso>
      </element>
      <element name="ShowMessagePos.aMsg">
        <short>A string constant which is the message to be shown.</short>
      </element>
      <element name="ShowMessagePos.X">
        <short>The horizontal position of the messagebox.</short>
      </element>
      <element name="ShowMessagePos.Y">
        <short>The vertical position of the messagebox.</short>
      </element>

      <element name="DefaultMessageBox">
        <short>Widgetset-independent implementation.</short>
        <descr/>
        <seealso>
          <link id="MessageDlg">MessageDlg</link>
        </seealso>
      </element>
      <element name="DefaultMessageBox.Result">
        <short/>
      </element>
      <element name="DefaultMessageBox.Text">
        <short/>
      </element>
      <element name="DefaultMessageBox.Caption">
        <short/>
      </element>
      <element name="DefaultMessageBox.Flags">
        <short/>
      </element>

      <element name="InputBox">
        <short>
          Displays a box with defined title and prompt, and expects user input in a text box.
        </short>
        <descr>
          <p>
            A default string can optionally be displayed in the text box. The user-entered or default string is returned as the function result.
          </p>
          <p>
            If the user selects the OK button, the text in the text box is returned. If the user selects the Cancel button, the default string is returned.
          </p>
        </descr>
        <seealso>
          <link id="ShowMessage"/>
        </seealso>
        <example file="dialogs/inputbox.pas"/>
      </element>
      <element name="InputBox.Result">
        <short>
          The result of this function is the string the user entered in the editbox or the default string.
        </short>
      </element>
      <element name="InputBox.ACaption">
        <short>The caption for the dialogbox.</short>
      </element>
      <element name="InputBox.APrompt">
        <short>The text asking the user for his input.</short>
      </element>
      <element name="InputBox.ADefault">
        <short>Default value for dialog box.</short>
        <descr>The value of the editbox in the dialog will have this value.</descr>
      </element>

      <element name="PasswordBox">
        <short>Password Box.</short>
        <descr>
          <p>
            PasswordBox is a specialized form of InputQuery. The editbox on the dialog box will mask the input. The only parameters are aCaption and aPrompt.
          </p>
          <p>
            Behaves very similarly to the InputQuery function with MaskInput set to TRUE; the difference is that the password that was typed in is returned as the result of the function (like InputBox).
          </p>
        </descr>
        <seealso>
          <link id="InputQuery"/>
          <link id="InputBox"/>
        </seealso>
      </element>
      <element name="PasswordBox.Result">
        <short>The string the user entered.</short>
      </element>
      <element name="PasswordBox.ACaption">
        <short>The caption for the dialog.</short>
      </element>
      <element name="PasswordBox.APrompt">
        <short>A prompt to ask for the users input.</short>
      </element>

      <element name="TCustomCopyToClipboardDialog">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCopyToClipboardDialog.DoCreate">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCopyToClipboardDialog.GetMessageText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCopyToClipboardDialog.GetMessageText.Result">
        <short/>
      </element>

      <element name="RegisterDialogForCopyToClipboard">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="RegisterDialogForCopyToClipboard.ADlg">
        <short/>
      </element>

      <element name="DialogCopyToClipboard">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="DialogCopyToClipboard.Self">
        <short/>
      </element>
      <element name="DialogCopyToClipboard.Sender">
        <short/>
      </element>
      <element name="DialogCopyToClipboard.Key">
        <short/>
      </element>
      <element name="DialogCopyToClipboard.Shift">
        <short/>
      </element>

      <element name="cInputQueryEditSizePixels">
        <short>Input Query Edit size in pixels.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="cInputQueryEditSizePercents">
        <short>Input Query Edit size in % of monitor width.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="cInputQuerySpacingSize">
        <short>Spacing between Input Query controls.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TSelectDirOpt">
        <short>List of options available when selecting a directory.</short>
      </element>
      <element name="TSelectDirOpt.sdAllowCreate">
        <short/>
      </element>
      <element name="TSelectDirOpt.sdPerformCreate">
        <short/>
      </element>
      <element name="TSelectDirOpt.sdPrompt">
        <short/>
      </element>
      <element name="TSelectDirOpts">
        <short>Set of directory selection options.</short>
      </element>

      <element name="SelectDirectory">
        <short>A function that allows one to user to select a directory.</short>
        <descr>
          <p>
            This function will show a dialog which allows the user to select the required directory when the directory structure is displayed as a tree.
          </p>
          <p>
            Under Windows the caption from the resulting dialog cannot be set, but the label above the directory tree will have this value.
          </p>
          <p>
            There are two version of this function, the second one having the ability to indicate whether hidden folders should be shown as well.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="SelectDirectory.Result">
        <short>A boolean indicating if the user pressed OK.</short>
        <descr>A boolean indicating if the user selected a directory and pressed OK.</descr>
      </element>
      <element name="SelectDirectory.Caption">
        <short>A constant which sets the caption of the shown dialog.</short>
        <descr>A constant which sets the caption of the shown dialog.</descr>
      </element>
      <element name="SelectDirectory.InitialDirectory">
        <short>The directory the dialog should start in.</short>
        <descr>
          <p>
            The directory the dialog should start in. If a valid directory is given, the selected directory in the tree will be set to this directory.
          </p>
        </descr>
      </element>
      <element name="SelectDirectory.Directory">
        <short>A variable which on exit contains the selected directory.</short>
        <descr>A variable which on exit contains the selected directory.</descr>
      </element>
      <element name="SelectDirectory.ShowHidden">
        <short>A boolean constant indicating whether hidden folders should be shown too.</short>
        <descr>A boolean constant indicating whether hidden folders should be shown too.</descr>
      </element>
      <element name="SelectDirectory.HelpCtx">
        <short/>
      </element>
      <element name="SelectDirectory.Options">
        <short/>
      </element>

      <element name="InputQuery">
        <short>Use InputQuery to show a dialog box to get input from the user.</short>
        <descr>
          <p>
            Two versions of this function which displays a prompt and expects user input of textual data.
          </p>
          <p>
            The first includes a <var>MaskInput</var> boolean argument which determines whether the user input is masked out by asterisks in the text-input box (like during entry of a password). The second variant omits this argument. Omitting the MaskInput argument is equivalent to setting it to <b>False</b>.
          </p>
          <p>
            <var>Value</var> contains the initial text displayed in the edit control for the dialog. The text entered by the user is also returned in the variable argument Value.
          </p>
          <p>
            The function result is a boolean which returns <b>True</b> if the OK button was pressed, or <var>False</var> if the box was closed by any other mechanism (such as clicking the 'Close' icon on the top title bar).
          </p>
          <p>
            Another overloaded variant allows Arrays with String values to be passed in the APrompts and AValues arguments. They are used to create labels and edit controls on the dialog form, where the user can supply multiple values. The number of labels and edit controls on the dialog is determined by the length of the AValues array. An exception is raised when the APrompts and AValues arrays do not have the same length.
          </p>
          <p>
            An event handler routine can be provided in the ACloseEvent argument to validate the input values, and determine if the dialog can be closed. It is signalled when the input dialog is closed by clicking the Cancel button or the Close icon on the dialog form. The handler returns an Array of String values input using the dialog.
          </p>
        </descr>
        <seealso>
          <link id="InputBox"/>
          <link id="PasswordBox"/>
        </seealso>
        <example file="dialogs/inputquery.pas"/>
      </element>
      <element name="InputQuery.Result">
        <short>
          Returns True of OK button was pressed, False if Cancel was pressed or abnormal exit.
        </short>
        <descr>
          Result is <b>True</b> if the user pressed OK or hit RETURN in the dialog box. If the user pressed Cancel or the dialog was closed without pressing a button the result will be <b>False</b>.
        </descr>
      </element>
      <element name="InputQuery.ACaption">
        <short>The caption for the dialogbox.</short>
      </element>
      <element name="InputQuery.APrompt">
        <short>The text asking the user for his input.</short>
      </element>
      <element name="InputQuery.MaskInput">
        <short>Determines if the dialog shows *s or the actual input.</short>
        <descr>
          Set MaskInput to true if you want to hide the input and display asterisks.
        </descr>
      </element>
      <element name="InputQuery.Value">
        <short>The value the user entered.</short>
        <descr>
          <p>
            When the DialogBox is shown the text in the edit control will be Value. This string can be altered or amended by the user. When ENTER is pressed or OK clicked, Value will contain the edited text from the dialog.
          </p>
        </descr>
      </element>
      <element name="InputQuery.APrompts">
        <short>Array with strings values used as labels on the input dialog.</short>
      </element>
      <element name="InputQuery.AValues">
        <short>Arrays with string values used in edit controls for the associated labels.</short>
      </element>

      <element name="DefaultInputDialog">
        <short>Widgetset-independent implementation.</short>
        <descr/>
        <seealso>
          <link id="#lcl.interfacebase.InputDialogFunction">InputDialogFunction</link>
        </seealso>
      </element>
      <element name="DefaultInputDialog.Result">
        <short/>
      </element>
      <element name="DefaultInputDialog.InputCaption">
        <short/>
      </element>
      <element name="DefaultInputDialog.InputPrompt">
        <short/>
      </element>
      <element name="DefaultInputDialog.MaskInput">
        <short/>
      </element>
      <element name="DefaultInputDialog.Value">
        <short/>
      </element>

      <element name="InputCombo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="InputCombo.Result">
        <short/>
      </element>
      <element name="InputCombo.ACaption">
        <short/>
      </element>
      <element name="InputCombo.APrompt">
        <short/>
      </element>
      <element name="InputCombo.AList">
        <short/>
      </element>

      <element name="InputComboEx">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="InputComboEx.Result">
        <short/>
      </element>
      <element name="InputComboEx.ACaption">
        <short/>
      </element>
      <element name="InputComboEx.APrompt">
        <short/>
      </element>
      <element name="InputComboEx.AList">
        <short/>
      </element>
      <element name="InputComboEx.AllowCustomText">
        <short/>
      </element>

      <element name="ExtractColorIndexAndColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="ExtractColorIndexAndColor.Result">
        <short/>
      </element>
      <element name="ExtractColorIndexAndColor.AColorList">
        <short/>
      </element>
      <element name="ExtractColorIndexAndColor.AIndex">
        <short/>
      </element>
      <element name="ExtractColorIndexAndColor.ColorIndex">
        <short/>
      </element>
      <element name="ExtractColorIndexAndColor.ColorValue">
        <short/>
      </element>

      <element name="GetDialogCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="GetDialogCaption.Result">
        <short/>
      </element>
      <element name="GetDialogCaption.idDiag">
        <short/>
      </element>

      <element name="GetDialogIcon">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="GetDialogIcon.Result">
        <short/>
      </element>
      <element name="GetDialogIcon.idDiag">
        <short/>
      </element>

      <element name="dbgs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="dbgs.Result">
        <short/>
      </element>
      <element name="dbgs.Option">
        <short/>
      </element>
      <element name="dbgs.Options">
        <short/>
      </element>

      <element name="Register">
        <short>
          Registers components for use in the Lazarus IDE.
        </short>
        <descr>
          <p>
            Register is the procedure used to register components for use in the Lazarus IDE.
          </p>
          <p>
            The following components are added to the Component Palette in the Lazarus IDE:
          </p>
          <p>
            <b>Dialogs</b> Tab
          </p>
          <ul>
            <li>TOpenDialog</li>
            <li>TSaveDialog</li>
            <li>TSelectDirectoryDialog</li>
            <li>TColorDialog</li>
            <li>TFontDialog</li>
            <li>TFindDialog</li>
            <li>TReplaceDialog</li>
            <li>TTaskDialog</li>
          </ul>
          <p>
            <b>Misc</b> Tab
          </p>
          <ul>
            <li>TColorButton</li>
          </ul>
        </descr>
        <seealso>
          <link id="#rtl.classes.RegisterComponents">RegisterComponents</link>
        </seealso>
      </element>

    </module>
    <!-- Dialogs -->
  </package>
</fpdoc-descriptions>
