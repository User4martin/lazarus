<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
    ====================================================================
      EditBtn
    ====================================================================
    -->
    <module name="EditBtn">
      <short>Implements specialized edit controls with attached speed buttons.</short>
      <descr>
        <p>
          <file>editbtn.pas</file> contains specialized edit controls with an attached speed button used to perform an action when it is clicked. The following components are added to the <b>Misc</b> tab in the Lazarus IDE Component Palette:
        </p>
        <ul>
          <li>TEditButton</li>
          <li>TFileNameEdit</li>
          <li>TDirectoryEdit</li>
          <li>TDateEdit</li>
          <li>TTimeEdit</li>
          <li>TCalcEdit</li>
        </ul>
      </descr>

      <!-- unresolved type references -->
      <element name="Classes"/>
      <element name="SysUtils"/>
      <element name="LCLProc"/>
      <element name="LResources"/>
      <element name="LCLStrConsts"/>
      <element name="Types"/>
      <element name="LCLType"/>
      <element name="LMessages"/>
      <element name="Graphics"/>
      <element name="Controls"/>
      <element name="Forms"/>
      <element name="LazFileUtils"/>
      <element name="LazUTF8"/>
      <element name="Dialogs"/>
      <element name="StdCtrls"/>
      <element name="Buttons"/>
      <element name="Calendar"/>
      <element name="ExtDlgs"/>
      <element name="GroupedEdit"/>
      <element name="CalendarPopup"/>
      <element name="MaskEdit"/>
      <element name="Menus"/>
      <element name="StrUtils"/>
      <element name="DateUtils"/>
      <element name="TimePopup"/>
      <element name="CalcForm"/>
      <element name="ImgList"/>

      <element name="NullDate">
        <short>Represents a TDateTime type without a value assigned.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TEbEdit">
        <short>Implements the embedded edit control used in TCustomEditButton.</short>
        <descr>
          <p>
            <var>TEbEdit</var> is a <var>TGEEdit</var> descendant which implements the embedded edit control used in <var>TCustomEditButton</var>. TEbEdit provides overridden methods to alter the behavior of the control when handling <var>OnEnter</var> and <var>OnExit</var> notifications.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.groupededit.TGEEdit">TGEEdit</link>
        </seealso>
      </element>

      <element name="TEbEdit.DoEnter">
        <short>Performs actions needed when the control is entered.</short>
        <descr>
          <p>
            Ensures that the button visibility and spacing for the Owner control are handled when the Owner is derived from TCustomEditButton. Calls the inherited method prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.maskedit.TCustomMaskEdit.DoEnter">TCustomMaskEdit.DoEnter</link>
        </seealso>
      </element>

      <element name="TEbEdit.DoExit">
        <short>Performs actions needed when the control is exited.</short>
        <descr>
          <p>
            Ensures that the button visibility and spacing for the Owner control are handled when the Owner is derived from TCustomEditButton. Calls the inherited method prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.maskedit.TCustomMaskEdit.DoExit">TCustomMaskEdit.DoExit</link>
        </seealso>
      </element>

      <element name="TEditSpeedButton">
        <short>Implements a speed button used in TCustomEditButton.</short>
        <descr>
          <p>
            <var>TEditSpeedButton</var> is a <var>TSpeedButton</var> descendant which provides support for change notifications for Glyphs used on the Button in <var>TCustomEditButton</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEditButton.Button"/>
        </seealso>
      </element>

      <element name="TEditSpeedButton.GlyphChanged">
        <short>
          Performs actions needed when the glyph has changed for the Button in TCustomEditButton.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TEditSpeedButton.GlyphChanged.Sender">
        <short>Object generating the event notification.</short>
      </element>

      <element name="TCustomEditButton">
        <short>
          <var>TCustomEditButton</var> - base class for <var>TEditButton</var>, an Edit Box with attached Speed Button.
        </short>
        <descr>
          <p>
            <var>TCustomEditButton</var> is a <var>TCustomAbstractGroupedEdit</var> descendant which implements a composite control with both an <var>Edit</var> and a <var>Button</var>. It provides overridden methods which extend or re-implement those found in the ancestor class. Most of the properties in the class are declared as protected, and must be exposed as public or published properties in an ancestor class like <var>TEditButton</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEditButton.Edit"/>
          <link id="TCustomEditButton.Button"/>
          <link id="TCustomEditButton.OnButtonClick"/>
          <link id="TEditButton"/>
        </seealso>
      </element>

      <element name="TCustomEditButton.FButtonOnlyWhenFocused"/>
      <element name="TCustomEditButton.FFlat"/>

      <element name="TCustomEditButton.GetFocusOnButtonClick">
        <short>Gets the value for the FocusOnButtonClick property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.FocusOnButtonClick"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.GetFocusOnButtonClick.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomEditButton.GetOnButtonClick">
        <short>Gets the value for the OnButtonClick property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.OnButtonClick"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.GetOnButtonClick.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomEditButton.GetButton">
        <short>Gets the value for the Button property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.Button"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.GetButton.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomEditButton.GetGlyph">
        <short>Gets the value for the Glyph property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.Glyph"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.GetGlyph.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomEditButton.GetNumGlyphs">
        <short>Gets the value for the NumGlyphs property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.NumGlyphs"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.GetNumGlyphs.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomEditButton.GetEdit">
        <short>Gets the value for the Edit property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.Edit"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.GetEdit.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomEditButton.SetFocusOnButtonClick">
        <short>Sets the value for the FocusOnButtonClick property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.FocusOnButtonClick"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.SetFocusOnButtonClick.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomEditButton.SetOnButtonClick">
        <short>Sets the value for the OnButtonClick property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.OnButtonClick"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.SetOnButtonClick.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomEditButton.SetButtonOnlyWhenFocused">
        <short>Sets the value for the ButtonOnlyWhenFocused property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.ButtonOnlyWhenFocused"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.SetButtonOnlyWhenFocused.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomEditButton.SetFlat">
        <short>Sets the value for the Flat property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.Flat"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.SetFlat.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomEditButton.SetGlyph">
        <short>Sets the value for the Glyph property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.Glyph"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.SetGlyph.Pic">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomEditButton.SetNumGlyphs">
        <short>Sets the value for the NumGlyphs property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.NumGlyphs"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.SetNumGlyphs.ANumber">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomEditButton.GetImages">
        <short>Gets the value for the Images property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.GetImages"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.GetImages.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomEditButton.SetImages">
        <short>Sets the value for the Images property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.Images"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.SetImages.aImages">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomEditButton.GetImageIndex">
        <short>Gets the value for the ImageIndex property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.ImageIndex"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.GetImageIndex.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomEditButton.SetImageIndex">
        <short>Sets the value for the ImageIndex property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.ImageIndex"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.SetImageIndex.AImageIndex">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomEditButton.GetImageWidth">
        <short>Gets the value for the ImageWidth property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.ImageWidth"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.GetImageWidth.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCustomEditButton.SetImageWidth">
        <short>Sets the value for the ImageWidth property.</short>
        <descr/>
        <seealso>
          <link id="TCustomEditButton.ImageWidth"/>
        </seealso>
      </element>
      <element name="TCustomEditButton.SetImageWidth.aImageWidth">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomEditButton.ButtonClick">
        <short>Performs actions needed when the button for the control is clicked.</short>
        <descr>
          <p>
            The implementation for <var>ButtonClick</var> is empty in    <var>TCustomEditButton</var>; use a descendent class which implements a specific functionality.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomEditButton.BuddyClick">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomEditButton.GetEditorClassType">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomEditButton.GetEditorClassType.Result">
        <short></short>
      </element>

      <element name="TCustomEditButton.GetBuddyClassType">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomEditButton.GetBuddyClassType.Result">
        <short></short>
      </element>

      <element name="TCustomEditButton.GetControlClassDefaultSize">
        <short>Gets the default size used for new instances of the class.</short>
        <descr>
          <p>
            The return value is a <var>TSize</var> type with the dimensions for the control. The CX member contains the width needed for both the <var>Edit</var> and the <var>Button</var> controls in the grouped edit control. The CY member contains the height used for the Edit and the Button controls.
          </p>
          <p>
            GetControlClassDefaultSize is called in the constructor for the class instance, and used to set the initial bounds for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEditButton.Edit"/>
          <link id="TCustomEditButton.Button"/>
          <link id="TCustomEditButton.Create"/>
          <link id="#lcl.controls.TControl.SetInitialBounds">TControl.SetInitialBounds</link>
        </seealso>
      </element>
      <element name="TCustomEditButton.GetControlClassDefaultSize.Result">
        <short>TSize value with the dimensions for the new class instance.</short>
      </element>

      <element name="TCustomEditButton.CalcButtonVisible">
        <short>Indicates whether the Button for the control should be visible.</short>
        <descr>
          <p>
            <var>CalcButtonVisible</var> is a <var>Boolean</var> function used to determine whether the <var>Button</var> for the control should be visible. The return value is True when the control is Visible and the Edit has focus, or the control is not configured to display its button only when focused.
          </p>
          <remark>
            The return value is always True at design-time.
          </remark>
          <p>
            CalcButtonVisible is used in the implementation of the <var>CheckButtonVisible</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEditButton.Button"/>
          <link id="TCustomEditButton.ButtonOnlyWhenFocused"/>
          <link id="TCustomEditButton.Edit"/>
          <link id="#lcl.controls.TControl.Visible">TControl.Visible</link>
        </seealso>
      </element>
      <element name="TCustomEditButton.CalcButtonVisible.Result">
        <short></short>
      </element>

      <element name="TCustomEditButton.GetDefaultGlyphName">
        <short>
          <var>GetDefaultGlyphName</var> finds the name of the default glyph used for the Button.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomEditButton.GetDefaultGlyphName.Result">
        <short></short>
      </element>

      <element name="TCustomEditButton.CalculatePreferredSize" link="#lcl.groupededit.TCustomAbstractGroupedEdit.CalculatePreferredSize"/>
      <element name="TCustomEditButton.CalculatePreferredSize.PreferredWidth"/>
      <element name="TCustomEditButton.CalculatePreferredSize.PreferredHeight"/>
      <element name="TCustomEditButton.CalculatePreferredSize.WithThemeSpace"/>

      <element name="TCustomEditButton.CheckButtonVisible">
        <short>Ensures the Button for the control is configured and its visibility is set.</short>
        <descr>
          <p>
            <var>CheckButtonVisible</var> is a procedure which ensures that the     <var>Button</var> in the control is configured and its visibility is set. If Button has not been assigned (contains Nil), no actions are performed in the method.
          </p>
          <p>
            Otherwise, the <var>Visible</var> property in <var>Button</var> is set to the value returned by <var>CalcButtonVisible</var>. <var>UpdateSpacing</var> is called to adjust the space between <var>Edit</var> and <var>Button</var> as needed for its  visibility and <var>Layout</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEditButton.Button"/>
          <link id="TCustomEditButton.Edit"/>
          <link id="TCustomEditButton.CalcButtonVisible"/>
          <link id="TCustomAbstractGroupedEdit.UpdateSpacing"/>
        </seealso>
      </element>

      <element name="TCustomEditButton.LoadDefaultGlyph">
        <short>Loads the default glyph displayed on the Button for the control.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomEditButton.GlyphChanged">
        <short>Performs action needed when the glyph assigned in Button has changed.</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomEditButton.GlyphChanged.Sender">
        <short></short>
      </element>

      <element name="TCustomEditButton.Button">
        <short>
          <var>Button</var> is the TSpeedButton that is attached to the grouped edit control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomEditButton.ButtonCaption">
        <short>Contains the caption used for the Button on the grouped edit control.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomEditButton.ButtonCursor">
        <short>
          Cursor shape displayed when the mouse hovers over the Button in the control.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomEditButton.ButtonHint">
        <short>
          <var>ButtonHint</var> is the hint that pops up when the mouse hovers over the button.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomEditButton.ButtonOnlyWhenFocused">
        <short>
          <var>ButtonOnlyWhenFocused</var> - if True, the SpeedButton only appears when focus is given to the EditButton control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomEditButton.ButtonWidth">
        <short>
          <var>ButtonWidth</var> is the width for the TSpeedButton used in the grouped edit control.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomEditButton.Edit">
        <short>
          Edit is the TEbEdit control used to perform direct input for the value in the grouped edit control.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomEditButton.Flat">
        <short>
          <var>Flat</var> - if True, SpeedButton appears flat rather than three-dimensional.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomEditButton.FocusOnButtonClick">
        <short>
          Indicates if the focus is changed to the Edit control after the Button is clicked.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomEditButton.Glyph">
        <short>
          <var>Glyph</var> - the small graphic image on the SpeedButton, which ought to indicate its function.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomEditButton.NumGlyphs">
        <short>
          <var>NumGlyphs</var> - the number of available glyphs.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomEditButton.Images">
        <short>
          Contains the Images that can be displayed on the Button for the grouped edit control.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomEditButton.ImageIndex">
        <short>
          Ordinal position in Images for the bitmap displayed on the Button control.
        </short>
        <descr>
          <p>
            Read and write access for the property are redirected to the <var>ImageIndex</var> property in <var>Button</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEditButton.Button"/>
        </seealso>
      </element>

      <element name="TCustomEditButton.ImageWidth">
        <short>
          Specifies the width of the image displayed on the Button control.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomEditButton.Spacing">
        <short>
          Specifies the amount of space reserved between the Edit and Button controls when Button is visible.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomEditButton.OnButtonClick">
        <short>
          <var>OnButtonClick</var> - event handler for a mouse click on the SpeedButton.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomEditButton.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomEditButton</var>: calls inherited <var>Create</var> then sets some defaults and initializes some variables.
        </short>
        <descr>
          <p>
            <var>Create</var> - constructor for <var>TCustomEditButton</var>: calls inherited <var>Create</var> then sets some defaults and initializes some variables.
          </p>
          <p>
            Initializes height and width, cursor, glyph, style, checks visibility, event handler for click.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
          <link id="#lcl.stdctrls.TCustomEdit.Create">TCustomEdit.Create</link>
          <link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomEditButton.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TCustomEditButton.Destroy" link="#LCL.Controls.TWinControl.Destroy">
        <short>Destructor for the class instance.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TEditButton">
        <short>
          Implements a grouped edit control with both an Edit and a Button.
        </short>
        <descr>
          <p>
            <var>TEditButton</var> implements a grouped edit control with both an <var>Edit</var> and a <var>Button</var>. TEditButton is derived from the  <var>TCustomEditButton</var> class, and sets the visibility for properties declared in the ancestor classes.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEditButton"/>
          <link id="TCustomEditButton.Edit"/>
          <link id="TCustomEditButton.Button"/>
          <link id="#lcl.groupededit.TCustomAbstractGroupedEdit">TCustomAbstractGroupedEdit</link>
        </seealso>
      </element>

      <element name="TEditButton.AutoSelected" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.AutoSelected"/>
      <element name="TEditButton.Button" link="#lcl.editbtn.TCustomEditButton.Button"/>
      <element name="TEditButton.NumbersOnly" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.NumbersOnly"/>
      <element name="TEditButton.Action" link="#LCL.Controls.TControl.Action"/>
      <element name="TEditButton.AutoSelect" link="#LCL.StdCtrls.TCustomEdit.AutoSelect"/>

      <element name="TEditButton.AutoSize" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.AutoSize">
        <short>The default value is True in TEditButton.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TEditButton.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TEditButton.Alignment" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.Alignment"/>
      <element name="TEditButton.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TEditButton.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TEditButton.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>

      <element name="TEditButton.BorderStyle" link="#LCL.Controls.TCustomControl.BorderStyle">
        <short>Style for the Border drawn around the control.</short>
        <descr>
          <p>
            The default value for the property is <var>bsNone</var> in <var>TEditButton</var>.
          </p>
        </descr>
      </element>

      <element name="TEditButton.ButtonCaption" link="#lcl.editbtn.TCustomEditButton.ButtonCaption"/>
      <element name="TEditButton.ButtonCursor" link="#lcl.editbtn.TCustomEditButton.ButtonCursor"/>
      <element name="TEditButton.ButtonHint" link="#lcl.editbtn.TCustomEditButton.ButtonHint"/>
      <element name="TEditButton.ButtonOnlyWhenFocused" link="#lcl.editbtn.TCustomEditButton.ButtonOnlyWhenFocused"/>
      <element name="TEditButton.ButtonWidth" link="#lcl.editbtn.TCustomEditButton.ButtonWidth"/>
      <element name="TEditButton.CharCase" link="#lcl.stdctrls.TCustomEdit.CharCase"/>
      <element name="TEditButton.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TEditButton.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TEditButton.Cursor" link="#LCL.Controls.TControl.Cursor"/>
      <element name="TEditButton.DirectInput" link="#lcl.groupededit.TCustomAbstractGroupedEdit.DirectInput"/>
      <element name="TEditButton.EchoMode" link="#LCL.StdCtrls.TCustomEdit.EchoMode"/>
      <element name="TEditButton.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TEditButton.Flat" link="#lcl.editbtn.TCustomEditButton.Flat"/>
      <element name="TEditButton.FocusOnButtonClick" link="#lcl.editbtn.TCustomEditButton.FocusOnButtonClick"/>
      <element name="TEditButton.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TEditButton.Glyph" link="#lcl.editbtn.TCustomEditButton.Glyph"/>
      <element name="TEditButton.Images" link="#lcl.editbtn.TCustomEditButton.Images"/>
      <element name="TEditButton.ImageIndex" link="#lcl.editbtn.TCustomEditButton.ImageIndex"/>
      <element name="TEditButton.ImageWidth" link="#lcl.editbtn.TCustomEditButton.ImageWidth"/>
      <element name="TEditButton.Layout"  link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.Layout"/>
      <element name="TEditButton.MaxLength" link="#lcl.stdctrls.TCustomEdit.MaxLength"/>
      <element name="TEditButton.NumGlyphs" link="#lcl.editbtn.TCustomEditButton.NumGlyphs"/>
      <element name="TEditButton.OnButtonClick" link="#lcl.editbtn.TCustomEditButton.OnButtonClick"/>
      <element name="TEditButton.OnChange" link="#lcl.stdctrls.TCustomEdit.OnChange"/>
      <element name="TEditButton.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TEditButton.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TEditButton.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TEditButton.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TEditButton.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TEditButton.OnEditingDone" link="#LCL.Controls.TControl.OnEditingDone"/>
      <element name="TEditButton.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TEditButton.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TEditButton.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TEditButton.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TEditButton.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TEditButton.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TEditButton.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TEditButton.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TEditButton.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TEditButton.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TEditButton.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TEditButton.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TEditButton.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TEditButton.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TEditButton.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TEditButton.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TEditButton.ParentBidiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TEditButton.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TEditButton.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TEditButton.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TEditButton.PasswordChar" link="#LCL.StdCtrls.TCustomEdit.PasswordChar"/>
      <element name="TEditButton.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TEditButton.ReadOnly" link="#lcl.stdctrls.TCustomEdit.ReadOnly"/>
      <element name="TEditButton.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TEditButton.Spacing" link="#lcl.editbtn.TCustomEditButton.Spacing"/>
      <element name="TEditButton.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TEditButton.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TEditButton.Text" link="#LCL.StdCtrls.TCustomEdit.Text"/>
      <element name="TEditButton.TextHint" link="#lcl.stdctrls.TCustomEdit.TextHint"/>
      <element name="TEditButton.Visible" link="#LCL.Controls.TControl.Visible"/>

      <element name="TFilterStringOption">
        <short>String filter options which can be enabled in controls.</short>
        <descr>
          <p>
            <var>TFilterStringOption</var> is an enumerated type with values representing string filter options which can be enabled in controls which support the feature. TFilterStringOption values are stored in the <var>TFilterStringOptions</var> set type used to implement the <var>FilterOptions</var> property in <var>TCustomControlFilterEdit</var>.
          </p>
        </descr>
        <seealso>
          <link id="TFilterStringOptions"/>
          <link id="TCustomControlFilterEdit.FilterOptions"/>
        </seealso>
      </element>
      <element name="TFilterStringOption.fsoCaseSensitive">
        <short>Value comparisons are case sensitive.</short>
      </element>
      <element name="TFilterStringOption.fsoMatchOnlyAtStart">
        <short>Value comparisons start at the beginning to the string value.</short>
      </element>

      <element name="TFilterStringOptions">
        <short>Set type used to store values from the TFilterStringOption enumeration.</short>
        <descr></descr>
        <seealso>
          <link id="TFilterStringOption"/>
          <link id="TCustomControlFilterEdit.FilterOptions"/>
        </seealso>
      </element>

      <element name="TFilterItemEvent">
        <short>
          Specifies an event handler used to filter data items in TCustomControlFilterEdit.
        </short>
        <descr>
          <p>
            <var>TFilterItemEvent</var> is a <var>Boolean</var> object function type that specifies an event handler used to filter data items in <var>TCustomControlFilterEdit</var>. The return value is <b>True</b> if an item matches a filter condition implemented in the event handler. <var>Done</var> can be updated to indicate if the item requires additional filtering on the title string in the data item; when it contains <b>True</b>, no additional filtering is needed.
          </p>
          <p>
            <var>TFilterItemEvent</var> is the type used for the <var>OnFilterItem</var> event handler in <var>TCustomControlFilterEdit</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomControlFilterEdit.OnFilterItem"/>
          <link id="TCustomControlFilterEdit.OnFilterItemEx"/>
          <link id="TFilterItemExEvent"/>
        </seealso>
      </element>
      <element name="TFilterItemEvent.Result">
        <short>True if the item matches the filter implemented in the event handler.</short>
      </element>
      <element name="TFilterItemEvent.ItemData">
        <short>Pointer to the data for the item examined in the event handler.</short>
      </element>
      <element name="TFilterItemEvent.Done">
        <short>Indicates if additional filtering is needed on the title of the item data.</short>
      </element>

      <element name="TFilterItemExEvent">
        <short>
          Specifies an event handler used to filter data items in TCustomControlFilterEdit.
        </short>
        <descr>
          <p>
            <var>TFilterItemExEvent</var> is a <var>Boolean</var> object function type that specifies an event handler used to filter data items in <var>TCustomControlFilterEdit</var>. It is similar to       <var>TFilterItemEvent</var>, but provides an additional argument with the caption for the data item.
          </p>
          <p>
            The return value is <b>True</b> if an item matches a filter condition implemented in the event handler. <var>Done</var> can be updated to indicate if the item requires additional filtering on the title string in the data item; when it contains <b>True</b>, no additional filtering is needed.
          </p>
          <p>
            <var>TFilterItemEventEx</var> is the type used for the <var>OnFilterItemEx</var> event handler in <var>TCustomControlFilterEdit</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomControlFilterEdit.OnFilterItem"/>
          <link id="TCustomControlFilterEdit.OnFilterItemEx"/>
          <link id="TFilterItemExEvent"/>
        </seealso>
      </element>
      <element name="TFilterItemExEvent.Result">
        <short>True if the item matches the filter implemented in the event handler.</short>
      </element>
      <element name="TFilterItemExEvent.ACaption">
        <short>Caption or display name for the item examined in the event handler.</short>
      </element>
      <element name="TFilterItemExEvent.ItemData">
        <short>Pointer to the data for the item examined in the event handler.</short>
      </element>
      <element name="TFilterItemExEvent.Done">
        <short>Indicates if additional filtering is needed for the caption or item data.</short>
      </element>

      <element name="TCheckItemEvent">
        <short>Specifies an event handler is to determine if the specified Item is checked.</short>
        <descr>
          <p>
            <var>TCheckItemEvent</var> specifies an event handler that can be used only for items that have a checkbox. Returns <b>True</b> when the item is checked. It will be necessary to cast the object instance in Item to the correct data type in the event handler to access properties introduced in a <var>TObject</var> descendant.
          </p>
          <p>
            TCheckItemEvent is the type used to implement the <var>OnCheckItem</var> event handler in <var>TCustomControlFilterEdit</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomControlFilterEdit.OnCheckItem"/>
        </seealso>
      </element>
      <element name="TCheckItemEvent.Result">
        <short>True when the item is checked.</short>
      </element>
      <element name="TCheckItemEvent.Item">
        <short>Object examined in the method.</short>
      </element>

      <element name="TCustomControlFilterEdit">
        <short>
          Base class for edit controls which filter data in an associated container control like TListbox or TTreeview.
        </short>
        <descr>
          <p>
            When the container control is connected to a filter control, the filtering happens automatically as a user enters text. When the filter is empty and does not have focus, it displays the greyed  value "(filter)".
          </p>
        </descr>
      </element>

      <element name="TCustomControlFilterEdit.fFilter"/>
      <element name="TCustomControlFilterEdit.fFilterLowercase"/>
      <element name="TCustomControlFilterEdit.fFilterOptions"/>
      <element name="TCustomControlFilterEdit.fIdleConnected"/>
      <element name="TCustomControlFilterEdit.fSortData"/>
      <element name="TCustomControlFilterEdit.fIsFirstSetFormActivate"/>
      <element name="TCustomControlFilterEdit.fOnAfterFilter"/>

      <element name="TCustomControlFilterEdit.SetFilter">
        <short>Sets the value for the Filter property.</short>
        <descr/>
        <seealso>
          <link id="TCustomControlFilterEdit.Filter"/>
        </seealso>
      </element>
      <element name="TCustomControlFilterEdit.SetFilter.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomControlFilterEdit.SetIdleConnected">
        <short>Sets the value for the IdleConnected property.</short>
        <descr/>
        <seealso>
          <link id="TCustomControlFilterEdit.IdleConnected"/>
        </seealso>
      </element>
      <element name="TCustomControlFilterEdit.SetIdleConnected.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCustomControlFilterEdit.OnIdle">
        <short>
          Event handler signalled to apply a filter when an Application becomes idle.
        </short>
        <descr>
          <p>
            <var>OnIdle</var> is a procedure which implements a <var>TIdleEvent</var> event handler signalled to apply a filter when the <var>Application</var> becomes idle. OnIdle is assigned (using AddOnIdleHandler) or removed (using RemoveOnIdleHandler) in the global Application instance when the value in <var>IdleConnected</var> is changed.
          </p>
          <p>
            OnIdle uses an internal flag to determine if an update is needed, and when set, calls <var>ApplyFilter</var> to activate the filter and resets the flag value. Use the <var>OnFilterItemEx</var> or <var>OnFilterItem</var> (deprecated) event handlers to perform actions needed to implement the filter.
          </p>
          <p>
            OnIdle signals the <var>OnAfterFilter</var> event handler (when assigned).
          </p>
        </descr>
        <seealso>
          <link id="TCustomControlFilterEdit.ApplyFilter"/>
          <link id="TCustomControlFilterEdit.OnFilterItem"/>
          <link id="TCustomControlFilterEdit.OnFilterItemEx"/>
          <link id="TCustomControlFilterEdit.IdleConnected"/>
          <link id="TCustomControlFilterEdit.OnAfterFilter"/>
        </seealso>
      </element>
      <element name="TCustomControlFilterEdit.OnIdle.Sender">
        <short>Object for the event notification.</short>
      </element>
      <element name="TCustomControlFilterEdit.OnIdle.Done">
        <short></short>
      </element>

      <element name="TCustomControlFilterEdit.IsTextHintStored">
        <descr>
          Indicates if the value in TextHint is stored in the LCL component streaming mechanism
        </descr>
        <short>
          <p>
            The value is True when <var>TextHint</var> contains a value other than the <var>rsFilter</var> resource string.
          </p>.
        </short>
        <seealso></seealso>
      </element>
      <element name="TCustomControlFilterEdit.IsTextHintStored.Result">
        <short>True when TextHint is included in the LCL component stream.</short>
      </element>

      <element name="TCustomControlFilterEdit.fNeedUpdate">
        <short>
          Flag which indicates that the filter has been updated and needs to be applied.
        </short>
      </element>

      <element name="TCustomControlFilterEdit.fIsFirstUpdate">
        <short>
          Flag indicating if the filter has ever been applied.
        </short>
      </element>

      <element name="TCustomControlFilterEdit.fSelectedPart">
        <short>Node to select during the next update.</short>
      </element>

      <element name="TCustomControlFilterEdit.fOnFilterItem">
        <short>Stores the event handler in the OnFilterItem property.</short>
      </element>

      <element name="TCustomControlFilterEdit.fOnFilterItemEx">
        <short>Stores the event handler in the OnFilterItemEx property.</short>
      </element>

      <element name="TCustomControlFilterEdit.fOnCheckItem">
        <short>Stores the event handler in the OnCheckItem property.</short>
      </element>

      <element name="TCustomControlFilterEdit.DestroyWnd" link="#LCL.Controls.TCustomControl.DestroyWnd">
        <short>
          Ensures that the Canvas for the control is freed before the window handle is destroyed.
        </short>
        <descr>
          Calls the inherited DestroyWnd method.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomControlFilterEdit.DoDefaultFilterItem">
        <short>
          Provides a default routine used to examine an item in the filtered edit control.
        </short>
        <descr>
          <p>
            Signals the OnFilterItemEx (preferred) or OnFilterItem (deprecated) event handlers (when assigned) to determine if the item meets the filter condition. Values in ACaption and ItemData are passed as arguments to the event handlers.
          </p>
          <p>
            The return value is True when the item meets the filter condition(s) implemented in the event handlers. The DoDefaultFilterItem method is called when the return value is False, or the event handlers are not assigned in the class instance.
          </p>
        </descr>
        <seealso>
          <link id="TCustomControlFilterEdit.DoFilterItem"/>
          <link id="TCustomControlFilterEdit.OnFilterItem"/>
          <link id="TCustomControlFilterEdit.OnFilterItemEx"/>
        </seealso>
      </element>
      <element name="TCustomControlFilterEdit.DoDefaultFilterItem.Result">
        <short>True when the item meets the filter condition.</short>
      </element>
      <element name="TCustomControlFilterEdit.DoDefaultFilterItem.ACaption">
        <short>Caption for the item passed to DoDefaultFilterItem.</short>
      </element>
      <element name="TCustomControlFilterEdit.DoDefaultFilterItem.ItemData">
        <short>Pointer to the data for the item examined in the method.</short>
      </element>

      <element name="TCustomControlFilterEdit.DoFilterItem">
        <short>Filters items using the handlers for the control.</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomControlFilterEdit.DoFilterItem.Result">
        <short>Returns True when the item meets the filter criterion.</short>
      </element>
      <element name="TCustomControlFilterEdit.DoFilterItem.ACaption">
        <short>Caption for the item.</short>
      </element>
      <element name="TCustomControlFilterEdit.DoFilterItem.ItemData">
        <short>Pointer to the data for the item.</short>
      </element>

      <element name="TCustomControlFilterEdit.EditKeyDown">
        <short>Gandles a KeyDown event for the Edit control.</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomControlFilterEdit.EditKeyDown.Key">
        <short></short>
      </element>
      <element name="TCustomControlFilterEdit.EditKeyDown.Shift">
        <short></short>
      </element>

      <element name="TCustomControlFilterEdit.EditChange">
        <short>Performs actions needed when the Edit is changed.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomControlFilterEdit.BuddyClick">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomControlFilterEdit.SortAndFilter">
        <short/>
        <descr>
          <p>
            <var>SortAndFilter</var> is an abstract virtual method in <var>TCustomControlFilterEdit</var>. It must be implemented in a descendent class to provide the specific functionality needed.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomControlFilterEdit.ApplyFilter">
        <short>Filters the data and updates the container.</short>
        <descr>
          <p>
            Does its job at once when Immediately is set to True. Otherwise, it connects the  OnIdle event handler which applies the filter when the Application is idle.
          </p>
        </descr>
      </element>
      <element name="TCustomControlFilterEdit.ApplyFilter.Immediately">
        <short>Indicates the filter is applied immediately.</short>
      </element>

      <element name="TCustomControlFilterEdit.ApplyFilterCore">
        <short>
          Applies the Filter data to the container component.
        </short>
        <descr>
          Method that actually filters data in the container component. ApplyFilterCore is a virtual abstract method, and must be implemented in a derived classes.
        </descr>
        <seealso></seealso>
      </element>

      <element name="TCustomControlFilterEdit.MoveNext">
        <short></short>
        <descr>
          Abstract virtual method that must be implemented in a descendent class.
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomControlFilterEdit.MoveNext.ASelect">
        <short></short>
      </element>

      <element name="TCustomControlFilterEdit.MovePrev">
        <short></short>
        <descr>
          Abstract virtual method that must be implemented in a descendent class.
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomControlFilterEdit.MovePrev.ASelect">
        <short></short>
      </element>

      <element name="TCustomControlFilterEdit.MovePageUp">
        <short></short>
        <descr>
          Abstract virtual method that must be implemented in a descendent class.
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomControlFilterEdit.MovePageUp.ASelect">
        <short></short>
      </element>

      <element name="TCustomControlFilterEdit.MovePageDown">
        <short></short>
        <descr>
          Abstract virtual method that must be implemented in a descendent class.
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomControlFilterEdit.MovePageDown.ASelect">
        <short></short>
      </element>

      <element name="TCustomControlFilterEdit.MoveHome">
        <short></short>
        <descr>
          Abstract virtual method that must be implemented in a descendent class.
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomControlFilterEdit.MoveHome.ASelect">
        <short></short>
      </element>

      <element name="TCustomControlFilterEdit.MoveEnd">
        <short></short>
        <descr>
          Abstract virtual method that must be implemented in a descendent class.
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomControlFilterEdit.MoveEnd.ASelect">
        <short></short>
      </element>

      <element name="TCustomControlFilterEdit.ReturnKeyHandled">
        <short></short>
        <descr>
          Abstract virtual method that must be implemented in a descendent class.
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomControlFilterEdit.ReturnKeyHandled.Result">
        <short></short>
      </element>

      <element name="TCustomControlFilterEdit.GetDefaultGlyphName" link="#lcl.editbtn.TCustomEditButton.GetDefaultGlyphName"/>
      <element name="TCustomControlFilterEdit.GetDefaultGlyphName.Result"/>

      <element name="TCustomControlFilterEdit.WSRegisterClass">
        <short>Registers the class reference used to create new instances of the class.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomControlFilterEdit.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for the class instance, and calls the inherited constructor. Create sets the default values for properties used to configure the <var>Edit</var> and <var>Button</var> in the class instance as well as its internal flags, including:
          </p>
          <dl>
            <dt>CharCase</dt>
            <dd>Set to ecLowerCase</dd>
            <dt>Button.Enabled</dt>
            <dd>Set to False</dd>
            <dt>FilterOptions</dt>
            <dd>Set to an empty set</dd>
            <dt>FIsFirstUpdate, fIsFirstSetFormActivate</dt>
            <dd>Set to True</dd>
            <dt>TextHint</dt>
            <dd>Set to rsFilter</dd>
          </dl>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomControlFilterEdit.Create.AOwner">
        <short>Owner for the class instance.</short>
      </element>

      <element name="TCustomControlFilterEdit.Destroy">
        <short>Destructor for the class instance.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomControlFilterEdit.InvalidateFilter">
        <short>Should be called when data was changed and it must be filtered again.</short>
        <descr>Connects to OnIdle handler which filters the data later.</descr>
      </element>

      <element name="TCustomControlFilterEdit.ResetFilter">
        <short>Removes the filter text and shows all items in the container.</short>
      </element>

      <element name="TCustomControlFilterEdit.ForceFilter">
        <short>Applies a new filter immediately without waiting for idle. Returns the previous filter.</short>
      </element>

      <element name="TCustomControlFilterEdit.StoreSelection">
        <short>
          Stores the current selection for the associated control in the class instance.
        </short>
        <descr>
          <p>
            <var>StoreSelection</var> is an abstract virtual method, and must be implemented in a derived class to use the correct class type for items in the associated control.
          </p>
          <p>
            Used in the implementation of the <var>ApplyFilter</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomControlFilterEdit.RestoreSelection"/>
          <link id="TCustomControlFilterEdit.ApplyFilter"/>
        </seealso>
      </element>

      <element name="TCustomControlFilterEdit.RestoreSelection">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomControlFilterEdit.Filter">
        <short>The textual representation for the filter.</short>
        <descr>
          Typically a user types it in the edit control but it can also be set in code. Filtering is done during idle time after the value of Filter text has changed.
        </descr>
      </element>

      <element name="TCustomControlFilterEdit.FilterLowercase">
        <short>Lowercase variant of the Filter property.</short>
        <descr>
          <p>
            <var>FilterLowercase</var> is a read-only <var>String</var> property which contains a variant of <var>Filter</var> converted to lowercase characters. It is used in the implementation of the <var>DoDefaultFilterItem</var> method when case sensitivity is not enabled in the <var>FilterOptions</var> property ( <var>fsoCaseSensitive</var> is not included). The property can be used in a similar manner in routines assigned to the <var>OnFilterItem</var> and <var>OnFilterItemEx</var> event handlers.
          </p>
          <p>
            The value for FilterLowercase is derived and assigned when the value in the <var>Filter</var> property is changed.
          </p>
        </descr>
        <seealso>
          <link id="TCustomControlFilterEdit.DoDefaultFilterItem"/>
          <link id="TCustomControlFilterEdit.OnFilterItem"/>
          <link id="TCustomControlFilterEdit.OnFilterItemEx"/>
          <link id="TCustomControlFilterEdit.Filter"/>
        </seealso>
      </element>

      <element name="TCustomControlFilterEdit.IdleConnected">
        <short>
          Indicates if OnIdle has been connected to the Application singleton.
        </short>
        <descr>
          <p>
            <var>IdleConnected</var> is a <var>Boolean</var> property which indicates if the <var>OnIdle</var> event handler in the class instance has been connected to the <var>Application</var> singleton. When set to <b>True</b>, the <var>Filter</var> in the control will be applied when the application is in an idle state.
          </p>
          <p>
            Changing the value in the property causes the Application singleton to be updated by calling either the <var>AddOnIdleHandler</var> or the <var>RemoveOnIdleHandler</var> method. The address for the <var>OnIdle</var> method in the class is passed as an argument.
          </p>
          <p>
            IdleConnected is set to <b>True</b> in the <var>InvalidateFilter</var> method.
          </p>
          <p>
            IdleConnected is set to <b>False</b> in the OnIdle method after the Filter has been applied for the control.
          </p>
          <p>
            The default value for the property is <b>False</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomControlFilterEdit.Filter"/>
          <link id="TCustomControlFilterEdit.InvalidateFilter"/>
          <link id="TCustomControlFilterEdit.ApplyFilter"/>
          <link id="#lcl.forms.Application">Application</link>
          <link id="#lcl.forms.TApplication">TApplication</link>
          <link id="#lcl.forms.TApplication.AddOnIdleHandler">TApplication.AddOnIdleHandler</link>
          <link id="#lcl.forms.TApplication.RemoveOnIdleHandler">TApplication.RemoveOnIdleHandler</link>
        </seealso>
      </element>

      <element name="TCustomControlFilterEdit.SortData">
        <short>Items can be sorted while they are filtered.</short>
      </element>

      <element name="TCustomControlFilterEdit.SelectedPart">
        <short>
          For retaining selection in the filtered control. The actual type depends on the control.
        </short>
      </element>

      <element name="TCustomControlFilterEdit.CharCase" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.CharCase"/>

      <element name="TCustomControlFilterEdit.FilterOptions">
        <short>
          Contains options which control string comparisons for filters in the control.
        </short>
        <descr>
          <p>
            <var>FilterOptions</var> is a <var>TFilterStringOptions</var> property which contains zero (0) or more <var>TFilterStringOption</var> enumeration values(s). Values in FilterOptions determine how string comparisons are performed in the <var>DoDefaultFilterItem</var> method. See <link id="TFilterStringOption"/> for more information about the enumeration values and their meanings.
          </p>
          <p>
            The default value for the property is an empty set ([]).
          </p>
        </descr>
        <seealso>
          <link id="TCustomControlFilterEdit.Filter"/>
          <link id="TCustomControlFilterEdit.DoDefaultFilterItem"/>
          <link id="TFilterStringOptions"/>
          <link id="TFilterStringOption"/>
        </seealso>
      </element>

      <element name="TCustomControlFilterEdit.OnAfterFilter">
        <short>Called after all items are filtered.</short>
      </element>

      <element name="TCustomControlFilterEdit.OnFilterItem">
        <short>
          An event handler to give extra conditions for filtering, in addition to the default behavior. Returns True if the passes the filter.
        </short>
        <descr>
          This feature has for example enabled filtering the Options windows in Lazarus IDE, based on captions of all controls on the options pages. Deprecated. Use OnFilterItemEx with a caption parameter instead.
        </descr>
      </element>

      <element name="TCustomControlFilterEdit.OnFilterItemEx">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomControlFilterEdit.OnCheckItem">
        <short>
          Has effect when items in the filtered container can be checked. Typically a CheckListbox.
        </short>
      </element>

      <element name="TCustomControlFilterEdit.ButtonCaption" link="#lcl.editbtn.TCustomEditButton.ButtonCaption"/>
      <element name="TCustomControlFilterEdit.ButtonCursor" link="#lcl.editbtn.TCustomEditButton.ButtonCursor"/>
      <element name="TCustomControlFilterEdit.ButtonHint" link="#lcl.editbtn.TCustomEditButton.ButtonHint"/>
      <element name="TCustomControlFilterEdit.ButtonOnlyWhenFocused" link="#lcl.editbtn.TCustomEditButton.ButtonOnlyWhenFocused"/>
      <element name="TCustomControlFilterEdit.ButtonWidth" link="#lcl.editbtn.TCustomEditButton.ButtonWidth"/>
      <element name="TCustomControlFilterEdit.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TCustomControlFilterEdit.DirectInput" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.DirectInput"/>
      <element name="TCustomControlFilterEdit.Flat" link="#lcl.editbtn.TCustomEditButton.Flat"/>
      <element name="TCustomControlFilterEdit.FocusOnButtonClick" link="#lcl.editbtn.TCustomEditButton.FocusOnButtonClick"/>
      <element name="TCustomControlFilterEdit.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TCustomControlFilterEdit.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TCustomControlFilterEdit.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TCustomControlFilterEdit.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TCustomControlFilterEdit.BorderStyle" link="#LCL.Controls.TCustomControl.BorderStyle"/>
      <element name="TCustomControlFilterEdit.AutoSize" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.AutoSize"/>
      <element name="TCustomControlFilterEdit.AutoSelect" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.AutoSelect"/>
      <element name="TCustomControlFilterEdit.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TCustomControlFilterEdit.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TCustomControlFilterEdit.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TCustomControlFilterEdit.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TCustomControlFilterEdit.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TCustomControlFilterEdit.Glyph" link="#lcl.editbtn.TCustomEditButton.Glyph"/>
      <element name="TCustomControlFilterEdit.NumGlyphs" link="#lcl.editbtn.TCustomEditButton.NumGlyphs"/>
      <element name="TCustomControlFilterEdit.Images" link="#lcl.editbtn.TCustomEditButton.Images"/>
      <element name="TCustomControlFilterEdit.ImageIndex" link="#lcl.editbtn.TCustomEditButton.ImageIndex"/>
      <element name="TCustomControlFilterEdit.ImageWidth" link="#lcl.editbtn.TCustomEditButton.ImageWidth"/>
      <element name="TCustomControlFilterEdit.Layout" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.Layout"/>
      <element name="TCustomControlFilterEdit.MaxLength" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.MaxLength"/>
      <element name="TCustomControlFilterEdit.ParentBidiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TCustomControlFilterEdit.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TCustomControlFilterEdit.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TCustomControlFilterEdit.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TCustomControlFilterEdit.PopUpMenu" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.PopUpMenu"/>
      <element name="TCustomControlFilterEdit.ReadOnly" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.ReadOnly"/>
      <element name="TCustomControlFilterEdit.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TCustomControlFilterEdit.Spacing" link="#lcl.editbtn.TCustomEditButton.Spacing"/>
      <element name="TCustomControlFilterEdit.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TCustomControlFilterEdit.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TCustomControlFilterEdit.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TCustomControlFilterEdit.OnButtonClick" link="#lcl.editbtn.TCustomEditButton.OnButtonClick"/>
      <element name="TCustomControlFilterEdit.OnChange" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnChange"/>
      <element name="TCustomControlFilterEdit.OnClick" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnClick"/>
      <element name="TCustomControlFilterEdit.OnContextPopup" link="#lcl.groupededit.TCustomAbstractGroupedEdit.OnContextPopup"/>
      <element name="TCustomControlFilterEdit.OnDblClick" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnDblClick"/>
      <element name="TCustomControlFilterEdit.OnDragDrop" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnDragDrop"/>
      <element name="TCustomControlFilterEdit.OnDragOver" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnDragOver"/>
      <element name="TCustomControlFilterEdit.OnEditingDone" link="#lcl.groupededit.TCustomAbstractGroupedEdit.OnEditingDone"/>
      <element name="TCustomControlFilterEdit.OnEndDrag" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnEndDrag"/>
      <element name="TCustomControlFilterEdit.OnEnter" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnEnter"/>
      <element name="TCustomControlFilterEdit.OnExit" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnExit"/>
      <element name="TCustomControlFilterEdit.OnKeyDown" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnKeyDown"/>
      <element name="TCustomControlFilterEdit.OnKeyPress" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnKeyPress"/>
      <element name="TCustomControlFilterEdit.OnKeyUp" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnKeyUp"/>
      <element name="TCustomControlFilterEdit.OnMouseDown" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnMouseDown"/>
      <element name="TCustomControlFilterEdit.OnMouseEnter" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnMouseEnter"/>
      <element name="TCustomControlFilterEdit.OnMouseLeave" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnMouseLeave"/>
      <element name="TCustomControlFilterEdit.OnMouseMove" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnMouseMove"/>
      <element name="TCustomControlFilterEdit.OnMouseUp" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnMouseUp"/>
      <element name="TCustomControlFilterEdit.OnMouseWheel" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnMouseWheel"/>
      <element name="TCustomControlFilterEdit.OnMouseWheelDown" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnMouseWheelDown"/>
      <element name="TCustomControlFilterEdit.OnMouseWheelUp" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnMouseWheelUp"/>
      <element name="TCustomControlFilterEdit.OnStartDrag" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnStartDrag"/>
      <element name="TCustomControlFilterEdit.OnUTF8KeyPress" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnUTF8KeyPress"/>
      <element name="TCustomControlFilterEdit.Text" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.Text"/>
      <element name="TCustomControlFilterEdit.TextHint" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.TextHint"/>

      <element name="TAcceptFileNameEvent">
        <short>
          <var>TAcceptFileNameEvent</var> - generic event handling method to accept a filename from a dialog.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TAcceptFileNameEvent.Sender">
        <short>Object for the event notification.</short>
      </element>
      <element name="TAcceptFileNameEvent.Value">
        <short>File name examined in the event handler.</short>
      </element>

      <element name="TDialogKind">
        <short>
          Enumerated type representing dialog styles used in TFileNameEdit.
        </short>
        <descr>
          <p>
            <var>TDialogKind</var> is an enumerated type representing the dialog styles available for use in <var>TFileNameEdit</var>.  Values in the enumeration influence the common dialog type created for a control which displays a dialog when its button is clicked.
          </p>
          <p>
            TDialogKind is the type used to implement the <var>DialogKind</var> property in <var>TFileNameEdit</var>.
          </p>
        </descr>
        <seealso>
          <link id="TFileNameEdit.DialogKind"/>
        </seealso>
      </element>
      <element name="TDialogKind.dkOpen">
        <short>An Open dialog.</short>
      </element>
      <element name="TDialogKind.dkSave">
        <short>A Save dialog.</short>
      </element>
      <element name="TDialogKind.dkPictureOpen">
        <short>An Open dialog for image types.</short>
      </element>
      <element name="TDialogKind.dkPictureSave">
        <short>A Save dialog for image types.</short>
      </element>

      <element name="TFileNameEdit">
        <short>
          <var>TFileNameEdit</var> - an EditBox to hold a filename, with an attached SpeedButton that summons a File Open dialog.
        </short>
        <descr>
          <p>
            <var>TFileNameEdit</var> is a <var>TCustomEditButton</var> descendant which implements a grouped edit control used to select and edit a file name on the local file system. The control provides the Edit and Button properties from the ancestor class, and executes a dialog when the Button is clicked. New properties are introduced which allow configuring the control to a specific file path, filters to select files of particular type or file extension, and to hide or show directories in its dialog.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEditButton"/>
        </seealso>
      </element>

      <element name="TFileNameEdit.FDialogOptions"/>
      <element name="TFileNameEdit.FFileName"/>
      <element name="TFileNameEdit.FDialogFiles"/>
      <element name="TFileNameEdit.FDialogKind"/>
      <element name="TFileNameEdit.FDialogTitle"/>
      <element name="TFileNameEdit.FFilter"/>
      <element name="TFileNameEdit.FFilterIndex"/>
      <element name="TFileNameEdit.FInitialDir"/>
      <element name="TFileNameEdit.FOnAcceptFileName"/>
      <element name="TFileNameEdit.FOnFolderChange"/>
      <element name="TFileNameEdit.FFileNameChangeLock"/>

      <element name="TFileNameEdit.SetFileName">
        <short>Sets the value for the FileName property.</short>
        <descr/>
        <seealso>
          <link id="TFileNameEdit.FileName"/>
        </seealso>
      </element>
      <element name="TFileNameEdit.SetFileName.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TFileNameEdit.GetDefaultGlyphName" link="#LCL.EditBtn.TCustomEditButton.GetDefaultGlyphName">
        <short>Gets the default glyph name used for the Button on the control.</short>
        <descr>
          <p>
            The return value contains the resource ID in the <var>ResBtnFileOpen</var> constant. The value is used in the <var>LoadDefaultGlyph</var> method defined in  <var>TCustomEditButton</var>.
          </p>
        </descr>
        <seealso>
          <link id="ResBtnFileOpen"/>
          <link id="TCustomEditButton.LoadDefaultGlyph"/>
        </seealso>
      </element>

      <element name="TFileNameEdit.CreateDialog">
        <short>Creates the dialog for the control.</short>
        <descr>
          <p>
            CreateDialog is a TCommonDialog function which creates and returns the dialog for the grouped edit control.
          </p>
          <p>
            AKind contains the TDialogKind value that identifies the dialog type required for the control, and normally has the value from the DialogKind property. AKind determines the class type instantiated and used as the return value. For example:
          </p>
          <dl>
            <dt>dkOpen</dt>
            <dd>TOpenDialog is the type in return value</dd>
            <dt>dkPictureOpen</dt>
            <dd>TOpenPictureDialog is the type in return value</dd>
            <dt>dkSave, dkPictureSave</dt>
            <dd>TSaveDialog is the type in return value</dd>
          </dl>
          <p>
            Properties relevant to the dialog kind are copied into the dialog, and mat include:
          </p>
          <ul>
            <li>FileName</li>
            <li>Path information extracted from FileName</li>
            <li>InitialDir</li>
            <li>DefaultExt</li>
            <li>Filter</li>
            <li>FilterIndex</li>
            <li>DialogOptions</li>
            <li>DialogTitle</li>
          </ul>
          <p>
            CreateDialog is used in the implementation of the RunDialog method.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.dialogs.TCommonDialog">TCommonDialog</link>
          <link id="#lcl.dialogs.TOpenDialog">TOpenDialog</link>
          <link id="#lcl.dialogs.TSaveDialog">TSaveDialog</link>
        </seealso>
      </element>
      <element name="TFileNameEdit.CreateDialog.Result">
        <short>Dialog class instance created in the method.</short>
      </element>
      <element name="TFileNameEdit.CreateDialog.AKind">
        <short>Identifies the dialog kind or type created in the method.</short>
      </element>

      <element name="TFileNameEdit.SaveDialogResult">
        <short>
          <var>SaveDialogResult</var> - stores the result of the dialog.
        </short>
        <descr>
          <p>
            <var>SaveDialogResult</var> is a procedure used to capture the results from the  dialog when it has finished execution. The values are stored in the corresponding properties in the class instance, and depending on the DialogKind, may include:
          </p>
          <ul>
            <li>FilterIndex</li>
            <li>FileName</li>
            <li>DialogFiles</li>
          </ul>
          <p>
            SaveDialogResult is used in the implementation of the RunDialog method.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TFileNameEdit.SaveDialogResult.AKind">
        <short>Dialog type in the D argument.</short>
      </element>
      <element name="TFileNameEdit.SaveDialogResult.D">
        <short>Dialog examined in the method.</short>
      </element>

      <element name="TFileNameEdit.ButtonClick">
        <short>Performs actions needed when the Button for the control is clicked.</short>
        <descr>
          <p>
            <var>ButtonClick</var> is an overridden method used to perform actions needed when the <var>Button</var> for the control is clicked. For <var>TFileNameEdit</var>, the <var>RunDialog</var> method is called to execute the dialog for the control and to capture it results. When <var>FocusOnButtonClick</var> is set, the <var>FocusAndMaybeSelectAll</var> method is called to give focus to the <var>Edit</var> control in the class.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEditButton.ButtonClick"/>
          <link id="TCustomEditButton.Button"/>
          <link id="TCustomEditButton.Edit"/>
          <link id="TCustomEditButton.FocusOnButtonClick"/>
          <link id="TFileNameEdit.RunDialog"/>
          <link id="TCustomAbstractGroupedEdit.FocusAndMaybeSelectAll"/>
        </seealso>
      </element>

      <element name="TFileNameEdit.EditChange">
        <short>Performs actions needed when the value for the control  has been changed.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TFileNameEdit.DoFolderChange">
        <short>Signals the OnFolderChange event handler (when assigned).</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TFileNameEdit.DoFolderChange.Sender">
        <short></short>
      </element>

      <element name="TFileNameEdit.Create" link="#LCL.EditBtn.TCustomEditButton.Create">
        <short>Constuctor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance, and calls the inherited constructor. Create allocates resource needed for the <var>DialogFiles</var> property, and sets the default values for the <var>DialogKind</var> and <var>DialogOptions</var> properties.
          </p>
        </descr>
        <seealso>
          <link id="TFileNameEdit.DialogFiles"/>
          <link id="TFileNameEdit.DialogKind"/>
          <link id="TFileNameEdit.DialogOptions"/>
        </seealso>
      </element>
      <element name="TFileNameEdit.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TFileNameEdit.Destroy" link="#LCL.EditBtn.TCustomEditButton.Destroy">
        <short>Destructor for the class instance.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileNameEdit.RunDialog">
        <short>
          <var>RunDialog</var> executes the dialog for the control.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>

      <element name="TFileNameEdit.AutoSelected" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.AutoSelected"/>

      <element name="TFileNameEdit.DialogFiles">
        <short>
          <var>DialogFiles</var> is the list of files for the dialog.
        </short>
        <descr>
          <p>
            <var>DialogFiles</var> is a read-only <var>TStrings</var> property used to store one or more file names found when the dialog for the control is executed. DialogFiles is updated in the <var>SaveDialogResult</var> method. For open dialogs, DialogFiles is set to the files returned by the dialog. For save dialogs, the content in DialogFiles is cleared.
          </p>
        </descr>
        <seealso>
          <link id="TFileNameEdit.SaveDialogResult"/>
          <link id="TFileNameEdit.RunDialog"/>
          <link id="TFileNameEdit.FileName"/>
        </seealso>
      </element>

      <element name="TFileNameEdit.FileName">
        <short>
          <var>FileName</var> - the name of the selected file: either the initial value placed in the Text Box, or the value selected from the dialog.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileNameEdit.InitialDir">
        <short>
          <var>InitialDir</var> is the directory from which the search starts.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileNameEdit.OnAcceptFileName">
        <short>
          <var>OnAcceptFileName</var> is an event handler for accepting a filename.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileNameEdit.OnFolderChange">
        <short>Event handler signalled when the path to FileName has changed.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TFileNameEdit.DialogKind">
        <short>
          Determines the dialog type executed when the Button in the control is clicked.
        </short>
        <descr>
          <p>
            <var>DialogKind</var> is a <var>TDialogKind</var> property that indicates the type of dialog executed when the <var>Button</var> for the control is clicked. The default value for the property is <var>dkOpen</var>, as assigned in the constructor. Use one of the other TDialogKind enumeration values to perform its  corresponding action.
          </p>
        </descr>
        <seealso>
          <link id="TFileNameEdit.RunDialog"/>
          <link id="TFileNameEdit.SaveDialogResult"/>
          <link id="TCustomEditButton.Button"/>
          <link id="TDialogKind"/>
        </seealso>
      </element>

      <element name="TFileNameEdit.DialogTitle">
        <short>
          <var>DialogTitle</var> - the title to appear on the dialog.
        </short>
        <descr>
          <p>
            <var>DialogTitle</var> is a <var>String</var> property that contains the title displayed on the dialog executed by clicking on Button. The value in DialogTitle is assigned to the TCommonDialog descendant created in the      <var>CreateDialog</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TFileNameEdit.DialogKind"/>
          <link id="TFileNameEdit.DialogOptions"/>
        </seealso>
      </element>

      <element name="TFileNameEdit.DialogOptions">
        <short>
          <var>DialogOptions</var> - set of options enabled for the file open dialog.
        </short>
        <descr>
          <p>
            <var>DialogOptions</var> is a <var>TOpenOptions</var> property which contains the options enabled for a File Open dialog. The default value for the property is defined in the <var>DefaultOpenDialogOptions</var> constant.
          </p>
          <p>
            Values in DialogOptions control the functionality and visual appearance of the dialog displayed for the control. See <link id="TOpenOption"/> for more information about the enumeration values used in DialogOptions.
          </p>
        </descr>
        <seealso>
          <link id="TFileNameEdit.CreateDialog"/>
          <link id="TFileNameEdit.RunDialog"/>
          <link id="Dialogs.TOpenOption"/>
          <link id="Dialogs.TOpenOptions"/>
        </seealso>
      </element>

      <element name="TFileNameEdit.Filter">
        <short>
          <var>Filter</var> - the filtering string to help search for the required file.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileNameEdit.FilterIndex">
        <short>
          <var>FilterIndex</var> - index value for the filtering string.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileNameEdit.DefaultExt">
        <short>Default file extension used in the dialog for the component.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TFileNameEdit.HideDirectories">
        <short>Hide directory name from edit.</short>
        <descr>
          <p>
            If <var>HideDirectories</var> is set to true, the file name editor displays only a file name, without path.
          </p>
          <remark>
            This may be useful if application allows user to select files from a fixed directory with a long path.
          </remark>
        </descr>
      </element>

      <element name="TFileNameEdit.ButtonCaption">
        <short>Text displayed on the button for the control.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TFileNameEdit.ButtonCursor">
        <short>
          Cursor shape displayed when hovering the mouse over the button for the control.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TFileNameEdit.ButtonHint">
        <short>Text displayed in the balloon hint for the button in the control.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TFileNameEdit.ButtonOnlyWhenFocused" link="#LCL.EditBtn.TCustomEditButton.ButtonOnlyWhenFocused">
        <short>Controls visibility of the Button when the control loses focus.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileNameEdit.ButtonWidth" link="#LCL.EditBtn.TCustomEditButton.ButtonWidth">
        <short>Width of the Button displayed in the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TFileNameEdit.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TFileNameEdit.DirectInput" link="#lcl.editbtn.TCustomEditButton.DirectInput"/>
      <element name="TFileNameEdit.Glyph" link="#lcl.editbtn.TCustomEditButton.Glyph"/>
      <element name="TFileNameEdit.NumGlyphs" link="#lcl.editbtn.TCustomEditButton.NumGlyphs"/>
      <element name="TFileNameEdit.Images" link="#lcl.editbtn.TCustomEditButton.Images"/>
      <element name="TFileNameEdit.ImageIndex" link="#lcl.editbtn.TCustomEditButton.ImageIndex"/>
      <element name="TFileNameEdit.ImageWidth" link="#lcl.editbtn.TCustomEditButton.ImageWidth"/>
      <element name="TFileNameEdit.Flat" link="#lcl.editbtn.TCustomEditButton.Flat"/>
      <element name="TFileNameEdit.FocusOnButtonClick" link="#lcl.editbtn.TCustomEditButton.FocusOnButtonClick"/>
      <element name="TFileNameEdit.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TFileNameEdit.Alignment" link="#lcl.groupededit.TCustomAbstractGroupedEdit.Alignment"/>
      <element name="TFileNameEdit.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TFileNameEdit.AutoSelect" link="#LCL.StdCtrls.TCustomEdit.AutoSelect"/>
      <element name="TFileNameEdit.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TFileNameEdit.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TFileNameEdit.BorderStyle" link="#LCL.Controls.TControl.BorderStyle"/>
      <element name="TFileNameEdit.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TFileNameEdit.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TFileNameEdit.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TFileNameEdit.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TFileNameEdit.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TFileNameEdit.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TFileNameEdit.Layout" link="#lcl.groupededit.TCustomAbstractGroupedEdit.Layout"/>
      <element name="TFileNameEdit.MaxLength" link="#LCL.StdCtrls.TCustomEdit.MaxLength"/>
      <element name="TFileNameEdit.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TFileNameEdit.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TFileNameEdit.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TFileNameEdit.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TFileNameEdit.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TFileNameEdit.ReadOnly" link="#LCL.StdCtrls.TCustomEdit.ReadOnly"/>
      <element name="TFileNameEdit.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TFileNameEdit.Spacing" link="#lcl.editbtn.TCustomEditButton.Spacing"/>
      <element name="TFileNameEdit.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TFileNameEdit.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TFileNameEdit.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TFileNameEdit.OnButtonClick" link="#lcl.editbtn.TCustomEditButton.OnButtonClick"/>
      <element name="TFileNameEdit.OnChange" link="#LCL.StdCtrls.TCustomEdit.OnChange"/>
      <element name="TFileNameEdit.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TFileNameEdit.OnContextPopup" link="#lcl.groupededit.TCustomAbstractGroupedEdit.OnContextPopup"/>
      <element name="TFileNameEdit.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TFileNameEdit.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TFileNameEdit.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TFileNameEdit.OnEditingDone" link="#LCL.Controls.TControl.OnEditingDone"/>
      <element name="TFileNameEdit.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TFileNameEdit.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TFileNameEdit.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TFileNameEdit.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TFileNameEdit.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TFileNameEdit.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TFileNameEdit.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TFileNameEdit.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TFileNameEdit.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TFileNameEdit.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TFileNameEdit.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TFileNameEdit.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TFileNameEdit.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TFileNameEdit.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TFileNameEdit.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TFileNameEdit.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TFileNameEdit.Text" link="#LCL.Controls.TControl.Text"/>
      <element name="TFileNameEdit.TextHint" link="#LCL.Controls.TControl.TextHint"/>

      <element name="TDirectoryEdit">
        <short>
          <var>TDirectoryEdit</var> - an EditBox to hold a directory name, with an attached SpeedButton that summons a Directory Open dialog.
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.dialogs.TSelectDirectoryDialog">TSelectDirectoryDialog</link>
        </seealso>
      </element>

      <element name="TDirectoryEdit.FDialogTitle"/>
      <element name="TDirectoryEdit.FRootDir"/>
      <element name="TDirectoryEdit.FOnAcceptDir"/>
      <element name="TDirectoryEdit.FShowHidden"/>
      <element name="TDirectoryEdit.FDialogOptions"/>

      <element name="TDirectoryEdit.GetDirectory">
        <short>Gets the value for the Directory property.</short>
        <descr/>
        <seealso>
          <link id="TDirectoryEdit.Directory"/>
        </seealso>
      </element>
      <element name="TDirectoryEdit.GetDirectory.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TDirectoryEdit.SetDirectory">
        <short>Sets the value for the Directory property.</short>
        <descr/>
        <seealso>
          <link id="TDirectoryEdit.Directory"/>
        </seealso>
      </element>
      <element name="TDirectoryEdit.SetDirectory.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TDirectoryEdit.GetDefaultGlyphName" link="#LCL.EditBtn.TCustomEditButton.GetDefaultGlyphName">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TDirectoryEdit.CreateDialog">
        <short>
          Creates and configures the dialog for the control.
        </short>
        <descr>
          <p>
            <var>CreateDialog</var> is a <var>TCommonDialog</var> function which creates and configures the Directory Open dialog executed when the <var>Button</var> is clicked for the control. In <var>TDirectoryEdit</var>, the class type instantiated and used as the return value is actually <var>TSelectDirectoryDialog</var>.
          </p>
          <p>
            CreateDialog ensures that values for the InitialDir and FileName properties in the dialog are set using the properties in the class instance. <var>Directory</var> and <var>Filename</var> are used in the the dialog when the directory exists on the local file system. Otherwise, the initial directory is set to the value in <var>RootDir</var> and the file name is set to the value in <var>Directory</var>.
          </p>
          <p>
            CreateDialog set the options in the dialog to the values specified in <var>DialogOptions</var>, and the value in <var>DialogTitle</var> is used as the title for the dialog.
          </p>
          <p>
            CreateDialog is used in the implementation of the <var>RunDialog</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TDirectoryEdit.Directory"/>
          <link id="TDirectoryEdit.RootDir"/>
          <link id="TDirectoryEdit.DialogOptions"/>
          <link id="TDirectoryEdit.DialogTitle"/>
          <link id="#lcl.dialogs.TSelectDirectoryDialog">TSelectDirectoryDialog</link>
          <link id="#lcl.dialogs.TCommonDialog">TCommonDialog</link>
        </seealso>
      </element>
      <element name="TDirectoryEdit.CreateDialog.Result">
        <short>Dialog created and configured in the method.</short>
      </element>

      <element name="TDirectoryEdit.GetDialogResult">
        <short>Gets the result from the specified dialog.</short>
        <descr>
          <p>
            <var>GetDialogResult</var> is a <var>String</var> function used to get the result from the Select Directory dialog. The return value contains the value from the <var>FileName</var> property in the <var>TSelectDirectoryDialog</var> instance in <var>D</var>. The return value, when accepted in <var>OnAcceptDirectory</var>, is stored in the <var>Directory</var> property.
          </p>
          <p>
            GetDialogResult is used in the implementation of the <var>RunDialog</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TDirectoryEdit.RunDialog"/>
          <link id="TDirectoryEdit.OnAcceptDirectory"/>
          <link id="TDirectoryEdit.Directory"/>
          <link id="#lcl.dialogs.TSelectDirectoryDialog">TSelectDirectoryDialog</link>
          <link id="#lcl.dialogs.TCommonDialog">TCommonDialog</link>
        </seealso>
      </element>
      <element name="TDirectoryEdit.GetDialogResult.Result">
        <short>Directory name from the dialog.</short>
      </element>
      <element name="TDirectoryEdit.GetDialogResult.D">
        <short>Dialog examined in the method.</short>
      </element>

      <element name="TDirectoryEdit.ButtonClick">
        <short>Implements the button handler for the Button in the control.</short>
        <descr>
          <p>
            <var>ButtonClick</var> is an overridden method used to implement the button click handler for the <var>Button</var> in the control. ButtonClick calls the inherited method, and calls <var>RunDialog</var> to display the dialog and capture the directory name. When the dialog has completed, and <var>FocusOnButtonClick</var> is set to <b>True</b>, the <var>FocusAndMaybeSelectAll</var> method is called to give focus to the <var>Edit</var> control and select text as needed.
          </p>
          <p>
            ButtonClick is called from the <var>BuddyClick</var> method in the ancestor class.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEditButton.Button"/>
          <link id="TCustomEditButton.Edit"/>
          <link id="TCustomEditButton.FocusOnButtonClick"/>
          <link id="TCustomEditButton.BuddyClick"/>
          <link id="TDirectoryEdit.RunDialog"/>
          <link id="TCustomAbstractGroupedEdit.FocusAndMaybeSelectAll"/>
        </seealso>
      </element>

      <element name="TDirectoryEdit.AutoSelect" link="#LCL.StdCtrls.TCustomEdit.AutoSelect"/>

      <element name="TDirectoryEdit.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance, and calls the inherited constructor. Create sets the values in the <var>DialogOptions</var> property to the defaults in <var>DefaultOpenDialogOptions</var>.
          </p>
        </descr>
        <seealso>
          <link id="TDirectoryEdit.DialogOptions"/>
          <link id="DefaultOpenDialogOptions"/>
        </seealso>
      </element>
      <element name="TDirectoryEdit.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TDirectoryEdit.RunDialog">
        <short>
          Executes the dialog for the control and stores the return value.
        </short>
        <descr>
          <p>
            <var>RunDialog</var> is a procedure used to execute the dialog for the control, and to store the selected directory name in the control. RunDialog calls <var>CreateDialog</var> to create and configure the dialog executed in the method. When the dialog has completed successfully, <var>GetDialogResult</var> is called to capture the selected directory name.
          </p>
          <p>
            When assigned, the <var>OnAcceptDirectory</var> event handler is signalled to accept or reject the selected directory name. When rejected, the return value is ignored. When accepted, the value returned from the dialog is stored in the <var>Directory</var> property.
          </p>
          <p>
            RunDialog is used in the implementation of the <var>ButtonClick</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TDirectoryEdit.CreateDialog"/>
          <link id="TDirectoryEdit.GetDialogResult"/>
          <link id="TDirectoryEdit.Directory"/>
          <link id="TDirectoryEdit.OnAcceptDirectory"/>
          <link id="TDirectoryEdit.ButtonClick"/>
          <link id="#lcl.dialogs.TCommonDialog">TCommonDialog</link>
          <link id="#lcl.dialogs.TSelectDirectoryDialog">TSelectDirectoryDialog</link>
        </seealso>
      </element>

      <element name="TDirectoryEdit.Directory">
        <short>The <var>Directory</var> selected by the dialog.</short>
        <descr>
          <p>
            <var>Directory</var> is a <var>String</var> property which contains the active directory, and the value displayed in the <var>Edit</var> for the control.
          </p>
          <p>
            Directory and <var>RootDir</var> determine the values used in the Select Directory dialog executed when the Button is clicked for the control. When Directory is a valid file path on the local file system, it is used as the initial directory displayed in the dialog. Otherwise, the value in <var>RootDir</var> is used as the initial directory and Directory is used as the file name in the dialog.
          </p>
          <p>
            The value in Directory is updated in the <var>RunDialog</var> method when the dialog for the control has been executed successfully.
          </p>
        </descr>
        <seealso>
          <link id="TDirectoryEdit.RootDir"/>
          <link id="TDirectoryEdit.RunDialog"/>
          <link id="TDirectoryEdit.GetDialogResult"/>
          <link id="TDirectoryEdit.OnAcceptDirectory"/>
        </seealso>
      </element>

      <element name="TDirectoryEdit.RootDir">
        <short>
          The root directory for file system navigation in the control.
        </short>
        <descr>
          <p>
            <var>RootDir</var> is a <var>String</var> property which identifies the root directory for file system navigation in the Select Directory dialog for the control. Its value, along with <var>Directory</var>, is used in the <var>CreateDialog</var> method to configure the dialog.
          </p>
          <p>
            RootDir is relevant when Directory does not represent a valid path on the local file system. It is used as the initial directory in the Select Directory dialog. When Directory is a valid file path, RootDir is ignored.
          </p>
        </descr>
        <seealso>
          <link id="TDirectoryEdit.Directory"/>
          <link id="TDirectoryEdit.CreateDialog"/>
          <link id="TDirectoryEdit.DialogOptions"/>
        </seealso>
      </element>

      <element name="TDirectoryEdit.OnAcceptDirectory">
        <short>
          <var>OnAcceptDirectory</var> - event handler for accepting the name of a directory.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TDirectoryEdit.DialogTitle">
        <short>
          <var>DialogTitle</var> - the title that appears on the Select Directory dialog.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TDirectoryEdit.DialogOptions">
        <short></short>
        <descr>
          <p>
            The default value for the property is defined in the <var>DefaultOpenDialogOptions</var> set type.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <element name="TDirectoryEdit.ShowHidden">
        <short>
          <var>ShowHidden</var> - if True, display names of hidden directories.
        </short>
        <descr>
          <p>
            <var>ShowHidden</var> - if True, display names of hidden directories. In Windows etc, show directories under 'Windows' and branches; in Linux etc show directories with preceding dot e.g. '.Lazarus'.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TDirectoryEdit.ButtonCaption">
        <short>Text displayed on the button for the control.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TDirectoryEdit.ButtonCursor">
        <short>
          Cursor shape displayed when the mouse hovers over the button for the control.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TDirectoryEdit.ButtonHint">
        <short>Hint displayed when the mouse hovers over the button for the control.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TDirectoryEdit.ButtonOnlyWhenFocused" link="#LCL.EditBtn.TCustomEditButton.ButtonOnlyWhenFocused"/>
      <element name="TDirectoryEdit.ButtonWidth" link="#LCL.EditBtn.TCustomEditButton.ButtonWidth"/>
      <element name="TDirectoryEdit.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TDirectoryEdit.DirectInput" link="#LCL.EditBtn.TCustomEditButton.DirectInput"/>
      <element name="TDirectoryEdit.Glyph" link="#lcl.editbtn.TCustomEditButton.Glyph"/>
      <element name="TDirectoryEdit.NumGlyphs" link="#lcl.editbtn.TCustomEditButton.NumGlyphs"/>
      <element name="TDirectoryEdit.Images" link="#lcl.editbtn.TCustomEditButton.Images"/>
      <element name="TDirectoryEdit.ImageIndex" link="#lcl.editbtn.TCustomEditButton.ImageIndex"/>
      <element name="TDirectoryEdit.ImageWidth" link="#lcl.editbtn.TCustomEditButton.ImageWidth"/>
      <element name="TDirectoryEdit.Flat" link="#LCL.EditBtn.TCustomEditButton.Flat"/>
      <element name="TDirectoryEdit.FocusOnButtonClick" link="#lcl.editbtn.TCustomEditButton.FocusOnButtonClick"/>
      <element name="TDirectoryEdit.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TDirectoryEdit.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TDirectoryEdit.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TDirectoryEdit.AutoSelect" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.AutoSelect"/>
      <element name="TDirectoryEdit.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TDirectoryEdit.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TDirectoryEdit.BorderStyle" link="#LCL.Controls.TControl.BorderStyle"/>
      <element name="TDirectoryEdit.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TDirectoryEdit.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TDirectoryEdit.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TDirectoryEdit.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TDirectoryEdit.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TDirectoryEdit.Layout" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.Layout"/>
      <element name="TDirectoryEdit.MaxLength" link="#LCL.StdCtrls.TCustomEdit.MaxLength"/>
      <element name="TDirectoryEdit.ParentBidiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TDirectoryEdit.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TDirectoryEdit.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TDirectoryEdit.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TDirectoryEdit.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TDirectoryEdit.ReadOnly" link="#LCL.StdCtrls.TCustomEdit.ReadOnly"/>
      <element name="TDirectoryEdit.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TDirectoryEdit.Spacing" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.Spacing"/>
      <element name="TDirectoryEdit.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TDirectoryEdit.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TDirectoryEdit.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TDirectoryEdit.OnButtonClick" link="#lcl.editbtn.TCustomEditButton.OnButtonClick"/>
      <element name="TDirectoryEdit.OnChange" link="#LCL.StdCtrls.TCustomEdit.OnChange"/>
      <element name="TDirectoryEdit.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TDirectoryEdit.OnContextPopup" link="#lcl.groupededit.TCustomAbstractGroupedEdit.OnContextPopup"/>
      <element name="TDirectoryEdit.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TDirectoryEdit.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TDirectoryEdit.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TDirectoryEdit.OnEditingDone" link="#LCL.Controls.TControl.OnEditingDone"/>
      <element name="TDirectoryEdit.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TDirectoryEdit.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TDirectoryEdit.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TDirectoryEdit.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TDirectoryEdit.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TDirectoryEdit.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TDirectoryEdit.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TDirectoryEdit.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TDirectoryEdit.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TDirectoryEdit.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TDirectoryEdit.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TDirectoryEdit.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TDirectoryEdit.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TDirectoryEdit.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TDirectoryEdit.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TDirectoryEdit.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TDirectoryEdit.Text" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.Text"/>
      <element name="TDirectoryEdit.TextHint" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.TextHint"/>

      <element name="TAcceptDateEvent">
        <short>
          <var>TAcceptDateEvent</var> - generic event handling method for accepting a date from a dialog.
        </short>
        <descr>
          <p>
            <var>TAcceptDateEvent</var> is an object procedure which specifies an event handler used to examine and verify a <var>TDateTime</var> value.
          </p>
          <p>
            <var>Sender</var>is the object generating the event notification.
          </p>
          <p>
            <var>ADate</var> is the <var>TDateTime</var> value examined in the event handler.
          </p>
          <p>
            <var>AcceptDate</var> is a variable Boolean argument which indicates if the TDateTime value meets the criteria implemented in the event handler. Set AcceptDate to <b>False</b> to indicate that the TDateTime value should be rejected.
          </p>
          <p>
            TAcceptDateEvent is the type used to implement the <var>OnAcceptDate</var> property in <var>TDateEdit</var>.
          </p>
        </descr>
        <seealso>
          <link id="TDateEdit.OnAcceptDate"/>
        </seealso>
      </element>
      <element name="TAcceptDateEvent.Sender">
        <short>Object generating the event notification.</short>
      </element>
      <element name="TAcceptDateEvent.ADate">
        <short>TDateTime value examined in the method.</short>
      </element>
      <element name="TAcceptDateEvent.AcceptDate">
        <short>Indicates if the Date/Time can be accepted when True.</short>
      </element>

      <element name="TCustomDateEvent">
        <short>
          Specifies an event handler used to examine or alter a String with a date value.
        </short>
        <descr>
          <p>
            <var>TCustomDateEvent</var> is an object procedure which specifies an event handler used to examine or alter a <var>String</var> with a date value in an arbitrary format.
          </p>
          <p>
            <var>Sender</var> is the object generating the event notification.
          </p>
          <p>
            <var>ADate</var> is a variable <var>String</var> argument which can be examined or altered in the event handler.
          </p>
          <p>
            TCustomDateEvent is the type used to implement the <var>OnCustomDate</var> event handler in <var>TDateEdit</var>.
          </p>
        </descr>
        <seealso>
          <link id="TDateEdit.OnCustomDate"/>
        </seealso>
      </element>
      <element name="TCustomDateEvent.Sender">
        <short>Object generating the event notification.</short>
      </element>
      <element name="TCustomDateEvent.ADate">
        <short>
          Variable String argument which can be examined or altered in the event handler.
        </short>
      </element>

      <element name="TDateOrder">
        <short>
          Controls the display order for Month, Day, and Year portions of a date value.
        </short>
        <descr>
          <p>
            <var>TDateOrder</var> is an enumerated type with values that indicate the display order for the Month, Day, and Year portions of a date value.
          </p>
          <p>
            TDateOrder is the type used to implement the <var>DateOrder</var> property in <var>TDateEdit</var>, and passed as an argument to the <var>ParseDate</var> routine in the implementation for the unit.
          </p>
        </descr>
        <seealso>
          <link id="TDateEdit.DateOrder"/>
        </seealso>
      </element>
      <element name="TDateOrder.doNone">
        <short>No order is specified for the Year, Month, and Day values.</short>
      </element>
      <element name="TDateOrder.doMDY">
        <short>Displayed in Month, Day, Year order.</short>
      </element>
      <element name="TDateOrder.doDMY">
        <short>Displayed in Day, Month, Year order.</short>
      </element>
      <element name="TDateOrder.doYMD">
        <short>Displayed in Year, Month, Day order.</short>
      </element>

      <element name="TDateEdit">
        <short>
          <var>TDateEdit</var> - an EditBox to hold a date, with an attached SpeedButton that will summon a date selection (calendar) dialog.
        </short>
        <descr>
          <p>
            <var>TDateEdit</var> is a <var>TCustomEditButton</var> descendant which implements a grouped edit control for entering a date value. The control uses an <var>Edit</var> and a <var>Button</var>, as defined in the ancestor class, and implements a Calendar dialog to select a date value when the Button is clicked. The value is stored in the <var>Date</var> property as a <var>TDateTime</var> value.
          </p>
          <p>
            TDateEdit provides additional properties which are used to configure the Edit and Button controls and the dialog executed when Button is clicked.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEditButton"/>
        </seealso>
      </element>

      <element name="TDateEdit.FDateOrder"/>
      <element name="TDateEdit.FDefaultToday"/>
      <element name="TDateEdit.FDisplaySettings"/>
      <element name="TDateEdit.FDroppedDown"/>
      <element name="TDateEdit.FOnAcceptDate"/>
      <element name="TDateEdit.FOnCustomDate"/>
      <element name="TDateEdit.FFixedDateFormat"/>
      <element name="TDateEdit.FFreeDateFormat"/>
      <element name="TDateEdit.FDate"/>
      <element name="TDateEdit.FUpdatingDate"/>

      <element name="TDateEdit.SetFreeDateFormat">
        <short>Sets the value for the DateFormat property.</short>
        <descr/>
        <seealso>
          <link id="TDateEdit.DateFormat"/>
        </seealso>
      </element>
      <element name="TDateEdit.SetFreeDateFormat.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TDateEdit.TextToDate">
        <short>
          Converts the specified text to a TDateTime value with an optional default value.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDateEdit.TextToDate.Result">
        <short>TDateTime value for the specified text.</short>
      </element>
      <element name="TDateEdit.TextToDate.AText">
        <short>Text examined in the method.</short>
      </element>
      <element name="TDateEdit.TextToDate.ADefault">
        <short>Default TDateTime value used when the text cannot be converted.</short>
      </element>

      <element name="TDateEdit.GetDate">
        <short>Gets the value for the Date property.</short>
        <descr/>
        <seealso>
          <link id="TDateEdit.SetDate"/>
          <link id="TDateEdit.Date"/>
        </seealso>
      </element>
      <element name="TDateEdit.GetDate.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TDateEdit.SetDate">
        <short>Sets the value for the Date property.</short>
        <descr/>
        <seealso>
          <link id="TDateEdit.GetDate"/>
          <link id="TDateEdit.Date"/>
        </seealso>
      </element>
      <element name="TDateEdit.SetDate.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TDateEdit.CalendarPopupReturnDate">
        <short>
          Implements the OnReturnDate event handler used in the dialog in the control.
        </short>
        <descr>
          <p>
            <var>CalendarPopupReturnDate</var> is a procedure which implements the <var>TReturnDateEvent</var> event handler used to validate and store the date returned from the dialog for the control. It is passed as an argument when calling the <var>ShowCalendarPopup</var> routine in the <var>ButtonClick</var> method.
          </p>
          <p>
            CalendarPopupReturnDate signals the <var>OnAcceptDate</var> event handler (when assigned) to accept or reject the value in <var>ADate</var>. The value in <var>ADate</var> is stored in the <var>Date</var> property when accepted in <var>OnAcceptDate</var>.
          </p>
          <p>
            CalendarPopupReturnDate handles any exception which occurs in the method, or in the OnAcceptDate event handler, and displays a Message Dialog with the message from the exception.
          </p>
        </descr>
        <seealso>
          <link id="TDateEdit.ButtonClick"/>
          <link id="TDateEdit.OnAcceptDate"/>
          <link id="TDateEdit.Date"/>
        <link id="#lcl.calendarpopup.ShowCalendarPopup">ShowCalendarPopup</link>
        </seealso>
      </element>
      <element name="TDateEdit.CalendarPopupReturnDate.Sender">
        <short>Object generating the event notification.</short>
      </element>
      <element name="TDateEdit.CalendarPopupReturnDate.ADate">
        <short>Date/Time value examined and stored in the method.</short>
      </element>

      <element name="TDateEdit.CalendarPopupShowHide">
        <short>
          Implements the event handler used to toggle the visibility of the dialog form for the control.
        </short>
        <descr>
          <p>
            <var>CalendarPopupShowHide</var> is a procedure which implements the event handler used to toggle the visibility of the dialog form for the control. CalendarPopupShowHide is passed as an argument when calling the <var>ShowCalendarPopup</var> routine in the <var>ButtonClick</var> method.
          </p>
          <p>
            CalendarPopupShowHide checks the visibility of the form in <var>Sender</var> (a <var>TCalendarPopupForm</var> in this usage), and assigns the value to the <var>DroppedDown</var> property in the class instance.
          </p>
        </descr>
        <seealso>
          <link id="TDateEdit.ButtonClick"/>
          <link id="TDateEdit.DroppedDown"/>
          <link id="#lcl.calendarpopup.ShowCalendarPopup">ShowCalendarPopup</link>
        </seealso>
      </element>
      <element name="TDateEdit.CalendarPopupShowHide.Sender">
        <short>
          Object generating the event notification; the TCalendarPopupForm instance in this case.
        </short>
      </element>

      <element name="TDateEdit.SetDateOrder">
        <short>Sets the value for the DateOrder property.</short>
        <descr></descr>
        <seealso>
          <link id="TDateEdit.DateOrder"/>
        </seealso>
      </element>
      <element name="TDateEdit.SetDateOrder.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TDateEdit.DateToText">
        <short>Converts the specified TDateTime value to a string.</short>
        <descr>
          <p>
            <var>DateToText</var> is a <var>String</var> function used to convert the <var>TDateTime</var> value in the <var>Value</var> parameter to its textual representation. The return value is an empty String (<b>''</b>) when Value is equal to the <var>NullDate</var> constant.
          </p>
          <p>
            DateToText uses <var>DefaultFormatSettings</var> to generate the return value when <var>DateOrder</var> is <var>doNone</var> using the short date format in the <var>DateFormat</var> property. When DateOrder contains another value from the enumeration, the edit mask for the fixed date format is used to generate the return value.
          </p>
          <p>
            DateToText is used in the implementation of the <var>SetDate</var>, <var>RealSetText</var>, and <var>EditEditingDone</var> methods.
          </p>
        </descr>
        <seealso>
          <link id="TDateEdit.Date"/>
          <link id="TDateEdit.EditEditingDone"/>
          <link id="TDateEdit.RealSetText"/>
          <link id="#rtl.sysutils.DefaultFormatSettings">DefaultFormatSettings</link>
          <link id="#rtl.sysutils.DateToStr">DateToStr</link>
          <link id="#rtl.sysutils.FormatDateTime">FormatDateTime</link>
        </seealso>
      </element>
      <element name="TDateEdit.DateToText.Result">
        <short>Text for the converted date/time value.</short>
      </element>
      <element name="TDateEdit.DateToText.Value">
        <short>TDateTime vale converted in the method.</short>
      </element>

      <element name="TDateEdit.WSRegisterClass">
        <short/>
        <short>Registers the class reference used to create new instances of the class.</short>
        <seealso/>
      </element>

      <element name="TDateEdit.GetDefaultGlyphName" link="#LCL.EditBtn.TCustomEditButton.GetDefaultGlyphName">
        <short>Gets the default glyph name displayed on the Button for the control.</short>
        <descr>
          <p>
            <var>GetDefaultGlyphName</var> is overridden in <var>TDateEdit</var> to return the resource name specified in the <var>ResBtnCalendar</var> constant.
          </p>
        </descr>
        <seealso>
          <link id="ResBtnCalendar"/>
          <link id="TCustomEditButton.GetDefaultGlyphName"/>
        </seealso>
      </element>
      <element name="TDateEdit.GetDefaultGlyphName.Result">
        <short>Resource name for the default glyph.</short>
      </element>

      <element name="TDateEdit.ButtonClick" link="#lcl.editbtn.TCustomEditButton.ButtonClick">
        <short>
          Implements the handler executed when the Button for the control is clicked.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TDateEdit.EditDblClick" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.EditDblClick">
        <short>Performs actions needed when the Edit in the control is double clicked.</short>
        <descr>
          <p>
            <var>EditDblClick</var> is an overridden procedure in <var>TDateEdit</var>. It calls the inherited method, and checks to ensure that the control is not marked as <var>ReadOnly</var> before calling the <var>ButtonClick</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TDateEdit.ReadOnly"/>
          <link id="TDateEdit.ButtonClick"/>
        </seealso>
      </element>

      <element name="TDateEdit.EditEditingDone">
        <short>Implement the OnEditingDone event handler for the Edit in the control.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TDateEdit.SetDirectInput">
        <short>Sets the value in the DirectInput property.</short>
        <descr>
          <p>
            <var>SetDirectory</var> is overridden in <var>TDateEdit</var> to synchronize the values in the Text and Date properties when DirectInput is changed.
          </p>
        </descr>
        <seealso>
          <link id="TDateEdit.Date"/>
          <link id="TDateEdit.DefaultToday"/>
          <link id="#lcl.groupededit.TCustomAbstractGroupedEdit.DirectInput">TCustomAbstractGroupedEdit.DirectInput</link>
          <link id="#lcl.groupededit.TCustomAbstractGroupedEdit.Text">TCustomAbstractGroupedEdit.Text</link>
          <link id="NullDate"/>
        </seealso>
      </element>
      <element name="TDateEdit.SetDirectInput.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TDateEdit.RealSetText">
        <short>Sets the value for the control.</short>
        <descr>
          <p>
            <var>RealSetText</var> is overridden in <var>TDateEdit</var> to ensure that <var>DefaultToday</var> is used to set the <var>Date</var> when <var>Text</var> is an empty string. Calls the inherited RealSetText method.
          </p>
        </descr>
        <seealso>
          <link id="TDateEdit.DefaultToday"/>
          <link id="TDateEdit.Date"/>
          <link id="#lcl.groupededit.TCustomAbstractGroupedEdit.Text">TCustomAbstractGroupedEdit.Text</link>
        </seealso>
      </element>
      <element name="TDateEdit.RealSetText.AValue">
        <short>New value for the control.</short>
      </element>

      <element name="TDateEdit.SetDateMask">
        <short>
          Applies a mask to the Edit control suitable for the DateOrder in the control.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TDateEdit.Loaded">
        <short>
          Performs actions needed when the component has finished loading in the LCL streaming mechanism.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TDateEdit.Create">
        <short>
          <var>Create</var> - constructor for <var>TDateEdit</var>: calls inherited <var>Create</var> and sets defaults.</short>
        <descr>
          <p>
            <var>Create</var> - constructor for <var>TDateEdit</var>: calls inherited <var>Create</var> and sets defaults.
          </p>
          <p>
            Initializes the dialog title, caption, display settings, and the default date.
          </p>
        </descr>
        <errors/>
        <seealso>
          <link id="TCustomEditButton.Create"/>
        </seealso>
      </element>
      <element name="TDateEdit.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TDateEdit.GetDateFormat">
        <short>
          <var>GetDateFormat</var> - returns the format for the date.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TDateEdit.GetDateFormat.Result">
        <short></short>
      </element>

      <element name="TDateEdit.AutoSelected" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.AutoSelected"/>

      <element name="TDateEdit.Date">
        <short>Contains the TDateTime value for the control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TDateEdit.Button" link="#LCL.EditBtn.TCustomEditButton.Button"/>

      <element name="TDateEdit.DroppedDown">
        <short>Indicates the dialog for control is visible when True.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TDateEdit.CalendarDisplaySettings">
        <short>
          <var>CalendarDisplaySettings</var> - governs how the calendar dialog is displayed.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TDateEdit.OnAcceptDate">
        <short>
          <var>OnAcceptDate</var> - event handler for accepting the date selected in the calendar dialog.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TDateEdit.OnCustomDate">
        <short>
          <var>OnCustomDate</var> - event handler for inserting a custom date.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TDateEdit.ReadOnly">
        <short>Indicates if the value for the control can be changed.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TDateEdit.DefaultToday">
        <short>
          <var>DefaultToday</var> - if True, the current date is offered as the default date (value is False by default).
        </short>
        <descr>
          Default value for the property is <b>False</b>.
        </descr>
        <seealso></seealso>
      </element>

      <element name="TDateEdit.DateOrder">
        <short>
          Controls the display order for Year, Month, and Day parts of the date value.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TDateEdit.DateFormat">
        <short>Specifies the editing format used for the date value in the control.</short>
        <descr>
          <p>
            <var>DateFormat</var> is a <var>String</var> property which contains the format used when converting the Date value to and from text. DateFormat is relevant when <var>DateOrder</var> contains the value <var>doNone</var>; when another <var>TDateOrder</var> value is used, the fixed format needed for the date order is automatically used.
          </p>
          <p>
            DateFormat is used  in the implementation of the <var>TextToDate</var> and <var>DateToText</var> methods.
          </p>
        </descr>
        <seealso>
          <link id="TDateEdit.Date"/>
          <link id="TDateEdit.DateOrder"/>
          <link id="TDateOrder"/>
        </seealso>
      </element>

      <element name="TDateEdit.ButtonOnlyWhenFocused" link="#lcl.editbtn.TCustomEditButton.ButtonOnlyWhenFocused"/>
      <element name="TDateEdit.ButtonCaption" link="#lcl.editbtn.TCustomEditButton.ButtonCaption"/>
      <element name="TDateEdit.ButtonCursor" link="#lcl.editbtn.TCustomEditButton.ButtonCursor"/>
      <element name="TDateEdit.ButtonHint" link="#lcl.editbtn.TCustomEditButton.ButtonHint"/>
      <element name="TDateEdit.ButtonWidth" link="#lcl.editbtn.TCustomEditButton.ButtonWidth"/>
      <element name="TDateEdit.Action" link="#LCL.Controls.TControl.Action"/>
      <element name="TDateEdit.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TDateEdit.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TDateEdit.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TDateEdit.AutoSelect" link="#LCL.StdCtrls.TCustomEdit.AutoSelect"/>
      <element name="TDateEdit.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TDateEdit.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TDateEdit.BorderStyle" link="#LCL.Controls.TControl.BorderStyle"/>
      <element name="TDateEdit.CharCase" link="#LCL.StdCtrls.TCustomEdit.CharCase"/>
      <element name="TDateEdit.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TDateEdit.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TDateEdit.DirectInput" link="#LCL.EditBtn.TCustomEditButton.DirectInput"/>
      <element name="TDateEdit.EchoMode" link="#LCL.StdCtrls.TCustomEdit.EchoMode"/>
      <element name="TDateEdit.Glyph" link="#lcl.editbtn.TCustomEditButton.Glyph"/>
      <element name="TDateEdit.NumGlyphs" link="#lcl.editbtn.TCustomEditButton.NumGlyphs"/>
      <element name="TDateEdit.Images" link="#lcl.editbtn.TCustomEditButton.Images"/>
      <element name="TDateEdit.ImageIndex" link="#lcl.editbtn.TCustomEditButton.ImageIndex"/>
      <element name="TDateEdit.ImageWidth" link="#lcl.editbtn.TCustomEditButton.ImageWidth"/>
      <element name="TDateEdit.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TDateEdit.EchoMode" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.EchoMode"/>
      <element name="TDateEdit.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TDateEdit.Flat" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.Flat"/>
      <element name="TDateEdit.FocusOnButtonClick" link="#lcl.editbtn.TCustomEditButton.FocusOnButtonClick"/>
      <element name="TDateEdit.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TDateEdit.Layout" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.Layout"/>
      <element name="TDateEdit.MaxLength" link="#LCL.StdCtrls.TCustomEdit.MaxLength"/>
      <element name="TDateEdit.OnButtonClick" link="#lcl.editbtn.TCustomEditButton.OnButtonClick"/>
      <element name="TDateEdit.OnChange" link="#LCL.StdCtrls.TCustomEdit.OnChange"/>
      <element name="TDateEdit.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TDateEdit.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TDateEdit.OnContextPopup" link="#lcl.groupededit.TCustomAbstractGroupedEdit.OnContextPopup"/>
      <element name="TDateEdit.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TDateEdit.OnEditingDone" link="#LCL.Controls.TControl.OnEditingDone"/>
      <element name="TDateEdit.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TDateEdit.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TDateEdit.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TDateEdit.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TDateEdit.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TDateEdit.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TDateEdit.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TDateEdit.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TDateEdit.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TDateEdit.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TDateEdit.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TDateEdit.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TDateEdit.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TDateEdit.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TDateEdit.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TDateEdit.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TDateEdit.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TDateEdit.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TDateEdit.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TDateEdit.PasswordChar" link="#LCL.StdCtrls.TCustomEdit.PasswordChar"/>
      <element name="TDateEdit.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TDateEdit.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TDateEdit.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TDateEdit.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TDateEdit.Spacing" link="#lcl.editbtn.TCustomEditButton.Spacing"/>
      <element name="TDateEdit.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TDateEdit.Text" link="#lcl.groupededit.TCustomAbstractGroupedEdit.Text"/>
      <element name="TDateEdit.TextHint" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.TextHint"/>

      <element name="TAcceptTimeEvent">
        <short>
          Specifies an event handler used to validate and accept/reject a time value.
        </short>
        <descr>
          <p>
            <var>TAcceptTimeEvent</var> specifies an event handler used to validate and accept/reject a time value in <var>TTimeEdit</var>. TAcceptTimeEvent is the type used to implement the <var>OnAcceptTime</var> property in <var>TTimeEdit</var>.
          </p>
        </descr>
        <seealso>
          <link id="TTimeEdit.OnAcceptTime"/>
        </seealso>
      </element>
      <element name="TAcceptTimeEvent.Sender">
        <short>Object generating the event notification.</short>
      </element>
      <element name="TAcceptTimeEvent.ATime">
        <short>Time value examined in the method.</short>
      </element>
      <element name="TAcceptTimeEvent.AcceptTime">
        <short>Indicates the time value is accepted when True.</short>
      </element>

      <element name="TCustomTimeEvent">
        <short>
          Specifies an event handler used to generate an arbitrary time value.
        </short>
        <descr>
          <p>
            <var>TCustomTimeEvent</var> specifies an event handler used to generate an arbitrary <var>TDateTime</var> value. TCustomTimeEvent is the type used to implement the <var>OnCustomTime</var> property in <var>TTimeEdit</var>.
          </p>
        </descr>
        <seealso>
          <link id="TTimeEdit.OnCustomTime"/>
        </seealso>
      </element>
      <element name="TCustomTimeEvent.Sender">
        <short>Object generating the event notification.</short>
      </element>
      <element name="TCustomTimeEvent.ATime">
        <short>TDateTime value generated in the event handler.</short>
      </element>

      <element name="TTimeEdit">
        <short>Implements a control used to edit time values.</short>
        <descr>
          <p>
            <var>TTimeEdit</var> is a <var>TCustomEditButton</var> descendant which implements a control used to edit a time value. TTimeEdit provides the <var>Edit</var> and <var>Button</var> properties defined in the ancestor class, and a dialog that is executed to select a time value when the Button is clicked.
          </p>
          <p>
            The time value in the control is represented using the <var>TDateTime</var> type; only the time portion of the value is significant.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEditButton"/>
        </seealso>
      </element>

      <element name="TTimeEdit.FTime"/>
      <element name="TTimeEdit.IsEmptyTime"/>
      <element name="TTimeEdit.FDefaultNow"/>
      <element name="TTimeEdit.FDroppedDown"/>
      <element name="TTimeEdit.FSimpleLayout"/>
      <element name="TTimeEdit.FOnAcceptTime"/>
      <element name="TTimeEdit.FOnCustomTime"/>

      <element name="TTimeEdit.GetTime">
        <short>Gets the value for the Time property.</short>
        <descr/>
        <seealso>
          <link id="TTimeEdit.Time"/>
        </seealso>
      </element>
      <element name="TTimeEdit.GetTime.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TTimeEdit.SetTime">
        <short>Sets the value for the Time property.</short>
        <descr/>
        <seealso>
          <link id="TTimeEdit.Time"/>
        </seealso>
      </element>
      <element name="TTimeEdit.SetTime.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TTimeEdit.SetEmptyTime">
        <short>Sets the value in the Time property to the empty time value.</short>
        <descr>
          <p>
            <var>SetEmptyTime</var> is a procedure used to set the value in the <var>Time</var> property to the empty time value. The value in <var>NullDate</var> is assigned as the value for the <var>Time</var> property. In addition, the <var>EmptyStr</var> constant is assigned as the value for the <var>Text</var> property. An internal flag is set to indicate that the time value is empty.
          </p>
          <p>
            SetEmptyTime is used in the implementation of the <var>ParseInput</var> method, and in the constructor for the class instance.
          </p>
        </descr>
        <seealso>
          <link id="TTimeEdit.ParseInput"/>
          <link id="TTimeEdit.Create"/>
          <link id="NullDate"/>
          <link id="#rtl.sysutils.EmptyStr">EmptyStr</link>
        </seealso>
      </element>

      <element name="TTimeEdit.GetLayout">
        <short>Gets the value for the SimpleLayout property.</short>
        <descr></descr>
        <seealso>
          <link id="TTimeEdit.SimpleLayout"/>
        </seealso>
      </element>
      <element name="TTimeEdit.GetLayout.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TTimeEdit.SetLayout">
        <short>Sets the value for the SimpleLayout property.</short>
        <descr/>
        <seealso>
          <link id="TTimeEdit.SimpleLayout"/>
        </seealso>
      </element>
      <element name="TTimeEdit.SetLayout.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TTimeEdit.TimePopupReturnTime">
        <short>
          Implements the event handler used to display the popup dialog for the control, and to capture the returned time value.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TTimeEdit.TimePopupReturnTime.Sender">
        <short>Object generating the event notification.</short>
      </element>
      <element name="TTimeEdit.TimePopupReturnTime.ATime">
        <short>Time value returned from the popup dialog.</short>
      </element>

      <element name="TTimeEdit.TimePopupShowHide">
        <short>
          Implements an event handler used to toggle the visibility of the popup dialog for the control.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TTimeEdit.TimePopupShowHide.Sender">
        <short>Object generating the event notification.</short>
      </element>

      <element name="TTimeEdit.OpenTimePopup">
        <short>
          Configures and displays the popup dialog for the control.
        </short>
        <descr>
          Used in the implementation of the ButtonClick and EditDblClick methods.
        </descr>
        <seealso></seealso>
      </element>

      <element name="TTimeEdit.ParseInput">
        <short>
          Parses text in the Edit control and stores the value in the Time property.
        </short>
        <descr>
          Used in the implementation of the OpenTimePopup and EditEditingDone methods.
        </descr>
        <seealso></seealso>
      </element>

      <element name="TTimeEdit.TryParseInput">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TTimeEdit.TryParseInput.Result">
        <short></short>
      </element>
      <element name="TTimeEdit.TryParseInput.AInput">
        <short></short>
      </element>
      <element name="TTimeEdit.TryParseInput.ParseResult">
        <short></short>
      </element>

      <element name="TTimeEdit.GetDefaultGlyphName">
        <short>
          Gets the resource name for the default glyph displayed on the Button for the control.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TTimeEdit.GetDefaultGlyphName.Result">
        <short>Resource name for the glyph.</short>
      </element>

      <element name="TTimeEdit.ButtonClick">
        <short>
          Performs actions needed when the Button for the control is clicked.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TTimeEdit.EditDblClick">
        <short>
          Implements the OnDblClick event handler for the Edit in the control.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TTimeEdit.EditEditingDone">
        <short>
          Implements the OnEditingDone event handler for the Edit in the control.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TTimeEdit.Create">
        <short>Constructor for the class instance.</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TTimeEdit.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TTimeEdit.Time">
        <short>Represents the time value in the control.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TTimeEdit.Button" link="#lcl.editbtn.TCustomEditButton.Button"/>

      <element name="TTimeEdit.DroppedDown">
        <short>Indicates if the popup dialog for the control is visible.</short>
        <descr>
          DroppedDown is read-only Boolean property which indicates if the popup dialog for the control is visible.
        </descr>
        <seealso></seealso>
      </element>

      <element name="TTimeEdit.DefaultNow">
        <short>Indicates the current time is used for an empty time value.</short>
        <descr>
          <p>
            <var>DefaultNow</var> is a <var>Boolean</var> property which indicates if the time value defaults to the current system time when a empty time value assigned in the control. The default value for the property is <b>False</b>.
          </p>
          <p>
            DefaultNow is used in the implementation of the <var>GetTime</var> method which gets the value for the <var>Time</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TTimeEdit.Time"/>
        </seealso>
      </element>

      <element name="TTimeEdit.OnAcceptTime">
        <short>
          Event handler signalled to validate and accept/reject the time value for the control.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TTimeEdit.OnCustomTime">
        <short>
          Event handler signalled to get an arbitrary time value for the control.
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TTimeEdit.ReadOnly" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.ReadOnly"/>
      <element name="TTimeEdit.ButtonCaption" link="#lcl.editbtn.TCustomEditButton.ButtonCaption"/>
      <element name="TTimeEdit.ButtonCursor" link="#lcl.editbtn.TCustomEditButton.ButtonCursor"/>
      <element name="TTimeEdit.ButtonHint" link="#lcl.editbtn.TCustomEditButton.ButtonHint"/>
      <element name="TTimeEdit.ButtonOnlyWhenFocused" link="#lcl.editbtn.TCustomEditButton.ButtonOnlyWhenFocused"/>
      <element name="TTimeEdit.ButtonWidth" link="#lcl.editbtn.TCustomEditButton.ButtonWidth"/>
      <element name="TTimeEdit.Action" link="#LCL.Controls.TControl.Action"/>
      <element name="TTimeEdit.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TTimeEdit.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TTimeEdit.AutoSize" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.AutoSize"/>
      <element name="TTimeEdit.AutoSelect" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.AutoSelect"/>
      <element name="TTimeEdit.BidiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TTimeEdit.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TTimeEdit.BorderStyle" link="#LCL.Controls.TCustomControl.BorderStyle"/>
      <element name="TTimeEdit.CharCase" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.CharCase"/>
      <element name="TTimeEdit.Color" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.Color"/>
      <element name="TTimeEdit.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TTimeEdit.DirectInput" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.DirectInput"/>
      <element name="TTimeEdit.Glyph" link="#lcl.editbtn.TCustomEditButton.Glyph"/>
      <element name="TTimeEdit.NumGlyphs" link="#lcl.editbtn.TCustomEditButton.NumGlyphs"/>
      <element name="TTimeEdit.Images" link="#lcl.editbtn.TCustomEditButton.Images"/>
      <element name="TTimeEdit.ImageIndex" link="#lcl.editbtn.TCustomEditButton.ImageIndex"/>
      <element name="TTimeEdit.ImageWidth" link="#lcl.editbtn.TCustomEditButton.ImageWidth"/>
      <element name="TTimeEdit.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TTimeEdit.EchoMode" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.EchoMode"/>
      <element name="TTimeEdit.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TTimeEdit.Flat" link="#lcl.editbtn.TCustomEditButton.Flat"/>
      <element name="TTimeEdit.FocusOnButtonClick" link="#lcl.editbtn.TCustomEditButton.FocusOnButtonClick"/>
      <element name="TTimeEdit.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TTimeEdit.MaxLength" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.MaxLength"/>
      <element name="TTimeEdit.OnButtonClick" link="#lcl.editbtn.TCustomEditButton.OnButtonClick"/>
      <element name="TTimeEdit.OnChange" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnChange"/>
      <element name="TTimeEdit.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TTimeEdit.OnClick" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnClick"/>
      <element name="TTimeEdit.OnDblClick" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnDblClick"/>
      <element name="TTimeEdit.OnContextPopup" link="#lcl.groupededit.TCustomAbstractGroupedEdit.OnContextPopup"/>
      <element name="TTimeEdit.OnEditingDone" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnEditingDone"/>
      <element name="TTimeEdit.OnEnter" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnEnter"/>
      <element name="TTimeEdit.OnExit" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnExit"/>
      <element name="TTimeEdit.OnKeyDown" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnKeyDown"/>
      <element name="TTimeEdit.OnKeyPress" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnKeyPress"/>
      <element name="TTimeEdit.OnKeyUp" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnKeyUp"/>
      <element name="TTimeEdit.OnMouseDown" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnMouseDown"/>
      <element name="TTimeEdit.OnMouseEnter" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnMouseEnter"/>
      <element name="TTimeEdit.OnMouseLeave" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnMouseLeave"/>
      <element name="TTimeEdit.OnMouseMove" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnMouseMove"/>
      <element name="TTimeEdit.OnMouseUp" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnMouseUp"/>
      <element name="TTimeEdit.OnMouseWheel" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnMouseWheel"/>
      <element name="TTimeEdit.OnMouseWheelDown" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnMouseWheelDown"/>
      <element name="TTimeEdit.OnMouseWheelUp" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnMouseWheelUp"/>
      <element name="TTimeEdit.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TTimeEdit.OnUTF8KeyPress" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.OnUTF8KeyPress"/>
      <element name="TTimeEdit.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TTimeEdit.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TTimeEdit.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TTimeEdit.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TTimeEdit.PopupMenu" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.PopUpMenu"/>
      <element name="TTimeEdit.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>

      <element name="TTimeEdit.SimpleLayout">
        <short></short>
        <descr>
          <p>
            <var>SimpleLayout</var> is a <var>Boolean</var> property which indicates if the popup dialog for the control uses the 2 (rows) by 6 (columns) layout with 30 minute intervals between time values. The default value for the property is <b>True</b>. When set to <b>False</b>, a more detailed layout with 12 rows by 5 columns using 5 minute time intervals is used.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <element name="TTimeEdit.Spacing" link="#lcl.editbtn.TCustomEditButton.Spacing"/>
      <element name="TTimeEdit.TabStop" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.TabStop"/>
      <element name="TTimeEdit.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TTimeEdit.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TTimeEdit.Text" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.Text"/>
      <element name="TTimeEdit.TextHint" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.TextHint"/>

      <element name="TAcceptValueEvent">
        <short>
          <var>TAcceptValueEvent</var> - generic event handling method for accepting a value from a (calculator) dialog.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TAcceptValueEvent.Sender">
        <short/>
      </element>
      <element name="TAcceptValueEvent.AValue">
        <short/>
      </element>
      <element name="TAcceptValueEvent.Action">
        <short/>
      </element>

      <element name="TCalcEdit">
        <short>
          <var>TCalcEdit</var> - an EditBox to hold a numeric value, with an attached SpeedButton that displays a calculator dialog.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCalcEdit.FDialogTitle"/>
      <element name="TCalcEdit.FCalculatorLayout"/>
      <element name="TCalcEdit.FOnAcceptValue"/>
      <element name="TCalcEdit.FDialogPosition"/>
      <element name="TCalcEdit.FDialogLeft"/>
      <element name="TCalcEdit.FDialogTop"/>

      <element name="TCalcEdit.GetAsFloat">
        <short>Gets the value for the AsFloat property.</short>
        <descr/>
        <seealso>
          <link id="TCalcEdit.AsFloat"/>
        </seealso>
      </element>
      <element name="TCalcEdit.GetAsFloat.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCalcEdit.GetAsInteger">
        <short>Gets the value for the AsInteger property.</short>
        <descr/>
        <seealso>
          <link id="TCalcEdit.AsInteger"/>
        </seealso>
      </element>
      <element name="TCalcEdit.GetAsInteger.Result">
        <short>Value for the property.</short>
      </element>

      <element name="TCalcEdit.SetAsFloat">
        <short>Sets the value for the AsFloat property.</short>
        <descr/>
        <seealso>
          <link id="TCalcEdit.AsFloat"/>
        </seealso>
      </element>
      <element name="TCalcEdit.SetAsFloat.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCalcEdit.SetAsInteger">
        <short>Sets the value for the AsInteger property.</short>
        <descr/>
        <seealso>
          <link id="TCalcEdit.AsInteger"/>
        </seealso>
      </element>
      <element name="TCalcEdit.SetAsInteger.AValue">
        <short>New value for the property.</short>
      </element>

      <element name="TCalcEdit.TitleStored">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCalcEdit.TitleStored.Result">
        <short/>
      </element>

      <element name="TCalcEdit.FCalcDialog">
        <short>
          <var>FCalcDialog</var> - local variable holding the Calculator Dialog for use with this class.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCalcEdit.GetDefaultGlyphName" link="#lcl.editbtn.TCustomEditButton.GetDefaultGlyphName"/>
      <element name="TCalcEdit.GetDefaultGlyphName.Result"/>

      <element name="TCalcEdit.ButtonClick" link="#lcl.editbtn.TCustomEditButton.ButtonClick">
        <short>Performs actions needed when the button for the control is clicked.</short>
        <descr>
          <p>
            <var>ButtonClick</var> is an overridden method used to perform actions needed when the <var>Button</var> for the control is clicked. For <var>TCalcEdit</var>, the <var>RunDialog</var> method is called to execute the dialog for the control and to capture it results. When <var>FocusOnButtonClick</var> is set, the <var>FocusAndMaybeSelectAll</var> method is called to give focus to the <var>Edit</var> control in the class.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <element name="TCalcEdit.Create" link="#LCL.EditBtn.TCustomEditButton.Create">
        <short>Constructor for the class instance.</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance. Create calls the inherited constructor, and sets the default values for the following properties:
          </p>
          <dl>
            <dt>DialogTitle</dt>
            <dd>Uses the value in the rsCalculator constant</dd>
            <dt>DialogPosition</dt>
            <dd>Set to poScreenCenter</dd>
          </dl>
        </descr>
        <seealso/>
      </element>
      <element name="TCalcEdit.Create.AOwner">
        <short>Owner of the class instance.</short>
      </element>

      <element name="TCalcEdit.RunDialog">
        <short>
          <var>RunDialog</var> - perform the function of the dialog.
        </short>
        <descr>
          <p>
            <var>RunDialog</var> is a procedure used display the form which captures the value for the control. For <var>TCalcEdit</var>, a <var>TCalculatorForm</var> instance is used instead of a <var>TCommonDialog</var> descendant as used in other grouped edit controls.
          </p>
          <p>
            Property values in the class are assigned to the form, such as: DialogTitle, DialogTop, DialogLeft, DialogPosition, and AsFloat. The form is displayed modally, and its value is passed to the OnAcceptValue event handler (when assigned). The accepted value is stored in the AsFloat property.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCalcEdit.AutoSelected" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.AutoSelected"/>

      <element name="TCalcEdit.CalculatorLayout">
        <short>
          <var>CalculatorLayout</var> - normal or simple.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCalcEdit.AsFloat">
        <short>
          <var>AsFloat</var> - holds the result of the calculation as a floating-point (double precision) number.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCalcEdit.AsInteger">
        <short>
          <var>AsInteger</var> - holds the result of the calculation as an Integer.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCalcEdit.OnAcceptValue">
        <short>
          <var>OnAcceptValue</var> - event handler for accepting the result of the calculation.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCalcEdit.DialogTitle">
        <short>
          <var>DialogTitle</var> - the caption to be used for the dialog.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCalcEdit.ButtonCaption" link="#lcl.editbtn.TCustomEditButton.ButtonCaption"/>
      <element name="TCalcEdit.ButtonCursor" link="#lcl.editbtn.TCustomEditButton.ButtonCursor"/>
      <element name="TCalcEdit.ButtonHint" link="#lcl.editbtn.TCustomEditButton.ButtonHint"/>
      <element name="TCalcEdit.ButtonOnlyWhenFocused" link="#LCL.EditBtn.TCustomEditButton.ButtonOnlyWhenFocused"/>
      <element name="TCalcEdit.ButtonWidth" link="#lcl.editbtn.TCustomEditButton.ButtonWidth"/>
      <element name="TCalcEdit.Constraints" link="#LCL.Controls.TControl.Constraints"/>

      <element name="TCalcEdit.DialogPosition">
        <short></short>
        <descr>
          The default value for the property is <var>poScreenCenter</var>.
        </descr>
        <seealso></seealso>
      </element>

      <element name="TCalcEdit.DialogTop">
        <short>Vertical coordinate for the dialog displayed for the control.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCalcEdit.DialogLeft">
        <short>Horizontal coordinate for the dialog displayed for the control.</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCalcEdit.DirectInput" link="#LCL.EditBtn.TCustomEditButton.DirectInput"/>
      <element name="TCalcEdit.Glyph" link="#LCL.EditBtn.TCustomEditButton.Glyph"/>
      <element name="TCalcEdit.NumGlyphs" link="#LCL.EditBtn.TCustomEditButton.NumGlyphs"/>
      <element name="TCalcEdit.Images" link="#lcl.editbtn.TCustomEditButton.Images"/>
      <element name="TCalcEdit.ImageIndex" link="#lcl.editbtn.TCustomEditButton.ImageIndex"/>
      <element name="TCalcEdit.ImageWidth" link="#lcl.editbtn.TCustomEditButton.ImageWidth"/>
      <element name="TCalcEdit.Flat" link="#LCL.EditBtn.TCustomEditButton.Flat"/>
      <element name="TCalcEdit.FocusOnButtonClick" link="#lcl.editbtn.TCustomEditButton.FocusOnButtonClick"/>
      <element name="TCalcEdit.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TCalcEdit.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TCalcEdit.BidiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TCalcEdit.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TCalcEdit.BorderStyle" link="#LCL.Controls.TControl.BorderStyle"/>
      <element name="TCalcEdit.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TCalcEdit.AutoSelect" link="#LCL.StdCtrls.TCustomEdit.AutoSelect"/>
      <element name="TCalcEdit.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TCalcEdit.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TCalcEdit.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TCalcEdit.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TCalcEdit.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TCalcEdit.Layout" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.Layout"/>
      <element name="TCalcEdit.MaxLength" link="#LCL.StdCtrls.TCustomEdit.MaxLength"/>
      <element name="TCalcEdit.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TCalcEdit.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TCalcEdit.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TCalcEdit.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TCalcEdit.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TCalcEdit.ReadOnly" link="#LCL.StdCtrls.TCustomEdit.ReadOnly"/>
      <element name="TCalcEdit.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TCalcEdit.Spacing" link="#lcl.editbtn.TCustomEditButton.Spacing"/>
      <element name="TCalcEdit.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TCalcEdit.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TCalcEdit.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TCalcEdit.OnButtonClick" link="#lcl.editbtn.TCustomEditButton.OnButtonClick"/>
      <element name="TCalcEdit.OnChange" link="#LCL.StdCtrls.TCustomEdit.OnChange"/>
      <element name="TCalcEdit.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TCalcEdit.OnContextPopup" link="#lcl.groupededit.TCustomAbstractGroupedEdit.OnContextPopup"/>
      <element name="TCalcEdit.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TCalcEdit.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TCalcEdit.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TCalcEdit.OnEditingDone" link="#LCL.Controls.TControl.OnEditingDone"/>
      <element name="TCalcEdit.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TCalcEdit.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TCalcEdit.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TCalcEdit.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TCalcEdit.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TCalcEdit.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TCalcEdit.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TCalcEdit.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TCalcEdit.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TCalcEdit.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TCalcEdit.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TCalcEdit.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TCalcEdit.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TCalcEdit.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TCalcEdit.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TCalcEdit.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TCalcEdit.Text" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.Text"/>
      <element name="TCalcEdit.TextHint" link="#LCL.GroupedEdit.TCustomAbstractGroupedEdit.TextHint"/>

      <element name="ResBtnListFilter">
        <short>
          Resource name for the default glyph used on the Button in TCustomControlFilterEdit.
        </short>
      </element>

      <element name="ResBtnFileOpen">
        <short>
          Resource name for the default glyph used on the Button in TFileNameEdit.
        </short>
      </element>

      <element name="ResBtnSelDir">
        <short>
          Resource name for the default glyph used on the Button in TDirectoryEdit.
        </short>
      </element>

      <element name="ResBtnCalendar">
        <short>
          Resource name for the default glyph used on the Button in TDateEdit.
        </short>
      </element>

      <element name="ResBtnCalculator">
        <short>
          Resource name for the default glyph used on the Button in TCalcEdit.
        </short>
      </element>

      <element name="ResBtnTime">
        <short>
          Resource name for the default glyph used on the Button in TTimeEdit.
        </short>
      </element>

      <element name="Register">
        <short>Registers components in the unit for use in the Lazarus IDE.</short>
        <descr>
          <p>
            <var>Register</var> is the procedure used to add components to the component palette in the Lazarus IDE. Register adds the following components to the <b>Misc</b> tab on the component palette:
          </p>
          <ul>
            <li>TEditButton</li>
            <li>TFileNameEdit</li>
            <li>TDirectoryEdit</li>
            <li>TDateEdit</li>
            <li>TTimeEdit</li>
            <li>TCalcEdit</li>
          </ul>
        </descr>
      </element>

    </module>
    <!-- EditBtn -->
  </package>
</fpdoc-descriptions>
