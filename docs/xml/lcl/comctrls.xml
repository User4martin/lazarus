<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="LCL">
    <!--
  ====================================================================
    ComCtrls
  ====================================================================
-->
    <module name="ComCtrls">
      <short>Several controls commonly used in Lazarus forms</short>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Math"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="FPCAdds"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLStrConsts"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="LResources"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLIntf"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLType"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLProc"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="AvgLvlTree"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="LMessages"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="ImgList"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="ActnList"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="GraphType"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Graphics"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Menus"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Controls"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Forms"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="StdCtrls"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="ExtCtrls"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="ToolWin"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="CommCtrl"/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Buttons"/>
      <!-- object Visibility: default -->
      <!-- enumeration type Visibility: default -->
      <element name="THitTest">
        <short>
          <var>THitTest</var> - enumerated type giving permissable results of a hit test (position of a mouse click etc relative to objects on a form)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="THitTest.htAbove">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="THitTest.htBelow">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="THitTest.htNowhere">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="THitTest.htOnItem">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="THitTest.htOnButton">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="THitTest.htOnIcon">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="THitTest.htOnIndent">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="THitTest.htOnLabel">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="THitTest.htOnRight">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="THitTest.htOnStateIcon">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="THitTest.htToLeft">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="THitTest.htToRight">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="THitTests">
        <short>
          <var>THitTests</var> - set of <var>THitTest</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TStatusPanelStyle">
        <short>
          <var>TStatusPanelStyle</var> - enumerated type for panel style</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TStatusPanelStyle.psText">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TStatusPanelStyle.psOwnerDraw">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TStatusPanelBevel">
        <short>
          <var>TStatusPanelBevel</var> - enumerated type for panel bevel style</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TStatusPanelBevel.pbNone">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TStatusPanelBevel.pbLowered">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TStatusPanelBevel.pbRaised">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TPanelPart">
        <short>
          <var>TPanelPart</var> - enumerated type listing the possible parts that comprise a Panel</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TPanelPart.ppText">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TPanelPart.ppBorder">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TPanelPart.ppWidth">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TPanelParts">
        <short>
          <var>TPanelParts</var> - set ot <var>TPanelPart</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TStatusPanel">
        <short>
          <var>TStatusPanel</var> - one of the panels contained in a <var>StatusBar</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStatusPanel.FText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStatusPanel.FWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStatusPanel.FAlignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStatusPanel.FBevel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStatusPanel.FParentBiDiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStatusPanel.FStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TStatusPanel.SetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusPanel.SetAlignment.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TStatusPanel.SetBevel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusPanel.SetBevel.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TStatusPanel.SetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusPanel.SetStyle.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TStatusPanel.SetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusPanel.SetText.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TStatusPanel.SetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusPanel.SetWidth.Value">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TStatusPanel.GetDisplayName">
        <short>
          <var>GetDisplayName</var> - looks first at the <var>Text</var> property; if it is blank calls inherited method</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TCollectionItem.GetDisplayName">TCollectionItem.GetDisplayName</link>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStatusPanel.GetDisplayName.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStatusPanel.PanelChanged">
        <short>
          <var>PanelChanged</var> - method for dealing with a status panel, one or more of whose parts has changed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusPanel.PanelChanged.Parts">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStatusPanel.SetIndex">
        <short>
          <var>SetIndex</var> saves the old index value, checks that the supplied value is different then calls inherited method</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TCollectionItem.SetIndex">TCollectionItem.SetIndex</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusPanel.SetIndex.Value">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TStatusPanel.Create">
        <short>
          <var>Create</var> - constructor for <var>TStatusPanel</var>: sets default width, alignment and bevel, calls inherited <var>Create</var> and loads into StatusBar</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TCollectionItem.Create">TCollectionItem.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusPanel.Create.aCollection">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TStatusPanel.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TStatusPanel</var>: calls inherited <var>Destroy</var> and removes itself from the StatusBar</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TCollectionItem.Destroy">TCollectionItem.Destroy</link>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TStatusPanel.Assign">
        <short>
          <var>Assign</var> copies text, width, alignment, bevel and style properties from <var>Source</var> if it is of correct type, otherwise calls inherited <var>Assign</var> (which will probably raise an exception)</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusPanel.Assign.Source">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TStatusPanel.StatusBar">
        <short>The <var>StatusBar</var> that contains this <var>StatusPanel</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStatusPanel.StatusBar.Result">
        <short/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStatusPanel.Alignment">
        <short>
          <var>Alignment</var> - whether left- or right-justified or centered</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStatusPanel.Bevel">
        <short>The type of <var>Bevel</var> for the display</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStatusPanel.Style">
        <short>
          <var>Style</var> - whether text or something drawn by the owner</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStatusPanel.Text">
        <short>
          <var>Text</var> - the string for display in the StatusBar</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStatusPanel.Width">
        <short>The <var>Width</var> of this panel on the StatusBar</short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TStatusPanels">
        <short>
          <var>TStatusPanels</var> - the collection of Status Panels in this StatusBar</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStatusPanels.FStatusBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TStatusPanels.GetItem" link="#rtl.Classes.TCollection.GetItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStatusPanels.GetItem.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusPanels.GetItem.Index">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TStatusPanels.SetItem" link="#rtl.Classes.TCollection.SetItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusPanels.SetItem.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusPanels.SetItem.Value">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TStatusPanels.GetOwner">
        <short>
          <var>GetOwner</var> returns a Status Bar, overriding the inherited method</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TPersistent.GetOwner">TPersistent.GetOwner</link>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStatusPanels.GetOwner.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStatusPanels.Update" link="#rtl.Classes.TCollection.Update">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusPanels.Update.Item">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TStatusPanels.Create">
        <short>
          <var>Create</var> - constructor for <var>TStatusPanels</var>: calls inherited <var>Create</var> and attaches itself to StatusBar</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TCollection.Create">TCollection.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusPanels.Create.TheStatusBar">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TStatusPanels.Add" link="#rtl.Classes.TCollection.Add">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStatusPanels.Add.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TStatusPanels.Items" link="#rtl.Classes.TCollection.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusPanels.Items.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TStatusPanels.StatusBar">
        <short>The <var>StatusBar</var> to which this collection of Status Panels belongs</short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TStatusBar">
        <short>
          <var>TStatusBar</var> - a strip along the bottom of a form for displaying information on current status</short>
        <descr>
          <p>
            <var>TStatusBar</var> - a strip along the bottom of a form for displaying information on current status</p>
          <p>The bar may consist of a single <var>SimplePanel</var>, in which case the displayed text is contained in <var>SimpleText</var>.</p>
          <p>However if <var>SimplePanel</var> is false, then there can be multiple panels or sub-sections of the status bar, whose properties are described in <var>Panels</var>.</p>
          <p>The property <var>SimpleText</var> can be assigned programatically to display the value of some variable, such as the position of the Splitter in the example</p>
        </descr>
        <example file="extctrls/statusbar.pas"/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStatusBar.FCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStatusBar.FHandlePanelCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStatusBar.FHandleObjectNeedsUpdate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStatusBar.FHandleUpdatePanelIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStatusBar.FUpdateLock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStatusBar.FPanels">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStatusBar.FSimpleText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStatusBar.FSimplePanel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStatusBar.FOnHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TStatusBar.SetPanels">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusBar.SetPanels.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TStatusBar.SetSimpleText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusBar.SetSimpleText.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TStatusBar.SetSimplePanel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusBar.SetSimplePanel.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStatusBar.CreateWnd">
        <short>
          <var>CreateWnd</var> calls inherited method, then fixes handles if needed</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStatusBar.DestroyWnd">
        <short>
          <var>DestroyWnd</var> calls inherited method and frees handles</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.DestroyWnd">TWinControl.DestroyWnd</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStatusBar.Loaded">
        <short>
          <var>Loaded</var> calls inherited method and fixes handles if needed</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.Loaded">TWinControl.Loaded</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TStatusBar.UpdateHandleObject">
        <short>
          <var>UpdateHandleObject</var> - updates all panel parts that have been changed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusBar.UpdateHandleObject.PanelIndex">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TStatusBar.Create">
        <short>
          <var>Create</var> - constructor for <var>TStatusBar</var>: calls inherited <var>Create</var> and initialises a number of local variables</short>
        <descr>
          <p>
            <var>Create</var> - constructor for TStatusBar: calls inherited <var>Create</var> and initialises a number of local variables</p>
          <p>Among the variables initialised are:</p>
          <p>AutoHint (False), Canvas, ControlStyle, Colour, Align, AutoSize, and SimplePanel (True)</p>
        </descr>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
          <link id="#lcl.Controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusBar.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TStatusBar.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TStatusBar</var>: frees canvas and panels, then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Destroy">TComponent.Destroy</link>
          <link id="#lcl.Controls.TWinControl.Destroy">TWinControl.Destroy</link>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TStatusBar.InvalidatePanel">
        <short>
          <var>InvalidatePanel</var> - renders the panel with specified index non-valid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusBar.InvalidatePanel.PanelIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStatusBar.InvalidatePanel.PanelParts">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TStatusBar.BeginUpdate">
        <short>
          <var>BeginUpdate</var> - starts the update process</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TStatusBar.EndUpdate">
        <short>
          <var>EndUpdate</var> - finishes the update process</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TStatusBar.UpdatingStatusBar">
        <short>
          <var>UpdatingStatusBar</var> - returns True if the status bar is being updated</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStatusBar.UpdatingStatusBar.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TStatusBar.Canvas">
        <short>The <var>Canvas</var> where the Panels of the StatusBar are to be Painted</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStatusBar.Action" link="#LCL.Controls.TControl.Action">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStatusBar.Panels">
        <short>
          <var>Panels</var> - the list of strings to be placed in the sub-panels of <var>TStatusBar</var>
        </short>
        <descr>
          <p>If <var>SimplePanel</var> is false, the contents of <var>Panels</var> is displayed. </p>
          <p>Contents can be adjusted with a stringlist editor that pops up when the ellipsis (...) next to <var>Panels</var> in the Object Inspector is selected and allows insertion of an arbitrary number of sub-panels with their own strings</p>
        </descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStatusBar.SimpleText">
        <short>
          <var>SimpleText</var> - a character string containing the information to be displayed in the Status Bar</short>
        <descr>
          <p>
            <var>SimpleText</var> - a character string containing the information to be displayed in the Status Bar</p>
          <p>This is displayed if <var>SimplePanel</var> is true; otherwise the information in Panels is displayed.</p>
        </descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStatusBar.SimplePanel">
        <short>
          <var>SimplePanel </var>- boolean. Is there just one continuous panel, or several sub-panels?</short>
        <descr>
          <p>
            <var>SimplePanel </var>- boolean. Is there just one continuous panel, or several sub-panels?</p>
          <p>If true, the value of <var>SimpleText</var> is displayed; if false, the contents of <var>Panels</var> is displayed. </p>
          <p>Contents can be adjusted with a stringlist editor that pops up when the ellipsis (...) next to <var>Panels</var> is selected and allows insertion of an arbitrary number of sub-panels with their own strings</p>
        </descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStatusBar.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStatusBar.Color" link="#LCL.Controls.TControl.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStatusBar.OnDblClick" link="#LCL.Controls.TControl.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStatusBar.OnHint">
        <short>Event handler for showing a hint when required</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStatusBar.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomPage">
        <short>
          <var>TCustomPage</var>: The base type for 
          <var>Page</var>
        </short>
        <descr>
          <var>TCustomPage</var>: The base type for the tabbed pages found in notebooks
        </descr>
        <seealso>
          <link id="#lcl.ExtCtrls.Multi-PageControls">Multi-PageControls</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPage.FFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPage.FImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomPage.GetTabVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomPage.GetTabVisible.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomPage.SetImageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.SetImageIndex.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomPage.SetTabVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.SetTabVisible.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPage.WMPaint" link="#LCL.Controls.TWinControl.WMPaint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.WMPaint.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPage.SetParent" link="#LCL.Controls.TControl.SetParent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.SetParent.AParent">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomPage.Flags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPage.CMHitTest" link="#LCL.Controls.TControl.CMHitTest">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.CMHitTest.Message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPage.DestroyHandle" link="#LCL.Controls.TWinControl.DestroyHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomPage.GetPageIndex">
        <short>
          <var>GetPageIndex</var> - returns the index of the current page</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomPage.GetPageIndex.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPage.SetPageIndex">
        <short>
          <var>SetPageIndex</var> - specifies an index for the current page</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.SetPageIndex.AValue">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomPage.TabVisible">
        <short>
          <var>TabVisible</var> - is the Tab for this page visible?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPage.FTabVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPage.FOnHide">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPage.FOnShow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomPage.DialogChar" link="#LCL.Controls.TControl.DialogChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomPage.DialogChar.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.DialogChar.Message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPage.DoHide">
        <short>
          <var>DoHide</var> - perform the code for the <var>OnHide</var> event handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPage.DoShow">
        <short>
          <var>DoShow</var> - perform the code for the <var>OnShow</var> event handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomPage.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomPage</var>: calls inherited <var>Create</var> then initialises style, visibility, alignment and caption</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#lcl.Controls.TControl.Create">TControl.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.Create.TheOwner">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomPage.AdjustClientRect" link="#LCL.Controls.TWinControl.AdjustClientRect">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.AdjustClientRect.ARect">
        <short/>
      </element>
      <element name="TCustomPage.AutoSizeDelayed" link="#lcl.Controls.TControl.AutoSizeDelayed"/>
      <!-- function result Visibility: default -->
      <element name="TCustomPage.AutoSizeDelayed.Result">
        <short/>
      </element>
      <element name="TCustomPage.IsControlVisible" link="#lcl.Controls.TControl.IsControlVisible"/>
      <!-- function result Visibility: default -->
      <element name="TCustomPage.IsControlVisible.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.Visible" link="#lcl.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.PageIndex">
        <short>
          <var>PageIndex </var>- integer index value for this page in the notebook</short>
      </element>
      <element name="TCustomPage.VisibleIndex">
        <short>
          <var>VisibleIndex</var> - returns the index number of a visible page</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomPage.VisibleIndex.Result">
        <short/>
      </element>
      <element name="TCustomPage.OnHide">
        <short>
          <var>OnHide</var> - event handler for hiding this page in a notebook</short>
      </element>
      <element name="TCustomPage.OnShow">
        <short>
          <var>OnShow</var> - event handler for showing (making visible) this page of a notebook</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomPage.CanTab" link="#LCL.Controls.TControl.CanTab"/>
      <!-- function result Visibility: default -->
      <element name="TCustomPage.CanTab.Result"/>
      <!-- function Visibility: public -->
      <element name="TCustomPage.IsVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomPage.IsVisible.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.ImageIndex">
        <short>
          <var>ImageIndex</var> - integer index value for the image associated with this page</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.Left" link="#lcl.Controls.TControl.Left">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.Top" link="#lcl.Controls.TControl.Top">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.Width" link="#lcl.Controls.TControl.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.Height" link="#lcl.Controls.TControl.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.TabOrder" link="#lcl.Controls.TWinControl.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TCustomPageClass">
        <short>
          <var>TCustomPageClass</var> - class of <var>TCustomPage</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TNBPages">
        <short>
          <var>TNBPages</var> - NoteBook Pages: an array of strings containing the names of the pages</short>
      </element>
      <!-- variable Visibility: private -->
      <element name="TNBPages.FPageList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TNBPages.FNotebook">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TNBPages.Get" link="#rtl.Classes.TStrings.Get">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TNBPages.Get.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Get.Index">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TNBPages.GetCount" link="#rtl.Classes.TStrings.GetCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TNBPages.GetCount.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TNBPages.GetObject" link="#rtl.Classes.TStrings.GetObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TNBPages.GetObject.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.GetObject.Index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TNBPages.Put" link="#rtl.Classes.TStrings.Put">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Put.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Put.S">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TNBPages.Create">
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.System.TObject.Create">TObject.Create</link>
        </seealso>
        <short>
          <var>Create</var> - constructor for <var>TNBPages</var>: calls inherited <var>Create</var> then sets up the list of pages on the notebook</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Create.thePageList">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Create.theNotebook">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TNBPages.Clear" link="#rtl.Classes.TStrings.Clear">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TNBPages.Delete" link="#rtl.Classes.TStrings.Delete">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Delete.Index">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TNBPages.Insert" link="#rtl.Classes.TStrings.Insert">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Insert.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Insert.S">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TNBPages.Move" link="#rtl.Classes.TStrings.Move">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Move.CurIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Move.NewIndex">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TTabChangingEvent">
        <short>
          <var>TTabChangingEvent</var> - generic event handling method for a change in a notebook Tab</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabChangingEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabChangingEvent.AllowChange">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TTabPosition">
        <short>
          <var>TTabPosition</var> - enumerated type for position of tab relative to page: top, bottom, left or right</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabPosition.tpTop">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabPosition.tpBottom">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabPosition.tpLeft">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabPosition.tpRight">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TTabStyle">
        <short>
          <var>TTabStyle</var> - enumerated type for tab style: normal, buttons or flat buttons</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabStyle.tsTabs">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabStyle.tsButtons">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabStyle.tsFlatButtons">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TTabGetImageEvent">
        <short>
          <var>TTabGetImageEvent</var> - generic event handling method for getting an image for a Tab</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabGetImageEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabGetImageEvent.TabIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabGetImageEvent.ImageIndex">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TCTabControlOption">
        <short>
          <var>TCTabControlOption</var> - Show the close button on a tab, allow multi-line tabs</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCTabControlOption.nboShowCloseButtons">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCTabControlOption.nboMultiLine">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TCTabControlOptions">
        <short>
          <var>TCTabControlOptions</var> - set of <var>TCTabControlOption</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl">
        <short>
          <var>TCustomTabControl</var>: The base type for  <var>TTabControl</var> and  <var>TPageControl</var>
        </short>
        <descr>
          <p>
            <var>TCustom Notebook</var>: The base type for 
            <var>TTabControl</var> and 
            <var>TPageControl</var>
          </p>
          <p>A tab control has a series of <var>Tabs</var>, and it may or may not contain pages.</p>
        </descr>
        <seealso>
          <link id="#lcl.ExtCtrls.Multi-PageControls">Multi-PageControls</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FAccess">
        <short/>
        <descr/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FAddingPages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FLoadedPageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FOnChanging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FOnCloseTabClicked"/>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FOnGetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.fOnPageChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FPageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FPageIndexOnLastChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FPageList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FShowTabs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FTabPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.CNNotify">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.CNNotify.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.DoSendPageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.DoSendShowTabs">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.DoSendTabPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTabControl.GetActivePage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetActivePage.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTabControl.GetActivePageComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetActivePageComponent.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTabControl.GetPage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetPage.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.GetPage.aIndex">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTabControl.GetPageCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetPageCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTabControl.GetPageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetPageIndex.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.InsertPage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.InsertPage.APage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.InsertPage.Index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTabControl.IsStoredActivePage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.IsStoredActivePage.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.MoveTab">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.MoveTab.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.MoveTab.NewIndex">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.WSMovePage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.WSMovePage.APage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.WSMovePage.NewIndex">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.RemovePage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.RemovePage.Index">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetActivePage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetActivePage.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetActivePageComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetActivePageComponent.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetImages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetImages.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetOptions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetOptions.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetPageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetPageIndex.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetPages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetPages.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetShowTabs">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetShowTabs.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetTabPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetTabPosition.tabPos">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.ShowCurrentPage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.UpdateAllDesignerFlags">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.UpdateDesignerFlags">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.UpdateDesignerFlags.APageIndex">
        <short/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomTabControl.PageClass">
        <short>
          <var>PageClass</var> - the class of page that is included in this NoteBook</short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.CreateWnd" link="#LCL.Controls.TWinControl.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.DoCreateWnd">
        <short>
          <var>DoCreateWnd</var> - perform the code for method <var>CreateWnd</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.Change">
        <short>
          <var>Change</var> - perform the code for <var>OnChanging</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.Loaded" link="#rtl.Classes.TComponent.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.ReadState" link="#rtl.Classes.TComponent.ReadState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.ReadState.Reader">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.ShowControl" link="#LCL.Controls.TWinControl.ShowControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.ShowControl.APage">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.UpdateTabProperties">
        <short>
          <var>UpdateTabProperties</var> - apply all pending changes to the Tab</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTabControl.ChildClassAllowed" link="#LCL.Controls.TWinControl.ChildClassAllowed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.ChildClassAllowed.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.ChildClassAllowed.ChildClass">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.ActivePageComponent">
        <short>
          <var>ActivePageComponent</var> - the actual contents of the currently selected 
          
          <var>Page</var>
        </short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.ActivePage">
        <short>
          <var>ActivePage</var> - the  name (string) of the 
          
          <var>Page</var> that is currently selected and is available for interaction</short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomTabControl.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomTabControl</var>: calls inherited <var>Create</var> creates a pagelist, then sets initial bounds and default values for local variables and properties</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomTabControl.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TCustomTabControl</var>: clears and frees pages and list, then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.Destroy">TWinControl.Destroy</link>
        </seealso>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTabControl.TabIndexAtClientPos">
        <short>
          <var>TabIndexAtClientPos</var> - the index value of the Tab at the specified position 
          
          <var>ClientPos</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.TabIndexAtClientPos.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.TabIndexAtClientPos.ClientPos">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTabControl.CanTab" link="#LCL.Controls.TControl.CanTab"/>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.CanTab.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTabControl.GetImageIndex">
        <short>
          <var>GetImageIndex</var> - find the index number of the image associated with the specified Page index</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetImageIndex.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.GetImageIndex.ThePageIndex">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTabControl.IndexOf">
        <short>
          <var>IndexOf</var> - returns the index value of a specified page</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.IndexOf.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.IndexOf.APage">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTabControl.CustomPage">
        <short>
          <var>CustomPage</var> - returns the page specified by 
          
          <var>Index</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.CustomPage.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.CustomPage.Index">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTabControl.CanChangePageIndex">
        <short>
          <var>CanChangePageIndex</var> - determine whether it is permissible to change the index of the page</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.CanChangePageIndex.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTabControl.GetMinimumTabWidth">
        <short>
          <var>GetMinimumTabWidth</var> - find the smallest permissible tab width</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetMinimumTabWidth.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTabControl.GetMinimumTabHeight">
        <short>
          <var>GetMinimumTabHeight</var> - find the least permissible height for a tab</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetMinimumTabHeight.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTabControl.DoCloseTabClicked">
        <short>
          <var>DoCloseTabClicked</var> - perform the action associated with clicking the Close tab for this page (<var>OnCloseTabClicked</var>)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.DoCloseTabClicked.APage">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTabControl.Images">
        <short>
          <var>Images</var> - the list of images associated with the pages of this notebook</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTabControl.OnChanging">
        <short>
          <var>OnChanging</var> - event handler for changing a tab</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTabControl.OnCloseTabClicked">
        <short>
          <var>OnCloseTabClicked</var> - event handler for clicking on the Close button to close a tab</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTabControl.OnGetImageIndex">
        <short>
          <var>OnGetImageIndex</var> - event handler for getting an image index</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTabControl.OnChange">
        <short>
          <var>OnChange</var> - event handler for a change in the page</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTabControl.Options">
        <short>The set of  <var>Options</var> for the Notebook: Show close buttons on the tabs, multi-line tabs</short>
        <descr>
          <p>The set of  <var>Options</var> for the Notebook: </p>
          <p>
            <var>nboShowCloseButtons</var> (display a little CloseButton on the Tab next to the label, to allow the user to close that tab),</p>
          <p>
            <var>nboMultiLine</var> (allows multi-line captions on the Tabs)</p>
        </descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTabControl.Page">
        <short>The current <var>Page</var> of the Notebook</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.Page.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTabControl.PageCount">
        <short>
          <var>PageCount</var> - the number of Pages in the Notebook</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTabControl.PageIndex">
        <short>
          <var>PageIndex</var> - Index number of the current page</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTabControl.PageList">
        <short>
          <var>PageList</var> - the Indexed list of the Pages in the Notebook</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTabControl.Pages">
        <short>The contents of the <var>Pages</var> in the Notebook (as Strings)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTabControl.ShowTabs">
        <short>
          <var>ShowTabs</var> - if True (default condition), show the tabs for each page</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTabControl.TabPosition">
        <short>
          <var>TabPosition</var> - top, bottom, left or right</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomTabControl.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TNBPages.PageListChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.PageListChange.Ptr">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.PageListChange.AnAction">
        <short/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FPageIndexOnLastShow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTabControl.FindVisiblePage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.FindVisiblePage.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.FindVisiblePage.Index">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.AddRemovePageHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.AddRemovePageHandle.APage">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.PageRemoved">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.PageRemoved.Index">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTabControl.DialogChar" link="#LCL.Controls.TControl.DialogChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.DialogChar.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.DialogChar.Message">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTabControl.GetControlClassDefaultSize" link="#LCL.Controls.TControl.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetControlClassDefaultSize.Result">
        <short/>
      </element>
      <element name="TCustomTabControl.GetCapabilities">
        <short>
          <var>GetCapabilities</var> - returns the set of capabilities</short>
      </element>
      <element name="TCTabControlCapability">
        <short>
          <var>TCTabControlCapability</var> - enumerated type containing possible capabilities of a notebook</short>
        <descr>nbcShowCloseButtons, nbcMultiLine, nbcPageListPopup, nbcShowAddTabButton</descr>
      </element>
      <element name="TCTabControlCapabilities">
        <short>
          <var>TCTabControlCapabilities</var> - set of <var>TCTabControlCapability</var>
        </short>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TTabStyle" link="#LCL.ExtCtrls.TTabStyle">
        <short>TTabStyle</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabStyle.tsTabs">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabStyle.tsButtons">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabStyle.tsFlatButtons">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TTabSheet">
        <short>
          <var>TTabSheet</var> - individual page of a <var>TPageControl</var>; a more elaborate version of <var>TPage</var>
        </short>
        <descr>
          <p>
            <var>TTabSheet</var> - individual page of a <var>TPageControl</var>; a more elaborate version of <var>TPage</var>
          </p>
          <p>Contains the following features lacked by <var>TPage</var>:</p>
          <ul>
            <li>Drag/Drop properties</li>
            <li>Ability to Enable/Disable the page</li>
            <li>Ability to make the Tab visible or not</li>
          </ul>
        </descr>
        <errors/>
        <seealso>
          <link id="#lcl.ExtCtrls.Multi-PageControls">Multi-PageControls</link>
          <link id="#lcl.stdctrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTabSheet.FOnHide">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTabSheet.FOnShow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTabSheet.GetPageControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTabSheet.GetPageControl.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTabSheet.GetTabIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTabSheet.GetTabIndex.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTabSheet.SetPageControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabSheet.SetPageControl.APageControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTabSheet.SetTabIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabSheet.SetTabIndex.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabSheet.DoHide">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabSheet.DoShow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TTabSheet.Create">
        <short>calls inherited <var>Create</var> and zeroes <var>ImageIndex</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabSheet.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TTabSheet.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TTabSheet</var>: detaches from the Host Dock Site and calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TTabSheet.PageControl">
        <short>The <var>PageControl</var> of which this TabSheet is a member</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTabSheet.TabIndex">
        <short>
          <var>TabIndex</var> - the Index value or sequence number of this TabSheet</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.Caption" link="#LCL.Controls.TControl.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.ChildSizing" link="#LCL.Controls.TWinControl.ChildSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.ClientHeight" link="#LCL.Controls.TControl.ClientHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.ClientWidth" link="#LCL.Controls.TControl.ClientWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.Enabled" link="#LCL.Controls.TControl.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.Height" link="#LCL.Controls.TControl.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.ImageIndex" link="TCustomPage.ImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.Left" link="#LCL.Controls.TControl.Left">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.OnHide" link="TCustomPage.OnHide">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.OnResize" link="#LCL.Controls.TControl.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.OnShow" link="TCustomPage.OnShow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.PageIndex" link="TCustomPage.PageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.ParentFont" link="#LCL.Controls.TControl.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.TabVisible" link="TCustomPage.TabVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.Top" link="#LCL.Controls.TControl.Top">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabSheet.Width" link="#LCL.Controls.TControl.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TPageControl">
        <short>
          <var>TPageControl</var> - provides a series of tabs along the edge of a multi-page component, to allow selection of one of the pages (TTabSheet) of the component.</short>
        <descr>
          <p>
            <var>TPageControl</var> - provides a series of tabs along the edge of a multi-page component, to allow selection of one of the pages (<var>TTabSheet</var>) of the component.</p>
          <p>To use <var>TPageControl</var>, select its icon from the Common Controls tab of the IDE Component Palette, and place it at the desired location on the Form.</p>
          <p>Use the Form Designer and Object Inspector to adjust its shape, size, alignment, anchoring, docking and other properties, then select the object and right click with the mouse to bring up a pop-up menu whose frst item is 'AddPage'. After you have added as many pages as you need, the individual pages can be edited by selecting <var>ActivePage</var> in the Object Inspector, choosing the page required, and editing its properties. </p>
          <p>While a given page is selected, it is also possible to drop other controls (such as buttons, memo boxes etc) on to the page from the Component Palette.</p>
          <p>Inherits most of its properties from <link id="#lcl.ComCtrls.TCustomTabControl">TCustomTabControl</link>
          </p>
        </descr>
        <errors/>
        <seealso>
          <link id="#lcl.ExtCtrls.Multi-PageControls">Multi-PageControls</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TPageControl.FOnChanging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TPageControl.GetActivePageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPageControl.GetActivePageIndex.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TPageControl.GetActiveTabSheet">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPageControl.GetActiveTabSheet.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TPageControl.GetTabIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPageControl.GetTabIndex.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TPageControl.GetTabSheet">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPageControl.GetTabSheet.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPageControl.GetTabSheet.Index">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TPageControl.SetActivePageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPageControl.SetActivePageIndex.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TPageControl.SetActiveTabSheet">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPageControl.SetActiveTabSheet.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TPageControl.SetTabIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPageControl.SetTabIndex.AValue">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TPageControl.Create">
        <short>
          <var>Create</var> - constructor for <var>TPageControl</var>: sets <var>PageClass</var> to <var>TTabSheet</var> then calls inherited <var>Create</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
          <link id="TCustomTabControl.Create">TCustomTabControl.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPageControl.Create.TheOwner">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TPageControl.FindNextPage">
        <short>
          <var>FindNextPage</var> - returns the next page (<var>TTabSheet</var>) in the sequence</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPageControl.FindNextPage.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPageControl.FindNextPage.CurPage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPageControl.FindNextPage.GoForward">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPageControl.FindNextPage.CheckTabVisible">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TPageControl.SelectNextPage">
        <descr>
          <p>If GoForward is True, goes to next (higher index) page;</p>
          <p>if False, goes to previous (lower index)</p>
        </descr>
        <errors/>
        <seealso/>
        <short>
          <var>SelectNextPage</var> - goes to next page and selects it</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPageControl.SelectNextPage.GoForward">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TPageControl.SelectNextPage">
        <short>
          <var>SelectNextPage</var> - checking that its tab is visible</short>
        <descr>
          <p>If GoForward is True, goes to next (higher index) page;</p>
          <p>if False, goes to previous (lower index)</p>
          <p>If <var>CheckTabVisible</var> is True, will only move if the tab is visible</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPageControl.SelectNextPage.GoForward">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPageControl.SelectNextPage.CheckTabVisible">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TPageControl.ActivePageIndex">
        <short>
          <var>ActivePageIndex</var> - index value of currently selected (active) page</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TPageControl.Pages">
        <short>
          <var>Pages</var> - the actual Pages (<var>TTabSheet</var>) that comprise the component</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.Pages">TCustomTabControl.Pages</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPageControl.Pages.Index">
        <short/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.ActivePage">
        <short>
          <var>ActivePage</var> - the currently selected active page (<var>TTabSheet</var>)</short>
        <descr>
          <p>
            <var>ActivePage</var> - the currently selected active page (<var>TTabSheet</var>)</p>
          <p>Note that this overrides the definition in <var>TCustomTabControl</var>, where <var>ActivePage</var> is defined as a String.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.Align" link="#LCL.Controls.TControl.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.Anchors" link="#LCL.Controls.TControl.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.Constraints" link="#LCL.Controls.TControl.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.Enabled" link="#LCL.Controls.TControl.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.Font" link="#LCL.Controls.TControl.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.Images" link="TCustomTabControl.Images">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.ParentFont" link="#LCL.Controls.TControl.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.TabIndex">
        <short>
          <var>TabIndex</var> - the Index value of the currently selected Tab</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.TabPosition" link="TCustomTabControl.TabPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.OnChange">
        <short><var>OnChange</var> - Occurs immediately after a tab is selected.</short>
        <descr>Occurs immediately after a tab is selected.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.OnChanging">
        <short><var>OnChanging</var> - Occurs immediately before a tab is selected.</short>
        <descr>Occurs immediately before a tab is selected.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.OnGetImageIndex" link="TCustomTabControl.OnGetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPageControl.OnResize" link="#LCL.Controls.TControl.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TTabControlStrings">
        <short>
          <var>TTabControlStrings</var> - the Strings that appear on the tabs of <var>TTabControl</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTabControlStrings.FHotTrack">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTabControlStrings.FImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTabControlStrings.FMultiLine">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTabControlStrings.FMultiSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTabControlStrings.FOwnerDraw">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTabControlStrings.FRaggedRight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTabControlStrings.FScrollOpposite">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTabControlStrings.FTabControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTabControlStrings.FTabHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTabControlStrings.FTabWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTabControlStrings.FUpdateCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TTabControlStrings.GetTabIndex">
        <short>
          <var>GetTabIndex</var> - returns the Index value of the current Tab</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTabControlStrings.GetTabIndex.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlStrings.SetHotTrack">
        <short>
          <var>SetHotTrack</var> - specifies the status of HotTrack</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.SetHotTrack.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlStrings.SetImages">
        <short>
          <var>SetImages</var> - specifies the list of images to be used</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.SetImages.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlStrings.SetMultiLine">
        <short>
          <var>SetMultiLine</var> - specifies whether multiline captions are to be used</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.SetMultiLine.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlStrings.SetMultiSelect">
        <short>
          <var>SetMultiSelect</var> - specifies whether MultiSelection is available</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.SetMultiSelect.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlStrings.SetOwnerDraw">
        <short>
          <var>SetOwnerDraw</var> - specifies whether an owner-derived drawing can be used</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.SetOwnerDraw.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlStrings.SetRaggedRight">
        <short>
          <var>SetRaggedRight</var> - specifies whether ragged-right (as opposed to right-justified) alignment is to be used</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.SetRaggedRight.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlStrings.SetScrollOpposite">
        <short>
          <var>SetScrollOpposite</var> - specifies whether scrollbars are to operate in the opposite sense to normal</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.SetScrollOpposite.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlStrings.SetTabHeight">
        <short>
          <var>SetTabHeight</var> - specifies the height of tabs</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.SetTabHeight.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlStrings.SetTabIndex">
        <short>
          <var>SetTabIndex</var> - specfies an index value for a tab</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.SetTabIndex.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlStrings.SetTabWidth">
        <short>
          <var>SetTabWidth</var> - specifies the width of a tab</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.SetTabWidth.AValue">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TTabControlStrings.Create">
        <short>
          <var>Create</var> - constructor for <var>TTabControlStrings</var>: calls inherited <var>Create</var> then sets many local defaults</short>
        <descr>
          <p>
            <var>Create</var> - constructor for <var>TTabControlStrings</var>: calls inherited <var>Create</var> then sets many local defaults</p>
          <p>Among the defaults set are:</p>
          <p>HotTrack, Multiline, MultiSelect, OwnerDraw, RaggedRight, ScrollOpposite - all False; Tab height and width to zero</p>
        </descr>
        <errors/>
        <seealso>
          <link id="#rtl.System.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.Create.TheTabControl">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTabControlStrings.GetHitTestInfoAt">
        <short>
          <var>GetHitTestInfoAt</var> - returns the results of a hit test at the specified location X, Y</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTabControlStrings.GetHitTestInfoAt.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.GetHitTestInfoAt.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.GetHitTestInfoAt.Y">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTabControlStrings.GetSize">
        <short>
          <var>GetSize</var> - returns the size of the tab string</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTabControlStrings.GetSize.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTabControlStrings.IndexOfTabAt">
        <short>
          <var>IndexOfTabAt</var> - returns the Index value of the tab at the specified location, X, Y</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTabControlStrings.IndexOfTabAt.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.IndexOfTabAt.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.IndexOfTabAt.Y">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTabControlStrings.RowCount">
        <short>
          <var>RowCount</var> - number of rows (for a multi-row string)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTabControlStrings.RowCount.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTabControlStrings.TabRect">
        <short>
          <var>TabRec</var> - returns the coordinates of the rectangle for the tab with specified index</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTabControlStrings.TabRect.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.TabRect.Index">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTabControlStrings.ImageListChange">
        <short>
          <var>ImageListChange</var> - method for changing the image list</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.ImageListChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTabControlStrings.ScrollTabs">
        <short>
          <var>ScrollTabs</var> - scrolls the tabs by an amount specified by <var>Delta</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlStrings.ScrollTabs.Delta">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTabControlStrings.TabControlBoundsChange">
        <short>
          <var>TabControlBoundsChange</var> - method for dealing with a change in the bounds of a Tab Control</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTabControlStrings.UpdateTabImages">
        <short>
          <var>UpdateTabImages</var> - bring the tab images up to date</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTabControlStrings.BeginUpdate">
        <short>
          <var>BeginUpdate</var> increments the Update count</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TStrings.BeginUpdate">TStrings.BeginUpdate</link>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTabControlStrings.EndUpdate">
        <short>
          <var>EndUpdate</var> decrements the Update count</short>
        <descr/>
        <errors>An exception is raised if the Update count is zero</errors>
        <seealso>
          <link id="#rtl.Classes.TStrings.EndUpdate">TStrings.EndUpdate</link>
        </seealso>
      </element>
      <!-- function Visibility: public -->
      <element name="TTabControlStrings.IsUpdating">
        <short>
          <var>IsUpdating</var> - returns True if in the process of updating</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTabControlStrings.IsUpdating.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTabControlStrings.TabControl">
        <short>The <var>TabControl</var> to which these strings apply</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTabControlStrings.TabIndex">
        <short>
          <var>TabIndex</var> - the index of the current Tab</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTabControlStrings.HotTrack">
        <short>
          <var>HotTrack</var> - the property whereby the item under the mouse pointer becomes emphasised</short>
        <descr/>
        <seealso>
          <link id="#lcl.ComCtrls.TCustomListView.HotTrack">TCustomListView.HotTrack</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TTabControlStrings.Images">
        <short>The list of <var>Images</var> associated with the Strings for these tabs</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTabControlStrings.MultiLine">
        <short>
          <var>MultiLine</var> - if True, multiple lines may be used in Tab strings</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTabControlStrings.MultiSelect">
        <short>
          <var>MultiSelect</var> - if True, multiple tabs can be selected, for example by holding down Shift or Ctrl keys while selecting</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTabControlStrings.OwnerDraw">
        <short>
          <var>OwnerDraw</var> - if True, Owner object (or calling routine) can specify drawing methods</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTabControlStrings.RaggedRight">
        <short>
          <var>RaggedRight</var> - if True, strings are un-justified or un-aligned, with ragged right margin</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTabControlStrings.ScrollOpposite">
        <short>
          <var>ScrollOpposite</var> - if True, scrolling proceeds in opposite direction to usual</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTabControlStrings.TabHeight">
        <short>
          <var>TabHeight</var>- height of the tab</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTabControlStrings.TabWidth">
        <short>
          <var>TabWidth</var> - width of the tab</short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TTabControlNoteBookStrings">
        <short>
          <var>TTabControlNoteBookStrings</var> - instance of <var>TTabControlStrings</var> for use with a <var>TNoteBook</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTabControlNoteBookStrings.FNoteBook">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TTabControlNoteBookStrings.Get">
        <short>
          <var>Get</var> returns the text string found on the indexed page</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TStrings.Get">TStrings.Get</link>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTabControlNoteBookStrings.Get.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.Get.Index">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TTabControlNoteBookStrings.GetCount" link="#rtl.Classes.TStrings.GetCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTabControlNoteBookStrings.GetCount.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TTabControlNoteBookStrings.GetObject">
        <short>
          <var>GetObject</var> returns the indexed object from the paged notebook</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TStrings.GetObject">TStrings.GetObject</link>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTabControlNoteBookStrings.GetObject.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.GetObject.Index">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TTabControlNoteBookStrings.GetTabIndex" link="#LCL.ComCtrls.TTabControlStrings.GetTabIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTabControlNoteBookStrings.GetTabIndex.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlNoteBookStrings.NBChanging">
        <short>
          <var>NBChanging</var> - method for dealing with the process for change in a NoteBook</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.NBChanging.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.NBChanging.AllowChange">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlNoteBookStrings.NBGetImageIndex">
        <short>
          <var>NBGetImageIndex</var> - obtains the Image Index associated with a given Tab Index in the NoteBook</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.NBGetImageIndex.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.NBGetImageIndex.TheTabIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.NBGetImageIndex.ImageIndex">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlNoteBookStrings.NBPageChanged">
        <short>
          <var>NBPageChanged</var> - Method for dealing with a NoteBook page that has changed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.NBPageChanged.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlNoteBookStrings.Put">
        <short>
          <var>Put</var> writes the supplied string to the indexed page of the notebook</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TStrings.Put">TStrings.Put</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.Put.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.Put.S">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlNoteBookStrings.PutObject">
        <short>
          <var>PutObject</var> stores the supplied object at the indexed place in the paged notebook</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TStrings.PutObject">TStrings.PutObject</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.PutObject.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.PutObject.AObject">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlNoteBookStrings.SetImages">
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.ComCtrls.TTabControlStrings.SetImages">TTabControlStrings.SetImages</link>
        </seealso>
        <short>
          <var>SetImages</var> - if the supplied ImageList is of correct type, stores it in the notebook <var>Images</var> area</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.SetImages.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlNoteBookStrings.SetTabIndex" link="#LCL.ComCtrls.TTabControlStrings.SetTabIndex">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.SetTabIndex.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlNoteBookStrings.SetUpdateState">
        <short>
          <var>SetUpdateState</var> - if Updating is True, calls <var>BeginUpdate</var>; otherwise calls <var>EndUpdate</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TStrings.SetUpdateState">TStrings.SetUpdateState</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.SetUpdateState.Updating">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlNoteBookStrings.SetTabHeight">
        <short>
          <var>SetTabHeight</var> checks if <var>TabHeight</var> is already equal to <var>AValue</var>, otherwise calls inherited method</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.ComCtrls.TTabControlStrings.SetTabHeight">TTabControlStrings.SetTabHeight</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.SetTabHeight.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTabControlNoteBookStrings.SetTabWidth">
        <short>
          <var>SetTabWidth</var> checks if <var>TabWidth</var> is already equal to <var>AValue</var>, otherwise calls inherited method</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.ComCtrls.TTabControlStrings.SetTabWidth">TTabControlStrings.SetTabWidth</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.SetTabWidth.AValue">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TTabControlNoteBookStrings.Create">
        <descr>
          <p>
            <var>Create</var> - constructor for <var>TTabControlNoteBookStrings</var>: calls inherited <var>Create</var> then sets some default Actions</p>
          <p>Among the actions set are:</p>
          <p>OnGetImageIndex, OnChanging, OnChange. Notebook is created with a nominated parent</p>
        </descr>
        <errors/>
        <seealso>
          <link id="#rtl.System.TObject.Create">TObject.Create</link>
          <link id="#LCL.ComCtrls.TTabControlStrings.Create">TTabControlStrings.Create</link>
        </seealso>
        <short>
          <var>Create</var> - constructor for <var>TTabControlNoteBookStrings</var>: calls inherited <var>Create</var> then sets some default Actions</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.Create.TheTabControl">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TTabControlNoteBookStrings.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TTabControlNoteBookStrings</var>: frees NoteBook then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TStrings.Destroy">TStrings.Destroy</link>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTabControlNoteBookStrings.Clear">
        <short>
          <var>Clear</var> calls the <var>Clear</var> method for the client Notebook</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TStrings.Clear">TStrings.Clear</link>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTabControlNoteBookStrings.Delete">
        <short>
          <var>Delete</var> calls the <var>Delete</var> method for the client NoteBook</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TStrings.Delete">TStrings.Delete</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.Delete.Index">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTabControlNoteBookStrings.Insert">
        <short>
          <var>Insert</var> calls the <var>Insert</var> method for the client NoteBok</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TStrings.Insert">TStrings.Insert</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.Insert.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.Insert.S">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTabControlNoteBookStrings.GetSize" link="#LCL.ComCtrls.TTabControlStrings.GetSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTabControlNoteBookStrings.GetSize.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTabControlNoteBookStrings.TabControlBoundsChange" link="#LCL.ComCtrls.TTabControlStrings.TabControlBoundsChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTabControlNoteBookStrings.IndexOfTabAt" link="#LCL.ComCtrls.TTabControlStrings.IndexOfTabAt">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTabControlNoteBookStrings.IndexOfTabAt.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.IndexOfTabAt.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabControlNoteBookStrings.IndexOfTabAt.Y">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTabControlNoteBookStrings.NoteBook">
        <short>The <var>NoteBook</var> for which the tab strings are to be used</short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TDrawTabEvent">
        <short>
          <var>TDrawTabEvent</var> - generic event handling procedure for drawing a tab, with given index at the specified rectangle</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawTabEvent.Control">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawTabEvent.TabIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawTabEvent.Rect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawTabEvent.Active">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomTabControl">
        <short>
          <var>TCustomTabControl</var> - base class for <var>TTabControl</var>, a series of <var>Tabs</var> along the edge of a display area; selection of a <var>Tab</var> governs the contents of the <var>DisplayRect</var>
        </short>
        <descr>
          <var>TCustomTabControl</var> - base class for <var>TTabControl</var>, a series of <var>Tabs</var> along the edge of a display area; selection of a <var>Tab</var> governs the contents of the <var>DisplayRect</var>
        </descr>
        <errors/>
        <seealso>
          <link id="#lcl.ExtCtrls.Multi-PageControls">Multi-PageControls</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FImageChangeLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FOnChangeNeeded">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FOnChanging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FOnDrawTab">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FOnGetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FTabControlCreating">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FTabPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTabControl.FTabs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTabControl.GetDisplayRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetDisplayRect.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTabControl.GetHotTrack">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetHotTrack.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTabControl.GetMultiLine">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetMultiLine.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTabControl.GetMultiSelect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetMultiSelect.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTabControl.GetOwnerDraw">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetOwnerDraw.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTabControl.GetRaggedRight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetRaggedRight.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTabControl.GetScrollOpposite">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetScrollOpposite.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTabControl.GetTabHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetTabHeight.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTabControl.GetTabIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetTabIndex.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTabControl.GetTabWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetTabWidth.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetHotTrack">
        <short>
          <var>SetHotTrack</var> - specifies the status of <var>HotTrack</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetHotTrack.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetImages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetImages.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetMultiLine">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetMultiLine.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetMultiSelect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetMultiSelect.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetOwnerDraw">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetOwnerDraw.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetRaggedRight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetRaggedRight.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetScrollOpposite">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetScrollOpposite.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetStyle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetTabHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetTabHeight.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetTabPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetTabPosition.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetTabs">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetTabs.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTabControl.SetTabWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetTabWidth.AValue">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTabControl.CanChange">
        <short>
          <var>CanChange</var> - returns True if the control can be changed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.CanChange.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTabControl.CanShowTab">
        <short>
          <var>CanShowTab</var> - returns True if the specified (indexed) Tab can be shown</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.CanShowTab.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.CanShowTab.ATabIndex">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.Change">
        <short>
          <var>Change</var> - software emulation of the <var>OnChange</var> event</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.DrawTab">
        <short>
          <var>DrawTab</var> - software emulation of the <var>OnDrawTab </var>event</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.DrawTab.ATabIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.DrawTab.Rect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.DrawTab.Active">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTabControl.GetImageIndex">
        <short>
          <var>GetImageIndex</var> - software emulation of the <var>OnGetImageIndex</var> event</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetImageIndex.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.GetImageIndex.ATabIndex">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.Loaded" link="#LCL.Controls.TWinControl.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.CreateWnd" link="#LCL.Controls.TWinControl.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.DestroyHandle" link="#LCL.Controls.TWinControl.DestroyHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.Notification" link="#LCL.Controls.TControl.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.SetTabIndex">
        <short>
          <var>SetTabIndex</var> - set the index of the current tab to the specified value</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.SetTabIndex.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.UpdateTabImages">
        <short>
          <var>UpdateTabImages</var> - bring the images of the tabs up to date</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.ImageListChange">
        <short>
          <var>ImageListChange</var> - method for signalling a change to the image list</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.ImageListChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.DoSetBounds" link="#LCL.Controls.TControl.DoSetBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.DoSetBounds.ALeft">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.DoSetBounds.ATop">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.DoSetBounds.AWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.DoSetBounds.AHeight">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.Paint" link="#LCL.Controls.TCustomControl.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTabControl.GetDisplayRectWithBorder">
        <short>
          <var>GetDisplayRectWithBorder</var> - returns the coordinates of the display rectangle with a border around it</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetDisplayRectWithBorder.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTabControl.AdjustClientRect" link="#LCL.Controls.TWinControl.AdjustClientRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.AdjustClientRect.ARect">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.DisplayRect">
        <short>
          <var>DisplayRect</var> - the rectangular area to be used for displaying information determined by the identity of the selected <var>Tab</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.HotTrack">
        <short>
          <var>HotTrack</var> - the property whereby the item under the mouse pointer becomes emphasised</short>
        <descr/>
        <seealso>
          <link id="#lcl.ComCtrls.TCustomListView.HotTrack">TCustomListView.HotTrack</link>
        </seealso>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.Images">
        <short>
          <var>Images</var> - the list of Images available for display in the <var>DisplayRect</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.MultiLine">
        <short>
          <var>MultiLine</var> - whether the Tab's caption is allowed to have multiple lines</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.MultiSelect">
        <short>
          <var>MultiSelect</var> - whether multiple Tabs are allowed to be selected at the same time (eg by pressing Shift or Ctrl while selecting)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.OnChange">
        <short>
          <var>OnChange</var> - event handler for a change in the Tabs</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.OnChanging">
        <short>
          <var>OnChanging</var> - event handler while Tab is changing</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.OnDrawTab">
        <short>
          <var>OnDrawTab</var> - event handler for drawing a Tab</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.OnGetImageIndex">
        <short>
          <var>OnGetImageIndex</var> - event handler for finding the index value of the required image</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.OwnerDraw">
        <short>
          <var>OwnerDraw</var> - is the calling routine (<var>Owner</var>) allowed to specify the drawing method?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.RaggedRight">
        <short>
          <var>RaggedRight</var> - un-justified or un-aligned text</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.ScrollOpposite">
        <short>
          <var>ScrollOpposite</var> - is scrolling to happen in the opposite direction to usual?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.Style">
        <short>
          <var>Style</var> - Tabs, buttons or flat buttons?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.TabHeight">
        <short>
          <var>TabHeight</var> - height of the tabs</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.TabIndex">
        <short>
          <var>TabIndex</var> - index value of current Tab. If none selected, default value of -1 is returned</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.TabPosition">
        <short>
          <var>TabPosition</var> - top, bottom, left or right</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.Tabs">
        <short>
          <var>Tabs</var> - the actual Tabs expressed as strings</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTabControl.TabWidth">
        <short>
          <var>TabWidth</var> - width of the tabs</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomTabControl.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomTabControl</var>: calls inherited <var>Create</var>, sets initial bounds, forms links and sets some defaults</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TCustomControl.Create">TCustomControl.Create</link>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomTabControl.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TCustomTabControl</var>: frees links and tabs, then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
          <link id="#rtl.Classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTabControl.IndexOfTabAt">
        <short>
          <var>IndexOfTabAt</var> - returns the index value of the Tab located at specified X, Y</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.IndexOfTabAt.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.IndexOfTabAt.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.IndexOfTabAt.Y">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTabControl.GetHitTestInfoAt">
        <short>
          <var>GetHitTestInfoAt</var> - returns information about hit tests at location X, Y</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.GetHitTestInfoAt.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.GetHitTestInfoAt.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.GetHitTestInfoAt.Y">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTabControl.TabRect">
        <short>
          <var>TabRect</var> - the rectangle occupied by the specified Tab</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.TabRect.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.TabRect.Index">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTabControl.RowCount">
        <short>
          <var>RowCount</var> - the number of rows in the list of tabs</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.RowCount.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTabControl.ScrollTabs">
        <short>
          <var>ScrollTabs</var> - scroll through the list of tabs by an amount specifid by <var>Delta</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTabControl.ScrollTabs.Delta">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTabControl.BeginUpdate">
        <short>
          <var>BeginUpdate</var> - start the Update procedure</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTabControl.EndUpdate">
        <short>
          <var>EndUpdate</var> - finish the update procedure</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTabControl.IsUpdating">
        <short>
          <var>IsUpdating</var> - returns True if in process of updating</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTabControl.IsUpdating.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTabControl.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TTabControl">
        <short>
          <var>TTabControl</var> - a series of <var>Tabs</var> along the edge of a display area; selection of a <var>Tab</var> governs the contents of the <var>DisplayRect</var>
        </short>
        <descr>
          <p>
            <var>TTabControl</var> - a series of <var>Tabs</var> along the edge of a display area; selection of a <var>Tab</var> governs the contents of the <var>DisplayRect</var>
          </p>
          <p>Use <var>TTabControl </var>by selecting its icon from the Common Controls tab of the IDE Component Palette and placing it at the desired location on the <var>Form</var>. Use the Form Designer and Object Inspector to adjust its shape, size, alignment, anchoring and other properties. Tabs can be aded or removed from the component by selecting it, then right-clicking with the mouse to get a pop-up menu whose first item is 'Add Tab'. Once created, the Tabs can be edited by selecting the <var>Tabs</var> entry in the Object Inspector, and selecting the ellipsis (...) which will cause a pop-up String editor to appear. The tabs can be given new captions, moved up and down the list, or removed altogether, as required.</p>
          <p>Each Tab has an Index (starting from 0) and this index can be used to specify an entry from <var>Images</var> for display in the <var>DisplayRect</var>.</p>
        </descr>
        <errors/>
        <seealso>
          <link id="#lcl.ExtCtrls.Multi-PageControls">Multi-PageControls</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TTabControl.DisplayRect" link="#LCL.ComCtrls.TCustomTabControl.DisplayRect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.Align" link="#LCL.Controls.TControl.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.Anchors" link="#LCL.Controls.TControl.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.Constraints" link="#LCL.Controls.TControl.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.DockSite" link="#LCL.Controls.TWinControl.DockSite">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.DragCursor" link="#LCL.Controls.TControl.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.DragKind" link="#LCL.Controls.TControl.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.DragMode" link="#LCL.Controls.TControl.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.Enabled" link="#LCL.Controls.TControl.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.Font" link="#LCL.Controls.TControl.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.HotTrack" link="#LCL.ComCtrls.TCustomTabControl.HotTrack">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.Images" link="#LCL.ComCtrls.TCustomTabControl.Images">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.MultiLine" link="#LCL.ComCtrls.TCustomTabControl.MultiLine">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.MultiSelect" link="#LCL.ComCtrls.TCustomTabControl.MultiSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnChange" link="#LCL.ComCtrls.TCustomTabControl.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnChanging" link="#LCL.ComCtrls.TCustomTabControl.OnChanging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnDockDrop" link="#LCL.Controls.TWinControl.OnDockDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnDockOver" link="#LCL.Controls.TWinControl.OnDockOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnDragOver" link="#LCL.Controls.TControl.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnDrawTab" link="#LCL.ComCtrls.TCustomTabControl.OnDrawTab">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnEndDock" link="#LCL.Controls.TControl.OnEndDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnGetImageIndex" link="#LCL.ComCtrls.TCustomTabControl.OnGetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnGetSiteInfo">
        <short>
          <var>OnGetSiteInfo</var> - event handler for getting information about the current site</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnResize" link="#LCL.Controls.TControl.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnStartDock" link="#LCL.Controls.TControl.OnStartDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OnUnDock" link="#LCL.Controls.TWinControl.OnUnDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.OwnerDraw" link="#LCL.ComCtrls.TCustomTabControl.OwnerDraw">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.ParentFont" link="#LCL.Controls.TControl.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.RaggedRight" link="#LCL.ComCtrls.TCustomTabControl.RaggedRight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.ScrollOpposite" link="#LCL.ComCtrls.TCustomTabControl.ScrollOpposite">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.Style" link="#LCL.ComCtrls.TCustomTabControl.Style">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.TabHeight" link="#LCL.ComCtrls.TCustomTabControl.TabHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.TabIndex" link="#LCL.ComCtrls.TCustomTabControl.TabIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.TabPosition" link="#LCL.ComCtrls.TCustomTabControl.TabPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.Tabs" link="#LCL.ComCtrls.TCustomTabControl.Tabs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.TabWidth" link="#LCL.ComCtrls.TCustomTabControl.TabWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTabControl.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TCustomDrawTarget">
        <short>
          <var>TCustomDrawTarget</var> - enumerated type controlling how a target object is to be drawn</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCustomDrawTarget.dtControl">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCustomDrawTarget.dtItem">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCustomDrawTarget.dtSubItem">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TCustomDrawStage">
        <short>
          <var>TCustomDrawStage</var>  a series of constants to define the drawing stages.</short>
        <descr>So far I've only seen cdPrePaint used in this unit.
</descr>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCustomDrawStage.cdPrePaint">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCustomDrawStage.cdPostPaint">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCustomDrawStage.cdPreErase">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCustomDrawStage.cdPostErase">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TCustomDrawStateFlag">
        <short>
          <var>TCustomDrawStateFlag</var> - series of flags to define the DrawState</short>
        <descr>
          <p>TCustomDrawStateFlag consists of the following constants:</p>
          <ul>
            <li>cdsSelected,</li>
            <li>cdsGrayed,</li>
            <li>cdsDisabled,</li>
            <li>cdsChecked,</li>
            <li>cdsFocused,</li>
            <li>cdsDefault,</li>
            <li>cdsHot,</li>
            <li>cdsMarked,</li>
            <li>cdsIndeterminate</li>
          </ul>
        </descr>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCustomDrawStateFlag.cdsSelected">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCustomDrawStateFlag.cdsGrayed">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCustomDrawStateFlag.cdsDisabled">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCustomDrawStateFlag.cdsChecked">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCustomDrawStateFlag.cdsFocused">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCustomDrawStateFlag.cdsDefault">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCustomDrawStateFlag.cdsHot">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCustomDrawStateFlag.cdsMarked">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCustomDrawStateFlag.cdsIndeterminate">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TCustomDrawState">
        <short>
          <var>TCustomDrawState</var>  - set of <var>TCustomDrawStateFlag</var>
        </short>
        <descr>TCustomDrawState determines how a item will be drawn.
</descr>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TSortType">
        <short>
          <var>TSortType</var> - enumerated type, a series of constants signifying that there is no sorting, or that sorting is according to data, test or both</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TSortType.stNone">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TSortType.stData">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TSortType.stText">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TSortType.stBoth">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TListItemState">
        <short>
          <var>TListItemState</var> - enumerated type denoting the state of a list item</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListItemState.lisCut">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListItemState.lisDropTarget">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListItemState.lisFocused">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListItemState.lisSelected">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TListItemStates">
        <short>
          <var>TListItemStates</var> - set of <var>TListItemState</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TListItemFlag">
        <short>
          <var>TListItemFlag</var> - enumerated type, a flag denoting a list item is being destroyed or created</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListItemFlag.lifDestroying">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListItemFlag.lifCreated">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TListItemFlags">
        <short>
          <var>TListItemFlags</var> - set of <var>TListItemFlag</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TListItem">
        <short>
          <var>TListItem</var> - the ancestor class for  the Items in <var>TCustomListView</var> and <var>TListView</var>
        </short>
        <descr>Most properties are inherited from ancestors, TPersistent and TObject
</descr>
        <seealso>
          <link id="#rtl.Classes.TPersistent">Classes.TPersistent</link>
          <link id="#rtl.Objects.TObject">Objects.TObject</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListItem.FOwner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListItem.FFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListItem.FSubItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListItem.FCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListItem.FData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListItem.FImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListItem.FStates">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TListItem.GetState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListItem.GetState.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItem.GetState.ALisOrd">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TListItem.GetIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListItem.GetIndex.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TListItem.GetSubItemImages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListItem.GetSubItemImages.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItem.GetSubItemImages.AIndex">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TListItem.GetSubItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListItem.GetSubItems.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TListItem.IntfUpdateAllowed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListItem.IntfUpdateAllowed.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListItem.IntfUpdateText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListItem.IntfUpdateImages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListItem.SetState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItem.SetState.ALisOrd">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItem.SetState.AIsSet">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListItem.SetData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItem.SetData.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListItem.SetImageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItem.SetImageIndex.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListItem.SetCaption">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItem.SetCaption.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListItem.SetSubItemImages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItem.SetSubItemImages.AIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItem.SetSubItemImages.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListItem.SetSubItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItem.SetSubItems.AValue">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TListItem.IsEqual">
        <short>The current ListItem <var>IsEqual</var> to the item specified in the argument <var>AItem</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListItem.IsEqual.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItem.IsEqual.AItem">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TListItem.Assign">
        <seealso>
          <link id="#rtl.Classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
        <short>
          <var>Assign</var> - if source has correct type, copies Caption, Data, ImageIndex and SubItems from source, otherwise calls inherited <var>Assign</var> which probably raises an exception</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItem.Assign.ASource">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TListItem.Create">
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.System.TObject.Create">TObject.Create</link>
        </seealso>
        <short>
          <var>Create</var> - constructor for <var>TListItem</var>: calls inherited <var>Create</var> then initialises flags, states, ImageIndex and SubItems </short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItem.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TListItem.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TListItem</var>: frees SubItems, sets flags to signify destruction, then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Destroy">TPersistent.Destroy</link>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TListItem.Delete">
        <short>Remove an Item from the list</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TListItem.MakeVisible">
        <short>
          <var>MakeVisible</var> - render the item visible (if <var>PartialOK</var> is True, only part may be visible)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItem.MakeVisible.PartialOK">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TListItem.Caption">
        <short>
          <var>Caption</var> - the name given to this item on the list</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TListItem.Cut">
        <short>
          <var>Cut</var> this item from the list (but it can be placed on the clipboard)</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TListItem.Data">
        <short>Pointer to the Data asociated with this item</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TListItem.DropTarget">
        <short>
          <var>DropTarget</var> - returns True if this is a valid target on the list for dropping</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TListItem.Focused">
        <short>Property is true if this item has Focus</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TListItem.Index">
        <short>The index of this item in the list (integer)</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TListItem.ImageIndex">
        <short>The index of the image associated with this Item in the list</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TListItem.Owner">
        <short>The Owner of the ListItem</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TListItem.Selected">
        <short>Whether this Item has been <var>Selected</var> (often denoted by a check-mark)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TListItem.SubItems">
        <short>The list of <var>SubItems</var> associated with this ListItem</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TListItem.SubItemImages">
        <short>
          <var>SubItemImages</var> - the list of Images associated with the SubItems</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItem.SubItemImages.AIndex">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TListItems">
        <short>
          <var>TListItems</var> - a list of items with a cache of the last accessed item</short>
        <descr>
          <var>TListitems</var>
 has a built-in cache of the last accessed item. This will speed up interface updates since <var>Item.Index</var> is   often used for the same item updating more properties.  If <var>FCacheIndex</var> = -1 then the cache is not valid.
</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListItems.FOwner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListItems.FItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListItems.FCacheIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListItems.FCacheItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListItems.IntfCreateCacheItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TListItems.IntfUpdateAllowed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListItems.IntfUpdateAllowed.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListItems.ItemDestroying">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItems.ItemDestroying.AItem">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListItems.ReadData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItems.ReadData.Stream">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListItems.WriteData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItems.WriteData.Stream">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TListItems.DefineProperties">
        <short>
          <var>DefineProperties</var> - calls inherited method, then defines some specific binary properties</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TPersistent.DefineProperties">TPersistent.DefineProperties</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItems.DefineProperties.Filer">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TListItems.GetCount">
        <short>
          <var>GetCount</var> - find the number of Items in the list</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListItems.GetCount.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TListItems.GetItem">
        <short>
          <var>GetItem</var> returns the <var>ListItem</var> specified by <var>AIndex</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListItems.GetItem.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItems.GetItem.AIndex">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TListItems.IndexOf">
        <short>Returns the <var>IndexOf</var> the Item specified by <var>AItem</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListItems.IndexOf.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItems.IndexOf.AItem">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TListItems.IntfCreateItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TListItems.SetItem">
        <short>
          <var>SetItem</var> - writes the Index and content of a given Item to a local variable</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItems.SetItem.AIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItems.SetItem.AValue">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TListItems.Add">
        <short>
          <var>Add</var> an Item to the Collection</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListItems.Add.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TListItems.AddItem">
        <short>
          <var>AddItem</var> - add the specified <var>AItem</var> to the collection</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItems.AddItem.AItem">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TListItems.Clear">
        <short>
          <var>Clear</var> - remove all Items from the list</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TListItems.Create">
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.System.TObject.Create">TObject.Create</link>
        </seealso>
        <short>
          <var>Create</var> - constructor for <var>TListItems</var>: calls inherited <var>Create</var> then creates the list</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItems.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TListItems.Destroy">
        <short>
          <var>Destroy</var> destructor for <var>TListItems</var>: frees the individual items on the list, then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Destroy">TPersistent.Destroy</link>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TListItems.Delete">
        <short>Remove the Item specified by <var>AIndex</var> from the collection</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItems.Delete.AIndex">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TListItems.FindData">
        <short>
          <var>FindData</var> - returns the ListItem associated with the specified datapointer</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListItems.FindData.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItems.FindData.AData">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TListItems.Insert">
        <short>
          <var>Insert</var> an item in the list at <var>AIndex</var>, returning the value of the <var>ListItem</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListItems.Insert.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItems.Insert.AIndex">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TListItems.InsertItem">
        <short>
          <var>InsertItem</var> - procedure to insert <var>AItem</var> at position <var>AIndex</var> in the list</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItems.InsertItem.AItem">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItems.InsertItem.AIndex">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TListItems.Count">
        <short>
          <var>Count</var> - the number of items in the collection</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TListItems.Item">
        <short>An <var>Item</var> in the list, specified by its Index value</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListItems.Item.AIndex">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TListItems.Owner">
        <short>
          <var>Owner</var> - the ListView that owns this collection of ListItems</short>
        <descr/>
        <seealso/>
      </element>
      <!-- range type Visibility: default -->
      <element name="TWidth">
        <short>ImageIndex</short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TListColumn">
        <short>
          <var>TListColumn</var> - an individual column in a multi-column List control</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListColumn.FAlignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListColumn.FAutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListColumn.FCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListColumn.FMinWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListColumn.FMaxWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListColumn.FVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListColumn.FWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListColumn.FImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListColumn.FTag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TListColumn.GetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListColumn.GetWidth.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListColumn.IntfCreateColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TListColumn.IntfUpdateAllowed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListColumn.IntfUpdateAllowed.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListColumn.SetVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListColumn.SetVisible.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListColumn.SetAutoSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListColumn.SetAutoSize.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListColumn.SetMinWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListColumn.SetMinWidth.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListColumn.SetMaxWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListColumn.SetMaxWidth.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListColumn.SetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListColumn.SetWidth.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListColumn.SetCaption">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListColumn.SetCaption.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListColumn.SetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListColumn.SetAlignment.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListColumn.SetImageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListColumn.SetImageIndex.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TListColumn.SetIndex">
        <short>
          <var>SetIndex</var> - calls inherited method, and if this is a new index value, changes to the new column index</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TCollectionItem.SetIndex">TCollectionItem.SetIndex</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListColumn.SetIndex.AValue">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TListColumn.GetDisplayName">
        <short>
          <var>GetDisplayName</var> returns the <var>Caption</var>; if this is blank, calls inherited method</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TCollectionItem.GetDisplayName">TCollectionItem.GetDisplayName</link>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListColumn.GetDisplayName.Result">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TListColumn.Create">
        <short>
          <var>Create</var> - constructor for TListColumn: calls inherited <var>Create</var> then sets defaults for size, alignment and index</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TCollectionItem.Create">TCollectionItem.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListColumn.Create.ACollection">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TListColumn.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TListColumn</var>: if update allowed, updates columns then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TCollectionItem.Destroy">TCollectionItem.Destroy</link>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TListColumn.Assign">
        <short>
          <var>Assign</var> - if source is of correct type, copies alignment, caption, visibility and size properties, otherwise calls inherited <var>Assign</var> which probably raises an exception </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListColumn.Assign.ASource">
        <short/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListColumn.Alignment">
        <short>
          <var>Alignment</var> - whether text is to be left or right justified or centered</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListColumn.AutoSize">
        <short>Whether <var>AutoSize</var> is to be operational</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListColumn.Caption">
        <short>A text string or <var>Caption</var> (which may be translated) to be used at the top of the column</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListColumn.ImageIndex">
        <short>
          <var>ImageIndex</var> - the index value of the image associated with he ListColumn</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListColumn.MaxWidth">
        <short>
          <var>MaxWidth</var> - the maximum width for this column</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListColumn.MinWidth">
        <short>
          <var>MinWidth</var> - the minimum permissable with for the column</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListColumn.Tag">
        <short>
          <var>Tag</var> - a general purpose integer variable to be used in association with this column</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListColumn.Visible">
        <short>
          <var>Visible</var> - whether this column can be seen</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListColumn.Width">
        <short>The <var>Width</var> of this column</short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TListColumns">
        <short>
          <var>TListColumns</var> - a collection of Items of type <var>TListColumn</var> (the columns appearing in a multi-column list)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListColumns.FOwner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListColumns.FUpdateCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListColumns.FItemNeedsUpdate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TListColumns.FNeedsUpdate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TListColumns.GetItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListColumns.GetItem.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListColumns.GetItem.AIndex">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListColumns.IntfCreateColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TListColumns.SetItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListColumns.SetItem.AIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListColumns.SetItem.AValue">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TListColumns.Create">
        <short>
          <var>Create</var> - constructor for <var>TListColumns</var>: sets ownership then calls inherited <var>Create</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TCollection.Create">TCollection.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListColumns.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TListColumns.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TListColumns</var>: calls inherited destructor</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TCollection.Destroy">TCollection.Destroy</link>
        </seealso>
      </element>
      <!-- function Visibility: public -->
      <element name="TListColumns.Add">
        <short>
          <var>Add</var> calls inherited method, then adjusts state flags</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TCollection.Add">TCollection.Add</link>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TListColumns.Add.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TListColumns.BeginUpdate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TListColumns.EndUpdate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TListColumns.Owner" link="#rtl.Classes.TCollection.Owner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TListColumns.Items" link="#rtl.Classes.TCollection.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListColumns.Items.AIndex">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TListColumns.Assign">
        <short>
          <var>Assign</var> checks that source is of correct type, then adds new columns and copies items from source into them; otherwise calls inherited <var>Assign</var> which probably raises an exception</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TCollection.Assign">TCollection.Assign</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TListColumns.Assign.Source">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TItemChange">
        <short>
          <var>TItemChange</var> - enumerated type for kind of change: in text, in image or in state</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TItemChange.ctText">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TItemChange.ctImage">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TItemChange.ctState">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TViewStyle">
        <short>
          <var>TViewStyle</var> - enumerated type for style of view</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TViewStyle.vsIcon">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TViewStyle.vsSmallIcon">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TViewStyle.vsList">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TViewStyle.vsReport">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TLVChangeEvent">
        <short>
          <var>TLVChangeEvent</var> - generic event handler method for change in List View</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVChangeEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVChangeEvent.Item">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVChangeEvent.Change">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TLVColumnClickEvent">
        <short>
          <var>TLVColumnClickEvent</var> - generic event handler method for a click on a List View column</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVColumnClickEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVColumnClickEvent.Column">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TLVColumnRClickEvent">
        <short>
          <var>TLVColumnRClickEvent</var> - generic event handler method for a right click on a List View column</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVColumnRClickEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVColumnRClickEvent.Column">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVColumnRClickEvent.Point">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TLVCompareEvent">
        <short>
          <var>TLVCompareEvent</var> - generic event handler method for List View comparison</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVCompareEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVCompareEvent.Item1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVCompareEvent.Item2">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVCompareEvent.Data">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVCompareEvent.Compare">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TLVDeletedEvent">
        <short>
          <var>TLVDeletedEvent</var> - generic event handler method for deleted items in List View</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVDeletedEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVDeletedEvent.Item">
        <short/>
      </element>
      <!-- alias type Visibility: default -->
      <element name="TLVInsertEvent">
        <short>
          <var>TLVInsertEvent</var> - generic event handler method for List View insertion</short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TLVSelectItemEvent">
        <short>
          <var>TLVSelectItemEvent</var> - generic event handler method for List View selection</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVSelectItemEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVSelectItemEvent.Item">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLVSelectItemEvent.Selected">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TListViewProperty">
        <short>
          <var>TListViewProperty</var> - enumerated type: a series of constants denoting the properties of a listview</short>
        <descr>
          <p>
            <var>TListViewProperty</var> - enumerated type: a series of constants denoting the properties of a listview</p>
          <pre>lvpAutoArrange,
    lvpCheckboxes,
    lvpColumnClick,
    lvpFlatScrollBars,
    lvpFullDrag,
    lvpGridLines,
    lvpHideSelection,
    lvpHotTrack,
    lvpMultiSelect,
    lvpOwnerDraw,
    lvpReadOnly,
    lvpRowSelect,
    lvpShowColumnHeaders,
    lvpShowWorkAreas,
    lvpWrapText,
    lvpToolTips
</pre>
        </descr>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewProperty.lvpAutoArrange">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewProperty.lvpCheckboxes">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewProperty.lvpColumnClick">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewProperty.lvpFlatScrollBars">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewProperty.lvpFullDrag">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewProperty.lvpGridLines">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewProperty.lvpHideSelection">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewProperty.lvpHotTrack">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewProperty.lvpMultiSelect">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewProperty.lvpOwnerDraw">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewProperty.lvpReadOnly">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewProperty.lvpRowSelect">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewProperty.lvpShowColumnHeaders">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewProperty.lvpShowWorkAreas">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewProperty.lvpWrapText">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TListViewProperties">
        <short>
          <var>TListViewProperties</var> - set of <var>TListViewProperty</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TListViewImageList">
        <short>
          <var>TListViewImageList</var> - enumerated type denoting the category of image list</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewImageList.lvilSmall">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewImageList.lvilLarge">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListViewImageList.lvilState">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TListHotTrackStyle">
        <short>
          <var>TListHotTrackStyle</var> - enumerated type denoting the style of HotTrack</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListHotTrackStyle.htHandPoint">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListHotTrackStyle.htUnderlineCold">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListHotTrackStyle.htUnderlineHot">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TListHotTrackStyles">
        <short>
          <var>TListHotTrackStyles</var> - set of <var>TListHotTrackStyle</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomListView">
        <short>
          <var>TCustomListView</var> - the base class for <var>TListView</var>
        </short>
        <descr>
          <p>
            <var>TCustomListView</var> is the base class for <var>TListView</var>. If you want to define your own ListView class, you should derive it from this class.</p>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FAllocBy"/>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FDefaultItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FHotTrackStyles">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FOwnerData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FListItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FColumns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FViewStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FSortType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FSortColumn">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FImageChangeLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FScrollBars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FScrolledLeft">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FScrolledTop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FSelected">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FFocused">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FHoverTime">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FLastHorzScrollInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FLastVertScrollInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FUpdateCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FOnColumnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FOnCompare">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FOnDeletion">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FOnInsert">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FOnSelectItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListView.FProperties">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomListView.GetBoundingRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListView.GetBoundingRect.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomListView.GetColumnFromIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListView.GetColumnFromIndex.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.GetColumnFromIndex.AIndex">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomListView.GetDropTarget">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListView.GetDropTarget.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomListView.GetFocused">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListView.GetFocused.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomListView.GetImageList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListView.GetImageList.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.GetImageList.ALvilOrd">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomListView.GetHoverTime">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListView.GetHoverTime.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomListView.GetProperty">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListView.GetProperty.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.GetProperty.ALvpOrd">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomListView.GetSelCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListView.GetSelCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomListView.GetSelection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListView.GetSelection.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomListView.GetTopItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListView.GetTopItem.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomListView.GetViewOrigin">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListView.GetViewOrigin.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomListView.GetVisibleRowCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListView.GetVisibleRowCount.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetAllocBy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetAllocBy.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetColumns.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetDefaultItemHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetDefaultItemHeight.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetDropTarget">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetDropTarget.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetFocused">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetFocused.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetHotTrackStyles">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetHotTrackStyles.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetHoverTime">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetHoverTime.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetImageList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetImageList.ALvilOrd">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetImageList.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetItems.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetItemVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetItemVisible.AValue">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetItemVisible.APartialOK">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetOwnerData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetOwnerData.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetProperty">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetProperty.ALvpOrd">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetProperty.AIsSet">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetScrollBars">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetScrollBars.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetScrolledLeft">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetScrolledLeft.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetScrolledTop">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetScrolledTop.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetSelection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetSelection.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetSortColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetSortColumn.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetSortType">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetSortType.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.SetViewStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.SetViewStyle.Avalue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.Sort">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.UpdateScrollbars">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListView.CNNotify"/>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.CNNotify.AMessage">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListView.ItemDeleted">
        <short>
          <var>ItemDeleted</var> - the specified listitem is removed from the list</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.ItemDeleted.AItem">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListView.ItemInserted">
        <short>
          <var>ItemInserted</var> - the specified item is inserted into the list</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.ItemInserted.AItem">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListView.InitializeWnd">
        <short>
          <var>InitializeWnd</var> - calls inherited method, then sets various local properties</short>
        <descr>
          <var>InitializeWnd</var> - calls inherited method, then sets style, adds columns, sets imagelists and item depending properties (scroll bars, sorting etc), adds items and sets other miscellaneous properties (default item height, hot track styles, hover time etc)</descr>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.InitializeWnd">TWinControl.InitializeWnd</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListView.Change">
        <short>
          <var>Change</var>  - Internal procedure to simulate the <var>OnChange</var> event</short>
        <descr>
          <p>This is an internal procedure which is called after an item has been changed. It is a programmatic method for simulating the <var>OnChange</var> event if the programmer has assigned a method to this event.</p>
        </descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.Change.AItem">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.Change.AChange">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListView.ColClick">
        <short>
          <var>ColClick</var>  - procedure to simulate the <var>OnColumnClick</var>  event.</short>
        <descr>
          <p>
            <var>ColClick</var>  - procedure to simulate the <var>OnColumnClick</var>  event.</p>
          <p>Can be used programmatically to execute the same code as is used to respond to the <var>OnColumnClick </var>event</p>
        </descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.ColClick.AColumn">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListView.Delete">
        <short>
          <var>Delete</var> an Item from the List</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.Delete.Item">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListView.DoDeletion">
        <short>
          <var>DoDeletion</var> - performs the actual deletion</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.DoDeletion.AItem">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListView.DoInsert">
        <short>Performs the insertion</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.DoInsert.AItem">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListView.DoSelectItem">
        <short>
          <var>DoSelectItem</var> - perform item selection</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.DoSelectItem.AItem">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.DoSelectItem.ASelected">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListView.InsertItem">
        <short>Insert an Item into the List</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.InsertItem.Item">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomListView.GetMaxScrolledLeft">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListView.GetMaxScrolledLeft.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomListView.GetMaxScrolledTop">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListView.GetMaxScrolledTop.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListView.ImageChanged">
        <short>
          <var>ImageChanged</var> - procedure to signal that an image has chnaged</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.ImageChanged.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListView.WMHScroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.WMHScroll.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListView.WMVScroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.WMVScroll.Msg">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.AllocBy">
        <short>
          <var>AllocBy</var> - allocate the list by a value</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle"/>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.Columns">
        <short>
          <var>Columns </var>- define and change the columns of a ListView</short>
        <descr>
          <p>
            <var>Columns</var> is a <var>TCollectionItem</var> and contains all information on the columns of a listview.</p>
        </descr>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.ColumnClick">
        <short>
          <var>ColumnClick </var> - determines if the <var>OnColumnClick</var>  event will be executed.</short>
        <descr>
          <p>The <var>ColumnClick</var> property of the ListView enables or disables the <var>OnColumnClick</var> Event. A call to <var>OnColumnClick</var> will only be done when a method has been assigned to the <var>OnColumnClick</var> event and <var>ColumnClick</var> is set to true (default).</p>
        </descr>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.DefaultItemHeight">
        <short>
          <var>DefaultItemHeight</var> - sets or reads the default height for an item on the list</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.HideSelection">
        <short>
          <var>HideSelection</var> - if True, the selected item is to be hidden</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.HoverTime">
        <short>
          <var>HoverTime</var> - the time for which the mouse must hover over the item before its help message is displayed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.Items">
        <short>
          <var>Items</var> - the list of entries in the list. Held as a linked list with a cached index of the last accessed item</short>
        <descr>
          <p>
            <var>Items</var> - the list of entries in the list. Held as a linked list with a cached index of the last accessed item</p>
          <p>
            <var>Items</var> is of type <var>TListitems</var> which has a built-in cache of the last accessed item. This speeds up interface updates since <var>Item.Index</var> is often used for the same item updating more properties. If <var>FCacheIndex</var> = -1 then the cache is not valid.</p>
        </descr>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.LargeImages">
        <short>
          <var>LargeImages</var>  - an ImageList to be used in association with the list of <var>Items</var>
        </short>
        <descr>
          <p>
            <var>LargeImages</var> - an ImageList to be used in association with the list of <var>Items</var>
          </p>
          <p>A typical application might have two ImageLists: one of<var>LargeImages</var> and one of <var>SmallImages</var>, containing two versions of the same collection of images, in large and small format; the index numbers of the first list would correspond with those in the second list. </p>
          <p>SmallImages could be displayed beside the text strings in the list view, and the programmer would supply code to ensure that when an item with its associated SmallImage was selected, the corresponding LargeImage would be displayed in another window.</p>
          <p>A <var>TImageList</var> control needs to be selected and pasted on to the Form Designer, and the ImageList Editor can be opened from the pop-up menu obtained by right-clicking on <var>TImageList</var> icon in the Form Designer. Then in the StringList editor for <var>Items</var> the correct <var>ImageIndex</var> must be allocated to each entry in the list.</p>
        </descr>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.MultiSelect">
        <short>
          <var>MultiSelect</var> - enables the selection of more than one entry from <var>Items</var> - by pressing SHIFT or CTRL keys while selecting</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.OwnerData">
        <short>
          <var>OwnerData</var> - if True, the Owner's data are to be displayed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.OwnerDraw">
        <short>
          <var>OwnerDraw</var> - if True, the Owner's Draw method is to be used</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.ReadOnly">
        <short>
          <var>ReadOnly</var> - determines if the list can only be read, and not written or deleted.</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.ScrolledLeft">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.ScrolledTop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.ScrollBars">
        <short>
          <var>ScrollBars</var> - the kind of scrollbars to be used: none, auto, horizontal or vertical</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.ShowColumnHeaders">
        <short>
          <var>ShowColumnHeaders</var> - whether headers for columns are to be displayed</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.ShowWorkAreas">
        <short>
          <var>ShowWorkAreas</var> - if True, the work areas are to be displayed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.SmallImages">
        <short>
          <var>SmallImages</var>  - an ImageList of small images (icons) to be used in association with the list of <var>Items</var>
        </short>
        <descr>
          <p>
            <var>SmallImages</var>  - an ImageList of small images (icons) to be used in association with the list of <var>Items</var>
          </p>
          <p>A typical application might have two ImageLists: one of<var>LargeImages</var> and one of <var>SmallImages</var>, containing two versions of the same collection of images, in large and small format; the index numbers of the first list would correspond with those in the second list. </p>
          <p>SmallImages could be displayed beside the text strings in the list view, and the programmer would supply code to ensure that when an item with its associated SmallImage was selected, the corresponding LargeImage would be displayed in another window.</p>
          <p>A <var>TImageList</var> control needs to be selected and pasted on to the Form Designer, and the ImageList Editor can be opened from the pop-up menu obtained by right-clicking on <var>TImageList</var> icon in the Form Designer. Then in the StringList editor for <var>Items</var> the correct <var>ImageIndex</var> must be allocated to each entry in the list.</p>
        </descr>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.SortType">
        <short>
          <var>SortType</var> - whether to sort by text, by data, both or not at all</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.SortColumn">
        <short>
          <var>SortColumn</var> - the column that is being sorted</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.StateImages">
        <short>
          <var>StateImages</var> - an imagelist of icons to demonstrate the state of a process or event</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.ViewStyle">
        <short>
          <var>ViewStyle </var>- whether to view as a simple list, a list with large or small icons, or as a report</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.OnChange">
        <short>
          <var>OnChange</var> - event handler for a change in the list</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.OnColumnClick">
        <short>
          <var>OnColumnClick</var> - event handler for clicking on a coulmn</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.OnCompare">
        <short>
          <var>OnCompare</var> - event handler for comparing list items</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.OnDeletion">
        <short>
          <var>OnDeletion</var> - event handler for deleting a list item</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.OnInsert">
        <short>
          <var>OnInsert</var> - event handler for inserting list item</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListView.OnSelectItem">
        <short>
          <var>OnSelectItem</var> - event handler for list item selection</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomListView.Create">
        <short>
          <var>Create</var> - constructor for TCustomListView: calls inherited <var>Create</var> then initialises columns, the list of items, the canvas and properties and some formats and styles</short>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
          <link id="#LCL.Controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.Create.Aowner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomListView.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TCustomListView</var>: frees Canvas, calls inherited <var>Destroy</var> and frees columns, links and list items</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Destroy">TComponent.Destroy</link>
          <link id="#LCL.Controls.TWinControl.Destroy">TWinControl.Destroy</link>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomListView.BeginUpdate">
        <short>
          <var>BeginUpdate</var> - start updating the list view</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomListView.EndUpdate">
        <short>
          <var>EndUpdate</var> - finish updating the list view</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.BoundingRect">
        <short>
          <var>BoundingRect</var> - the coordinates of the rectangle containing the ListView</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.Canvas">
        <short>
          <var>Canvas</var>  - defines the area on which all graphic material is drawn (Read-only)</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.Checkboxes">
        <short>
          <var>CheckBoxes</var> - determines if the ListView shows checkboxes beside the items on the list</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.Column">
        <short>
          <var>Column </var>- reads the column information of the listview.</short>
        <descr>
          <p>This property can be used to read the information of a column.</p>
          <p>The column whose information is to be retrieved is determined by an index (AIndex). As with nearly all indexes, this index is 0 based. In column[0] the caption of the listitem is show, in subsequent column the subitems of the listitem are shown.</p>
          <p>To add, change or delete a column use the Columns property</p>
        </descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListView.Column.AIndex">
        <short>Integer to determine the column of the ListView to retreive information on.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.DropTarget">
        <short>
          <var>DropTarget </var> - location where an item from the list is to be dropped</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.FlatScrollBars">
        <short>
          <var>FlatScrollBars </var>- whether the scroll bars are to be displayed flat (default False)</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.FullDrag">
        <short>
          <var>FullDrag</var> - if True, the full object is dragged</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.GridLines">
        <short>Whether <var>GridLines</var> are to be shown</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.HotTrack">
        <short>
          <var>HotTrack</var> - the property whereby the item under the mouse pointer becomes emphasised</short>
        <descr>
          <p>
            <var>HotTrack</var> is the name given to the feature whereby, as the mouse pointer moves over some graphic item (eg a tab, an entry in a list, a button or other control in a form), that item becomes emphasized in some way. </p>
          <p>The default list of emphasis possibilities is given by the definition</p>
          <pre>TListHotTrackStyle = (htHandPoint, htUnderlineCold, htUnderlineHot)
</pre>
          <p>in other words</p>
          <ul>
            <li>it may be indicated by a hand pointer</li>
            <li>it may be underlined even when Cold (ie the pointer has covered it and moved on, but the underlining remains)</li>
            <li>it may be underlined when Hot (ie when the pointer is directly on the item)</li>
          </ul>
          <p>This feature can be used in List Views and in TabControls</p>
        </descr>
        <seealso>
          <link id="#lcl.ComCtrls.TCustomListView.HotTrack">TCustomListView.HotTrack</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.HotTrackStyles">
        <short>The <var>HotTrackStyles</var> available for this control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.ItemFocused">
        <short>
          <var>ItemFocused</var> - the item currently receiving focus</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.RowSelect">
        <short>
          <var>RowSelect </var>- whether the user can select rows of items (across columns). Default false</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.SelCount">
        <short>
          <var>SelCount </var>- the number of items selected</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.Selected">
        <short>
          <var>Selected</var> - the current list item that has been selected</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.TopItem">
        <short>
          <var>TopItem</var> - the first item on the list</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.ViewOrigin">
        <short>
          <var>ViewOrigin </var>- the top left coordinate for the current view</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListView.VisibleRowCount">
        <short>
          <var>VisibleRowCount</var> - the number of rows visible in the current view (some items might have scrolled outside the window)</short>
      </element>
      <!-- object Visibility: default -->
      <element name="TListView">
        <short>
          <var>TListView </var> - a window showing a list of <var>Items</var>, which may or may not have associated icons</short>
        <descr>
          <p>
            <var>TListView </var>- a window showing a list of items, which may or may not have associated icons</p>
          <p>At first, this control looks very like <link id="#lcl.StdCtrls.TListBox">TListBox</link>, but it has a much higher degree of complexity. It is capable of displaying Items in <var>Columns</var> of <var>Rows</var>, and it can have images associated with the list <var>Items</var>.</p>
          <p>The important information is held in <var>Items</var>, a string-list that can be created using the string-list editor obtained by right-clicking on the ListView in the Form Editor or by clicking on the ellipsis (...) next to the <var>Items</var> entry in the Object Inspector.</p>
          <p>A typical application might have two ImageLists: one of<var>LargeImages</var> and one of <var>SmallImages</var>, containing two versions of the same collection of images, in large and small format; the index numbers of the first list would correspond with those in the second list. </p>
          <p>
            <var>SmallImages</var> (if assigned to a string-list) can be displayed beside the text strings in the list view, and the programmer would supply code to ensure that when an item with its associated Small Image was selected, the corresponding Large Image would be displayed in another window.</p>
          <p>One or more <var>TImageList</var> controls need to be selected and pasted on to the Form Designer, and the ImageList Editor can be opened from the pop-up menu obtained by right-clicking on <var>TImageList</var> icon in the Form Designer. The image list can be populated by reading from files. Then in the StringList editor for <var>Items</var> the correct <var>ImageIndex</var> must be allocated to each entry in the list.</p>
        </descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.Align" link="#LCL.Controls.TControl.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.Anchors" link="#LCL.Controls.TControl.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.BorderWidth" link="#LCL.Controls.TWinControl.BorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.Color" link="#LCL.Controls.TControl.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.Columns" link="#LCL.ComCtrls.TCustomListView.Columns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.ColumnClick" link="#LCL.ComCtrls.TCustomListView.ColumnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.Constraints" link="#LCL.Controls.TControl.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.Enabled" link="#LCL.Controls.TControl.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.Font" link="#LCL.Controls.TControl.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.Items" link="#LCL.ComCtrls.TCustomListView.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.LargeImages" link="#LCL.ComCtrls.TCustomListView.LargeImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.MultiSelect" link="#LCL.ComCtrls.TCustomListView.MultiSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.RowSelect" link="#LCL.ComCtrls.TCustomListView.RowSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.ScrollBars" link="#LCL.ComCtrls.TCustomListView.ScrollBars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.ShowColumnHeaders" link="#LCL.ComCtrls.TCustomListView.ShowColumnHeaders">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.SmallImages" link="#LCL.ComCtrls.TCustomListView.SmallImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.SortColumn" link="#LCL.ComCtrls.TCustomListView.SortColumn">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.SortType" link="#LCL.ComCtrls.TCustomListView.SortType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.StateImages" link="#LCL.ComCtrls.TCustomListView.StateImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.ViewStyle" link="#LCL.ComCtrls.TCustomListView.ViewStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.OnChange" link="#LCL.ComCtrls.TCustomListView.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.OnClick" link="#LCL.Controls.TControl.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.OnColumnClick" link="#LCL.ComCtrls.TCustomListView.OnColumnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.OnCompare" link="#LCL.ComCtrls.TCustomListView.OnCompare">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.OnDblClick" link="#LCL.Controls.TControl.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.OnDeletion" link="#LCL.ComCtrls.TCustomListView.OnDeletion">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListView.OnSelectItem" link="#LCL.ComCtrls.TCustomListView.OnSelectItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TProgressBarOrientation">
        <short>
          <var>TProgressBarOrientation</var> - enumerated type with a series of constants denoting the orientation of the progress bar</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TProgressBarOrientation.pbHorizontal">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TProgressBarOrientation.pbVertical">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TProgressBarOrientation.pbRightToLeft">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TProgressBarOrientation.pbTopDown">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomProgressBar">
        <short>The ancestor class for <var>TProgressBar</var>
        </short>
        <descr>
          <var>TCustomProgressBar</var> is the ancestor for <var>TProgressBar</var>. If you want to define your own ProgressBar class, you should derive it from this class.</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomProgressBar.FMin">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomProgressBar.FMax">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomProgressBar.FStep">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomProgressBar.FPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomProgressBar.FSmooth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomProgressBar.FBarShowText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomProgressBar.FBarTextFormat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomProgressBar.FOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomProgressBar.GetMin">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomProgressBar.GetMin.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomProgressBar.GetMax">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomProgressBar.GetMax.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomProgressBar.GetPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomProgressBar.GetPosition.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomProgressBar.SetParams">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomProgressBar.SetParams.AMin">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomProgressBar.SetParams.AMax">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomProgressBar.SetMin">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomProgressBar.SetMin.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomProgressBar.SetMax">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomProgressBar.SetMax.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomProgressBar.SetPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomProgressBar.SetPosition.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomProgressBar.SetStep">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomProgressBar.SetStep.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomProgressBar.SetSmooth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomProgressBar.SetSmooth.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomProgressBar.SetBarShowText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomProgressBar.SetBarShowText.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomProgressBar.SetOrientation">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomProgressBar.SetOrientation.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomProgressBar.ApplyChanges">
        <short>
          <var>ApplyChanges</var> - apply any changes that have occurred</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomProgressBar.InitializeWnd">
        <short>
          <var>InitializeWnd</var> calls inherited method then applies changes</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.InitializeWnd">TWinControl.InitializeWnd</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomProgressBar.Loaded">
        <short>
          <var>Loaded</var> calls inherited method then applies changes</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.Loaded">TWinControl.Loaded</link>
        </seealso>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomProgressBar.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomProgressBar</var>: calls inherited <var>Create</var>, initialises position, orientation and size</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
          <link id="#LCL.Controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomProgressBar.Create.AOwner">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomProgressBar.StepIt">
        <short>
          <var>StepIt</var> - move indicator to new position (current position plus Step)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomProgressBar.StepBy">
        <short>
          <var>StepBy</var> - move indicator by amount specified in Delta</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomProgressBar.StepBy.Delta">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomProgressBar.Max">
        <short>
          <var>Max</var> - maximum value for progressbar</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomProgressBar.Min">
        <short>
          <var>Min</var> - minimum value of progressbar</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomProgressBar.Orientation">
        <short>
          <var>Orientation</var> - horizontal or vertical</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomProgressBar.Position">
        <short>
          <var>Position</var> of indicator along progressbar</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomProgressBar.Smooth">
        <short>Whether <var>Smooth</var> display (True) or stepped</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomProgressBar.Step">
        <short>
          <var>Step</var> - size of increment for display</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomProgressBar.BarShowText">
        <short>
          <var>BarShowText</var> - some widget sets allow text to be displayed on the bar to indicate its position (eg 32%)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TProgressBar">
        <short>
          <var>TProgress Bar</var> - a bar that depicts what proportion of a process has been completed</short>
        <descr>
          <var>TProgress Bar</var>: a control that appears at or near the bottom of form or window. It depicts the progress of a process, or what proportion of the process is complete. A series of coloured rectangles appears in the control, filling it from left to right or from top to bottom as the process progresses</descr>
        <seealso>
          <link id="#lcl.stdctrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.Align" link="#LCL.Controls.TControl.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.Anchors" link="#LCL.Controls.TControl.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.BorderWidth" link="#LCL.Controls.TWinControl.BorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.Constraints" link="#LCL.Controls.TControl.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.DragCursor" link="#LCL.Controls.TControl.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.DragKind" link="#LCL.Controls.TControl.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.DragMode" link="#LCL.Controls.TControl.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.Enabled" link="#LCL.Controls.TControl.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.Hint" link="#LCL.Controls.TControl.Hint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.Max" link="#LCL.ComCtrls.TCustomProgressBar.Max">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.Min" link="#LCL.ComCtrls.TCustomProgressBar.Min">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.OnDragOver" link="#LCL.Controls.TControl.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.OnStartDock" link="#LCL.Controls.TControl.OnStartDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.Orientation" link="#LCL.ComCtrls.TCustomProgressBar.Orientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.Position" link="#LCL.ComCtrls.TCustomProgressBar.Position">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.Smooth" link="#LCL.ComCtrls.TCustomProgressBar.Smooth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.Step" link="#LCL.ComCtrls.TCustomProgressBar.Step">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TProgressBar.BarShowText" link="#LCL.ComCtrls.TCustomProgressBar.BarShowText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TUDAlignButton">
        <short>
          <var>TUDAlignButton</var> - enumerated type contains constants for alignment of an UpDown button</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TUDAlignButton.udLeft">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TUDAlignButton.udRight">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TUDAlignButton.udTop">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TUDAlignButton.udBottom">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TUDOrientation">
        <short>
          <var>TUDOrientation</var> - enumerated type with constants for orientation of UpDown button (Horizontal or Vertical)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TUDOrientation.udHorizontal">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TUDOrientation.udVertical">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TUDBtnType">
        <short>
          <var>TUDBtnType</var> - enumerated type with constants describing the buttons of an UpDown control: Next or Previous</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TUDBtnType.btNext">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TUDBtnType.btPrev">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TUDClickEvent">
        <short>
          <var>TUDClickEvent</var> - generic event handling procedure for clicking on an UpDown button</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TUDClickEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TUDClickEvent.Button">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TUDChangingEvent">
        <short>
          <var>TUDChangingEvent</var> - generic event handling procedure for changes in UpDown button</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TUDChangingEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TUDChangingEvent.AllowChange">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomUpDown">
        <short>
          <var>TCustomUpDown</var> - base class for <var>TUpDown</var> - a pair of arrow-like buttons which are used to increment or decrement some controlled variable; often attached to a scroll-bar, but can also control a digital numeric display</short>
        <descr>
          <p>
            <var>TCustomUpDown</var> - base class for <var>TUpDown</var> - a pair of arrow-like buttons which are used to increment or decrement some controlled variable; often attached to a scroll-bar, but can also control a digital numeric display
</p>
          <p>The control definition itself does not specify the variable upon which the buttons operate. The application programmer is responsible for supplying an event handler for <var>OnClick</var> to determine which button has been selected (designated <var>btNext</var> or <var>btPrev</var>) and incrementing or decrementing the variable in the control with which the UpDown is associated. </p>
          <p>The amount by which the variable is changed is set by the integer property <var>Increment</var> with the optional multiplier <var>Thousands</var> (a boolean property).</p>
          <p>For example the UpDown control may be used to move a slider up and down a scale by a specified amount for each click; alternatively, a number may be displayed in a text box, and clicking the buttons of the UpDown control may increment or decrement the number displayed by a specified amount.</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomUpDown.MinBtn">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomUpDown.MaxBtn">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomUpDown.BTimerProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomUpDown.BTimerBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomUpDown.FArrowKeys">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomUpDown.FAssociate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomUpDown.FMin">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomUpDown.FMax">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomUpDown.FIncrement">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomUpDown.FPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomUpDown.FThousands">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomUpDown.FWrap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomUpDown.FOnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomUpDown.FAlignButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomUpDown.FOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomUpDown.FOnChanging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomUpDown.GetPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomUpDown.GetPosition.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomUpDown.BTimerExec">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.BTimerExec.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomUpDown.SetAlignButton">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.SetAlignButton.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomUpDown.SetArrowKeys">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.SetArrowKeys.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomUpDown.SetAssociate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.SetAssociate.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomUpDown.SetIncrement">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.SetIncrement.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomUpDown.SetMax">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.SetMax.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomUpDown.SetMin">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.SetMin.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomUpDown.SetOrientation">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.SetOrientation.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomUpDown.SetPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.SetPosition.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomUpDown.SetThousands">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.SetThousands.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomUpDown.SetWrap">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.SetWrap.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomUpDown.UpdateAlignButtonPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomUpDown.UpdateOrientation">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomUpDown.UpdateUpDownPositionText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomUpDown.OldKeyDown">
        <short>
          <var>OldKeyDown</var> - the previous (stored) value of the key</short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomUpDown.AssociateKeyDown">
        <short>
          <var>AssociateKeyDown</var> - protected procedure for dealing with action to be taken if an associate key (Shift, Ctrl or Alt) is pressed while the control is active</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.AssociateKeyDown.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.AssociateKeyDown.Key">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.AssociateKeyDown.ShiftState">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomUpDown.OnAssociateChangeBounds">
        <short>
          <var>OnAssociateChangeBounds</var> - event handler for a change in bounds of the associate control</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.OnAssociateChangeBounds.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomUpDown.DoOnResize" link="#LCL.Controls.TControl.DoOnResize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomUpDown.CanChange">
        <short>
          <var>CanChange</var> - if True, control can be changed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomUpDown.CanChange.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomUpDown.Notification">
        <short>
          <var>Notification</var> calls inherited method; if the operation requires removal of the associate control, this is performed</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.Notification">TControl.Notification</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomUpDown.Click">
        <short>
          <var>Click</var> - calls <var>OnClick</var> event handler if it is assigned</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.Click">TControl.Click</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.Click.Button">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomUpDown.AlignButton">
        <short>
          <var>AlignButton</var> - how to align the button: left or right</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomUpDown.ArrowKeys">
        <short>
          <var>ArrowKeys</var> - if True, the control can be operated by the keyboard's arrow keys, which would simulate a click on the Next or Previous button</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomUpDown.Associate">
        <short>
          <var>Associate</var> - the associated control whose properties (controlled variable) are to be changed by the UpDown control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomUpDown.Min">
        <short>
          <var>Min</var> - least value of controlled variable</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomUpDown.Max">
        <short>
          <var>Max</var> - greatest value of controlled variable</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomUpDown.Increment">
        <short>The amount by which the controlled variable is to be increased or decreased on each click</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomUpDown.Orientation">
        <short>Whether horizontal or vertical</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomUpDown.Position">
        <short>The <var>Position</var> of the UpDown control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomUpDown.Thousands">
        <short>If True, multiply all displayed values and the Increment by 1000</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomUpDown.Wrap">
        <short>If True, displayed control or value starts again from minimum or maximum value if  clicking a button would cause incrementing or decrmenting beyond the extreme value</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomUpDown.OnChanging">
        <short>
          <var>OnChanging</var> - event handler for a change in the value of the controlled variable</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomUpDown.OnClick">
        <short>
          <var>OnClick</var> - special event handler for a click on up or down button</short>
        <descr>
          <p>
            <var>OnClick</var> - special event handler for a click on up or down button</p>
          <p>The event handler must determine whether the [next] or [prev] button was clicked, and therefore whether to increment or decrement the controlled variable and adjust the display</p>
        </descr>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomUpDown.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomUpDown</var>: calls inherited <var>Create</var>, initialises orientation, max and min, bounds, size and alignment</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
          <link id="#lcl.Controls.TCustomControl.Create">TCustomControl.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomUpDown.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomUpDown.Destroy">
        <short>
          <var>Destroy</var>  - destructor for <var>TCustomUpDown</var>: removes connection with associate control and calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Destroy">TComponent.Destroy</link>
          <link id="#LCL.Controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
        </seealso>
      </element>
      <!-- object Visibility: default -->
      <element name="TUpDown">
        <short>
          <var>TUpDown</var> - a pair of arrow-like buttons which are used to increment or decrement some controlled variable; often attached to a scroll-bar, but can also control a digital numeric display</short>
        <descr>
          <p>
            <var>TUpDown</var> - a pair of arrow-like buttons which are used to increment or decrement some controlled variable; often attached to a scroll-bar, but can also control a digital numeric display
          </p>
          <p>The control definition itself does not specify the variable upon which the buttons operate. The application programmer is responsible for supplying an event handler for <var>OnClick</var> to determine which button has been selected (designated <var>btNext</var> or <var>btPrev</var>) and incrementing or decrementing the variable in the control with which the UpDown is associated. </p>
          <p>The amount by which the variable is changed is set by the integer property <var>Increment</var> with the optional multiplier <var>Thousands</var> (a boolean property).</p>
          <p>For example the UpDown control may be used to move a slider up and down a scale by a specified amount for each click; alternatively, a number may be displayed in a text box, and clicking the buttons of the UpDown control may increment or decrement the number displayed by a specified amount.</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.AlignButton" link="#LCL.ComCtrls.TCustomUpDown.AlignButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.Anchors" link="#LCL.Controls.TControl.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.Associate" link="#LCL.ComCtrls.TCustomUpDown.Associate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.ArrowKeys" link="#LCL.ComCtrls.TCustomUpDown.ArrowKeys">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.Enabled" link="#LCL.Controls.TControl.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.Hint" link="#LCL.Controls.TControl.Hint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.Min" link="#LCL.ComCtrls.TCustomUpDown.Min">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.Max" link="#LCL.ComCtrls.TCustomUpDown.Max">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.Increment" link="#LCL.ComCtrls.TCustomUpDown.Increment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.Constraints" link="#LCL.Controls.TControl.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.Orientation" link="#LCL.ComCtrls.TCustomUpDown.Orientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.Position" link="#LCL.ComCtrls.TCustomUpDown.Position">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.Thousands" link="#LCL.ComCtrls.TCustomUpDown.Thousands">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.Wrap" link="#LCL.ComCtrls.TCustomUpDown.Wrap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.OnChanging" link="#LCL.ComCtrls.TCustomUpDown.OnChanging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.OnClick" link="#LCL.ComCtrls.TCustomUpDown.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TUpDown.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="CN_DROPDOWNCLOSED">
        <short>Message constant.</short>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TToolButtonStyle">
        <short>
          <var>TToolButtonStyle</var> - enumerated type that determines the style of the tool buttons.</short>
        <descr>
          <p>These are the possible values of Style:</p>
          <ul>
            <li>
              <b>tbsButton</b>
 - The button appears and functions like a normal button.</li>
            <li>
              <b>tbsCheck</b>
 - Clicking the button toggles the Down property. Once selected, the button remains selected until clicked again.</li>
            <li>
              <b>tbsDivider</b>
 - The button appears as a vertical line on the toolbar (used to separate other controls).</li>
            <li>
              <b>tbsDropDown</b>
 - The button displays a downwards-pointing arrow (suitable for accessing a drop-down menu).</li>
            <li>
              <b>tbsSeparator</b>
 - The button appears as an empty space on the toolbar (used to separate other controls).</li>
          </ul>
        </descr>
        <seealso>
          <link id="#LCL.ComCtrls.TToolButton"/>
        </seealso>
        <example file="comctrls/ttoolbutton.pas"/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TToolButtonStyle.tbsButton">
        <descr>The button appears and functions like a normal button.</descr>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TToolButtonStyle.tbsCheck">
        <descr>Clicking the button toggles the Down property. Once selected, the button remains selected until clicked again.</descr>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TToolButtonStyle.tbsDropDown">
        <descr>The button displays a downwards-pointing arrow (suitable for accessing a drop-down menu).</descr>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TToolButtonStyle.tbsSeparator">
        <descr>The button appears as an empty space on the toolbar (used to separate other controls).</descr>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TToolButtonStyle.tbsDivider">
        <descr>The button appears as a vertical line on the toolbar (used to separate other controls).</descr>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TToolButtonFlag">
        <short>
          <var>TToolButtonFlag</var> - a series of flags that can be set by pressing the mouse on the control</short>
        <descr>
          <p>tbfPressed,     // set while mouse is pressed on button</p>
          <p>tbfArrowPressed // set while mouse is pressed on arrow button</p>
        </descr>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TToolButtonFlag.tbfPressed">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TToolButtonFlags">
        <short>
          <var>TToolButtonFlags</var> - set of <var>TToolButtonFlag</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TToolButtonActionLink">
        <short>
          <var>TToolButtonActionLink</var> - links a ToolButton on the ToolBar to an Action on an ActionList</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButtonActionLink.AssignClient">
        <short>
          <var>AssignClient</var> calls inherited method then sets client as ToolButton</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TBasicActionLink.AssignClient">TBasicActionLink.AssignClient</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButtonActionLink.AssignClient.AClient">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TToolButtonActionLink.IsCheckedLinked" link="#LCL.ActnList.TActionLink.IsCheckedLinked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TToolButtonActionLink.IsCheckedLinked.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TToolButtonActionLink.IsImageIndexLinked" link="#LCL.ActnList.TActionLink.IsImageIndexLinked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TToolButtonActionLink.IsImageIndexLinked.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButtonActionLink.SetChecked">
        <short>
          <var>SetChecked</var> - stores the Checked status (True or False)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButtonActionLink.SetChecked.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButtonActionLink.SetImageIndex">
        <short>
          <var>SetImageIndex</var> - stores the index value of the associated image</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButtonActionLink.SetImageIndex.Value">
        <short/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TToolButtonActionLinkClass">
        <short>
          <var>TToolButtonActionLinkClass</var> - class of <var>TToolButtonActionLink</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TToolButton">
        <short>
          <var>TToolButton</var> is a button control in a <var>TToolBar</var> object.</short>
        <descr>
          <p>Use <var>TToolButton</var> to implement buttons on a toolbar. While other controls (including <var>TButton</var> and <var>TSpeedButton</var>) can be placed on toolbars, <var>TToolButton</var> utilizes special toolbar features to simplify the configuration of buttons and offers added display options such as pop-up borders and transparency.</p>
          <p>To place tool buttons on a toolbar at design time, select the toolbar, right-click, and choose New Button.</p>
        </descr>
        <seealso>
          <link id="TToolBar"/>
          <link id="#lcl.stdctrls.TButton">TButton</link>
          <link id="#lcl.Buttons.TSpeedButton">TSpeedButton</link>
          <link id="#lcl.stdctrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
        </seealso>
        <example file="comctrls/ttoolbutton.pas"/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolButton.FAllowAllUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolButton.FDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolButton.FDropdownMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolButton.FGrouped">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolButton.FImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolButton.FIndeterminate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolButton.FLastButtonDrawFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolButton.FMarked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolButton.FMenuItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolButton.FMouseInControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolButton.FStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolButton.FToolButtonFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolButton.FUpdateCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolButton.FWrap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolButton.GetGroupBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.GetGroupBounds.StartIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.GetGroupBounds.EndIndex">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TToolButton.GetIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TToolButton.GetIndex.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TToolButton.IsCheckedStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TToolButton.IsCheckedStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TToolButton.IsImageIndexStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TToolButton.IsImageIndexStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TToolButton.IsWidthStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TToolButton.IsWidthStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolButton.SetAutoSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.SetAutoSize.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolButton.SetDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.SetDown.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolButton.SetDropdownMenu">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.SetDropdownMenu.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolButton.SetGrouped">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.SetGrouped.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolButton.SetImageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.SetImageIndex.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolButton.SetIndeterminate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.SetIndeterminate.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolButton.SetMarked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.SetMarked.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolButton.SetMenuItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.SetMenuItem.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolButton.SetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.SetStyle.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolButton.SetWrap">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.SetWrap.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolButton.SetMouseInControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.SetMouseInControl.NewMouseInControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolButton.CMHitTest">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.CMHitTest.Message">
        <short/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TToolButton.FToolBar">
        <short>
          <var>FToolBar</var> - local variable indicating in which toolbar this button lives</short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.CopyPropertiesFromMenuItem">
        <short>
          <var>CopyPropertiesFromMenuItem</var> - method for copying the properties of the corresponding Menu Item, to ensure that ToolButton and MenuItem produce the same behaviour</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.CopyPropertiesFromMenuItem.Value">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TToolButton.GetActionLinkClass">
        <short>
          <var>GetActionLinkClass</var> - returns the Class of the ActionLink for this ToolButton</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.GetActionLinkClass">TControl.GetActionLinkClass</link>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TToolButton.GetActionLinkClass.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.ActionChange">
        <short>
          <var>ActionChange</var> -  a method for changing the action associated with the Button</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.ActionChange">TControl.ActionChange</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.ActionChange.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.ActionChange.CheckDefaults">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.AssignTo">
        <short>
          <var>AssignTo</var> calls inherited method: if the destination is of correct type, copies <var>ImageIindex</var> to destination and sets it Checked</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TPersistent.AssignTo">TPersistent.AssignTo</link>
          <link id="#LCL.Controls.TControl.AssignTo">TControl.AssignTo</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.AssignTo.Dest">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.BeginUpdate">
        <short>
          <var>BeginUpdate</var> - start the update process</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.EndUpdate">
        <short>
          <var>EndUpdate</var> - finish the update process</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.MouseDown" link="#LCL.Controls.TControl.MouseDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.MouseDown.Button">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.MouseDown.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.MouseDown.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.MouseDown.Y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.MouseMove" link="#LCL.Controls.TControl.MouseMove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.MouseMove.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.MouseMove.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.MouseMove.Y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.MouseUp" link="#LCL.Controls.TControl.MouseUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.MouseUp.Button">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.MouseUp.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.MouseUp.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.MouseUp.Y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.MouseEnter" link="#LCL.Controls.TControl.MouseEnter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.MouseLeave" link="#LCL.Controls.TControl.MouseLeave">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.Notification" link="#rtl.Classes.TComponent.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.Paint" link="#LCL.Controls.TGraphicControl.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.Loaded" link="#LCL.Controls.TControl.Loaded">
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Loaded">TComponent.Loaded</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.RefreshControl">
        <short>
          <var>RefreshControl</var> - refreshes the drawing of the tool, in case changes have been made</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.SetToolBar">
        <short>
          <var>SetToolBar</var> - records the existence of a new toolbar</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.SetToolBar.NewToolBar">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.UpdateControl">
        <short>
          <var>UpdateControl</var> - brings the control up to date</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TToolButton.GetButtonDrawFlags">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TToolButton.GetButtonDrawFlags.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.SetParent" link="#LCL.Controls.TControl.SetParent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.SetParent.AParent">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.UpdateVisibleToolbar">
        <short>
          <var>UpdateVisibleToolbar</var> - updates just the visible part of the toolbar</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TToolButton.GroupAllUpAllowed">
        <short>
          <var>GroupAllUpAllowed</var> - returns True if all buttons in a group are allowed to ne 'Up'</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TToolButton.GroupAllUpAllowed.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolButton.DoSetBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.DoSetBounds.ALeft">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.DoSetBounds.ATop">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.DoSetBounds.AWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.DoSetBounds.AHeight">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TToolButton.Create">
        <short>
          <var>Create</var> - constructor for <var>TToolButton</var>: calls inherited <var>Create</var> and sets initial bounds and style</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
          <link id="#LCL.Controls.TGraphicControl.Create">TGraphicControl.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.Create.TheOwner">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TToolButton.CheckMenuDropdown">
        <short>
          <var>CheckMenuDropdown</var> - returns True if there is a  checked dropdown menu</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TToolButton.CheckMenuDropdown.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TToolButton.GetCurrentIcon">
        <short>
          <var>GetCurrentIcon</var> - finds the icon for the current button</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.GetCurrentIcon.ImageList">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolButton.GetCurrentIcon.TheIndex">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TToolButton.Index">
        <short>
          <var>Index </var>- the sequence number of the current button in the list of buttons</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.Action" link="#LCL.Controls.TControl.Action">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.AllowAllUp">
        <short>
          <var>AllowAllUp</var> - if True, all buttons are allowed to be 'Up' at the same time. Default False</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.AutoSize" link="#LCL.Controls.TControl.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.Caption" link="#LCL.Controls.TControl.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.Down">
        <short>Is this button <var>Down</var> (ie has it been selected)? Default false</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.DragCursor" link="#LCL.Controls.TControl.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.DragKind" link="#LCL.Controls.TControl.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.DragMode" link="#LCL.Controls.TControl.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.DropdownMenu">
        <short>A <var>DropDownMenu</var> that appears when this button is selected</short>
        <descr>
          <p>A <var>DropDownMenu</var> that appears when this button is selected</p>
          <p>It uses the same code as a <link id="#lcl.Menus.TPopupMenu">TPopupMenu</link>, and offers a series of additional menu choices.</p>
        </descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.Enabled" link="#LCL.Controls.TControl.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.Grouped">
        <short>Is this button a member of a group? Default false</short>
        <descr>
          <p>Is this button a member of a group?</p>
          <p>This would mean behaviour similar to the radio buttons in a <link id="#lcl.ExtCtrls.TRadioGroup">TRadioGroup</link>, where only one button in the group can be selected, or the check boxes in a <link id="#lcl.ExtCtrls.TCheckGroup">TCheckGroup</link> where more than one item can be selected but the members of the group interact in some way.</p>
        </descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.Height" link="#LCL.Controls.TControl.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.ImageIndex">
        <short>
          <var>ImageIndex </var>- the index value of the image from the imagelist to be used with this button</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.Indeterminate">
        <short>
          <var>Indeterminate</var> - if True, this button is in an unspecified state. Default False</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.Marked">
        <short>Is this button <var>Marked</var> (ie has it been selected)? Default false</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.MenuItem">
        <short>The item on the Main Menu with which this tool button is associated</short>
        <descr>
          <p>The item on the Main Menu with which this tool button is associated</p>
          <p>Typically, the buttons on the toolbar would each point to an entry on the menu action list, which could also be accessed by using the Main Menu</p>
        </descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.Wrap">
        <short>Has this button been wrapped to the next row?</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.Style">
        <short>Determines the style of the tool button.</short>
        <descr>See TToolButtonStyle for the possible Style values.</descr>
        <seealso>
          <link id="#LCL.ComCtrls.TToolButtonStyle"/>
        </seealso>
        <example file="comctrls/ttoolbutton.pas"/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.Width" link="#LCL.Controls.TControl.Width"/>
      <!-- property Visibility: published -->
      <element name="TToolButton.OnClick" link="#LCL.Controls.TControl.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.OnDragOver" link="#LCL.Controls.TControl.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolButton.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TToolBarFlag">
        <short>
          <var>TToolBarFlag</var> - enumerated type for flags denoting status of ToolBar</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TToolBarFlag.tbfUpdateVisibleBarNeeded">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TToolBarFlag.tbfPlacingControls">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TToolBarFlags">
        <short>
          <var>TToolBarFlags</var> - set of <var>TToolBarFlag</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TToolBar"/>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FButtonHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FRealizedButtonHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FButtons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FButtonWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FDisabledImageChangeLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FDisabledImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FDropDownWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FDropDownButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FFlat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FHotImageChangeLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FHotImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FImageChangeLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FIndent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FNewStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FRowCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FShowCaptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FCurrentMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FCurrentMenuAutoFree">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FSrcMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FSrcMenuItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FToolBarFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FTransparent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FUpdateCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TToolBar.FWrapable">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TToolBar.GetButton">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TToolBar.GetButton.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.GetButton.Index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TToolBar.GetButtonCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TToolBar.GetButtonCount.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.SetButtonHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.SetButtonHeight.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.SetButtonWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.SetButtonWidth.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.SetDisabledImages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.SetDisabledImages.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.SetFlat">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.SetFlat.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.SetHotImages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.SetHotImages.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.SetImages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.SetImages.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.SetIndent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.SetIndent.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.SetList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.SetList.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.SetShowCaptions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.SetShowCaptions.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.SetTransparent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.SetTransparent.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.SetWrapable">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.SetWrapable.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.ToolButtonDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.ToolButtonDown.AButton">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.ToolButtonDown.NewDown">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.ImageListChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.ImageListChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.DisabledImageListChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.DisabledImageListChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.HotImageListChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.HotImageListChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.UpdateVisibleBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.OnTemporaryPopupMenuClose">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.OnTemporaryPopupMenuClose.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.MoveSubMenuItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.MoveSubMenuItems.SrcMenuItem">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.MoveSubMenuItems.DestMenuItem">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.AddButton">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.AddButton.Button">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TToolBar.RemoveButton">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.RemoveButton.Button">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TToolBar.CanAutoSize" link="#LCL.Controls.TControl.CanAutoSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TToolBar.CanAutoSize.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.CanAutoSize.NewWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.CanAutoSize.NewHeight">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TToolBar.CheckMenuDropdown">
        <short>
          <var>CheckMenuDropdown</var> - returns True if there is a  checked dropdown menu</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TToolBar.CheckMenuDropdown.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.CheckMenuDropdown.Button">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolBar.ClickButton">
        <short>
          <var>ClickButton</var> - software emulation of the <var>OnClick</var> event</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.ClickButton.Button">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolBar.CreateParams" link="#LCL.Controls.TWinControl.CreateParams">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.CreateParams.Params">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolBar.CreateWnd" link="#LCL.Controls.TWinControl.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolBar.ControlsAligned" link="#LCL.Controls.TWinControl.ControlsAligned">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TToolBar.FindButtonFromAccel">
        <short>
          <var>FindButtonFromAccel</var> - returns the Button corresponding to the specified accelerator key</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TToolBar.FindButtonFromAccel.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.FindButtonFromAccel.Accel">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolBar.Loaded" link="#LCL.Controls.TWinControl.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolBar.Notification" link="#LCL.Controls.TControl.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolBar.RepositionButton">
        <short>
          <var>RepositionButton</var> - method for re-positioning a button</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.RepositionButton.Index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TToolBar.RepositionButtons">
        <short>
          <var>RepositionButtons</var> - method for re-positioning several buttons</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.RepositionButtons.Index">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TToolBar.WrapButtons">
        <short>
          <var>WrapButtons</var> - returns True if changing to NewHeight and NewWidth causes wrapping of buttons</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TToolBar.WrapButtons.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.WrapButtons.NewWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.WrapButtons.NewHeight">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TToolBar.Create">
        <short>
          <var>Create</var> - constructor for <var>TToolBar</var>: calls inherited <var>Create</var> and sets many formatting and size defaults</short>
        <descr>
          <p>
            <var>Create</var> - constructor for <var>TToolBar</var>: calls inherited <var>Create</var> and sets many formatting and size defaults</p>
          <p>Among the variables initialised and defaults set are the list of buttons, button width and height, style, indentation, alignment, links for image change, the bounds and the edge borders</p>
        </descr>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TToolBar.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TToolBar</var>: frees buttons and links then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Destroy">TComponent.Destroy</link>
          <link id="#LCL.Controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TToolBar.FlipChildren" link="#LCL.Controls.TWinControl.FlipChildren">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.FlipChildren.AllLevels">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TToolBar.BeginUpdate">
        <short>
          <var>BeginUpdate</var> - starts the update process</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TToolBar.EndUpdate">
        <short>
          <var>EndUpdate</var> - finishes the update process</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TToolBar.Paint" link="#LCL.Controls.TCustomControl.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TToolBar.SetButtonSize">
        <short>
          <var>SetButtonSize</var> - stores new values for height and width</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.SetButtonSize.NewButtonWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.SetButtonSize.NewButtonHeight">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TToolBar.ButtonCount">
        <short>
          <var>ButtonCount</var> - the number of buttons on the ToolBar</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TToolBar.Buttons">
        <short>Lists the tool buttons (<var>TToolButton</var>) in the toolbar.</short>
        <descr>
          <p>
            <var>Buttons</var> maintains a list of <var>TToolButton</var> instances. All tool buttons that share a <var>TToolBar</var> parent have the same height and (except for separators and dividers) the same width. Other controls on a toolbar are held in place by invisible separators, which are automatically created and destroyed.</p>
          <p>To add tool buttons to the toolbar at design time, select the toolbar, right-click, and choose New Button. To create a space (separator) between one button and the next, select New Separator. To create a divider between buttons, add a button and set its <var>Style</var> propery to <var>tbsDivider</var>. Other controls may be added to the toolbar directly from the Component palette. </p>
        </descr>
        <seealso>
          <link id="#LCL.ComCtrls.TToolButton.Style"/>
        </seealso>
        <example file="comctrls/ttoolbutton.pas"/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToolBar.Buttons.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TToolBar.ButtonList">
        <short>
          <var>ButtonList</var> - the list of Buttons (as a <var>TList</var>)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TToolBar.RowCount">
        <short>
          <var>RowCount</var> - the number of Rows of Buttons</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.Align" link="#LCL.Controls.TControl.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.AutoSize" link="#LCL.Controls.TControl.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.BorderWidth" link="#LCL.Controls.TWinControl.BorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.ButtonHeight">
        <short>
          <var>ButtonHeight</var> - the height of the buttons</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.ButtonWidth">
        <short>
          <var>ButtonWidth</var> - the width of the buttons</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.Caption" link="#LCL.Controls.TControl.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.ChildSizing" link="#LCL.Controls.TWinControl.ChildSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.Constraints" link="#LCL.Controls.TControl.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.Color" link="#LCL.Controls.TControl.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.Ctl3D" link="#LCL.Controls.TControl.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.DisabledImages">
        <short>The Images on the Image List that are NOT selected for display</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.DragCursor" link="#LCL.Controls.TControl.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.DragKind" link="#LCL.Controls.TControl.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.DragMode" link="#LCL.Controls.TControl.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.EdgeBorders">
        <short>
          <var>EdgeBorders</var> - which borders form the edge</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.EdgeInner">
        <short>
          <var>EdgeInner</var> - this toolbar has an inner edge</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.EdgeOuter">
        <short>
          <var>EdgeOuter</var> - this toolbar has an outer edge</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.Enabled" link="#LCL.Controls.TControl.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.Flat">
        <short>Should the toolbuttons be displayed Flat (rather than in relief)? Default false</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.Font" link="#LCL.Controls.TControl.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.Height" link="#LCL.Controls.TControl.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.HotImages">
        <short>The Images on the Image list that are selected for display</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.Images">
        <short>The <var>Images</var> to be displayed on the buttons</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.Indent">
        <short>
          <var>Indent</var> - the amount by which the buttons should be indented Default is 1</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.List">
        <short>Should the contents of the toolbar be displayed as a <var>List</var>? Default false</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.ParentColor" link="#LCL.Controls.TControl.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.ParentFont" link="#LCL.Controls.TControl.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.ShowCaptions">
        <short>
          <var>ShowCaptions</var> - should the captions be shown for the buttons? (Default False)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.Transparent">
        <short>Is the ToolBar to be <var>Transparent</var>? Default False</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.Wrapable">
        <short>
          <var>Wrapable</var> - enables wrapping buttons to the next row if there are too many for the current row</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.OnClick" link="#LCL.Controls.TControl.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.OnDblClick" link="#LCL.Controls.TControl.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.OnDragOver" link="#LCL.Controls.TControl.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.OnResize" link="#LCL.Controls.TControl.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToolBar.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TTrackBarOrientation">
        <short>
          <var>TTrackBarOrientation</var> - enumerated type denoting horizontal or vertical orientation for TrackBar</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTrackBarOrientation.trHorizontal">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTrackBarOrientation.trVertical">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TTickMark">
        <short>
          <var>TTickMark</var> - enumerated type denoting position of tick marks relative to the TrackBar</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTickMark.tmBottomRight">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTickMark.tmTopLeft">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTickMark.tmBoth">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TTickStyle">
        <short>
          <var>TTickStyle</var> - enumerated type denoting style of tick marks</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTickStyle.tsNone">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTickStyle.tsAuto">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTickStyle.tsManual">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TTrackBarScalePos">
        <short>
          <var>TTrackBarScalePos</var> - enumerated type denoting position of the scale for a TrackBar</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTrackBarScalePos.trLeft">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTrackBarScalePos.trRight">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTrackBarScalePos.trTop">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTrackBarScalePos.trBottom">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomTrackBar">
        <short>
          <var>TCustomTrackBar</var> - the base class for <var>TTrackBar</var>
        </short>
        <descr>
          <p>
            <var>TCustomTrackBar</var> defines many of the properties inherited by <var>TTrackBar</var>, a device that allows the user to determine the value of a variable using a quasi-analog slider</p>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTrackBar.FOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTrackBar.FTickMarks">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTrackBar.FTickStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTrackBar.FLineSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTrackBar.FPageSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTrackBar.FMin">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTrackBar.FMax">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTrackBar.FFrequency">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTrackBar.FPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTrackBar.FShowScale">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTrackBar.FScalePos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTrackBar.FScaleDigits">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTrackBar.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTrackBar.SetFrequency">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTrackBar.SetFrequency.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTrackBar.SetLineSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTrackBar.SetLineSize.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTrackBar.SetMax">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTrackBar.SetMax.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTrackBar.SetMin">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTrackBar.SetMin.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTrackBar.SetOrientation">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTrackBar.SetOrientation.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTrackBar.SetPageSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTrackBar.SetPageSize.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTrackBar.SetParams">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTrackBar.SetParams.APosition">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTrackBar.SetParams.AMin">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTrackBar.SetParams.AMax">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTrackBar.SetPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTrackBar.SetPosition.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTrackBar.SetScalePos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTrackBar.SetScalePos.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTrackBar.SetShowScale">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTrackBar.SetShowScale.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTrackBar.SetTickMarks">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTrackBar.SetTickMarks.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTrackBar.SetTickStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTrackBar.SetTickStyle.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTrackBar.UpdateSelection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTrackBar.ApplyChanges">
        <short>
          <var>ApplyChanges</var> - implement any pending changes</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTrackBar.DoChange">
        <short>
          <var>DoChange</var> - system message to implement changes</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTrackBar.DoChange.msg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTrackBar.InitializeWnd" link="#LCL.Controls.TWinControl.InitializeWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTrackBar.Loaded" link="#LCL.Controls.TWinControl.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomTrackBar.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomTrackBar</var>: calls inherited <var>Create</var> then initialises style, position, size and bounds</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
          <link id="#LCL.Controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTrackBar.Create.AOwner">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTrackBar.SetTick">
        <short>
          <var>SetTick</var> - set the interval for ticks on the taskbar (integer)</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTrackBar.SetTick.Value">
        <short/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomTrackBar.Frequency">
        <short>
          <var>Frequency </var>- how frequently the position of the slider is to be read and updated (currently unsupported)</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomTrackBar.LineSize">
        <short>
          <var>Line-Size </var>- increment for slider position when an arrow key is pressed</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomTrackBar.Max">
        <short>
          <var>Max </var>- the value corresponding to full movement of the slider. Default = 10</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomTrackBar.Min">
        <short>
          <var>Min</var>  - the value associated with the minimum slider position. Default = 0</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomTrackBar.OnChange">
        <short>
          <var>OnChange</var> - action to be taken on change in the slider position</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomTrackBar.Orientation">
        <short>
          <var>Orientation</var>  - horizontal or vertical</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomTrackBar.PageSize">
        <short>
          <var>PageSize</var> - increment for slider position when PageUp or PageDown key is pressed</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomTrackBar.Position">
        <short>
          <var>Position </var>- the location of the slider along the track bar. Represents the Return value from the control</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomTrackBar.ScalePos">
        <short>
          <var>ScalePos </var>- whether scaling label appears at top, bottom, left or right</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomTrackBar.ShowScale">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomTrackBar.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomTrackBar.TickMarks">
        <short>
          <var>Tickmarks </var>- whether the ticks are above/left, below/right, or both</short>
        <descr>
          <var>Tickmarks </var>- where the ticks appear relative to the bar: above/left, below/right, or both</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomTrackBar.TickStyle">
        <short>
          <var>TickStyle </var>- none, produced automatically, or calculated manually</short>
      </element>
      <!-- object Visibility: default -->
      <element name="TTrackBar">
        <short>
          <var>TTrackBar</var>: a device which allows the user to determine the value of a variable using a quasi-analog slider</short>
        <descr>
          <p>
            <var>TTrackBar</var>: a device which allows the user to determine the value of a variable using a quasi-analog slider</p>
          <p>The device looks like a slider-potentiometer control on a hi-fi amplifier, and consists of a slider which can be moved along a bar using the mouse. Tick marks can be displayed along one or both edges, giving an indication of the proportion of the maximum value of the controlled variable that is being selected.</p>
          <p>The <var>Position</var> property indicates the distance along the bar that the slider has been placed, either by the program or by mouse capture and movement</p>
          <p>In the example, movement of the slider is detected and shown in the associated <link id="#lcl.ComCtrls.TProgressBar">TProgressBar</link>.</p>
        </descr>
        <seealso>
          <link id="#lcl.stdctrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
        </seealso>
        <example file="comctrls/TrackBarEx.pas"/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.Align" link="#LCL.Controls.TControl.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.Anchors" link="#LCL.Controls.TControl.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.Constraints" link="#LCL.Controls.TControl.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.Ctl3D" link="#LCL.Controls.TControl.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.DragCursor" link="#LCL.Controls.TControl.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.DragMode" link="#LCL.Controls.TControl.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.Enabled" link="#LCL.Controls.TControl.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.Frequency" link="#LCL.ComCtrls.TCustomTrackBar.Frequency">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.Hint" link="#LCL.Controls.TControl.Hint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.LineSize" link="#LCL.ComCtrls.TCustomTrackBar.LineSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.Max" link="#LCL.ComCtrls.TCustomTrackBar.Max">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.Min" link="#LCL.ComCtrls.TCustomTrackBar.Min">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnChange" link="#LCL.ComCtrls.TCustomTrackBar.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnClick" link="#LCL.Controls.TControl.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnDragOver" link="#LCL.Controls.TControl.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnResize" link="#LCL.Controls.TControl.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.Orientation" link="#LCL.ComCtrls.TCustomTrackBar.Orientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.PageSize" link="#LCL.ComCtrls.TCustomTrackBar.PageSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.ParentCtl3D" link="#LCL.Controls.TWinControl.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.Position" link="#LCL.ComCtrls.TCustomTrackBar.Position">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.ScalePos" link="#LCL.ComCtrls.TCustomTrackBar.ScalePos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.ShowScale">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.TickMarks" link="#LCL.ComCtrls.TCustomTrackBar.TickMarks">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.TickStyle" link="#LCL.ComCtrls.TCustomTrackBar.TickStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTrackBar.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TNodeState">
        <short>
          <var>TNodeState</var> - enumerated type denoting the status of a TreeNode</short>
        <descr>
          <p>Cut, DropHilited, Focused, Selected, MultiSelected, Expanded, HasChildren, InTree, Deleting, Bound</p>
        </descr>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeState.nsCut">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeState.nsDropHilited">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeState.nsFocused">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeState.nsSelected">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeState.nsMultiSelected">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeState.nsExpanded">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeState.nsHasChildren">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TNodeStates">
        <short>
          <var>TNodeStates</var> - set of <var>TNodeState</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TNodeAttachMode">
        <short>
          <var>TNodeAttachMode</var> - enumerated type denoting mode of attachment of TreeNodes</short>
        <descr>
          <p>
            <var>TNodeAttachMode</var> - enumerated type denoting mode of attachment of TreeNodes</p>
          <pre>naAdd,           // add as last sibling of Destination
    naAddFirst,      // add as first sibling of Destination
    naAddChild,      // add as last child of Destination
    naAddChildFirst, // add as first child of Destination
    naInsert,        // insert in front of Destination
    naInsertBehind   // insert behind Destination
</pre>
        </descr>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeAttachMode.naAdd">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeAttachMode.naAddFirst">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeAttachMode.naAddChild">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeAttachMode.naAddChildFirst">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeAttachMode.naInsert">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNodeAttachMode.naInsertBehind">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TAddMode">
        <short>
          <var>TAddMode</var> - enumerated type containing a series of constants to determine the place where a node should be placed in a tree.</short>
        <descr>
          <p>This sets consist of three values:</p>
          <p>
            <var>taAdd</var>: Adds the node as the last child.</p>
          <p>
            <var>taAddFirst</var>: Adds the node as the first child.</p>
          <p>
            <var>taInsert</var>: Adds the node in front another node.</p>
          <p>This set is used in <var>TTreeNode.InternalMove</var> and <var>TTreeNodes.InternalAddObject</var>
          </p>
        </descr>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TAddMode.taAddFirst">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TAddMode.taAdd">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TAddMode.taInsert">
        <short/>
      </element>
      <!-- pointer type Visibility: default -->
      <element name="TTreeNodeArray">
        <short>
          <var>TTreeNodeArray</var> - pointer to a <var>TTreeNode</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="ETreeNodeError">
        <short>
          <var>ETreeNodeError</var> - exception type for errors arising from the code of <var>TTreeNode</var>
        </short>
      </element>
      <!-- object Visibility: default -->
      <element name="ETreeViewError">
        <short>
          <var>ETreeViewError</var> - exception type for errors arising from the code of <var>TTreeView</var>
        </short>
      </element>
      <!-- constant Visibility: default -->
      <element name="NodeAttachModeNames">
        <short>A array of strings containings names for NodeAttachModes</short>
        <descr>This is a constant array of string containing names for the modes to attach a node.</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="AddModeNames">
        <short>An array of strings to store the names for the different TAddModes.</short>
        <descr>Type
  TAddMode = (taAddFirst, taAdd, taInsert);

Const
  AddModeNames: array[TAddMode] of string =
    ('taAddFirst', 'taAdd', 'taInsert');</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="LCLStreamID">
        <short>A constant for the identifier of a LCL stream</short>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TTVChangingEvent">
        <short>
          <var>TTVChangingEvent</var> - a generic event handling method for changing a specified Tree Node if <var>AllowChange</var> is True</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVChangingEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVChangingEvent.Node">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVChangingEvent.AllowChange">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TTVChangedEvent">
        <short>
          <var>TTVChangedEvent</var> - generic event handling method for a changed Tree Node</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVChangedEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVChangedEvent.Node">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TTVEditingEvent">
        <short>
          <var>TTVEditingEvent</var> - generic event handling method for editing a specified node, if <var>AllowEdit</var> is True</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVEditingEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVEditingEvent.Node">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVEditingEvent.AllowEdit">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TTVEditedEvent">
        <short>
          <var>TTVEditedEvent</var> - generic event handling method for a node that has been edited</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVEditedEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVEditedEvent.Node">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVEditedEvent.S">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TTVExpandingEvent">
        <short>
          <var>TTVExpandingEvent</var> - generic event handling method for expanding a tree node, if <var>AllowExpansion</var> is True</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVExpandingEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVExpandingEvent.Node">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVExpandingEvent.AllowExpansion">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TTVCollapsingEvent">
        <short>
          <var>TTVCollapsingEvent</var> - generic event handling method for collapsing a Tree Node if AllowCollapse is True</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVCollapsingEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVCollapsingEvent.Node">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVCollapsingEvent.AllowCollapse">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TTVExpandedEvent">
        <short>
          <var>TTVExpandedEvent</var> - generic event handling method for a Tree Node that has been expanded</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVExpandedEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVExpandedEvent.Node">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TTVCompareEvent">
        <short>
          <var>TTVCompareEvent</var> - generic event handling method for comparing two Tree Nodes</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVCompareEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVCompareEvent.Node1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVCompareEvent.Node2">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVCompareEvent.Compare">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TTVCustomDrawEvent">
        <short>
          <var>TTVCustomDrawEvent</var> - generic event handling method for Tree View custom drawing</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVCustomDrawEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVCustomDrawEvent.ARect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVCustomDrawEvent.DefaultDraw">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TTVCustomDrawItemEvent">
        <short>
          <var>TTVCustomDrawItemEvent</var> - generic event handling method for Tree View Item custom drawing</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVCustomDrawItemEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVCustomDrawItemEvent.Node">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVCustomDrawItemEvent.State">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVCustomDrawItemEvent.DefaultDraw">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TTVAdvancedCustomDrawEvent">
        <short>
          <var>TTVAdvancedCustomDrawEvent</var> - generic event handler method for Tree View advanced custom drawing</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVAdvancedCustomDrawEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVAdvancedCustomDrawEvent.ARect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVAdvancedCustomDrawEvent.Stage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVAdvancedCustomDrawEvent.DefaultDraw">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TTVAdvancedCustomDrawItemEvent">
        <short>
          <var>TTVAdvancedCustomDrawItemEvent</var> - generic event handler method for Tree View Item advanced custom drawing</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVAdvancedCustomDrawItemEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVAdvancedCustomDrawItemEvent.Node">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVAdvancedCustomDrawItemEvent.State">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVAdvancedCustomDrawItemEvent.Stage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVAdvancedCustomDrawItemEvent.PaintImages">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVAdvancedCustomDrawItemEvent.DefaultDraw">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TTVCustomCreateNodeEvent">
        <short>
          <var>TTVCustomCreateNodeEvent</var> - generic event handling method for Tree View node creation</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVCustomCreateNodeEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTVCustomCreateNodeEvent.ATreeNode">
        <short/>
      </element>
      <!-- function type Visibility: default -->
      <element name="TTreeNodeCompare">
        <short>
          <var>TTreeNodeCompare</var> - generic function to compare Tree Nodes: returns -1 if Node1 is less than Node2, zero if equal, +1 if Node1 is greater</short>
        <descr/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodeCompare.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodeCompare.Node1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodeCompare.Node2">
        <short/>
      </element>
      <!-- pointer type Visibility: default -->
      <element name="PTreeNodeInfo">
        <short>A pointer to TTreeNodeInfo</short>
      </element>
      <!-- record type Visibility: default -->
      <element name="TTreeNodeInfo">
        <short>
          <var>TTreeNodeInfo</var> - record structure for (new) Tree Node information</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTreeNodeInfo.ImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTreeNodeInfo.SelectedIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTreeNodeInfo.StateIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTreeNodeInfo.OverlayIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTreeNodeInfo.Data">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTreeNodeInfo.Count">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTreeNodeInfo.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTreeNodeInfo.Expanded">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTreeNodeInfo.TextLen">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- pointer type Visibility: default -->
      <element name="PDelphiNodeInfo">
        <short>A pointer to <var>TDelphiNodeInfo</var>
        </short>
      </element>
      <!-- record type Visibility: default -->
      <element name="TDelphiNodeInfo">
        <short>
          <var>TDelphiNodeInfo</var> - record structure for Tree Node information (for Delphi compatability)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TDelphiNodeInfo.ImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TDelphiNodeInfo.SelectedIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TDelphiNodeInfo.StateIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TDelphiNodeInfo.OverlayIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TDelphiNodeInfo.Data">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TDelphiNodeInfo.Count">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TDelphiNodeInfo.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TTreeNode">
        <short>
          <var>TTreeNode</var> is a single item that holds data in <var>TTreeView</var>
        </short>
        <descr>A <var>TTreeNode</var> is part of a <var>TTreeView</var> and is used for storing data. This can be done by using the <var>Caption</var> property or for more complex data the <var>Data</var> property can be used. Each node can have sibling or child items associated with it.</descr>
        <seealso>
          <link id="#lcl.stdctrls.HowToUseStdCtrls"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FOwner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FCapacity">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FDeleting">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FInTree">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FNextBrother">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FNextMultiSelected">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FOverlayIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FParent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FPrevBrother">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FPrevMultiSelected">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FSelectedIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FStateIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FStates">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FSubTreeCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNode.FTop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.AreParentsExpanded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.AreParentsExpanded.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.BindToMultiSelected">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.CompareCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.CompareCount.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.CompareCount.CompareMe">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.DoCanExpand">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.DoCanExpand.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.DoCanExpand.ExpandIt">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.DoExpand">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.DoExpand.ExpandIt">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.ExpandItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.ExpandItem.ExpandIt">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.ExpandItem.Recurse">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.GetAbsoluteIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetAbsoluteIndex.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.GetHasChildren">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetHasChildren.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.GetCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.GetCut">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetCut.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.GetDropTarget">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetDropTarget.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.GetExpanded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetExpanded.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.GetFocused">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetFocused.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.GetHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetHeight.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.GetIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetIndex.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.GetItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetItems.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.GetItems.AnIndex">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.GetLevel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetLevel.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.GetMultiSelected">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetMultiSelected.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.GetSelected">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetSelected.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.GetState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetState.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.GetState.NodeState">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.GetTreeNodes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetTreeNodes.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.GetTreeView">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetTreeView.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.GetTop">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetTop.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.InternalMove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.InternalMove.ANode">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.InternalMove.AddMode">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.IsEqual">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.IsEqual.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.IsEqual.Node">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.IsNodeVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.IsNodeVisible.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNode.IsNodeHeightFullVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.IsNodeHeightFullVisible.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.ReadData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.ReadData.Stream">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.ReadData.StreamVersion">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.ReadData.Info">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.ReadDelphiData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.ReadDelphiData.Stream">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.ReadDelphiData.Info">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.SetCut">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.SetCut.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.SetData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.SetData.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.SetDropTarget">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.SetDropTarget.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.SetExpanded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.SetExpanded.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.SetFocused">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.SetFocused.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.SetHasChildren">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.SetHasChildren.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.SetHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.SetHeight.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.SetImageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.SetImageIndex.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.SetItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.SetItems.AnIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.SetItems.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.SetMultiSelected">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.SetMultiSelected.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.SetOverlayIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.SetOverlayIndex.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.SetSelected">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.SetSelected.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.SetSelectedIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.SetSelectedIndex.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.SetStateIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.SetStateIndex.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.SetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.SetText.S">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.Unbind">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.UnbindFromMultiSelected">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.WriteData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.WriteData.Stream">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.WriteData.Info">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNode.WriteDelphiData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.WriteDelphiData.Stream">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.WriteDelphiData.Info">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TTreeNode.Create">
        <short>
          <var>
            <var>
              <var>Create</var> - constructor for TTreeNode:</var> calls inherited <var>Create</var> then itntialises indexes and sets subtree count to 1</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.System.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.Create.AnOwner">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.AlphaSort">
        <short>
          <var>AlphaSort</var> - if True, sorted alphabetically</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.AlphaSort.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNode.Assign">
        <short>
          <var>Assign</var> - if <var>Source</var> is of correct type, copies details directly, otherwise calls inherited <var>Assign</var> which probably raises an exception</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.Assign.Source">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNode.Collapse">
        <short>
          <var>Collapse</var> - method for collapsing tree view to show only the main stems. Apply recursively if <var>Recurse</var> is True</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.Collapse.Recurse">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.CustomSort">
        <short>
          <var>CustomSort</var> - if True, the customised sort method specified in <var>SortProc </var>is to be used</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.CustomSort.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.CustomSort.SortProc">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.DefaultTreeViewSort">
        <short>
          <var>DefaultTreeViewSort</var> - returns result of string comparison between names of Node1 and Node2</short>
        <descr>
          <p>
            <var>DefaultTreeViewSort</var> - returns result of string comparison between names of Node1 and Node2</p>
          <p>
            <var>DefaultTreeViewSort</var> compares the text of two TreeNodes and returns the following result:
</p>
          <dl>
            <dt>&lt; 0</dt>
            <dd>if <var>Node1.Text&lt;Node2.Text</var>.</dd>
            <dt>0</dt>
            <dd>if <var>Node1.Text=Node2.Text</var>.</dd>
            <dt>&gt; 0</dt>
            <dd>if <var>Node1.Text&gt;Node2.Text</var>.</dd>
          </dl>
          <p>The comparision takes into account Ansi characters, i.e. it takes
care of strange accented characters. Contrary to AnsiCompareText,
the comparision is case sensitive.
</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.DefaultTreeViewSort.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.DefaultTreeViewSort.Node1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.DefaultTreeViewSort.Node2">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNode.Delete">
        <short>
          <var>Delete</var> the curent TreeNode</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNode.DeleteChildren">
        <short>
          <var>DeleteChildren</var> - remove the descendent Nodes in the tree structure</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TTreeNode.Destroy">
        <short>
          <var>
            <var>Destroy</var> - destructor for <var>TTreeNode</var>: unbinds all references, frees data and calls inherited Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Destroy">TPersistent.Destroy</link>
        </seealso>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.DisplayExpandSignLeft">
        <descr/>
        <errors/>
        <seealso/>
        <short>
          <var>DisplayExpandSignLeft</var> - returns the position of the left edge of the expand sign</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.DisplayExpandSignLeft.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.DisplayExpandSignRect">
        <descr/>
        <errors/>
        <seealso/>
        <short>
          <var>DisplayExpandSignRect</var> - returns the coordinates of the rectangle within which the expand sign are displayed</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.DisplayExpandSignRect.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.DisplayExpandSignRight">
        <descr/>
        <errors/>
        <seealso/>
        <short>
          <var>DisplayExpandSignRight</var> - returns the position of the right edge of the expand sign (ie takes into account the width of the icon etc)</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.DisplayExpandSignRight.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.DisplayIconLeft">
        <short>
          <var>DisplayIconLeft</var> - returns the position of the actual icon for the expand sign (usually 1 pixel greater than <var>DisplayExpandSignLeft</var>)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.DisplayIconLeft.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.DisplayRect">
        <short>
          <var>DisplayRect</var> - returns the coordinates of the rectangle containing the current entry; if <var>TextOnly </var>is True, returns the coordinates for the text</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.DisplayRect.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.DisplayRect.TextOnly">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.DisplayStateIconLeft">
        <short>
          <var>DisplayStateIconLeft</var> - returns the position of the State Icon </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.DisplayStateIconLeft.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.DisplayTextLeft">
        <short>
          <var>DisplayTextLeft</var> - returns the position of the left edge of the text</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.DisplayTextLeft.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.DisplayTextRight">
        <short>
          <var>DisplayTextRight</var> - returns the position of the right edge of the text</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.DisplayTextRight.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.EditText">
        <short>
          <var>EditText</var> (currently set False - to be implemented)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.EditText.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNode.EndEdit">
        <short>
          <var>EndEdit</var> (to be implemented)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.EndEdit.Cancel">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNode.Expand">
        <short>
          <var>Expand</var> - method for expanding the current node. If Recurse is True, also expand all descendent nodes</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.Expand.Recurse">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNode.ExpandParents">
        <short>
          <var>ExpandParents</var> - apply expansion to the parents of the current node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.Bottom">
        <short>
          <var>Bottom</var> - returns the position of the displayed tree structure (whether or not it is expanded)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.Bottom.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.BottomExpanded">
        <short>
          <var>BottomExpanded</var> - returns the position of the bottom of the fully expanded tree structure</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.BottomExpanded.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetParentNodeOfAbsoluteLevel">
        <short>
          <var>GetParentNodeOfAbsoluteLevel</var> - returns the parent of all nodes at this absolute level</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetParentNodeOfAbsoluteLevel.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.GetParentNodeOfAbsoluteLevel.TheAbsoluteLevel">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetFirstChild">
        <short>
          <var>GetFirstChild</var> - returns the first child node of this parent</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetFirstChild.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetHandle">
        <short>
          <var>GetHandle</var> - returns the operating system Handle for the current node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetHandle.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetLastSibling">
        <short>
          <var>GetLastSibling</var> - returns the last node at the same level as the current node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetLastSibling.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetLastChild">
        <short>
          <var>GetLastChild</var> - returns the last child node of this parent</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetLastChild.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetLastSubChild">
        <short>
          <var>GetLastSubChild</var> - returns the last sub-child node of this parent</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetLastSubChild.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetNext">
        <short>
          <var>GetNext</var> - returns the next node in the list</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetNext.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetNextChild">
        <short>
          <var>GetNextChild</var> - returns the next child node of the parent specified by <var>AValue</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetNextChild.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.GetNextChild.AValue">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetNextExpanded">
        <short>
          <var>GetNextExpanded</var> - returns the next expanded node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetNextExpanded.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetNextMultiSelected">
        <short>
          <var>GetNextMultiSelected</var> - returns the next node in a multiselection</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetNextMultiSelected.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetNextSibling">
        <short>
          <var>GetNextSibling</var> - returns the next node in the same level as the current node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetNextSibling.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetNextVisible">
        <short>
          <var>GetNextVisible</var> - returns the next visible (ie not hidden) node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetNextVisible.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetPrev">
        <short>
          <var>GetPrev</var> - returns the previous node in the list</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetPrev.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetPrevChild">
        <short>
          <var>GetPrevChild</var> - returns the previous child node of the parent specified by <var>AValue</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetPrevChild.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.GetPrevChild.AValue">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetPrevExpanded">
        <short>
          <var>GetPrevExpanded</var> - returns the previous expanded node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetPrevExpanded.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetPrevMultiSelected">
        <short>
          <var>GetPrevMultiSelected</var> - returns the previous node in a multi-selection</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetPrevMultiSelected.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetPrevSibling">
        <short>
          <var>GetPrevSibling</var> - returns the previous node in the same level as the current node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetPrevSibling.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.GetPrevVisible">
        <short>
          <var>GetPrevVisible</var> - returns the previous visible (not hidden) node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.GetPrevVisible.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.HasAsParent">
        <short>
          <var>HasAsParent</var> - returns True if the node specified by <var>AValue </var>has a parent</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.HasAsParent.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.HasAsParent.AValue">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.IndexOf">
        <short>
          <var>IndexOf</var> - returns the index of the node specified by <var>AValue</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.IndexOf.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.IndexOf.AValue">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.IndexOfText">
        <short>
          <var>IndexOfText</var> - returns the index of the node containing the specified Text string</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.IndexOfText.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.IndexOfText.NodeText">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNode.FindNode">
        <short>
          <var>FindNode</var> - returns the node containing the specified text string</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNode.FindNode.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.FindNode.NodeText">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNode.MakeVisible">
        <short>
          <var>MakeVisible</var> - method for rendering a node visible</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNode.MoveTo">
        <short>
          <var>MoveTo</var> - method for relocating a node to the specified <var>Destination</var> using the specified mode of attachment</short>
        <descr>
          <p>
            <var>MoveTo</var> - method for relocating a node to the specified <var>Destination</var> using the specified mode of attachment</p>
          <p>Definition of the modes of attachment:</p>
          <pre>    naAdd,           // add as last sibling of Destination
    naAddFirst,      // add as first sibling of Destination
    naAddChild,      // add as last child of Destination
    naAddChildFirst, // add as first child of Destination
    naInsert,        // insert in front of Destination
    naInsertBehind   // insert behind Destination
</pre>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.MoveTo.Destination">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.MoveTo.Mode">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNode.MultiSelectGroup">
        <short>
          <var>MultiSelectGroup</var> - method for multi-selecting a group of nodes</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNode.Update">
        <short>
          <var>Update</var> the contents and appearance of the curent node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNode.ConsistencyCheck">
        <short>
          <var>ConsistencyCheck</var> - makes sure all references to and from the node are consistent</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNode.WriteDebugReport">
        <short>
          <var>WriteDebugReport</var> - for debugging. If <var>Recurse</var> is True, report for all descendants as well</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.WriteDebugReport.Prefix">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.WriteDebugReport.Recurse">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.AbsoluteIndex">
        <short>
          <var>AbsoluteIndex</var> - the absolute index of the current node, ie without taking into account the level of ancestry</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.Count">
        <short>
          <var>Count</var> - the number of nodes</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.Cut">
        <short>
          <var>Cut</var> - whether the node has been Cut</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.Data">
        <descr>Property of type pointer used to store custom data in a node.
</descr>
        <example file="comctrls/ttreenode_data.pas"/>
        <short>
          <var>Data</var> - pointer to the Node's data</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.Deleting">
        <short>
          <var>Deleting</var> - if True, the node is being deleted</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.Focused">
        <short>
          <var>Focused</var> - if True, the node has received focus</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.DropTarget">
        <short>
          <var>DropTarget</var> - if True, the current node is a target for a drop process</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.Expanded">
        <short>
          <var>Expanded</var> - if True, the node has been expanded</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.Handle">
        <short>
          <var>Handle</var> - the operating system handle for this node</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.HasChildren">
        <short>
          <var>HasChildren</var> - if true, this node has descendent nodes</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.Height">
        <short>The <var>Height</var> of the current node<var/>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.ImageIndex">
        <short>
          <var>ImageIndex</var> - the index of the image associated with the current node. Default -1 if no image</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.Index">
        <short>The <var>Index</var> value of the current node<var/>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.IsVisible">
        <short>
          <var>IsVisible</var> - if True, the current node is visible (not hidden)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.IsFullHeightVisible">
        <short>
          <var>IsFullHeightVisible</var> - if True, the full height of the TreeNode is visible within the display window</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.Items">
        <short>
          <var>Items</var> - the index of the current node within the list of items</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNode.Items.ItemIndex">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.Level">
        <short>The <var>Level</var> of descendance of indentation of the current node</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.MultiSelected">
        <short>
          <var>MultiSelected</var> - if True, several nodes have been selected simultaneously (eg using the Shift or Ctrl key while selecting)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.OverlayIndex">
        <short>
          <var>OverlayIndex</var> - the index of the overlay</short>
        <descr>This icon is drawn above the normal icon. 
If Images.HasOverlays then it is fetched from Images via Images.Overlay(Node.Overlay) for Delphi compatibility.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.Owner">
        <short>The <var>Owner</var> control of the current TreeNode</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.Parent">
        <short>The <var>Parent</var> of the current node</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.Selected">
        <short>
          <var>Selected</var> - if True, the current node has been selected</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.SelectedIndex">
        <short>
          <var>SelectedIndex</var> - the index of the current node if selected: default - if not selected</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.SubTreeCount">
        <short>
          <var>SubTreeCount</var> -  the number of sub-trees</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.StateIndex">
        <short>
          <var>StateIndex</var> the index of the state (within an enumerated type)</short>
        <descr>
          <p>
            <var>StateIndex</var> the index of the state (within an enumerated type)</p>
          <p>Definition of enumerated type NodeState:</p>
          <p>nsCut, nsDropHilited, nsFocused, nsSelected, nsMultiSelected, nsExpanded, nsHasChildren, nsInTree, nsDeleting, nsBound</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.Text">
        <short>The <var>Text</var> string of the current node</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.TreeNodes">
        <short>the collection of  <var>TreeNodes</var>  to which this node belongs</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.TreeView">
        <short>The <var>TreeView</var> to which this node belongs</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNode.Top">
        <short>The position of the <var>Top</var> of the current node</short>
        <descr/>
        <seealso/>
      </element>
      <!-- pointer type Visibility: default -->
      <element name="PNodeCache">
        <short>
          <var>PNodeCache</var> - pointer to <var>TNodeCache</var>
        </short>
      </element>
      <!-- record type Visibility: default -->
      <element name="TNodeCache">
        <short>
          <var>TNodeCache</var> - a cache (temporary storage record) for a <var>TTreeNode</var> and its index</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TNodeCache.CacheNode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TNodeCache.CacheIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TTreeNodes">
        <short>A collection or list of <var>TTreeNode</var>
        </short>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNodes.FCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNodes.FFirstMultiSelected">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNodes.FKeepCollapsedNodes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNodes.FNodeCache">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNodes.FOwner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNodes.FTopLvlCapacity">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNodes.FTopLvlCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNodes.FTopLvlItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TTreeNodes.FUpdateCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNodes.AddedNode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddedNode.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNodes.ClearCache">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNodes.GetHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.GetHandle.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNodes.GetNodeFromIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.GetNodeFromIndex.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.GetNodeFromIndex.Index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNodes.GetTopLvlItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.GetTopLvlItems.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.GetTopLvlItems.Index">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNodes.GrowTopLvlItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TTreeNodes.IndexOfTopLvlItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.IndexOfTopLvlItem.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.IndexOfTopLvlItem.Node">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNodes.MoveTopLvlNode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.MoveTopLvlNode.TopLvlFromIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.MoveTopLvlNode.TopLvlToIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.MoveTopLvlNode.Node">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNodes.ReadData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.ReadData.Stream">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNodes.ReadExpandedState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.ReadExpandedState.Stream">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNodes.Repaint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.Repaint.ANode">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNodes.ShrinkTopLvlItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNodes.SetTopLvlItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.SetTopLvlItems.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.SetTopLvlItems.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNodes.WriteData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.WriteData.Stream">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TTreeNodes.WriteExpandedState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.WriteExpandedState.Stream">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TTreeNodes.InternalAddObject">
        <short>
          <var>InternalAddObject</var> - method for adding text of data within the structure of the current node; returns the value of the new updated node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.InternalAddObject.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.InternalAddObject.Node">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.InternalAddObject.S">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.InternalAddObject.Data">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.InternalAddObject.AddMode">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTreeNodes.DefineProperties" link="#rtl.Classes.TPersistent.DefineProperties">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.DefineProperties.Filer">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TTreeNodes.GetCount">
        <short>
          <var>GetCount</var> - returns the number of nodes in the collection</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.GetCount.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTreeNodes.SetItem">
        <short>
          <var>SetItem</var> - method for recording details of specified node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.SetItem.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.SetItem.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TTreeNodes.SetUpdateState">
        <short>
          <var>SetUpdateState</var> - records status of update process</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.SetUpdateState.Updating">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TTreeNodes.Create">
        <short>
          <var>Create</var> - constructor for <var>TTreeNodes</var>: calls inherited <var>Create</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.System.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.Create.AnOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TTreeNodes.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TTreeNodes</var>: calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Destroy">TPersistent.Destroy</link>
        </seealso>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.Add">
        <short>
          <var>Add</var> - adds a sibling node with specified text string, and returns the new node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.Add.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.Add.SiblingNode">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.Add.S">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.AddChild">
        <short>
          <var>AddChild</var> - adds a child node with specified text to the parent node, and returns the new node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.AddChild.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddChild.ParentNode">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddChild.S">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.AddChildFirst">
        <short>
          <var>AddChildFirst</var> - adds a node with specified text as the first child of the parent node, and returns the new node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.AddChildFirst.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddChildFirst.ParentNode">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddChildFirst.S">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.AddChildObject">
        <short>
          <var>AddChildObject</var> - adds a child node with specified text and data-pointer to the parent node and returns the new node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.AddChildObject.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddChildObject.ParentNode">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddChildObject.S">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddChildObject.Data">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.AddChildObjectFirst">
        <short>
          <var>AddChildObjectFirst</var> - adds a node with specified text and data as the first child of the parent node, and returns the new node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.AddChildObjectFirst.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddChildObjectFirst.ParentNode">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddChildObjectFirst.S">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddChildObjectFirst.Data">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.AddFirst">
        <short>
          <var>AddFirst</var> - adds a node with specified text as the first node in the same level as <var>SiblingNode.</var> and returns the new node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.AddFirst.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddFirst.SiblingNode">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddFirst.S">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.AddObject">
        <short>
          <var>AddObject</var> - adds a node with specified text and data-pointer in the same level as <var>SiblingNode.</var> and returns the new node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.AddObject.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddObject.SiblingNode">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddObject.S">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddObject.Data">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.AddObjectFirst">
        <short>
          <var>AddObjectFirst</var> - adds a node with specified text and data-pointer as the first node in the same level as <var>SiblingNode.</var> and returns the new node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.AddObjectFirst.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddObjectFirst.SiblingNode">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddObjectFirst.S">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.AddObjectFirst.Data">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNodes.Assign">
        <short>
          <var>Assign</var> - if <var>Source</var> is of correct type, copies properties directly, otherwise calls inherited <var>Assign</var> which probably raises an exception</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.Assign.Source">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNodes.BeginUpdate">
        <short>
          <var>BeginUpdate</var> - start the update process</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNodes.Clear">
        <short>
          <var>Clear</var> the current node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNodes.ClearMultiSelection">
        <short>
          <var>ClearMultiSelection</var> - clears a series of nodes in a multi-selection (provided the selection has not already been cleared)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.IsMultiSelection">
        <short>
          <var>IsMultiSelection</var> - returns True if this node is part if a multi-selection</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.IsMultiSelection.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNodes.Delete">
        <short>
          <var>Delete</var> this node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.Delete.Node">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNodes.EndUpdate">
        <short>
          <var>EndUpdate</var> - finish the update process</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.GetFirstNode">
        <short>
          <var>GetFirstNode</var> - returns the first node in the collection</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.GetFirstNode.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.GetLastNode">
        <short>
          <var>GetLastNode</var> - last top level node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.GetLastNode.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.GetLastSubNode">
        <short>
          <var>GetLastSubNode</var> - absolute last node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.GetLastSubNode.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.GetLastExpandedSubNode">
        <short>
          <var>GetLastExpandedSubNode</var> - absolute last node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.GetLastExpandedSubNode.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.FindTopLvlNode">
        <short>
          <var>FindTopLvlNode</var> - returns a top level node containing the specified text string</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.FindTopLvlNode.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.FindTopLvlNode.NodeText">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.Insert">
        <short>
          <var>Insert</var> a node with the specified text just before the specified Next node, and returns the new node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.Insert.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.Insert.NextNode">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.Insert.S">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.InsertObject">
        <short>
          <var>InsertObject</var> - inserts a new node with specified text and data just before the specified Next node, and returns the new node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.InsertObject.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.InsertObject.NextNode">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.InsertObject.S">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.InsertObject.Data">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.InsertBehind">
        <short>
          <var>InsertBehind</var> - inserts a new node with specified text just behind specified Previous node, and returns the new node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.InsertBehind.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.InsertBehind.PrevNode">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.InsertBehind.S">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TTreeNodes.InsertObjectBehind">
        <short>
          <var>InsertObjectBehind</var> - inserts a new node with specified text and data-pointer just behind specified Previous node, and returns the new node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TTreeNodes.InsertObjectBehind.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.InsertObjectBehind.PrevNode">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.InsertObjectBehind.S">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.InsertObjectBehind.Data">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNodes.ConsistencyCheck">
        <short>
          <var>ConsistencyCheck</var> - makes sure all references to and from the nodes are consistent</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TTreeNodes.WriteDebugReport">
        <short>
          <var>WriteDebugReport</var> - for debugging</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.WriteDebugReport.Prefix">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.WriteDebugReport.AllNodes">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNodes.Count">
        <short>
          <var>Count</var> - the number of nodes in the collection</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNodes.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.Items.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNodes.KeepCollapsedNodes">
        <short>
          <var>KeepCollapsedNodes</var> - if True, preserves the nodes that have been collapsed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNodes.Owner">
        <short>
          <var>Owner</var> - the TTreeView that owns the collection of nodes</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNodes.TopLvlCount">
        <short>
          <var>TopLvlCount</var> - the number of nodes at the top level of the tree structure</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TTreeNodes.TopLvlItems">
        <short>
          <var>TopLvlItems</var> - the list of nodes at the top level of the tree structure</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodes.TopLvlItems.Index">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TTreeViewState">
        <short>
          <var>TTreeViewState</var> - enumerated type containing the permissible values for state of a <var>TTreeView</var>
        </short>
        <descr>
          <p>
            <var>TTreeViewState</var> - enumerated type containing the permissible values for state of a <var>TTreeView</var>
          </p>
          <pre>tvsScrollbarChanged,
    tvsMaxRightNeedsUpdate,
    tvsTopsNeedsUpdate,
    tvsMaxLvlNeedsUpdate,
    tvsTopItemNeedsUpdate,
    tvsBottomItemNeedsUpdate,
    tvsCanvasChanged,
    tvsDragged,
    tvsIsEditing,
    tvsStateChanging,
    tvsManualNotify,
    tvsUpdating,
    tvsPainting,
    tvsMouseCapture,
    tvsWaitForDragging,
    tvsDblClicked,
    tvsTripleClicked,
    tvsQuadClicked,
    tvsSelectionChanged
</pre>
        </descr>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsScrollbarChanged">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsMaxRightNeedsUpdate">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsTopsNeedsUpdate">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsMaxLvlNeedsUpdate">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsTopItemNeedsUpdate">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsBottomItemNeedsUpdate">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsCanvasChanged">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsDragged">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsIsEditing">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsStateChanging">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsManualNotify">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsUpdating">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsPainting">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsMouseCapture">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsWaitForDragging">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsDblClicked">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsTripleClicked">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsQuadClicked">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewState.tvsSelectionChanged">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TTreeViewStates">
        <short>
          <var>TTreeViewStates</var> - set of <var>TTreeViewState</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TTreeViewOption">
        <short>
          <var>TTreeViewOption</var> - enumerated type containing the permissible values for Options in TreeViews</short>
        <descr>
          <p>
            <var>TTreeViewOption</var> - enumerated type containing the permissible values for Options in TreeViews</p>
          <pre>tvoAllowMultiselect,
    tvoAutoExpand,
    tvoAutoInsertMark,
    tvoAutoItemHeight,
    tvoHideSelection,
    tvoHotTrack,
    tvoKeepCollapsedNodes,
    tvoReadOnly,
    tvoRightClickSelect,
    tvoRowSelect,
    tvoShowButtons,
    tvoShowLines,
    tvoShowRoot,
    tvoShowSeparators,
    tvoToolTips,
    tvoNoDoubleClickExpand
</pre>
        </descr>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewOption.tvoAllowMultiselect">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewOption.tvoAutoExpand">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewOption.tvoAutoInsertMark">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewOption.tvoAutoItemHeight">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewOption.tvoHideSelection">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewOption.tvoHotTrack">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewOption.tvoKeepCollapsedNodes">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewOption.tvoReadOnly">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewOption.tvoRightClickSelect">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewOption.tvoRowSelect">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewOption.tvoShowButtons">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewOption.tvoShowLines">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewOption.tvoShowRoot">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewOption.tvoShowSeparators">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewOption.tvoToolTips">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TTreeViewOptions">
        <short>
          <var>TTreeViewOptions</var> - set of <var>TTreeViewOption</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefaultTreeViewOptions">
        <short>A set of TreeViewOptions which are set be default.</short>
        <descr>
          <p>A series of defaults used to set the options of a TreeView object when first placed on a form. This set consists of the following items:</p>
          <pre>tvoShowRoot, 
    tvoShowLines,
    tvoShowButtons,
    tvoHideSelection, 
    tvoToolTips,
    tvoKeepCollapsedNodes,
    tvoAutoItemHeight
</pre>
          <p>For the meaning of these options, see the documentation of <var>TTreeView</var>.</p>
        </descr>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TTreeViewExpandSignType">
        <short>
          <var>TTreeViewExpandSignType</var> - enumerated type for specifying the symbol type to appear in treeviews to denote whether or not the node is expanded: either a +- sign or an arrow</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewExpandSignType.tvestPlusMinus">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewExpandSignType.tvestArrow">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TTreeViewInsertMarkType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewInsertMarkType.tvimNone">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewInsertMarkType.tvimAsFirstChild">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewInsertMarkType.tvimAsNextSibling">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTreeViewInsertMarkType.tvimAsPrevSibling">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomTreeView">
        <short>
          <var>TCustomTreeView</var> - ancestor class for <var>TTreeView</var>
        </short>
        <descr>
          <p><var>TCustomTreeView</var> - ancestor class for <var>TTreeView</var>,
            which displays a collection of items in a hierarchical tree form.
            This class defines many properties which are inherited by children classes,
            including loading the data from files or streams, saving to files or streams,
            updating, sorting alphabetically, editing, making visible or invisible, expanding
            or collapsing the tree display, and many more.</p>
          <p>Please note that Accessibility support in TCustomTreeView might make this control
            slower if there is a very large number of items, for example, 10.000+ items.
            If the performance impact is unacceptable it is possible to turn accessibility
            off for tree view items by setting TCustomTreeView.AccessibilityOn to false.
            The default value is true.</p>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FBackgroundColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FBottomItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FExpandSignType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FExpandSignSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FDefItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FDragImage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FDragNode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FIndent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FImageChangeLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FInsertMarkNode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FInsertMarkType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FLastDropTarget">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FLastHorzScrollInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FLastVertScrollInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FMaxLvl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FMaxRight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.fMouseDownX">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.fMouseDownY">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnAdvancedCustomDraw">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnAdvancedCustomDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnChanging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnCollapsed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnCollapsing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnCompare">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnCustomCreateItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnCustomDraw">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnCustomDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnDeletion">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnEditing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnEdited">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnExpanded">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnExpanding">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnGetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnGetSelectedIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOnSelectionChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FRClickNode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FSaveItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FScrollBars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FScrolledLeft">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FScrolledTop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FSelectedColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FSelectedNode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.fSelectionChangeEventLock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.fSeparatorColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FSortType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FStateChangeLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FStateImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FStates">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FTopItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FTreeLineColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FExpandSignColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FTreeNodes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomTreeView.FUpdateCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.CanvasChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.CanvasChanged.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.CMDrag">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.CMDrag.AMessage">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTreeView.GetAutoExpand">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetAutoExpand.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTreeView.GetBottomItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetBottomItem.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTreeView.GetDropTarget">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetDropTarget.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTreeView.GetHideSelection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetHideSelection.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTreeView.GetHotTrack">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetHotTrack.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTreeView.GetKeepCollapsedNodes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetKeepCollapsedNodes.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTreeView.GetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetReadOnly.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTreeView.GetRightClickSelect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetRightClickSelect.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTreeView.GetRowSelect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetRowSelect.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTreeView.GetSelection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetSelection.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTreeView.GetShowButtons">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetShowButtons.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTreeView.GetShowLines">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetShowLines.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTreeView.GetShowRoot">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetShowRoot.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTreeView.GetShowSeparators">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetShowSeparators.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTreeView.GetToolTips">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetToolTips.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomTreeView.GetTopItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetTopItem.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.ImageListChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.ImageListChange.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.OnChangeTimer">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.OnChangeTimer.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetAutoExpand">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetAutoExpand.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetBackgroundColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetBackgroundColor.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetBottomItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetBottomItem.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetDefaultItemHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetDefaultItemHeight.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetExpandSignType">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetExpandSignType.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetDropTarget">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetDropTarget.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetHideSelection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetHideSelection.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetHotTrack">
        <short>
          <var>SetHotTrack</var> - specifies the status of HotTrack</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetHotTrack.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetIndent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetIndent.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetImages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetImages.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetInsertMarkNode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetInsertMarkNode.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetInsertMarkType">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetInsertMarkType.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetKeepCollapsedNodes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetKeepCollapsedNodes.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetReadOnly.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetRightClickSelect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetRightClickSelect.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetRowSelect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetRowSelect.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetScrollBars">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetScrollBars.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetScrolledLeft">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetScrolledLeft.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetScrolledTop">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetScrolledTop.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetSelectedColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetSelectedColor.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetSelection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetSelection.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetSeparatorColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetSeparatorColor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetShowButton">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetShowButton.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetShowLines">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetShowLines.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetShowRoot">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetShowRoot.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetShowSeparators">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetShowSeparators.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetSortType">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetSortType.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetStateImages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetStateImages.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetToolTips">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetToolTips.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetTreeLineColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetTreeLineColor.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetTreeNodes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetTreeNodes.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.SetTopItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetTopItem.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.UpdateAllTops">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.UpdateBottomItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.UpdateMaxLvl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.UpdateMaxRight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.UpdateTopItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.UpdateScrollbars">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomTreeView.InternalSelectionChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomTreeView.FChangeTimer">
        <short>
          <var>FChangeTimer</var> - local variable to act as timer for changes</short>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.CanChange">
        <short>
          <var>CanChange</var> - returns True if a given TreeNode can be changed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.CanChange.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.CanChange.Node">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.CanCollapse">
        <short>
          <var>CanCollapse</var> returns True if a given TreeNode is able to be collapsed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.CanCollapse.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.CanCollapse.Node">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.CanEdit">
        <short>
          <var>CanEdit</var> - returns True if a Given TreeNode is allowed to be edited</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.CanEdit.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.CanEdit.Node">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.CanExpand">
        <short>
          <var>CanExpand</var> - returns True if the specified TreeNode can be expanded</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.CanExpand.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.CanExpand.Node">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.CreateNode">
        <short>
          <var>CreateNode</var> - creates a new node in a TreeView and returns its content</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.CreateNode.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.CustomDraw">
        <short>
          <var>CustomDraw</var> - returns True if Custom Drawing is proceeding in the specified Rectangle</short>
        <descr>
          <p>
            <var>CustomDraw</var> - returns True if Custom Drawing is proceeding in the specified Rectangle</p>
          <p>Stage indicates whether PrePaint, PostPaint, PreErase or PostErase</p>
        </descr>
        <errors/>
        <seealso>
          <link id="#lcl.Graphics.Progress">Progress</link>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.CustomDraw.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.CustomDraw.ARect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.CustomDraw.Stage">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.CustomDrawItem">
        <short>
          <var>CustomDrawItem</var> - returns True if Custom Image drawing is proceeding at the specified TreeNode</short>
        <descr>
          <p>
            <var>CustomDrawItem</var> - returns True if Custom Image drawing is proceeding at the specified TreeNode</p>
          <p>State denotes one of <var>Selected, Grayed, Disabled, Checked, Focused, Default, Hot, Marked or Indeterminate</var>
          </p>
          <p>Stage indicates whether PrePaint, PostPaint, PreErase or PostErase</p>
          <p>If <var>PaintImages</var> is True, Images should be painted as well as text</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.CustomDrawItem.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.CustomDrawItem.Node">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.CustomDrawItem.State">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.CustomDrawItem.Stage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.CustomDrawItem.PaintImages">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.GetDragImages" link="#LCL.Controls.TControl.GetDragImages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetDragImages.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.GetMaxLvl">
        <short>
          <var>GetMaxLvl</var> - returns the maximum level of branching of the tree structure</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetMaxLvl.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.GetMaxScrollLeft">
        <short>
          <var>GetMaxScrollLeft</var> - returns maximal extent of scrolling to the left</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetMaxScrollLeft.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.GetMaxScrollTop">
        <short>
          <var>GetMaxScrollTop</var> - returns the maximal extent of scrolling upwards</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetMaxScrollTop.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.GetNodeAtInternalY">
        <short>
          <var>GetNodeAtInternalY</var> - returns the node at the specified internal (ie relative) Y coordinate</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetNodeAtInternalY.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.GetNodeAtInternalY.Y">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.GetNodeAtY">
        <short>
          <var>GetNodeAtY</var> - returns the node at the specified (absolute) Y coordinate</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetNodeAtY.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.GetNodeAtY.Y">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.GetNodeDrawAreaHeight">
        <short>
          <var>GetNodeDrawAreaHeight</var> - returns the height for the area in which node is drawn</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetNodeDrawAreaHeight.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.GetNodeDrawAreaWidth">
        <short>
          <var>GetNodeDrawAreaWidth</var> - returns the width for the area in which node is drawn</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetNodeDrawAreaWidth.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.IsCustomDrawn">
        <short>
          <var>IsCustomDrawn</var> - returns True if the specified target node is custom drawn</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.IsCustomDrawn.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.IsCustomDrawn.Target">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.IsCustomDrawn.Stage">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.IsNodeVisible">
        <short>
          <var>IsNodeVisible</var> - returns True if the specified node is visible</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.IsNodeVisible.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.IsNodeVisible.ANode">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.IsNodeHeightFullVisible">
        <short>
          <var>IsNodeHeightFullVisible</var> - returns True if the full height of the specified node is visible in the current view</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.IsNodeHeightFullVisible.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.IsNodeHeightFullVisible.ANode">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomTreeView.IsInsertMarkVisible">
        <short>
          <var>IsInsertMarkVisible</var> - returns True if an Insert mark is visible</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.IsInsertMarkVisible.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.Change">
        <short>
          <var>Change</var> - software emulation of the <var>OnChange</var> event</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.Change.Node">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.Collapse">
        <short>
          <var>Collapse</var> - software emulation of the <var>OnCollapsed</var> event</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.Collapse.Node">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.CreateParams" link="#LCL.Controls.TWinControl.CreateParams">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.CreateParams.Params">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.CreateWnd" link="#LCL.Controls.TWinControl.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.Delete">
        <short>
          <var>Delete</var> - remove the specified node from the tree structure (software emulation of the <var>OnDeletion</var> event)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.Delete.Node">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.DestroyWnd" link="#LCL.Controls.TWinControl.DestroyWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.DoEndDrag" link="#LCL.Controls.TControl.DoEndDrag">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.DoEndDrag.Target">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.DoEndDrag.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.DoEndDrag.Y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.DragOver" link="#LCL.Controls.TControl.DragOver">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.DragOver.Source">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.DragOver.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.DragOver.Y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.DragOver.State">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.DragOver.Accept">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.DoPaint">
        <short>
          <var>DoPaint</var> - perform the actual painting</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.DoPaintNode">
        <short>
          <var>DoPaintNode</var> - perform the actual painting of the specified node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.DoPaintNode.Node">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.DoStartDrag" link="#LCL.Controls.TControl.DoStartDrag">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.DoStartDrag.DragObject">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.EndEditing">
        <short>
          <var>EndEditing</var> - finish editing</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.EnsureNodeIsVisible">
        <short>
          <var>EnsureNodeIsVisible</var> - method to make sure specified node is visible</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.EnsureNodeIsVisible.ANode">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.Expand">
        <short>
          <var>Expand</var> the specified node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.Expand.Node">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.GetImageIndex">
        <short>
          <var>GetImageIndex</var> - returns the index of the image associated with the specified node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.GetImageIndex.Node">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.GetSelectedIndex">
        <short>
          <var>GetSelectedIndex</var> - returns the index of the selected node</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.GetSelectedIndex.Node">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.InitializeWnd" link="#LCL.Controls.TWinControl.InitializeWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.Invalidate" link="#LCL.Controls.TControl.Invalidate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.EraseBackground" link="#LCL.Controls.TWinControl.EraseBackground">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.EraseBackground.DC">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.KeyDown" link="#LCL.Controls.TWinControl.KeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.KeyDown.Key">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.KeyDown.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.Loaded" link="#LCL.Controls.TWinControl.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.MouseDown" link="#LCL.Controls.TControl.MouseDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.MouseDown.Button">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.MouseDown.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.MouseDown.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.MouseDown.Y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.MouseMove" link="#LCL.Controls.TControl.MouseMove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.MouseMove.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.MouseMove.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.MouseMove.Y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.MouseUp" link="#LCL.Controls.TControl.MouseUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.MouseUp.Button">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.MouseUp.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.MouseUp.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.MouseUp.Y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.Notification" link="#LCL.Controls.TControl.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.Paint" link="#LCL.Controls.TCustomControl.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.SetDragMode" link="#LCL.Controls.TControl.SetDragMode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetDragMode.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.SetOptions">
        <short>
          <var>SetOptions</var> - specifies the options for the TreeView</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetOptions.NewOptions">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.UpdateDefaultItemHeight">
        <short>
          <var>UpdateDefaultItemHeight</var> - brings the value of the default item height up-to-date</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.WndProc" link="#LCL.Controls.TControl.WndProc">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.WndProc.Message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.UpdateInsertMark">
        <short>
          <var>UpdateInsertMark</var> - see if there is an insert mark at X,Y and put one in if necessary</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.UpdateInsertMark.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.UpdateInsertMark.Y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.DoSelectionChanged">
        <short>
          <var>DoSelectionChanged</var> - perform the code required for a change in selection</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.WMHScroll">
        <short>
          <var>WMHScroll</var> - LCL Message for horizontal scroll</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.WMHScroll.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.WMVScroll">
        <short>
          <var>WMVScroll</var> - LCL Message for Vertical scroll</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.WMVScroll.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.WMLButtonDown" link="#LCL.Controls.TControl.WMLButtonDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.WMLButtonDown.AMessage">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.WMNotify" link="#LCL.Controls.TWinControl.WMNotify">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.WMNotify.AMessage">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomTreeView.Resize" link="#LCL.Controls.TControl.Resize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.AccessibilityOn">
        <short>Allows to turn accessibility off to speed up the control</short>
        <descr>This property is provided for the case when a tree view contains a huge amount
        of items, lets say 10.000+. In this case accessibility might slow the tree down, so
        turning this property off might make things faster.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.AutoExpand">
        <short>
          <var>AutoExpand</var> - if True, the tree structure is automatically expanded when a node is selected</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.BorderStyle" link="#LCL.Controls.TCustomControl.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.HideSelection">
        <short>
          <var>HideSelection</var> - if True, the selected part of the tree is to be hidden</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.HotTrack">
        <short>
          <var>HotTrack</var> - the property whereby the item under the mouse pointer becomes emphasised</short>
        <descr/>
        <seealso>
          <link id="#lcl.ComCtrls.TCustomListview.HotTrack">TCustomListView.HotTrack</link>
        </seealso>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.Images">
        <short>
          <var>Images</var> - the ImageList to be used in association with the list of TreeNodes</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.Indent">
        <short>
          <var>Indent</var> - the amount by which each successive level of branching is to be indented in the tree structure</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.Items">
        <short>
          <var>Items</var> - the collection of TreeNodes that comprise the TreeView</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnAdvancedCustomDraw">
        <short>
          <var>OnAdvancedCustomDraw</var> - event handler for advanced custom drawing</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnAdvancedCustomDrawItem">
        <short>
          <var>OnAdvancedCustomDrawItem</var> - event handleer for advanced custom drawing item</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnChange">
        <short>
          <var>OnChange</var> - specialised event handler for a change in the TreeView</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnChanging">
        <short>
          <var>OnChanging</var> - specialised event handler while TreeView is being changed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnCollapsed">
        <short>
          <var>OnCollapsed</var> - specialised event handler when part of the tree is collapsed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnCollapsing">
        <short>
          <var>OnCollapsing</var> - specialised event handler while part of the tree is being collapsed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnCompare">
        <short>
          <var>OnCompare</var> - specialised event handler for comparisons within the TreeView</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnCustomCreateItem">
        <short>
          <var>OnCustomCreateItem</var> - event handler for custom item creation</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnCustomDraw">
        <short>
          <var>OnCustomDraw</var> - event handler for custom drawing</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnCustomDrawItem">
        <short>
          <var>OnCustomDrawItem</var> - event handler for custom drawing item</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnDeletion">
        <short>
          <var>OnDeletion</var> - specialised event handler for deletion of node(s) from the tree</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnEdited">
        <short>
          <var>OnEdited</var> - specialised event handler when the TreeView has been edited</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnEditing">
        <short>
          <var>OnEditing</var> - specialised event handler while a TreeView is being edited</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnExpanded">
        <short>
          <var>OnExpanded</var> - specialised event handler when a TreeView has been expanded</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnExpanding">
        <short>
          <var>OnExpanding</var> - specialised event handler while a TreeView is being expanded</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnGetImageIndex">
        <short>
          <var>OnGetImageIndex</var> - event handler for finding the index of an image</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnGetSelectedIndex">
        <short>
          <var>OnGetSelectedIndex</var> - event handler for finding index of selected item</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.OnSelectionChanged">
        <short>
          <var>OnSelectionChanged</var> - event handler for a change in the selection</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.ReadOnly">
        <short>
          <var>ReadOnly</var> - if True, the TreeView can only be observed, and not Written to or changed. Default False</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.RightClickSelect">
        <short>
          <var>RightClickSelect</var> - if True, a Right Click selects an Item. Default False</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.RowSelect">
        <short>
          <var>RowSelect</var> - if True, a row is selected</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.ScrolledLeft">
        <short>
          <var>ScrolledLeft</var> - the position of the tree when fully scrolled to the left</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.ScrolledTop">
        <short>
          <var>ScrolledTop</var> - the position of the tree when fully scrolled to the top</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.ShowButtons">
        <short>
          <var>ShowButtons</var> - if True, buttons are displayed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.ShowLines" link="#LCL.ComCtrls.TCustomTreeView.ShowLines">
        <short>
          <var>ShowLines</var> - show the connecting lines of the tree structure</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.ShowRoot">
        <short>
          <var>ShowRoot</var> - if True, the root of the tree structure is displayed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.ShowSeparators">
        <short>
          <var>ShowSeparators</var> - if True, separators are shown between items</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.SortType">
        <short>
          <var>SortType</var> - the way the items are to be sorted: None, by Data, by Text or Both</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.StateImages">
        <short>
          <var>StateImages</var> - the list of images to denote state of the tree (expanded, contracted etc)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomTreeView.ToolTips">
        <short>
          <var>ToolTips</var> - if True (default), pop-up tool tips are to be shown</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomTreeView.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomTreeView</var>: calls inherited <var>Create</var> then sets defaults for style, size, etc</short>
        <descr>
          <p>
            <var>Create</var> - constructor for <var>TCustomTreeView</var>: calls inherited <var>Create</var> then sets defaults for style, size, etc</p>
          <p>Among the variables initialised and defaults set are:</p>
          <p>size, colour, the symbols for expansion etc, the border style and width, scroll bars, options, indentation, timers, action links</p>
        </descr>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
          <link id="#LCL.Controls.TCustomControl.Create">TCustomControl.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.Create.AnOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomTreeView.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TCustomTreeView</var>: frees images, nodes and links, then calls inherited Destroy</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Destroy">TComponent.Destroy</link>
          <link id="#LCL.Controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
        </seealso>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTreeView.AlphaSort">
        <short>If True, sort alphabetically</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.AlphaSort.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTreeView.ConsistencyCheck">
        <short>
          <var>ConsistencyCheck</var> - check that indexes of treenodes match those of images etc</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTreeView.CustomSort">
        <short>
          <var>CustomSort</var> - if True, an external sorting method specified by <var>SortProc</var> is to be used</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.CustomSort.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.CustomSort.SortProc">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTreeView.GetHitTestInfoAt">
        <short>
          <var>GetHitTestInfoAt</var> - returns the result of a hit test at the point (X, Y)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetHitTestInfoAt.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.GetHitTestInfoAt.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.GetHitTestInfoAt.Y">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTreeView.GetNodeAt">
        <short>
          <var>GetNodeAt</var> - returns the TreeNode at position (X. Y)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetNodeAt.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.GetNodeAt.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.GetNodeAt.Y">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTreeView.GetInsertMarkAt">
        <short>
          <var>GetInsertMarkAt</var> - find if there is an insert mark at the specified coordinates</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.GetInsertMarkAt.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.GetInsertMarkAt.Y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.GetInsertMarkAt.AnInsertMarkNode">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.GetInsertMarkAt.AnInsertMarkType">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTreeView.SetInsertMark">
        <short>
          <var>SetInsertMark</var> - place an Insert mark at the specified node in the tree</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetInsertMark.AnInsertMarkNode">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetInsertMark.AnInsertMarkType">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTreeView.SetInsertMarkAt">
        <short>
          <var>SetInsertMarkAt</var> - place an insert mark at the specified coordinates</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetInsertMarkAt.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SetInsertMarkAt.Y">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTreeView.IsEditing">
        <short>
          <var>IsEditing</var> - returns True if editing is in progress</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.IsEditing.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTreeView.BeginUpdate">
        <short>
          <var>BeginUpdate</var> - start the update of the display</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTreeView.EndUpdate">
        <short>
          <var>EndUpdate</var> finishes updating the display</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTreeView.FullCollapse">
        <short>
          <var>FullCollapse</var> - method to collapse the treeview fully, ie show just the root</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTreeView.FullExpand">
        <short>
          <var>FullExpand</var> - method to expand the treeview fully, and show all the branches</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTreeView.LoadFromFile">
        <short>
          <var>LoadFromFile</var> - load the data from the specified file</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.LoadFromFile.FileName">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTreeView.LoadFromStream">
        <short>
          <var>LoadFromStream</var> - load data from the specified stream</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.LoadFromStream.Stream">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTreeView.SaveToFile">
        <short>
          <var>SaveToFile</var> - saves the data to the specified file</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SaveToFile.FileName">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTreeView.SaveToStream">
        <short>
          <var>SaveToStream</var> - save the data to the specified stream</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.SaveToStream.Stream">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTreeView.WriteDebugReport">
        <short>
          <var>WriteDebugReport</var> - used for debugging</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.WriteDebugReport.Prefix">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomTreeView.WriteDebugReport.AllNodes">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTreeView.LockSelectionChangeEvent">
        <short>
          <var>LockSelectionChangeEvent</var> - if the selection has changed, lock its status</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTreeView.UnlockSelectionChangeEvent">
        <short>
          <var>UnlockSelectionChangeEvent</var> - unlock a selection to allow it to be changed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTreeView.GetFirstMultiSelected">
        <short>
          <var>GetFirstMultiSelected</var> - returns the first node from a multiple selection</short>
        <descr>This works only if tvoAllowMultiSelect is enabled. </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.GetFirstMultiSelected.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomTreeView.SelectionVisible">
        <short>
          <var>SelectionVisible</var> - returns True if a selection is visible</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomTreeView.SelectionVisible.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomTreeView.MakeSelectionVisible">
        <short>
          <var>MakeSelectionVisible</var> - method for making a selection visible</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.BackgroundColor">
        <short>
          <var>BackgroundColor</var> for the treeview</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.BorderWidth" link="#LCL.Controls.TWinControl.BorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.BottomItem">
        <short>
          <var>BottomItem</var> - the last item on the list</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.DefaultItemHeight">
        <short>
          <var>DefaultItemHeight</var> - default height for items on the list</short>
        <descr>If tvoAutoItemHeight is set in Options this value is set automatically depending on font and icons.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.DropTarget">
        <short>
          <var>DropTarget</var> - the target node for dropping a dragged item</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.ExpandSignType">
        <short>
          <var>ExpandSignType</var> - the symbols to denote whether a list is expanded or collapsed; default is plus or minus</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.InsertMarkNode">
        <short>
          <var>InsertMarkNode</var> - place a marker on the specified node</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.InsertMarkType">
        <short>
          <var>InsertMarkType</var> - the type of marker to be inserted</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.KeepCollapsedNodes">
        <short>
          <var>KeepCollapsedNodes</var> - if True, the collapsed nodes are to be retained</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.Options">
        <short>The set of <var>Options</var> for displaying the tree view</short>
        <descr>
          <p>The set of <var>Options</var> for displaying the tree view</p>
          <p>List of available options:</p>
          <pre>tvoAllowMultiselect,
    tvoAutoExpand,
    tvoAutoInsertMark,
    tvoAutoItemHeight,
    tvoHideSelection,
    tvoHotTrack,
    tvoKeepCollapsedNodes,
    tvoReadOnly,
    tvoRightClickSelect,
    tvoRowSelect,
    tvoShowButtons,
    tvoShowLines,
    tvoShowRoot,
    tvoShowSeparators,
    tvoToolTips,
    tvoNoDoubleClickExpand
</pre>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.ScrollBars">
        <short>
          <var>ScrollBars</var> - the style of scroll bars for the treeview display</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.Selected">
        <short>The <var>Selected</var> tree nodes</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.SelectionColor">
        <short>
          <var>SelectionColor</var> - the colour to be used for the selected nodes, to distinguish them from the others</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.SeparatorColor">
        <short>
          <var>SeparatorColor</var> - the colour to be used for separators</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.TopItem">
        <short>
          <var>TopItem</var> - the first visible node of the tree</short>
        <descr>
          <p>Use <var>TopItem</var> to get the topmost visible node. It is usually needed when tree view contains many nodes and scroll bar is requred to display them all. If you need the first node of the tree regardless of visibility use <var>Items</var>[0]</p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.Items">Items</link>
          <link id="TCustomTreeView.GetNodeAtY">GetNodeAtY</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.TreeLineColor">
        <short>
          <var>TreeLineColor</var> - the colour to be used for the lines showing the tree structure</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomTreeView.ExpandSignColor">
        <short>
          <var>ExpandSignColor</var> - the colour to be used for the expand/collapse symbols</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomTreeView.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TTreeView">
        <short>
          <var>TTreeView</var>  is a control that displays a hierarchical list of items</short>
        <descr>Use a <var>TTreeView</var>
 to display a hierarchical list of items. Items are shown by their caption and an optional bitmap.</descr>
        <seealso>
          <link id="#lcl.stdctrls.HowToUseStdCtrls"/>
          <link id="#LCL.ComCtrls.TCustomTreeView"/>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.Align" link="#LCL.Controls.TControl.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.Anchors" link="#LCL.Controls.TControl.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.AutoExpand">
        <short>
          <var>AutoExpand</var> - automatically expand the tree when an item is selected</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.BackgroundColor" link="#LCL.ComCtrls.TCustomTreeView.BackgroundColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.BorderWidth" link="#LCL.Controls.TWinControl.BorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.Color" link="#LCL.Controls.TControl.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.Ctl3D" link="#LCL.Controls.TControl.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.Constraints" link="#LCL.Controls.TControl.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.DefaultItemHeight" link="#LCL.ComCtrls.TCustomTreeView.DefaultItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.DragKind" link="#LCL.Controls.TControl.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.DragCursor" link="#LCL.Controls.TControl.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.DragMode" link="#LCL.Controls.TControl.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.Enabled" link="#LCL.Controls.TControl.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.ExpandSignType" link="#LCL.ComCtrls.TCustomTreeView.ExpandSignType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.Font" link="#LCL.Controls.TControl.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.HideSelection">
        <short>
          <var>HideSelection</var> - the selected items are to be hidden</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.HotTrack">
        <short>
          <var>HotTrack</var> - the property whereby the item under the mouse pointer becomes emphasised</short>
        <descr/>
        <seealso>
          <link id="#lcl.ComCtrls.TCustomListView.HotTrack">TCustomListView.HotTrack</link>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.Images">
        <short>The Bitmap image associated with each item in the display</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.Indent">
        <short>
          <var>Indent</var> - the amount by which each successive branching level is to be indented</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.ParentColor" link="#LCL.Controls.TControl.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.ParentCtl3D" link="#LCL.Controls.TWinControl.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.ParentFont" link="#LCL.Controls.TControl.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.ReadOnly" link="#LCL.ComCtrls.TCustomTreeView.ReadOnly">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.RightClickSelect" link="#LCL.ComCtrls.TCustomTreeView.RightClickSelect">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.RowSelect" link="#LCL.ComCtrls.TCustomTreeView.RowSelect">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.ScrollBars" link="#LCL.ComCtrls.TCustomTreeView.ScrollBars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.SelectionColor" link="#LCL.ComCtrls.TCustomTreeView.SelectionColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.ShowButtons" link="#LCL.ComCtrls.TCustomTreeView.ShowButtons">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.ShowLines" link="#LCL.ComCtrls.TCustomTreeView.ShowLines">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.ShowRoot" link="#LCL.ComCtrls.TCustomTreeView.ShowRoot">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.SortType" link="#LCL.ComCtrls.TCustomTreeView.SortType">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.StateImages" link="#LCL.ComCtrls.TCustomTreeView.StateImages">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.Tag" link="#rtl.Classes.TComponent.Tag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.ToolTips" link="#LCL.ComCtrls.TCustomTreeView.ToolTips">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnAdvancedCustomDraw" link="#LCL.ComCtrls.TCustomTreeView.OnAdvancedCustomDraw">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnAdvancedCustomDrawItem" link="#LCL.ComCtrls.TCustomTreeView.OnAdvancedCustomDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnChange" link="#LCL.ComCtrls.TCustomTreeView.OnChange">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnChanging" link="#LCL.ComCtrls.TCustomTreeView.OnChanging">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnClick" link="#LCL.Controls.TControl.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnCollapsed" link="#LCL.ComCtrls.TCustomTreeView.OnCollapsed">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnCollapsing" link="#LCL.ComCtrls.TCustomTreeView.OnCollapsing">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnCompare" link="#LCL.ComCtrls.TCustomTreeView.OnCompare">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnCustomCreateItem" link="#LCL.ComCtrls.TCustomTreeView.OnCustomCreateItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnCustomDraw" link="#LCL.ComCtrls.TCustomTreeView.OnCustomDraw">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnCustomDrawItem" link="#LCL.ComCtrls.TCustomTreeView.OnCustomDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnDblClick" link="#LCL.Controls.TControl.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnDeletion" link="#LCL.ComCtrls.TCustomTreeView.OnDeletion">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnDragOver" link="#LCL.Controls.TControl.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnEdited" link="#LCL.ComCtrls.TCustomTreeView.OnEdited">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnEditing">
        <short>
          <var>OnEditing</var> - event handler during the editing process</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnExpanded" link="#LCL.ComCtrls.TCustomTreeView.OnExpanded">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnExpanding" link="#LCL.ComCtrls.TCustomTreeView.OnExpanding">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnGetImageIndex" link="#LCL.ComCtrls.TCustomTreeView.OnGetImageIndex">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnGetSelectedIndex" link="#LCL.ComCtrls.TCustomTreeView.OnGetSelectedIndex">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnSelectionChanged" link="#LCL.ComCtrls.TCustomTreeView.OnSelectionChanged">
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.Options" link="#LCL.ComCtrls.TCustomTreeView.Options">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.Items" link="#LCL.ComCtrls.TCustomTreeView.Items"/>
      <!-- property Visibility: published -->
      <element name="TTreeView.TreeLineColor" link="#LCL.ComCtrls.TCustomTreeView.TreeLineColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TTreeView.ExpandSignColor" link="#LCL.ComCtrls.TCustomTreeView.ExpandSignColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TTreeNodeExpandedState">
        <short>
          <var>TTreeNodeExpandedState</var> - class to store and restore the expanded state of a TTreeView. The nodes are identified by their Text property. </short>
        <descr>
          <p>
            <var>TTreeNodeExpandedState</var> - class to store and restore the expanded state of a TTreeView. The nodes are identified by their Text property.</p>
          <p>Usage example:</p>
          <pre>// save old expanded state
      OldExpanded:=TTreeNodeExpandedState.Create(ATreeView);
      ... change a lot of nodes ...
      // restore old expanded state
      OldExpanded.Apply(ATreeView);
      OldExpanded.Free; 
</pre>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTreeNodeExpandedState.NodeText">
        <short>
          <var>NodeText</var> - the text in the current node</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTreeNodeExpandedState.Children">
        <short>
          <var>Children</var> - the children of the current node, as an AvgLvlTree</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: default -->
      <element name="TTreeNodeExpandedState.Create" link="#rtl.System.TObject.Create">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodeExpandedState.Create.FirstTreeNode">
        <short/>
      </element>
      <!-- constructor Visibility: default -->
      <element name="TTreeNodeExpandedState.Create">
        <short>
          <var>Create</var> - constructor for the rest of the tree structure</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodeExpandedState.Create.TreeView">
        <short/>
      </element>
      <!-- destructor Visibility: default -->
      <element name="TTreeNodeExpandedState.Destroy" link="#rtl.System.TObject.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TTreeNodeExpandedState.Clear">
        <short>
          <var>Clear</var> the nodes from the tree structure</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TTreeNodeExpandedState.CreateChildNodes">
        <short>
          <var>CreateChildNodes</var> - constructor for the offspring nodes</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodeExpandedState.CreateChildNodes.FirstTreeNode">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TTreeNodeExpandedState.Apply">
        <short>
          <var>Apply</var> - begin reconstructing the tree structure by inserting the first node
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodeExpandedState.Apply.FirstTreeNode">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TTreeNodeExpandedState.Apply">
        <short>
          <var>Apply</var> - continue reconstructing the tree structure by adding the remaining nodes in succession</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTreeNodeExpandedState.Apply.TreeView">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CompareExpandedNodes">
        <short>Function to compare the node text of two nodes.</short>
        <descr>
          <p>This function does an ANSICompare on the NodeText of two nodes. The parameters Data1 and Data2 are pointers to the nodes to be compared. The result is the same is the result from ANSICompareText.</p>
          <p>-1: The nodetext from the first node is lower then the nodetext from the second.</p>
          <p>0: The nodetext-s from both nodes are equal.</p>
          <p>1: The nodetext from the first node is higher then the nodetext from the second.</p>
        </descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="CompareExpandedNodes.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CompareExpandedNodes.Data1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CompareExpandedNodes.Data2">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CompareTextWithExpandedNode">
        <short>Function to compare the given text with the nodetextof the specified node.</short>
        <descr>
          <p>This function does an ANSICompare on the NodeText of two nodes. The parameters Data1 and Data2 are pointers to the nodes to be compared. The result is the same is the result from ANSICompareText.</p>
          <p>-1: The given text is lower then the nodetext from the given node.</p>
          <p>0: The given text is equal to the nodetext from the given node.</p>
          <p>1: The given text is higher then the nodetext from the given node.</p>
        </descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="CompareTextWithExpandedNode.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CompareTextWithExpandedNode.Key">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CompareTextWithExpandedNode.Data">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="InitCommonControl">
        <short>Function InitCommonControl</short>
        <descr>Implemented for Delphi compatibility, always returns true;</descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="InitCommonControl.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="InitCommonControl.CC">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="CheckCommonControl">
        <short>Procedure CheckCommonControl.</short>
        <descr>Implemented for Delphi compatibility. Procedure does not execute any code.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="CheckCommonControl.CC">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="Register">
        <short>Procedure used to <var>register</var> the components.</short>
      </element>
      <element name="TCustomHeaderControl">
        <short>
          <var>TCustomHeaderControl</var> - base class for <var>THeaderControl</var>, a header strip of user-designed sections which allow selection of pages or actions</short>
        <descr>
          <p>
            <var>TCustomHeaderControl</var> - base class for <var>THeaderControl</var>, a header strip of user-designed sections which allow selection of pages or actions</p>
          <p>
            <var>THeaderControl</var> offers a widget that could be placed along the edge of a <var>Panel</var> or <var>Form</var>, allowing a highly customised mechanism for selection. However, there are no intrinsically associated display areas, and it is the developer's responsibility to supply an index associated with the selection from the <var>THeaderControl</var> and determining what action is to occur or what is to be displayed in any attached Panel or Form.</p>
        </descr>
        <seealso>
          <link id="#lcl.ExtCtrls.Multi-PageControls">Multi-PageControls</link>
        </seealso>
      </element>
      <element name="THeaderControl">
        <short>
          <var>THeaderControl</var>, a header strip of user-designed sections which allow selection of pages or actions</short>
        <descr>
          <p>
            <var>THeaderControl</var>, a header strip of user-designed sections which allow selection of pages or actions</p>
          <p>
            <var>THeaderControl</var> offers a widget that could be placed along the edge of a <var>Panel</var> or <var>Form</var>, allowing a highly customised mechanism for selection. However, there are no intrinsically associated display areas, and it is the developer's responsibility to supply an index associated with the selection from the <var>THeaderControl</var> and determine what action is to occur or what is to be displayed in any attached Panel or Form.</p>
          <p>THeaderControl is used by selecting its icon from the Common Controls tab of the IDE Component Palette, and placing it on the Form in the desired position. It may be convenient to dock it with a <var>Form</var> or <var>Panel</var> whose properties it is to be used for controlling. </p>
          <p>After size, position, docking, alignment, anchoring etc have been performed using the Object Inspector or Form Designer, the Sections of the Header can be created by selecting the control, right-clicking with the mouse and choosing 'Section Editor'. A Stringlist editor will pop up, with options to add, delete or move entries up or down the list. Each entry is given an Index which can be used in OnClick event handlers to determine the action to be taken when that section is selected at run-time.</p>
        </descr>
        <seealso>
          <link id="#lcl.ExtCtrls.Multi-PageControls">Multi-PageControls</link>
        </seealso>
      </element>
      <element name="TCustomHeaderControl.PaintSection">
        <short>
          <var>PaintSection</var> - method for painting the current section (specified by Index) of the Header</short>
      </element>
      <element name="TCustomHeaderControl.Paint" link="#LCL.Controls.TCustomControl.Paint"/>
      <element name="TCustomHeaderControl.GetSectionAt">
        <short>
          <var>GetSectionAt</var> - find the index for the section located at point P</short>
      </element>
      <element name="TCustomHeaderControl.DblClick" link="#LCL.Controls.TControl.DblClick"/>
      <element name="TCustomHeaderControl.Click" link="#LCL.Controls.TControl.Click"/>
      <element name="TCustomHeaderControl.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TCustomHeaderControl</var>: frees sections then calls inherited <var>Destroy</var>
        </short>
        <seealso>
          <link id="#rtl.Classes.TComponent.Destroy">TComponent.Destroy</link>
          <link id="#LCL.Controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
        </seealso>
      </element>
      <element name="TCustomHeaderControl.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomHeaderControl:</var> calls inherited <var>Create</var>, creates the sections and initialises style and bounds</short>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
          <link id="#LCL.Controls.TCustomControl.Create">TCustomControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomHeaderControl.DragReorder">
        <short>
          <var>DragReorder</var> - find out if the sections are allowed to be re-ordered by dragging</short>
      </element>
      <element name="TCustomHeaderControl.Images">
        <short>
          <var>Images</var> - the list of Images available for selection using this tool</short>
      </element>
      <element name="TCustomHeaderControl.Sections">
        <short>
          <var>Sections</var> - the short segments of the header, separated by vertical bars, that function as the elementary selection units of the header</short>
      </element>
      <element name="TCustomHeaderControl.OnSectionDrag">
        <short>
          <var>OnSectionDrag</var> - event handler for dragging the section of header</short>
      </element>
      <element name="TCustomHeaderControl.OnSectionEndDrag">
        <short>
          <var>OnSectionEndDrag</var> - event handler for ending the drag process for this section</short>
      </element>
      <element name="TCustomHeaderControl.OnSectionClick">
        <short>
          <var>OnSectionClick</var> - event handler for mouse click on this section of header</short>
      </element>
      <element name="TCustomHeaderControl.OnSectionResize">
        <short>
          <var>OnSectionResize</var> - event handler for re-sizing this section of the header</short>
      </element>
      <element name="TCustomHeaderControl.OnSectionTrack">
        <short>
          <var>OnSectionTrack</var> - event handler for tracking this section</short>
      </element>
      <element name="TCustomHeaderControl.OnSectionSeparatorDblClick">
        <short>
          <var>OnSectionSeparatorDblClick</var> - event handler for double-click on the separator between sections</short>
      </element>
      <element name="THeaderControl.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="THeaderControl.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="THeaderControl.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="THeaderControl.BorderWidth" link="#LCL.Controls.TWinControl.BorderWidth"/>
      <element name="THeaderControl.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="THeaderControl.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="THeaderControl.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="THeaderControl.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="THeaderControl.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="THeaderControl.Images" link="#LCL.ComCtrls.TCustomHeaderControl.Images"/>
      <element name="THeaderControl.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="THeaderControl.Sections" link="#LCL.ComCtrls.TCustomHeaderControl.Sections"/>
      <element name="THeaderControl.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="THeaderControl.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="THeaderControl.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="THeaderControl.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="THeaderControl.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="THeaderControl.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="THeaderControl.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="THeaderControl.OnCreateSectionClass" link="#LCL.ComCtrls.TCustomHeaderControl.OnCreateSectionClass"/>
      <element name="THeaderControl.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="THeaderControl.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="THeaderControl.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="THeaderControl.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="THeaderControl.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="THeaderControl.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="THeaderControl.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="THeaderControl.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="THeaderControl.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="THeaderControl.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="THeaderControl.OnSectionClick" link="#LCL.ComCtrls.TCustomHeaderControl.OnSectionClick"/>
      <element name="THeaderControl.OnSectionResize" link="#LCL.ComCtrls.TCustomHeaderControl.OnSectionResize"/>
      <element name="THeaderControl.OnSectionTrack" link="#LCL.ComCtrls.TCustomHeaderControl.OnSectionTrack"/>
      <element name="TPageControl.OnGetDockCaption" link="#LCL.Controls.TWinControl.OnGetDockCaption"/>
      <element name="TPageControl.OnGetSiteInfo" link="#LCL.Controls.TWinControl.OnGetSiteInfo"/>
      <element name="TCustomTabControl.IndexOfTabWithCaption">
        <short>
          <var>IndexOfTabWithCaption</var> - returns the index value of the tab that has the specified Caption</short>
      </element>
      <element name="THeaderSections">
        <short>
          <var>THeaderSections</var> - a collection of <var>Items </var>ot type <var>THeaderSection</var>, the individual parts of a <var>THeaderControl</var>
        </short>
      </element>
      <element name="THeaderSections.AddItem">
        <short>
          <var>AddItem</var> - adds a HeaderSection to the Header at the position specified by <var>Index</var>
        </short>
      </element>
      <element name="THeaderSections.Insert" link="#rtl.Classes.TCollection.Insert"/>
      <element name="THeaderSections.Delete" link="#rtl.Classes.TCollection.Delete"/>
      <element name="THeaderSections.Create" link="#rtl.Classes.TCollection.Create"/>
      <element name="THeaderSections.Add" link="#rtl.Classes.TCollection.Add"/>
      <element name="THeaderSections.Items">
        <short>
          <var>Items</var> - the series of individual HeaderSections in the collection</short>
      </element>
      <element name="THeaderSection">
        <short>
          <var>THeaderSection</var> - the individual sections of a THeaderControl, each of which can be used to control its own option, selection etc</short>
      </element>
      <element name="THeaderSection.Create">
        <short>
          <var>
            <var>Create</var> - constructor for THeaderSection:</var> calls inherited <var>Create</var> then initialises state, visibility, alignment, size and Index</short>
        <seealso>
          <link id="#rtl.Classes.TCollectionItem.Create">TCollectionItem.Create</link>
        </seealso>
      </element>
      <element name="THeaderSection.Assign">
        <short>
          <var>Assign</var> - if <var>Source</var> is of correct type, copies properties directly, otherwise calls inherited <var>Assign</var> which probably raises an exception</short>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <element name="THeaderSection.Left">
        <short>The position of the left boundary of the section</short>
      </element>
      <element name="THeaderSection.Right">
        <short>The position of the right boundary of the section</short>
      </element>
      <element name="THeaderSection.State">
        <short>
          <var>State</var> - whether normal, hot (ie mouse hovers over it, ready to be selected) or pressed (selected)</short>
      </element>
      <element name="THeaderSection.Alignment">
        <short>
          <var>Alignment</var> - whether text is to be left or right justified or centered</short>
      </element>
      <element name="THeaderSection.ImageIndex">
        <short>Index of the image in the imagelist</short>
      </element>
      <element name="THeaderSection.MaxWidth">
        <short>Maximum permissable width of a section</short>
      </element>
      <element name="THeaderSection.MinWidth">
        <short>Minimum permissable width of a section (default = 0)</short>
      </element>
      <element name="THeaderSection.Text">
        <short>The text string that is to appear in the section</short>
      </element>
      <element name="THeaderSection.Width">
        <short>The <var>Width </var>of the section that appears on the <var>THeaderControl</var>
        </short>
      </element>
      <element name="THeaderSection.OriginalIndex">
        <short>
          <var>OriginalIndex</var> - index which doesn't change when the user reorders the sections</short>
      </element>
      <element name="TListColumns.Update">
        <short>
          <var>Update</var> checks if update is in fact required, then calls inherited method</short>
        <seealso>
          <link id="#rtl.Classes.TCollection.Update">TCollection.Update</link>
        </seealso>
      </element>
      <element name="TPageControl.DockSite" link="#LCL.Controls.TWinControl.DockSite"/>
      <element name="TPageControl.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TPageControl.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TPageControl.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TPageControl.OnDockDrop" link="#LCL.Controls.TWinControl.OnDockDrop"/>
      <element name="TPageControl.OnDockOver" link="#LCL.Controls.TWinControl.OnDockOver"/>
      <element name="TPageControl.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TPageControl.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TPageControl.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TPageControl.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TPageControl.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TPageControl.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TPageControl.OnUnDock" link="#LCL.Controls.TWinControl.OnUnDock"/>
      <element name="TCustomHeaderControl.OnCreateSectionClass">
        <short>
          <var>OnCreateSectionClass</var> - event handler for creating a new section class</short>
      </element>
      <element name="TCustomListView.BeginAutoDrag" link="#LCL.Controls.TControl.BeginAutoDrag"/>
      <element name="TCustomListView.Loaded" link="#LCL.Controls.TWinControl.Loaded"/>
      <element name="TCustomListView.ToolTips">
        <short>
          <var>ToolTips</var> - whether Popup tool tips are to be shown</short>
      </element>
      <element name="TCustomListView.Clear">
        <short>
          <var>Clear</var> - the stringlist</short>
      </element>
      <element name="TCustomListView.FindCaption">
        <short>
          <var>FindCaption</var>- search for and return the list item that contains the nominated caption</short>
        <descr>
          <p>
            <var>FindCaption</var>- search for and return the list item that contains the nominated caption</p>
          <p>Starting from item with <var>StartIndex</var>
          </p>
          <p>Looking for the string <var>Value</var>
          </p>
          <p>
            <var>Partial, Inclusive, Wrap, PartStart</var>: Boolean arguments allowing matches with part of the string, permitting the string to wrap over a line, etc</p>
        </descr>
      </element>
      <element name="TCustomListView.GetItemAt">
        <short>
          <var>GetItemAt</var> - find and return the list item at the specified coordinates</short>
      </element>
      <element name="TCustomProgressBar.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> returns its own defaults, overriding inherited values</short>
        <seealso>
          <link id="#LCL.Controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <element name="TCustomTabControl.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> returns its own defaults, overriding inherited values</short>
        <seealso>
          <link id="#LCL.Controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <element name="TCustomTrackBar.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> - returns its own defaults, overriding the inherited values</short>
        <seealso>
          <link id="#LCL.Controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.BeginAutoDrag" link="#LCL.Controls.TControl.BeginAutoDrag"/>
      <element name="TCustomUpDown.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> returns its own defaults, overriding inherited values</short>
        <seealso>
          <link id="#LCL.Controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <element name="THeaderSections.GetOwner">
        <short>
          <var>GetOwner</var> returns a HeaderControl, overriding inherited value</short>
        <seealso>
          <link id="#rtl.Classes.TPersistent.GetOwner">TPersistent.GetOwner</link>
        </seealso>
      </element>
      <element name="THeaderSections.Update" link="#rtl.Classes.TCollection.Update"/>
      <element name="TSectionTrackState">
        <short>
          <var>TSectionTrackState</var> - enumerated type for tracking the state of a header section</short>
      </element>
      <element name="TListItem.Checked">
        <short>
          <var>Checked</var> - if True, a check mark is present beside the item, implying it has been selected</short>
      </element>
      <element name="TListItem.Left">
        <short>The position of the Left side of the list item</short>
      </element>
      <element name="TListItem.ListView">
        <short>The <var>ListView</var> in which this Item is fould</short>
      </element>
      <element name="TListItem.Position">
        <short>The coordinates of the position where the ListItem is located</short>
      </element>
      <element name="TListItem.Top">
        <short>The position of the <var>Top</var> of this ListItem</short>
      </element>
      <element name="TListItems.FindCaption">
        <short>
          <var>FindCaption</var> - returns the ListItem with the specified caption at the given starting place.</short>
      </element>
      <element name="TListView.Checkboxes" link="#LCL.ComCtrls.TCustomListView.Checkboxes"/>
      <element name="TListView.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TListView.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TListView.HideSelection">
        <short>
          <var>HideSelection</var> - render the selected items invisible</short>
      </element>
      <element name="TListView.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TListView.ReadOnly" link="#LCL.ComCtrls.TCustomListView.ReadOnly"/>
      <element name="TListView.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TListView.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TListView.ToolTips" link="#LCL.ComCtrls.TCustomListView.ToolTips"/>
      <element name="TListView.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TListView.OnCustomDraw" link="#LCL.ComCtrls.TCustomListView.OnCustomDraw"/>
      <element name="TListView.OnCustomDrawItem" link="#LCL.ComCtrls.TCustomListView.OnCustomDrawItem"/>
      <element name="TListView.OnCustomDrawSubItem" link="#LCL.ComCtrls.TCustomListView.OnCustomDrawSubItem"/>
      <element name="TListView.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TListView.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TListView.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TListView.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TListView.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TProgressBar.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TStatusBar.BoundsChanged" link="#LCL.Controls.TControl.BoundsChanged"/>
      <element name="TStatusBar.CalculatePreferredSize">
        <short>
          <var>CalculatePreferredSize</var> calls inherited method then supplies its own values if any are missing</short>
        <seealso>
          <link id="#LCL.Controls.TControl.CalculatePreferredSize">TControl.CalculatePreferredSize</link>
        </seealso>
      </element>
      <element name="TStatusBar.ColorIsStored" link="#LCL.Controls.TControl.ColorIsStored"/>
      <element name="TStatusBar.CreatePanel">
        <short>
          <var>CreatePanel</var> - returns a created Status Panel</short>
      </element>
      <element name="TStatusBar.CreatePanels">
        <short>
          <var>CreatePanels</var> - returns a set of created panels</short>
      </element>
      <element name="TStatusBar.GetPanelClass">
        <short>
          <var>GetPanelClass</var> - returns a class of status panel</short>
      </element>
      <element name="TStatusBar.DoSetApplicationHint">
        <short>
          <var>DoSetApplicationHint</var> - specifies a hint string and returns True if successful</short>
      </element>
      <element name="TStatusBar.DoHint">
        <short>
          <var>DoHint</var> - shows the hint and returns True if successful (uses <var>OnHint</var> event handler)</short>
      </element>
      <element name="TStatusBar.ExecuteAction">
        <short>
          <var>ExecuteAction</var>: if required action is a Hint-related, sets the Hint in place, otherwise calls inherited method</short>
        <seealso>
          <link id="#rtl.Classes.TComponent.ExecuteAction">TComponent.ExecuteAction</link>
        </seealso>
      </element>
      <element name="TStatusBar.SizeGripEnabled">
        <short>
          <var>SizeGripEnabled</var> - returns True if the size-grip (an area at the bottom of the statusbar where a mouse can grip to change the size) is enabled</short>
      </element>
      <element name="TStatusBar.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TStatusBar.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TStatusBar.AutoHint">
        <short>
          <var>AutoHint</var> - if True, a hint is automatically shown when mouse hovers over status bar. Default False</short>
      </element>
      <element name="TStatusBar.AutoSize" link="#LCL.Controls.TControl.AutoSize"><short>TStatusBar has AutoSize True</short>
      </element>
      <element name="TStatusBar.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TStatusBar.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TStatusBar.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TStatusBar.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TStatusBar.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TStatusBar.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TStatusBar.SizeGrip">
        <short>
          <var>SizeGrip</var> - an area at the bottom of the statusbar where a mouse can grip to change the size: True if this is working</short>
      </element>
      <element name="TStatusBar.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TStatusBar.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TStatusBar.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TStatusBar.OnCreatePanelClass">
        <short>Event handler for creating a StatusBar Panel class</short>
      </element>
      <element name="TStatusBar.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TStatusBar.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TStatusBar.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TStatusBar.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TStatusBar.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TStatusBar.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TStatusBar.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TStatusBar.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TStatusBar.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TTabSheet.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TTabSheet.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TTabSheet.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TTabSheet.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TTrackBar.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TUpDown.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TPageControl.DoAddDockClient">
        <descr>Client cannot be added to TPageControl itself but new TabSheet should be added and client placed onto it
</descr>
        <short>
          <var>DoAddDockClient</var> creates a new TabSheet in the PageControl, places the client on it and aligns it</short>
        <seealso>
          <link id="#LCL.Controls.TWinControl.DoAddDockClient">TWinControl.DoAddDockClient</link>
        </seealso>
      </element>
      <element name="TPageControl.DoRemoveDockClient">
        <short>
          <var>DoRemoveDockClient</var> - frees the page which is being undocked</short>
        <seealso>
          <link id="#LCL.Controls.TWinControl.DoRemoveDockClient">TWinControl.DoRemoveDockClient</link>
        </seealso>
      </element>
      <element name="TPageControl.DoUndockClientMsg" link="#LCL.Controls.TWinControl.DoUndockClientMsg"/>
      <element name="TPageControl.PositionDockRect">
        <short>
          <var>PositionDockRect</var> converts client coordinates to screen coordinates, then places the docking rectangle at the calculated position</short>
        <seealso>
          <link id="#LCL.Controls.TControl.PositionDockRect">TControl.PositionDockRect</link>
        </seealso>
      </element>
      <element name="TListItem.DisplayRect">
        <short>
          <var>DisplayRect</var> - returns the coordinates of a rectangle for displaying the current item</short>
        <descr>
          <p>
            <var>DisplayRect</var> - returns the coordinates of a rectangle for displaying the current item</p>
          <p>Display codes can be: <var>drBounds</var>, <var>drIcon</var>, <var>drLabel</var>, <var>drSelectBounds</var>
          </p>
        </descr>
      </element>
      <element name="TListItem.DisplayRectSubItem">
        <short>
          <var>DisplayRectSubItem</var> - returns the coordinates of a display rectangle for a specified sub-item</short>
        <descr>
          <p>
            <var>DisplayRectSubItem</var> - returns the coordinates of a display rectangle for a specified sub-item</p>
          <p>Display codes can be: <var>drBounds</var>, <var>drIcon</var>, <var>drLabel</var>, <var>drSelectBounds</var>
          </p>
        </descr>
      </element>
      <element name="TListItems.WSCreateItems">
        <short>
          <var>WSCreateItems</var> - instruction to the Widget Set to create Items</short>
      </element>
      <element name="TCustomListView.FinalizeWnd">
        <short>
          <var>FinalizeWnd</var> stores the list origin then calls inherited method</short>
        <seealso>
          <link id="#LCL.Controls.TWinControl.FinalizeWnd">TWinControl.FinalizeWnd</link>
        </seealso>
      </element>
      <element name="TCustomListView.DestroyWnd" link="#LCL.Controls.TWinControl.DestroyWnd"/>
      <element name="TToolButton.TextChanged" link="#LCL.Controls.TControl.TextChanged"/>
      <element name="TToolButton.CalculatePreferredSize" link="#LCL.Controls.TControl.CalculatePreferredSize"/>
      <element name="TToolButton.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> returns its own defaults, overriding inherited values</short>
        <seealso>
          <link id="#LCL.Controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <element name="TToolButton.GetButtonDrawDetail">
        <short>
          <var>GetButtonDrawDetail</var> - find theme information for Windows XP inplementations</short>
      </element>
      <element name="TToolButton.DialogChar" link="#LCL.Controls.TControl.DialogChar"/>
      <element name="TToolButton.Click" link="#LCL.Controls.TControl.Click"/>
      <element name="TToolButton.GetPreferredSize" link="#LCL.Controls.TControl.GetPreferredSize"/>
      <element name="TToolButton.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TToolButton.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TToolBar.AdjustClientRect" link="#LCL.Controls.TWinControl.AdjustClientRect"/>
      <element name="TToolBar.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> - returns its own defaults, overriding the inherited values</short>
        <seealso>
          <link id="#LCL.Controls.TControl.GetControlClassDefaultSize">Control.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <element name="TToolBar.CalculatePreferredSize" link="#LCL.Controls.TControl.CalculatePreferredSize"/>
      <element name="TToolBar.FontChanged">
        <short>
          <var>FontChanged</var> - method to cope with change in font</short>
      </element>
      <element name="TToolBar.ParentFontChanged">
        <short>
          <var>ParentFontChanged</var> - method for coping with change in parent font</short>
      </element>
      <element name="TToolBar.CanFocus" link="#LCL.Controls.TWinControl.CanFocus"/>
      <element name="TCustomTreeView.DefaultTreeViewSort">
        <short>
          <var>DefaultTreeViewSort</var> - returns result of string comparison between names of Node1 and Node2</short>
        <descr>
          <p>
            <var>DefaultTreeViewSort</var> - returns result of string comparison between names of Node1 and Node2</p>
          <p>
            <var>DefaultTreeViewSort</var> compares the text of two TreeNodes and returns the following result:
</p>
          <dl>
            <dt>&lt; 0</dt>
            <dd>if <var>Node1.Text&lt;Node2.Text</var>.</dd>
            <dt>0</dt>
            <dd>if <var>Node1.Text=Node2.Text</var>.</dd>
            <dt>&gt; 0</dt>
            <dd>if <var>Node1.Text&gt;Node2.Text</var>.</dd>
          </dl>
          <p>The comparision takes into account Ansi characters, i.e. it takes
care of strange accented characters. Contrary to AnsiCompareText,
the comparision is case sensitive.
</p>
        </descr>
      </element>
      <element name="TTreeView.OnShowHint" link="#LCL.Controls.TControl.OnShowHint"/>
      <element name="TCustomHeaderControl.CreateSection">
        <short>
          <var>CreateSection</var> - method for creating a header section</short>
      </element>
      <element name="TCustomHeaderControl.CreateSections">
        <short>
          <var>CreateSections</var> - method for creating a collection of header sections</short>
      </element>
      <element name="TCustomHeaderControl.Notification" link="#rtl.Classes.TComponent.Notification"/>
      <element name="TCustomHeaderControl.SectionClick">
        <short>
          <var>SectionClick</var> - method for emulating the <var>OnSectionClick</var> event</short>
      </element>
      <element name="TCustomHeaderControl.SectionResize">
        <short>
          <var>SectionResize</var> - method for emulating the <var>OnSectionResize</var> event</short>
      </element>
      <element name="TCustomHeaderControl.SectionTrack">
        <short>
          <var>SectionTrack</var> - method for emulating the <var>OnSectionTrack</var> event</short>
      </element>
      <element name="TCustomHeaderControl.SectionSeparatorDblClick">
        <short>
          <var>SectionSeparatorDblClick</var> - method for emulating the <var>OnSectionSeparatorDblClick</var> event</short>
      </element>
      <element name="TCustomHeaderControl.SectionEndDrag">
        <short>
          <var>SectionEndDrag</var> - method for emulating the <var>OnSectionEndDrag</var> event</short>
      </element>
      <element name="TCustomHeaderControl.SectionDrag">
        <short>
          <var>SectionDrag</var> - method to emulate the <var>OnSectionDrag </var>event</short>
      </element>
      <element name="TCustomHeaderControl.MouseEnter" link="#LCL.Controls.TControl.MouseEnter"/>
      <element name="TCustomHeaderControl.MouseLeave" link="#LCL.Controls.TControl.MouseLeave"/>
      <element name="TCustomHeaderControl.MouseDown" link="#LCL.Controls.TControl.MouseDown"/>
      <element name="TCustomHeaderControl.MouseMove" link="#LCL.Controls.TControl.MouseMove"/>
      <element name="TCustomHeaderControl.MouseUp" link="#LCL.Controls.TControl.MouseUp"/>
      <element name="TCustomHeaderControl.UpdateState">
        <short>
          <var>UpdateState</var> - bring the state of the control up-to-date</short>
      </element>
      <element name="TCustomHeaderControl.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> - returns its own defaults, overriding inherited values</short>
        <seealso>
          <link id="#LCL.Controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.DoDragMsg" link="Controls.TWinControl.DoDragMsg"/>
      <element name="TTreeNode.GetTextPath">
        <short>
          <var>GetTextPath</var> - returns a string containing the path to the current node delimited by slash</short>
      </element>
      <element name="TTreeNodes.SelectOnlyThis.Node">
        <short>Select Only This Node</short>
      </element>
      <element name="TTreeNodes.FindNodeWithText">
        <short>
          <var>FindNodeWithText</var> - returns a node containing the specified text string</short>
      </element>
      <element name="TTreeNodes.FindNodeWithData">
        <short>
          <var>FindNodeWithData</var> - returns a node containing the specified data pointer</short>
      </element>
      <element name="TTreeNodes.SortTopLevelNodes">
        <short>
          <var>SortTopLevelNodes</var> - sorts the top level nodes, using the specified comparison method</short>
      </element>
      <element name="TTreeNodes.Item">
        <short>
          <var>Item</var> - finds the node corresponding to the given index </short>
      </element>
      <element name="TStatusPanelClass">
        <short>
          <var>TStatusPanelClass</var> - set of <var>TStatusPanel</var>
        </short>
      </element>
      <element name="TSBCreatePanelClassEvent">
        <short>
          <var>TSBCreatePanelClassEvent</var> - generic event handling procedure for creating a Status Bar panel class</short>
      </element>
      <element name="TCustomDrawResultFlag">
        <short>
          <var>TCustomDrawResultFlag</var> - enumerated type, a series of flags to signify the result of a drawing process</short>
      </element>
      <element name="TCustomDrawResult">
        <short>
          <var>TCustomDrawResult</var> - set of <var>TCustomDrawResultFlag</var>
        </short>
      </element>
      <element name="TDisplayCode">
        <short>
          <var>TDisplayCode</var> - enumerated type denoting how items are displayed</short>
      </element>
      <element name="TListItem.GetCheckedInternal">
        <short>
          <var>GetCheckedInternal</var> - returns True if item is internally checked</short>
      </element>
      <element name="TListItems.BeginUpdate">
        <short>
          <var>BeginUpdate</var> - start the update process</short>
      </element>
      <element name="TListItems.EndUpdate">
        <short>
          <var>EndUpdate</var> - finish the update process</short>
      </element>
      <element name="TCustomListView.IsCustomDrawn">
        <short>
          <var>IsCustomDrawn</var> - returns True if a target has been custom drawn</short>
      </element>
      <element name="TCustomListView.CustomDraw">
        <short>
          <var>CustomDraw</var> - performs custom drawing in the given rectangle, and returns True if successful</short>
      </element>
      <element name="TCustomListView.CustomDrawItem">
        <short>
          <var>CustomDrawItem</var> - custom draws the specified item, and returns True if successful</short>
      </element>
      <element name="TCustomListView.CustomDrawSubItem">
        <short>
          <var>CustomDrawSubItem</var> - custom draws the specified subitem, returning True if successful</short>
      </element>
      <element name="TCustomListView.IntfCustomDraw">
        <short>
          <var>IntfCustomDraw</var> - uses the interface to perform custom drawing and returns a result of drawing</short>
      </element>
      <element name="TCustomListView.OnCustomDraw">
        <short>
          <var>OnCustomDraw</var> - event handler for custom drawing</short>
      </element>
      <element name="TCustomListView.OnCustomDrawItem">
        <short>
          <var>OnCustomDrawItem</var> - event handler for custom drawing an item</short>
      </element>
      <element name="TCustomListView.OnCustomDrawSubItem">
        <short>
          <var>OnCustomDrawSubItem</var> - event handler for custom drawing a subitem</short>
      </element>
      <element name="TCustomListView.OnAdvancedCustomDraw">
        <short>
          <var>OnAdvancedCustomDraw</var> - event handler for advanced custom drawing</short>
      </element>
      <element name="TCustomListView.OnAdvancedCustomDrawItem">
        <short>
          <var>OnAdvancedCustomDrawItem</var> - event handler for advanced custom drawing item</short>
      </element>
      <element name="TCustomListView.OnAdvancedCustomDrawSubItem">
        <short>
          <var>OnAdvancedCustomDrawSubItem</var> - event handler for advanced custom drawing subitem</short>
      </element>
      <element name="TListView.OnAdvancedCustomDraw" link="#LCL.ComCtrls.TCustomListView.OnAdvancedCustomDraw"/>
      <element name="TListView.OnAdvancedCustomDrawItem" link="#LCL.ComCtrls.TCustomListView.OnAdvancedCustomDrawItem"/>
      <element name="TListView.OnAdvancedCustomDrawSubItem" link="#LCL.ComCtrls.TCustomListView.OnAdvancedCustomDrawSubItem"/>
      <element name="TListView.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TTrackBar.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TTrackBar.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TTrackBar.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TTrackBar.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TTreeNodes.SelectOnlyThis">
        <short>
          <var>SelectOnlyThis</var> - method for selecting only the indicated node</short>
      </element>
      <element name="TCustomTreeView.TreeLinePenStyle">
        <short>
          <var>TreeLinePenStyle</var> - the pen style for drawing lines on the tree</short>
      </element>
      <element name="TTreeView.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TTreeView.TreeLinePenStyle" link="#LCL.ComCtrls.TCustomTreeView.TreeLinePenStyle"/>
      <element name="THeaderSectionState">
        <short>
          <var>THeaderSectionState</var> - enumerated type containing possible selection states for header</short>
      </element>
      <element name="THeaderSection.Visible">
        <short>
          <var>Visible</var> if True</short>
      </element>
      <element name="THeaderSectionClass">
        <short>
          <var>THeaderSectionClass</var> - class of <var>THeaderSection</var>
        </short>
      </element>
      <element name="TCustomHeaderControl.SectionFromOriginalIndex">
        <short>
          <var>SectionFromOriginalIndex</var> - the section as defined by the original (unchanged) index</short>
      </element>
      <element name="TLVCustomDrawEvent">
        <short>
          <var>TLVCustomDrawEvent</var> - generic event handler method for List View custom drawing</short>
      </element>
      <element name="TLVCustomDrawItemEvent">
        <short>
          <var>TLVCustomDrawItemEvent</var> - generic event handling method for List View item drawing</short>
      </element>
      <element name="TLVCustomDrawSubItemEvent">
        <short>
          <var>TLVCustomDrawSubItemEvent</var> - generic event handling method for List View subitem drawing</short>
      </element>
      <element name="TLVAdvancedCustomDrawEvent">
        <short>
          <var>TLVAdvancedCustomDrawEvent</var> - generic event handling method for List View custom drawing</short>
      </element>
      <element name="TLVAdvancedCustomDrawSubItemEvent">
        <short>
          <var>TLVAdvancedCustomDrawSubItemEvent</var> - generic event handling method for List View custom subitem drawing</short>
      </element>
      <element name="TListViewFlag">
        <short>
          <var>TListViewFlag</var> - enumerated type (currently containing only one value) for List View flag</short>
      </element>
      <element name="TListViewFlags">
        <short>
          <var>TListViewFlags</var> - set of <var>TListViewFlag</var>
        </short>
      </element>
      <element name="TOldTreeNodeInfo">
        <short>
          <var>TOldTreeNodeInfo</var> - record type (old version) for Tree Node information</short>
      </element>
      <element name="TCustomSectionTrackEvent">
        <short>
          <var>TCustomSectionTrackEvent</var> - generic event handling method for custom tracking a header section</short>
      </element>
      <element name="TSectionDragEvent">
        <short>
          <var>TSectionDragEvent</var> - generic event handling method for dragging a header section</short>
      </element>
      <element name="TCustomSectionNotifyEvent">
        <short>
          <var>TCustomSectionNotifyEvent</var> - generic event notification method for header section</short>
      </element>
      <element name="TCustomHCCreateSectionClassEvent">
        <short>
          <var>TCustomHCCreateSectionClassEvent</var> - generic event handler method for custom creation of header control</short>
      </element>
      <element name="TStatusBar.DrawPanel">
        <short>
          <var>DrawPanel</var> calls the <var>OnDrawPanel</var> event handler if assigned</short>
      </element>
      <element name="TStatusBar.LMDrawItem">
        <short>
          <var>LMDrawItem</var> - LCL message handler for drawing the item on the current canvas</short>
      </element>
      <element name="TListView.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle"/>
      <element name="TListView.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TListView.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TCustomTreeView.DoMouseWheel" link="#LCL.Controls.TControl.DoMouseWheel"/>
      <element name="TStatusBar.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <element name="TTabSheet.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <element name="TPageControl.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <element name="TCustomListView.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <element name="TCustomProgressBar.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <element name="TCustomUpDown.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <element name="TToolButton.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <element name="TToolBar.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <element name="TCustomTrackBar.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <element name="TCustomTreeView.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <element name="TCustomTabControl.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <element name="TToolButton.ShowCaption">
        <short>Show/Hide caption</short>
        <descr>The ToolBar.ShowCaptions has precendence. Hiding will only work if ToolBar.List is true.</descr>
      </element>
    </module>
    <!-- ComCtrls -->
  </package>
</fpdoc-descriptions>
