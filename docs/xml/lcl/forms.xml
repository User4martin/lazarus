<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
  ====================================================================
    Forms
  ====================================================================
-->
    <module name="Forms">
      <short/>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Math">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLStrConsts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLIntf">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="InterfaceBase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LResources">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GraphType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Graphics">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Menus">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LMessages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="CustomTimer">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="ActnList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="ClipBrd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="CustApp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLClasses">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Controls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TProcedure">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TProcedureOfObject">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TPosition">
        <short>Represents the Position and Size on Screen of an Form</short>
        <descr>poDesigned - The Form appears exactly as it is positioned and sized in the Form Designer<br/>
poDefault - The window manager decides how the form is to appear, in a default position and size<br/>
poDefaultPosOnly - keeps the Designed size, but position determined by windowmanager<br/>
poDefaultSizeOnly - keeps the Designed position, but size determined by windowmanager<br/>
poScreenCenter - Centers the form on screen<br/>
poDeskTopCenter - Centers the form on desktop<br/>
poMainFormCenter - Centers the Form on the Main Form<br/>
poOwnerFormCenter - Centers the Form on Owner form</descr>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TPosition.poDesigned"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPosition.poDefault"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPosition.poDefaultPosOnly"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPosition.poDefaultSizeOnly"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPosition.poScreenCenter"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPosition.poDesktopCenter"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPosition.poMainFormCenter"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPosition.poOwnerFormCenter"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TWindowState">
        <short>Represents the actual State of the window on the screen</short>
        <descr>wsNormal - The window appears normal<br/>
wsMinimized - The window appears minimized<br/>
wsMaximized - The window appears maximized</descr>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TWindowState.wsNormal"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TWindowState.wsMinimized"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TWindowState.wsMaximized"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TCloseAction">
        <short/>
        <descr/>
        <seealso>
          <link id="TCustomForm.OnClose">TCustomForm.OnClose</link>
        </seealso>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCloseAction.caNone"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TCloseAction.caHide"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TCloseAction.caFree"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TCloseAction.caMinimize"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TScrollBarKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollBarKind.sbHorizontal"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollBarKind.sbVertical"><short/></element>
      <!-- range type Visibility: default -->
      <element name="TScrollBarInc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TScrollBarStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollBarStyle.ssRegular"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollBarStyle.ssFlat"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollBarStyle.ssHotTrack"><short/></element>
      <!-- object Visibility: default -->
      <element name="EScrollBar">
        <short>Exception in Scroll Bar</short>
        <descr>Exception class for Scroll Bar</descr>
      </element>
      <!-- object Visibility: default -->
      <element name="TControlScrollBar">
        <short>Control Scroll Bar</short>
        <descr>Control Scroll Bar: Scroll Bar control for adding to windows. Can be horizontal or vertical.<br/>
This is an ancestor class for many form types and classes of windowed controls</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FAutoRange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FIncrement">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FPage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FRange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FSmooth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TControlScrollBar.FControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.ControlAutoScroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.ControlAutoScroll.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.ControlHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.ControlHandle.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetIncrement">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.GetIncrement.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetPage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.GetPage.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.GetPosition.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetRange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.GetRange.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.GetSize.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetSmooth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.GetSmooth.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.GetVisible.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.HandleAllocated">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.HandleAllocated.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.SmoothIsStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.SmoothIsStored.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.VisibleIsStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.VisibleIsStored.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.AutoCalcRange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.ControlUpdateScrollBars">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.ScrollControlBy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlScrollBar.ScrollControlBy.DeltaX"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControlScrollBar.ScrollControlBy.DeltaY"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.ScrollHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlScrollBar.ScrollHandler.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetIncrement">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlScrollBar.SetIncrement.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetPage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlScrollBar.SetPage.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlScrollBar.SetPosition.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetRange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlScrollBar.SetRange.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlScrollBar.SetSize.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetSmooth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlScrollBar.SetSmooth.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlScrollBar.SetVisible.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.UpdateScrollBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TControlScrollBar.Create">
        <short>Create an instance of a Scroll Bar Control</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlScrollBar.Create.AControl">
        <short>The identity of the windowed control in which the scroll bar is found</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlScrollBar.Create.AKind">
        <short>Whether this is a horizontal or a vertical scrollbar</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControlScrollBar.Assign">
        <short>Finds some properties of the control bar from the source control</short>
        <descr>Assigns the contents of the source object to the current object; in particular finds the increment, position, range and whether smooth scrolling is to  be feature and whether the scroll bar is visible</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlScrollBar.Assign.Source">
        <short>The object that called this instance of the class</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.IsScrollBarVisible">
        <short>Visibility of scroll bar</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.IsScrollBarVisible.Result">
        <short>Returns 'True' if scroll bar visible</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.ScrollPos">
        <short>Position of the indicator cursor on the scroll bar</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.ScrollPos.Result">
        <short>Returns position of the scroll cursor as an integer</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TControlScrollBar.Kind">
        <short>Finds which kind of scroll bar this is: horizontal or vertical</short>
        <descr>Reads a flag to determine which kind of scroll bar</descr>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.GetOtherScrollBar">
        <short>Finds out details of the other scroll bar</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.GetOtherScrollBar.Result">
        <short>Returns a link to the details of the other scroll bar</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.GetHorzScrollBar">
        <short>Find out details about the horizontal scroll bar</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.GetHorzScrollBar.Result">
        <short>Returns details of the horizontal scroll bar as a pointer to a structure</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.GetVertScrollBar">
        <short>Find out details of the vertical scroll bar</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.GetVertScrollBar.Result">
        <short>Returns details of the vertical scroll bar as a pointer to a structure</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TControlScrollBar.Size">
        <short>Determine the size of the scroll bar</short>
        <descr>Reads or writes a flag to determine the size; by default the size is not stored</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Increment">
        <short>The size of the scrolling increment</short>
        <descr>The amount by which the scroll indicator moves if the triangle at either end of the bar is selected.<br/>
Read or write a flag to determine the increment, an integer with a default value of 8 (pixels)</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Page">
        <short>The size of the paging increment for scrolling</short>
        <descr>The amount by which the scroll indicator moves if the cursor selects the scroll bar above, below or on either side of the scroll indicator. <br/>Reads or writes a flag to determine paging increment; default value is 80 pixels</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Smooth">
        <short>Determine whether smooth scrolling is to be implemented</short>
        <descr>Reads or writes a flag to determine smooth scrolling, and sets a flag is the scrolling status is stored</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Position">
        <short>Position of the scroll bar</short>
        <descr>Reads or writes a flag with the position; default is zero</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Range">
        <short>The range (extent) of the scroll bar</short>
        <descr>Reads or writes a flag to determine the range; default is zero</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Visible">
        <short>Is the scroll bar visible?</short>
        <descr>Reads or writes flag to determine visibility, and sets a flag if the property is stored</descr>
      </element>
      <!-- object Visibility: default -->
      <element name="TScrollingWinControl">
        <short>Scrolling Window Control</short>
        <descr>Scrolling Window Control: A window control with scroll bars.<br/>An ancestor class for many forms with scrolling windows</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScrollingWinControl.FHorzScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScrollingWinControl.FVertScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScrollingWinControl.FAutoScroll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScrollingWinControl.FOnPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScrollingWinControl.FCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScrollingWinControl.FIsUpdating">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScrollingWinControl.SetAutoScroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollingWinControl.SetAutoScroll.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TScrollingWinControl.SetHorzScrollBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollingWinControl.SetHorzScrollBar.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TScrollingWinControl.SetVertScrollBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollingWinControl.SetVertScrollBar.Value"><short/></element>
      <!-- function Visibility: private -->
      <element name="TScrollingWinControl.StoreScrollBars">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScrollingWinControl.StoreScrollBars.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.AlignControls">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollingWinControl.AlignControls.AControl"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScrollingWinControl.AlignControls.ARect"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.WMEraseBkgnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollingWinControl.WMEraseBkgnd.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.WMPaint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollingWinControl.WMPaint.message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.DoOnResize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.WMHScroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollingWinControl.WMHScroll.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.WMVScroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollingWinControl.WMVScroll.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.ScrollBy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollingWinControl.ScrollBy.DeltaX"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScrollingWinControl.ScrollBy.DeltaY"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TScrollingWinControl.OnPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TScrollingWinControl.Create">
        <short>Create an instance of a scrolling window control</short>
        <descr>This constructor can override the constructor of an ancestor class</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollingWinControl.Create.AOwner">
        <short>The component that owns the scolling window control</short>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TScrollingWinControl.Destroy">
        <short>DEstroy this instance of scrolling window control, and free its resources</short>
        <descr>Can override destructor of parent class</descr>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScrollingWinControl.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScrollingWinControl.PaintWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollingWinControl.PaintWindow.dc"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TScrollingWinControl.UpdateScrollbars">
        <short>Update the position of the scroll indicatores in the scroll bars</short>
        <descr>Checks if the scroll bars are in process of being loaded or destroyed; <br/>if so, or if there is no valid handle, exit. <br/>If the indicators are valid, re-computes position etc</descr>
      </element>
      <!-- function Visibility: public -->
      <element name="TScrollingWinControl.HasVisibleScrollbars">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScrollingWinControl.HasVisibleScrollbars.Result"><short/></element>
      <!-- property Visibility: public -->
      <element name="TScrollingWinControl.Canvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollingWinControl.AutoScroll">
        <short>Does auto-scrolling apply?</short>
        <descr>Reads or writes a flag to determine auto-scrolling</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollingWinControl.HorzScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollingWinControl.VertScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TScrollBox">
        <short>Scroll Box</short>
        <descr>Scroll Box: A box with scroll bars</descr>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScrollBox.GetClientScrollOffset">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScrollBox.GetClientScrollOffset.Result"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TScrollBox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollBox.Create.AOwner"><short/></element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.ChildSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.OnConstrainedResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.OnMouseWheel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.OnMouseWheelDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.OnMouseWheelUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.OnPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomFrame">
        <short>Custom Frame</short>
        <descr>Custom Frame: The base type for Frame</descr>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.AddActionList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomFrame.AddActionList.ActionList"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.RemoveActionList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomFrame.RemoveActionList.ActionList"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomFrame.GetChildren">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomFrame.GetChildren.Proc"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomFrame.GetChildren.Root"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomFrame.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomFrame.Notification.AComponent"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomFrame.Notification.Operation"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomFrame.SetParent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomFrame.SetParent.AParent"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TCustomFrame.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomFrame.Create.AOwner"><short/></element>
      <!-- "class of" type Visibility: default -->
      <element name="TCustomFrameClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TFrame">
        <short>Frame</short>
        <descr>Frame - a container for all the other components on a form, or for a group of components within a form</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.AutoScroll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.DockSite">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnConstrainedResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnContextPopup">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnDockDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnDockOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnEndDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnGetSiteInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnMouseWheel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnMouseWheelDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnMouseWheelUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnStartDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.OnUnDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TBorderIcon">
        <short>Specifies which icon appears on the top border of the Form</short>
        <descr>biSystemMenu - The form has a System menu (Maybe not all windowmanager supports this)<br/>
biMinimize - The form has an minimize button<br/>
biMaximize - The form has a maximize button<br/>
biHelp - When you click this button a Question Cursor appears and the help routines are called if you click on an control</descr>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBorderIcon.biSystemMenu"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBorderIcon.biMinimize"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBorderIcon.biMaximize"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBorderIcon.biHelp"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TBorderIcons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TCloseEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCloseEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCloseEvent.CloseAction"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TCloseQueryEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCloseQueryEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCloseQueryEvent.CanClose"><short/></element>
      <!-- function type Visibility: default -->
      <element name="THelpEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="THelpEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="THelpEvent.Command"><short/></element>
      <!-- argument Visibility: default -->
      <element name="THelpEvent.Data"><short/></element>
      <!-- argument Visibility: default -->
      <element name="THelpEvent.CallHelp"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TFormStateType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsCreating"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsVisible"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsShowing"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsModal"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsCreatedMDIChild"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsBorderStyleChanged"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsFormStyleChanged"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsFirstShow"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TFormState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- range type Visibility: default -->
      <element name="TModalResult">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TFormHandlerType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormHandlerType.fhtFirstShow"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormHandlerType.fhtClose"><short/></element>
      <!-- object Visibility: default -->
      <element name="TCustomForm">
        <short>Custom Form</short>
        <descr>Custom Form - the base type for FORM</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FActive">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FActiveControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FBorderIcons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FDefaultControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FCancelControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FDesigner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FDummyTextHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FFormState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FFormStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FFormUpdateCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FFormHandlers">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FHelpFile">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FIcon">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FKeyPreview">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FModalResult">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FOnActivate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FOnClose">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FOnCloseQuery">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FOnCreate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FOnDeactivate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FOnDestroy">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FOnHelp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FOnHide">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FOnShow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FOnWindowStateChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FPixelsPerInch">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FWindowState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.IsForm.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsHelpFileStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.IsHelpFileStored.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsIconStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.IsIconStored.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.ClientWndProc">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.ClientWndProc.Message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CloseModal">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.DoCreate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.DoDestroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.IconChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.IconChanged.Sender"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsKeyPreviewStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.IsKeyPreviewStored.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetActive">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetActive.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetActiveControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetActiveControl.AWinControl"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetBorderIcons">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetBorderIcons.NewIcons"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetFormBorderStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetFormBorderStyle.NewStyle"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetCancelControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetCancelControl.NewControl"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetDefaultControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetDefaultControl.NewControl"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetDesigner">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetDesigner.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetFormStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetFormStyle.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetIcon">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetIcon.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetMenu">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetMenu.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetModalResult">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetModalResult.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetPosition.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetVisible.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetWindowFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetWindowState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetWindowState.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMActivate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WMActivate.Message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMCloseQuery">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WMCloseQuery.message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMDeactivate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WMDeactivate.Message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMPaint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WMPaint.message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMShowWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WMShowWindow.message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WMSize.message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.AddHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.AddHandler.HandlerType"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.AddHandler.Handler"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.AddHandler.AsLast"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.RemoveHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.RemoveHandler.HandlerType"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.RemoveHandler.Handler"><short/></element>
      <!-- variable Visibility: protected -->
      <element name="TCustomForm.FFormBorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomForm.FActionLists">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.CloseQuery">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.CloseQuery.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.FormUpdating">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.FormUpdating.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Activate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.ActiveChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.BeginFormUpdate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CreateParams">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.CreateParams.Params"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Deactivate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DestroyWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoClose">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.DoClose.CloseAction"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoHide">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoShow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.EndFormUpdate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.GetChildren">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.GetChildren.Proc"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.GetChildren.Root"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.ChildHandlesCreated">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.Notification.AComponent"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.Notification.Operation"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.PaintWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.PaintWindow.dc"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.RequestAlign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.SetZOrder">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetZOrder.Topmost"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.SetParent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetParent.NewParent"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.UpdateShowing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoFirstShow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.UpdateWindowState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.VisibleChanging">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.WndProc">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndProc.TheMessage"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.VisibleIsStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.VisibleIsStored.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.ColorIsStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.ColorIsStored.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoDock">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.DoDock.NewDockSite"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.DoDock.ARect"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.GetFloating">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.GetFloating.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CMActionExecute">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.CMActionExecute.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CMActionUpdate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.CMActionUpdate.Message"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.DoExecuteAction">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.DoExecuteAction.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.DoExecuteAction.ExeAction"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.DoUpdateAction">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.DoUpdateAction.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.DoUpdateAction.TheAction"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.UpdateActions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomForm.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.Create.AOwner"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TCustomForm.CreateNew">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.CreateNew.AOwner"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.CreateNew.Num"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.BeforeDestruction">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.GetIconHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.GetIconHandle.Result"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TCustomForm.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Close">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Release">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Hide">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Show">
        <short>Shows, brings to front and activates the form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.ShowOnTop">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.WantChildKey">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.WantChildKey.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WantChildKey.Child"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WantChildKey.Message"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.DefocusControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.DefocusControl.Control"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.DefocusControl.Removing"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.SetFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.SetFocusedControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.SetFocusedControl.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetFocusedControl.Control"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.FocusControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.FocusControl.WinControl"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.ShowModal">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.ShowModal.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.GetRolesForControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.GetRolesForControl.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.GetRolesForControl.AControl"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.RemoveAllHandlersOfObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.RemoveAllHandlersOfObject.AnObject"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.AddHandlerFirstShow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.AddHandlerFirstShow.OnFirstShowHandler"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.AddHandlerFirstShow.AsLast"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.RemoveHandlerFirstShow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.RemoveHandlerFirstShow.OnFirstShowHandler"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.AddHandlerClose">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.AddHandlerClose.OnCloseHandler"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.AddHandlerClose.AsLast"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.RemoveHandlerClose">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.RemoveHandlerClose.OnCloseHandler"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Dock">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.Dock.NewDockSite"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.Dock.ARect"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Active">
        <short>Is true when the form has the focus</short>
        <descr>Use active to check if the form has the focus</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.ActiveControl">
        <short>Specifies the active control on the form</short>
        <descr>Use this to get or set the active control on this form</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.BorderIcons">
        <short>Specifies which icons appear on the top of the form</short>
        <descr>Use bordericons flags to get or set the icons that appear on the top border of the form. <br/>
		By default we see down-triangle or other generic icon on the left, <br/>
		which activates a pop-up system menu allowing closure or re-sizing of the form, <br/>
		and on the right end we see the minimise and  re-size/maximise buttons, <br/>
		but of course these can be customised by the application programmer.</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.BorderStyle">
        <short>Specifies the appearance of the form's border</short>
        <descr>Use borderstyle to get or set the appearance of the form's border. <br/>
		By default it is a sizeable window, but it could, for example, be a dialog form or a tool window, or could be non-sizeable</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.CancelControl">
        <short>The control associated with the cancel action</short>
        <descr>Reads or writes a flag to determine the control associated with the Cancel action (exit from the control without changing anything). <br/>
		This is usually a button with the caption 'Cancel', but might be an 'Exit' button or anything else the application programmer decides.. <br/>
		This control is selected either by explicitly clicking with the mouse, or by hitting the 'Esc' key</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Color">
        <short>The colour of the form</short>
        <descr>The form's colour; by default it is the same as the colour specified for button faces.</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.DefaultControl">
        <short>The control associated with the default action for this form</short>
        <descr>Reads or sets a flag determining the default control. <br/>
		This is typically a button such as 'Accept' which is highlighted in some way on-screen to indicate that this is the default action, and is selected either by hitting 'Return' or 'Enter' or by selecting that control with the mouse</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Designer">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.FormState">
        <short>Determines the state of the form</short>
        <descr>Reads or writes a flag to determine the form's state: <br/>

		is it being created, is this its first showing, is the border style being changed, etc. <br/>

		FormState is a set, so could take zero or more of possible values.</descr>
        <seealso><link id="TFormState"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.FormStyle">
        <short>Determinates the style of the form</short>
        <descr>Reads or writes flag to determine the style of the form. <br/>

		Default is 'normal', but could be MDIChild or MDINormal, <br/>

		could stay on top or could be a 'Splash' form.<br/>

		FormStyle is a set, could take zero or more of these values.</descr>
        <seealso><link id="TFormStyle"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.HelpFile">
        <short>Specifies the help file that is used by the form</short>
        <descr>Reads or writes a flag to determine identity of Help file, <br/>
		and to determine whether its name is stored.<br/>
		Property contains filename as a string.</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Icon">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.KeyPreview">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Menu">
        <short>Specifies a MainMenu for this form</short>
        <descr>Drop a TMainMenu on the form and select it here to show it on the form.<br/></descr>
        <seealso><link id="TMainMenu"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.ModalResult">
        <short>Specifies the return value of an modal form</short>
        <descr>Reads or writes a flag to determine whether there is a modal resut. <br/>
		If the form is modal, returns an integer value.</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnActivate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnClose">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnCloseQuery">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnCreate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnDeactivate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnDestroy">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnHelp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnHide">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnShow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnWindowStateChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.PixelsPerInch">
        <short>The scaling of the form in proportion to the screen resolution</short>
        <descr>Reads or writes a flag to determine the scaling factor (a longinteger). <br/>
		Not normally stored locally</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Position">
        <short>The position of the form on the screen</short>
        <descr>Reads or writes a flag to determine screen position of form. <br/>

		By default it is in the position that it was placed in the Form Designer</descr>
        <seealso><link id="TPosition"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.TextHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Visible">
        <short>Indicates if the form is visible</short>
        <descr>Set or get this to set the form visible/hidden or get the status of the form</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.WindowState">
        <short>Represents how the form appears on the screen</short>
        <descr>Reads or write flag to determine state of the window on screen. <br/>

		Default is 'normal' (ie not minimised or maximised)</descr>
        <seealso><link id="TWindowState"/></seealso>
      </element>
      <!-- object Visibility: default -->
      <element name="TForm">
        <short>Form</short>
        <descr>Form - the fundamental visual object that appears in every GUI application.<br/>
Most of the properties are inherited from the ancestors</descr>
        <seealso>
          <link id="TCustomForm"/>
          <link id="TScrollingWinControl"/>
          <link id="TCustomControl"/>
          <link id="TWinControl"/>
          <link id="TControl"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TForm.FClientHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TForm.ClientHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TForm.DockManager">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.Action">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.ActiveControl">
        <short>Specifies the control that has the focus on the form</short>
        <descr>Use active control to set or get the control that has the focus on this form</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.BorderIcons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.ChildSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.ClientHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.ClientWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.DockSite"/>
      <!-- property Visibility: published -->
      <element name="TForm.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.FormStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.HelpFile">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.Icon">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.KeyPreview">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.Menu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnActivate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnClose">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnCloseQuery">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnCreate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnDeactivate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnDestroy">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnDockDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnDockOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnEndDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnGetSiteInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnHide">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnHelp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnShow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnStartDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnUnDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.PixelsPerInch">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.Position">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.SessionProperties">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.TextHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.UseDockManager">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.WindowState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TFormClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomDockForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDockForm.DoAddDockClient">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.DoAddDockClient.Client"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.DoAddDockClient.ARect"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDockForm.DoRemoveDockClient">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.DoRemoveDockClient.Client"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDockForm.GetSiteInfo">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.GetSiteInfo.Client"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.GetSiteInfo.InfluenceRect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.GetSiteInfo.MousePos"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.GetSiteInfo.CanDock"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDockForm.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomDockForm.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.Create.TheOwner"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomDockForm.AutoScroll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDockForm.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDockForm.FormStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomDockForm.PixelsPerInch">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="THintWindow">
        <short>Hint Window</short>
        <descr>Hint Window - the popup box containing helpful information that appears when the mouse pointer hovers over an object</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="THintWindow.FActivating">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="THintWindow.FAutoHide">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="THintWindow.FAutoHideTimer">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="THintWindow.FHideInterval">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="THintWindow.SetAutoHide">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="THintWindow.SetAutoHide.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="THintWindow.AutoHideHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="THintWindow.AutoHideHint.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="THintWindow.SetHideInterval">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="THintWindow.SetHideInterval.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="THintWindow.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="THintWindow.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="THintWindow.Create.AOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="THintWindow.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="THintWindow.ActivateHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="THintWindow.ActivateHint.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="THintWindow.ActivateHint.AHint"><short/></element>
      <!-- function Visibility: public -->
      <element name="THintWindow.CalcHintRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="THintWindow.CalcHintRect.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="THintWindow.CalcHintRect.MaxWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="THintWindow.CalcHintRect.AHint"><short/></element>
      <!-- argument Visibility: default -->
      <element name="THintWindow.CalcHintRect.AData"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="THintWindow.ReleaseHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="THintWindow.AutoHide">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="THintWindow.HideInterval">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="THintWindowClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- pointer type Visibility: default -->
      <element name="PCursorRec">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TCursorRec">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCursorRec.Next">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCursorRec.Index">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCursorRec.Handle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TScreenFormEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreenFormEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScreenFormEvent.Form"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TScreenActiveFormChangedEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreenActiveFormChangedEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScreenActiveFormChangedEvent.LastForm"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TScreenControlEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreenControlEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScreenControlEvent.LastControl"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TScreenNotification">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScreenNotification.snFormAdded"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScreenNotification.snRemoveForm"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScreenNotification.snActiveControlChanged"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScreenNotification.snActiveFormChanged"><short/></element>
      <!-- object Visibility: default -->
      <element name="TScreen">
        <short>Screen</short>
        <descr>Screen - the visible area</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FActiveControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FActiveCustomForm">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FActiveForm">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FCursorCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FCursorList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FCustomForms">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FCustomFormsZOrdered">
        <short/>
        <descr>
          <short>Specifies which style the form border has</short>
        </descr>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FDefaultCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FHintFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FFocusedForm">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FFonts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FFormList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FScreenHandlers">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FLastActiveControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FLastActiveCustomForm">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FOnActiveControlChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FOnActiveFormChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FPixelsPerInch">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FSaveFocusedList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.CreateCursors">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.DeleteCursor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.DeleteCursor.Index"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.DestroyCursors">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCursors">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScreen.GetCursors.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScreen.GetCursors.Index"><short/></element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCustomFormCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScreen.GetCustomFormCount.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCustomForms">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScreen.GetCustomForms.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScreen.GetCustomForms.Index"><short/></element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCustomFormsZOrdered">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScreen.GetCustomFormsZOrdered.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScreen.GetCustomFormsZOrdered.Index"><short/></element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetFonts">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScreen.GetFonts.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetFormCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScreen.GetFormCount.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetForms">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScreen.GetForms.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScreen.GetForms.IIndex"><short/></element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScreen.GetHeight.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScreen.GetWidth.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.AddForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.AddForm.AForm"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.RemoveForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.RemoveForm.AForm"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetCursor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.SetCursor.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetCursors">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.SetCursors.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScreen.SetCursors.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.UpdateLastActive">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.AddHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.AddHandler.HandlerType"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScreen.AddHandler.Handler"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScreen.AddHandler.AsLast"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.RemoveHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.RemoveHandler.HandlerType"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScreen.RemoveHandler.Handler"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TScreen.GetHintFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScreen.GetHintFont.Result"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TScreen.Create">
        <short>Create an instance of TScreen</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.Create.AOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TScreen.Destroy">
        <short>Destroy this instance of TScreen</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.CustomFormIndex">
        <short>The Index number of a Custom Form on the screen</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScreen.CustomFormIndex.Result">
        <short>The Index number of the Custom Form, stored as an integer</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.CustomFormIndex.AForm">
        <short>The Custom Form to which the Index refers</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.FormIndex">
        <short>The index number of a Form on the Screen</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScreen.FormIndex.Result">
        <short>The index number of the Form, stored as an integer</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.FormIndex.AForm">
        <short>The Form to which the Index refers</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.CustomFormZIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScreen.CustomFormZIndex.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScreen.CustomFormZIndex.AForm"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.MoveFormToFocusFront">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.MoveFormToFocusFront.ACustomForm"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.MoveFormToZFront">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.MoveFormToZFront.ACustomForm"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.UpdateScreen">
        <short>Method for updating screen</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerFormAdded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.AddHandlerFormAdded.OnFormAdded"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScreen.AddHandlerFormAdded.AsLast"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerFormAdded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.RemoveHandlerFormAdded.OnFormAdded"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerRemoveForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.AddHandlerRemoveForm.OnRemoveForm"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScreen.AddHandlerRemoveForm.AsLast"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerRemoveForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.RemoveHandlerRemoveForm.OnRemoveForm"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerActiveControlChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.AddHandlerActiveControlChanged.OnActiveControlChanged"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScreen.AddHandlerActiveControlChanged.AsLast"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerActiveControlChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.RemoveHandlerActiveControlChanged.OnActiveControlChanged"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerActiveFormChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.AddHandlerActiveFormChanged.OnActiveFormChanged"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScreen.AddHandlerActiveFormChanged.AsLast"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerActiveFormChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.RemoveHandlerActiveFormChanged.OnActiveFormChanged"><short/></element>
      <!-- property Visibility: public -->
      <element name="TScreen.ActiveControl">
        <short>The identity of the active control on this screen</short>
        <descr>Reads a flag to determine the active control</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.ActiveCustomForm">
        <short>The identity of the active Custom Form on this screen</short>
        <descr>Reads a flag to determine the active Custom Form</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.ActiveForm">
        <short>The identity of the active Form on this Screen</short>
        <descr>Reads a flag to determine the active Form</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Cursor">
        <short>The cursor being used in this screen</short>
        <descr>Reads or writes a flag to determine the cursor. <br/>
		This can take any integer value, but there are several pre-determined cursor styles <br/>
		listed as constants in 'Controls', <br/>
		and these should be used to define the cursor for the current screen</descr>
        <seealso><link id="Controls.crDefault"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Cursors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.Cursors.Index"><short/></element>
      <!-- property Visibility: public -->
      <element name="TScreen.CustomFormCount">
        <short>The number of Custom Forms on this screen</short>
        <descr>Reads flag to determine number of Custom Forms (integer)</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.CustomForms">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.CustomForms.Index"><short/></element>
      <!-- property Visibility: public -->
      <element name="TScreen.CustomFormsZOrdered">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.CustomFormsZOrdered.Index"><short/></element>
      <!-- property Visibility: public -->
      <element name="TScreen.FocusedForm">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.FormCount">
        <short>The number of Forms on this screen</short>
        <descr>Reads a flag to determine the number of Forms (integer)</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Forms">
        <short>The list of Forms in this Screen</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.Forms.Index">
        <short>Index number of a Form, stored as an integer</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Fonts">
        <short>The fonts to be used in this screen</short>
        <descr>Reads a flag to determine the fonts to be used; their names are stored as a list of strings</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Height">
        <short>The height of the screen</short>
        <descr>Reads a flag to determine screen height; stored as an integer</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.HintFont">
        <short>The font to be used to display hints</short>
        <descr>Reads a flag to determine the font to be used (font name stored as a string)</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Width">
        <short>The width of the screen</short>
        <descr>Reads flag to determine screen width, stored as an integer</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.OnActiveControlChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.OnActiveFormChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.PixelsPerInch">
        <short>Scaling factor for displaying graphic information on the screen</short>
        <descr>Reads a flag to determine number of pixels per inch (integer)</descr>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TExceptionEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TExceptionEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TExceptionEvent.E"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TIdleEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIdleEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TIdleEvent.Done"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TOnUserInputEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnUserInputEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TOnUserInputEvent.Msg"><short/></element>
      <!-- pointer type Visibility: default -->
      <element name="PHintInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="THintInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="THintInfo.HintControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="THintInfo.HintWindowClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="THintInfo.HintPos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="THintInfo.HintMaxWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="THintInfo.HintColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="THintInfo.CursorRect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="THintInfo.CursorPos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="THintInfo.ReshowTimeout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="THintInfo.HideTimeout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="THintInfo.HintStr">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="THintInfo.HintData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TCMHintShow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShow.Msg">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShow.Reserved">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShow.HintInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShow.Result">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TCMHintShowPause">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShowPause.Msg">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShowPause.WasActive">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShowPause.Pause">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShowPause.Result">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TAppHintTimerType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TAppHintTimerType.ahtNone"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TAppHintTimerType.ahtShowHint"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TAppHintTimerType.ahtHideHint"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TAppHintTimerType.ahtReshowHint"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TShowHintEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TShowHintEvent.HintStr"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TShowHintEvent.CanShow"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TShowHintEvent.HintInfo"><short/></element>
      <!-- record type Visibility: default -->
      <element name="THintInfoAtMouse">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="THintInfoAtMouse.MousePos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="THintInfoAtMouse.Control">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="THintInfoAtMouse.ControlHasHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TApplicationFlag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TApplicationFlag.AppWaiting"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TApplicationFlag.AppIdleEndSent"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TApplicationFlag.AppHandlingException"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TApplicationFlag.AppNoExceptionMessages"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TApplicationFlag.AppDestroying"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TApplicationFlag.AppDoNotReleaseComponents"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TApplicationFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TApplicationNavigationOption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TApplicationNavigationOption.anoTabToSelectNext"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TApplicationNavigationOption.anoReturnForDefaultControl"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TApplicationNavigationOption.anoEscapeForCancelControl"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TApplicationNavigationOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TApplicationHandlerType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TApplicationHandlerType.ahtIdle"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TApplicationHandlerType.ahtIdleEnd"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TApplicationHandlerType.ahtKeyDownBefore"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TApplicationHandlerType.ahtKeyDownAfter"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TApplicationHandlerType.ahtUserInput"><short/></element>
      <!-- object Visibility: default -->
      <element name="TApplication">
        <short>Application - the whole current program, described as an object</short>
        <descr>Application - the whole current program, described as an object.<br/><br/>
Includes useful function MessageBox, a simple dialog</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FApplicationHandlers">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FCaptureExceptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintHidePause">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintPause">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintShortCuts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintShortPause">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintTimer">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintTimerType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintWindow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FIcon">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FFormList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FMainForm">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FMouseControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FNavigation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOldExceptProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOnActionExecute">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOnActionUpdate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOnHelp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOnHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOnIdle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOnIdleEnd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOnShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOnUserInput">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FReleaseComponents">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.DoOnIdleEnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetCurrentHelpFile">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.GetCurrentHelpFile.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetExename">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.GetExename.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetIconHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.GetIconHandle.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetTitle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.GetTitle.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.IconChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.IconChanged.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.Idle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.InvokeHelp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.InvokeHelp.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.InvokeHelp.Command"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.InvokeHelp.Data"><short/></element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetControlAtMouse">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.GetControlAtMouse.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetNavigation">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.SetNavigation.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.UpdateMouseControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.UpdateMouseControl.NewMouseControl"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.MouseIdle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.MouseIdle.CurrentControl"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetCaptureExceptions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.SetCaptureExceptions.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.SetHint.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetHintColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.SetHintColor.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetIcon">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.SetIcon.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetShowHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.SetShowHint.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.StopHintTimer">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.ValidateHelpSystem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.ValidateHelpSystem.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.WndProc">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.WndProc.AMessage"><short/></element>
      <!-- function Visibility: private -->
      <element name="TApplication.DispatchAction">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.DispatchAction.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.DispatchAction.Msg"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.DispatchAction.Action"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.AddHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.AddHandler.HandlerType"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.AddHandler.Handler"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.AddHandler.AsLast"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.RemoveHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.RemoveHandler.HandlerType"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.RemoveHandler.Handler"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TApplication.GetConsoleApplication">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.GetConsoleApplication.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.NotifyIdleHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.NotifyIdleEndHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TApplication.IsHintMsg">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.IsHintMsg.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.IsHintMsg.Msg"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.DoOnMouseMove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.ShowHintWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.ShowHintWindow.Info"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.OnHintTimer">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.OnHintTimer.Sender"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.SetTitle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.SetTitle.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.StartHintTimer">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.StartHintTimer.Interval"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.StartHintTimer.TimerType"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.UpdateVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.DoIdleActions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.MenuPopupHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.MenuPopupHandler.Sender"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.DoFreeReleaseComponents">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TApplication.Create">
        <short>Create an instance of TApplication</short>
        <descr>This instance of the constructor performs most of the setting up of the environment for the application. The instances of Create that occur in some of the ancestor classes are place holders rather than actual instructions for constructing the object</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.Create.AOwner">
        <short>The Owner object that invoked this instance of TApplication</short>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TApplication.Destroy">
        <short>Destroy this instance of TApplication and free its resources</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ControlDestroyed">
        <short>Method for dealing with a control that has been destroyed</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.ControlDestroyed.AControl"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.BringToFront">
        <short>Use the selected widget set's method to bring the application's form(s) to the front</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.CreateForm">
        <short>Create Form or any other kind of component</short>
        <descr>Note: The name is confusing and only kept for Delphi compatibility. <br/>
It can actually create any kind of component<br/><br/>
Creates a Component instance, sets the pointer to the component variable and loads the component. <br/>
If it is a form it will be added to the application's forms list</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.CreateForm.InstanceClass"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.CreateForm.Reference"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.QueueAsyncCall">
        <short>Insert a given asynchronous call into the queue</short>
        <example file="forms/tapplication_queueasynccall.pas"/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.QueueAsyncCall.AMethod">
        <short>The method to be used for the asynchronous call</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.QueueAsyncCall.Data">
        <short>The data structure used by the asynchronous call method</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ReleaseComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.ReleaseComponent.AComponent"><short/></element>
      <!-- function Visibility: public -->
      <element name="TApplication.ExecuteAction">
        <short>The method to be used to execute the action associated with the Application</short>
        <descr>This is a function that should be supplied by the application programmer, to override the placeholders declared in ancestor classes</descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.ExecuteAction.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.ExecuteAction.ExeAction"><short/></element>
      <!-- function Visibility: public -->
      <element name="TApplication.UpdateAction">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.UpdateAction.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.UpdateAction.TheAction"><short/></element>
      <!-- function Visibility: public -->
      <element name="TApplication.HandleAllocated">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.HandleAllocated.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.HandleException">
        <short>Exception handler - methods to be followed in response to exceptions</short>
        <descr>Individual exception handler methods should be supplied by the application programmer, to override place-holder entries declared in ancestor classes.<br/>
This method checks whether the application is required to halt if an exception occurs, or invokes the appropriate handler. <br/>

It also writes details of the exception to the appropriate place for debugging.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.HandleException.Sender"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.HandleMessage">
        <short>Process all events according to the method defined for the widget set</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.HelpCommand">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.HelpCommand.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.HelpCommand.Command"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.HelpCommand.Data"><short/></element>
      <!-- function Visibility: public -->
      <element name="TApplication.HelpContext">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.HelpContext.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.HelpContext.Context"><short/></element>
      <!-- function Visibility: public -->
      <element name="TApplication.HelpJump">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.HelpJump.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.HelpJump.JumpID"><short/></element>
      <!-- function Visibility: public -->
      <element name="TApplication.HelpKeyword">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.HelpKeyword.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.HelpKeyword.Keyword"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.HideAllFormsWithStayOnTop">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.IsWaiting">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.IsWaiting.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.CancelHint">
        <short>Cancels a request for a hint, if there is no hint timer or no hint to display</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.HideHint">
        <short>Don't display the hint</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.HintMouseMessage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.HintMouseMessage.Control"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.HintMouseMessage.AMessage"><short/></element>
      <!-- property Visibility: public -->
      <element name="TApplication.Icon">
        <short>the icon to be associated with this application</short>
        <descr>Reads or writes a flag to determine the Icon</descr>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Initialize">
        <short>Initialize any forms associated with the application</short>
        <descr>Finds the appropriate widget set, reads the application's icon (if any) from the Lazarus Resource file, initialises the screen, and leaves it ready for processing.</descr>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.MessageBox">
        <short>Message Box</short>
        <descr><i>Message Box:</i> a useful function to display a message.<br/>The function is used internally to display messages during the handling of <i>Exceptions</i>, but is also available to application programmers as an alternative to some of the message dialogs found in <i>Dialogs</i>.<br/>
The function returns an integer value corresponding to the button that was pressed; its value can be determined by reference to the constants [IDOK..IDHELP]<br/><br/>
It can be invoked like a procedure call (ie as a 'MessageBox()' statement rather than as a 'Variable := MessageBox()' function call)</descr>
        <seealso><link id="Dialogs.MessageDlg"/></seealso>
        <example file="dialogs/displaymessagebox.pas"/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.MessageBox.Result">
        <short>Result</short>
        <descr>Result: integer value returned by the function to signify which box was selected<br/><br/>
Can be one of the following values:<br/><br/>
 IDOK<br/>
 IDCANCEL<br/>
 IDABORT<br/>
 IDRETRY<br/>
 IDIGNORE<br/>
 IDYES<br/>
 IDNO<br/>
 IDCLOSE<br/>
 IDHELP	
		</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.MessageBox.Text">
        <short>Text</short>
        <descr>Text: the string that is displayed as a prompt or instruction in the Box;</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.MessageBox.Caption">
        <short>Caption</short>
        <descr>Caption: the string label at the top of the message box;</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.MessageBox.Flags">
        <short>Flags</short>
        <descr>Flags: longint - an integer constructed by adding together various constants to define the contents and behaviour of the box, for example<br/> 
		MB_ABORTRETRYIGNORE + MR_ICONQUESTION will cause the application to display a query (?) icon in a box with three buttons: <br/>ABORT RETRY IGNORE.<br/><br/>
The following button constants are available:<br/><br/>
 MB_OK<br/>
 MB_OKCANCEL<br/>
 MB_ABORTRETRYIGNORE<br/>
 MB_YESNOCANCEL<br/>
 MB_YESNO<br/>
 MB_RETRYCANCEL<br/><br/>
And the following icon constants:<br/><br/>
 MB_ICONHAND<br/>
 MB_ICONQUESTION<br/>
 MB_ICONEXCLAMATION<br/>
 MB_ICONASTERICK<br/>
 MB_ICONWARNING = MB_ICONEXCLAMATION<br/>
 MB_ICONERROR = MB_ICONHAND<br/>
 MB_ICONSTOP = MB_ICONHAND<br/>
 MB_ICONINFORMATION = MB_ICONASTERICK<br/><br/>
These constants are declared on the LCLType unit.
        </descr>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Minimize">
        <short>Minimise the form using the widget set's method</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.Notification.AComponent"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.Notification.Operation"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ProcessMessages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Run">
        <short>the method to be used to make the application execute.</short>
        <descr>This method should be supplied by the application programmer, and should be the main process control procedure for the application</descr>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ShowException">
        <short>Show any exception that has occurred</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.ShowException.E">
        <short>The exception that is to be displayed</short>
        <seealso><link id="#rtl.sysutils.exception"/></seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Terminate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.NotifyUserInputHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.NotifyUserInputHandler.Msg"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.NotifyKeyDownBeforeHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.NotifyKeyDownBeforeHandler.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.NotifyKeyDownBeforeHandler.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.NotifyKeyDownBeforeHandler.Shift"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.NotifyKeyDownHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.NotifyKeyDownHandler.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.NotifyKeyDownHandler.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.NotifyKeyDownHandler.Shift"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ControlKeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.ControlKeyDown.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.ControlKeyDown.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.ControlKeyDown.Shift"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnIdleHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.AddOnIdleHandler.Handler"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.AddOnIdleHandler.AsLast"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnIdleHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.RemoveOnIdleHandler.Handler"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnIdleEndHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.AddOnIdleEndHandler.Handler"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.AddOnIdleEndHandler.AsLast"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnIdleEndHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.RemoveOnIdleEndHandler.Handler"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnUserInputHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.AddOnUserInputHandler.Handler"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.AddOnUserInputHandler.AsLast"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnUserInputHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.RemoveOnUserInputHandler.Handler"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnKeyDownBeforeHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.AddOnKeyDownBeforeHandler.Handler"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.AddOnKeyDownBeforeHandler.AsLast"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnKeyDownBeforeHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.RemoveOnKeyDownBeforeHandler.Handler"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnKeyDownHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.AddOnKeyDownHandler.Handler"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.AddOnKeyDownHandler.AsLast"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnKeyDownHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.RemoveOnKeyDownHandler.Handler"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveAllHandlersOfObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.RemoveAllHandlersOfObject.AnObject"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.DoBeforeMouseMessage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.DoBeforeMouseMessage.CurMouseControl"><short/></element>
      <!-- property Visibility: public -->
      <element name="TApplication.CaptureExceptions">
        <short>If exceptions have occurred, find out what they are, ready for processing</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Handle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Hint">
        <short>The hint associated with the main application</short>
        <descr>A hint is a small pop-up mesage that appears briefly while the mouse hovers over a specified area of the screen. It usually displays useful information about how to use an object or what data should be entered, etc<br/><br/>
Reads or writes a flag to determine the hint associated with the application</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintColor">
        <short>The colour used to display the hint</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintHidePause">
        <short>The delay period after mouse entry before the hint becomes visible</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintPause">
        <short>The length of time for which the hint is displayed</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintShortCuts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintShortPause">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Navigation">
        <short>Determine how the form is to be navigated</short>
        <descr>Reads or writes a flag to determine the navigation method: <br/>
Is <b>Tab</b> used to move to next control? <br/>
Does <b>Enter</b> or <b>Ret</b> activate the default action? <br/>
Does <b>Esc</b> perform the cancel action? <br/>
Does <b>F1</b> activate a Help system?<br/><br/>
Navigation Options is a set, so can take zero or more of the available values</descr>
        <seealso><link id="TApplicationNavigationOptions"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.MainForm">
        <short>The Main Form used by the application for process control and for data input/output</short>
        <descr>Reads a flag to get particulars of the main form</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnActionExecute">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnActionUpdate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnIdle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnIdleEnd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnHelp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnUserInput">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Title">
        <short>The Title to be displayed in the top border of the Main Window</short>
        <descr>Reads or writes a flag to determine the Title string</descr>
      </element>
      <!-- object Visibility: default -->
      <element name="TApplicationProperties">
        <short>Application Properties</short>
        <descr>Application Properties: The properties of the current application</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FCaptureExceptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FHelpFile">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FHintColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FHintHidePause">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FHintPause">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FHintShortCuts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FHintShortPause">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FTitle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FOnException">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FOnIdle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FOnIdleEnd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FOnHelp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FOnHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FOnShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FOnUserInput">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetCaptureExceptions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.SetCaptureExceptions.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHelpFile">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.SetHelpFile.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.SetHint.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.SetHintColor.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintHidePause">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.SetHintHidePause.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintPause">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.SetHintPause.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintShortCuts">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.SetHintShortCuts.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintShortPause">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.SetHintShortPause.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetShowHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.SetShowHint.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetTitle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.SetTitle.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnException">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.SetOnException.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnIdle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.SetOnIdle.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnIdleEnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.SetOnIdleEnd.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnHelp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.SetOnHelp.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.SetOnHint.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnShowHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.SetOnShowHint.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnUserInput">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.SetOnUserInput.AValue"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TApplicationProperties.Create">
        <short>Create an instance of TApplication Properties</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.Create.AOwner"><short/></element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.CaptureExceptions">
        <short>Determine whether exceptions are being captured</short>
        <descr>Boolean property (true if exceptions are being captured); reads or writes flag to see if they are being captured</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HelpFile">
        <short>Determines which file to use for Help</short>
        <descr>Reads or writes flag to determine name of Help file - name is stored as a string</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.Hint">
        <short>Determines Hint to be used</short>
        <descr>Reads or writes flag to determine Hint - stored as a string</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HintColor">
        <short>Colour to be used when displaying Hint</short>
        <descr>Reads or writes flag to determine Hint colour (stored as a TColor integer)</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HintHidePause">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HintPause">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HintShortCuts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HintShortPause">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.ShowHint">
        <short>Determines whether a hint is to be displayed</short>
        <descr>Read or write flag to determine whether to display hint (stored as boolean, True if hint is to be displayed)</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.Title">
        <short>Title to be shown in Application's top Border</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnException">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnIdle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnIdleEnd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnHelp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnUserInput">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TIDesigner">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TIDesigner.IsDesignMsg">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TIDesigner.IsDesignMsg.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.IsDesignMsg.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.IsDesignMsg.Message"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.Modified">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.Notification.AComponent"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.Notification.Operation"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.PaintGrid">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.ValidateRename">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.ValidateRename.AComponent"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.ValidateRename.CurName"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.ValidateRename.NewName"><short/></element>
      <!-- function Visibility: public -->
      <element name="TIDesigner.GetShiftState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TIDesigner.GetShiftState.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.SelectOnlyThisComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.SelectOnlyThisComponent.AComponent"><short/></element>
      <!-- function Visibility: public -->
      <element name="TIDesigner.UniqueName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TIDesigner.UniqueName.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.UniqueName.BaseName"><short/></element>
      <!-- object Visibility: default -->
      <element name="TFormPropertyStorage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFormPropertyStorage.FormFirstShow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFormPropertyStorage.FormFirstShow.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TFormPropertyStorage.FormClose">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFormPropertyStorage.FormClose.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFormPropertyStorage.FormClose.CloseAction"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TFormPropertyStorage.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFormPropertyStorage.Create.TheOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TFormPropertyStorage.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDataModule">
        <short>Data Module</short>
        <descr>Data Module:   for interfacing to the database</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDataModule.FDesignSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDataModule.FDesignOffset">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDataModule.FOnCreate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDataModule.FOnDestroy">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDataModule.FOldCreateOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDataModule.OldCreateOrderIsStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDataModule.OldCreateOrderIsStored.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TDataModule.ReadHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDataModule.ReadHeight.Reader"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TDataModule.ReadHorizontalOffset">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDataModule.ReadHorizontalOffset.Reader"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TDataModule.ReadVerticalOffset">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDataModule.ReadVerticalOffset.Reader"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TDataModule.ReadWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDataModule.ReadWidth.Reader"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TDataModule.WriteWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDataModule.WriteWidth.Writer"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TDataModule.WriteHorizontalOffset">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDataModule.WriteHorizontalOffset.Writer"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TDataModule.WriteVerticalOffset">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDataModule.WriteVerticalOffset.Writer"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TDataModule.WriteHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDataModule.WriteHeight.Writer"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDataModule.DoCreate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDataModule.DoDestroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDataModule.DefineProperties">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDataModule.DefineProperties.Filer"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDataModule.GetChildren">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDataModule.GetChildren.Proc"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDataModule.GetChildren.Root"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TDataModule.HandleCreateException">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDataModule.HandleCreateException.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDataModule.ReadState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDataModule.ReadState.Reader"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TDataModule.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDataModule.Create.TheOwner"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TDataModule.CreateNew">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDataModule.CreateNew.TheOwner"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDataModule.CreateNew.CreateMode"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TDataModule.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TDataModule.AfterConstruction">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TDataModule.BeforeDestruction">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDataModule.DesignOffset">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDataModule.DesignSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDataModule.OnCreate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDataModule.OnDestroy">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDataModule.OldCreateOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="AddDataModule">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="RemoveDataModule">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DataModule"><short/></element>
      <!-- constant Visibility: default -->
      <element name="ApplicationHandleException">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Sender"><short/></element>
      <!-- constant Visibility: default -->
      <element name="ApplicationShowException">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="E"><short/></element>
      <!-- function Visibility: default -->
      <element name="KeysToShiftState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="KeysToShiftState.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="KeysToShiftState.Keys"><short/></element>
      <!-- function Visibility: default -->
      <element name="KeyDataToShiftState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="KeyDataToShiftState.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="KeyDataToShiftState.KeyData"><short/></element>
      <!-- alias type Visibility: default -->
      <element name="TFocusState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="SaveFocusState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SaveFocusState.Result"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="RestoreFocusState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RestoreFocusState.FocusState"><short/></element>
      <!-- function type Visibility: default -->
      <element name="TGetDesignerFormEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGetDesignerFormEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGetDesignerFormEvent.AComponent"><short/></element>
      <!-- variable Visibility: default -->
      <element name="OnGetDesignerForm">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetParentForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetParentForm.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="GetParentForm.Control"><short/></element>
      <!-- function Visibility: default -->
      <element name="GetDesignerForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetDesignerForm.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="GetDesignerForm.AComponent"><short/></element>
      <!-- function Visibility: default -->
      <element name="FindRootDesigner">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FindRootDesigner.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="FindRootDesigner.AComponent"><short/></element>
      <!-- function Visibility: default -->
      <element name="IsAccel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="IsAccel.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="IsAccel.VK"><short/></element>
      <!-- argument Visibility: default -->
      <element name="IsAccel.Str"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="NotifyApplicationUserInput">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="NotifyApplicationUserInput.Msg"><short/></element>
      <!-- function Visibility: default -->
      <element name="InitResourceComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="InitResourceComponent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="InitResourceComponent.Instance"><short/></element>
      <!-- argument Visibility: default -->
      <element name="InitResourceComponent.RootAncestor"><short/></element>
      <!-- function Visibility: default -->
      <element name="GetShortHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetShortHint.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="GetShortHint.Hint"><short/></element>
      <!-- function Visibility: default -->
      <element name="GetLongHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetLongHint.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="GetLongHint.Hint"><short/></element>
      <!-- variable Visibility: default -->
      <element name="Application">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="Screen">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="ExceptionObject">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="HintWindowClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function type Visibility: default -->
      <element name="TMessageBoxFunction">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMessageBoxFunction.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMessageBoxFunction.Text"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMessageBoxFunction.Caption"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMessageBoxFunction.Flags"><short/></element>
      <!-- variable Visibility: default -->
      <element name="MessageBoxFunction">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="FreeInterfaceObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="Register">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
    </module>
    <!-- Forms -->
  </package>
</fpdoc-descriptions>
