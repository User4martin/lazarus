<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
  ====================================================================
    LDockCtrl
  ====================================================================
-->
    <module name="LDockCtrl">
      <short>This unit contains visual components for docking and streaming</short>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Controls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Forms">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Menus">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLStrConsts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LDockCtrlEdit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LDockTree">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomLazControlDocker">
        <short>
          <var>TCustomLazControlDocker</var> - a component to connect a form to the TLazDockingManager</short>
        <descr>
          <p>
            <var>TCustomLazControlDocker</var> - a component to connect a form to the <var>TLazDockingManager</var>
          </p>
          <p>When the control gets visible TCustomLazControlDocker restores the layout.</p>
          <p>Before the control gets invisible, TCustomLazControlDocker saves the layout</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomLazDockingManager">
        <short>
          <var>TCustomLazDockingManager</var> - base class for <var>TLazDockingManager</var>, a class for managing docking controls</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLazDockingManager.FDockerCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLazDockingManager.FDockers">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLazDockingManager.FManager">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomLazDockingManager.GetDockers">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomLazDockingManager.GetDockers.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLazDockingManager.GetDockers.Index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLazDockingManager.Remove">
        <short>
          <var>Remove</var> - detaches any controls attached to the specified docker, then nullifies the docker</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLazDockingManager.Remove.Docker">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomLazDockingManager.Add">
        <short>
          <var>Add</var> - provided the specified Docker is of the correct type, sets up the control to use a docking manager and returns an integer pointer</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomLazDockingManager.Add.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLazDockingManager.Add.Docker">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomLazDockingManager.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomLazDockingManager</var>: calls inherited <var>Create</var> then sets up lists, managers and configurations</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLazDockingManager.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomLazDockingManager.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TCustomLazDockingManager</var>: frees dockers, managers and configs, then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomLazDockingManager.FindDockerByName">
        <short>
          <var>FindDockerByName</var> - returns the identity of a Control Docker given the Docker name</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomLazDockingManager.FindDockerByName.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLazDockingManager.FindDockerByName.ADockerName">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLazDockingManager.FindDockerByName.Ignore">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomLazDockingManager.CreateUniqueName">
        <short>
          <var>CreateUniqueName</var> - returns a unique name given a string name</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomLazDockingManager.CreateUniqueName.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLazDockingManager.CreateUniqueName.AName">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLazDockingManager.CreateUniqueName.Ignore">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLazDockingManager.Manager">
        <short>
          <var>Manager</var> - the <var>TAnchoredDockManager</var> for the current class</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLazDockingManager.DockerCount">
        <short>
          <var>DockerCount</var> - the number of dockers in the list</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLazDockingManager.Dockers">
        <short>
          <var>Dockers</var> - the indexed list of dockers</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLazDockingManager.Dockers.Index">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TLazDockingManager">
        <short>
          <var>TLazDockingManager</var> - class of <var>TCustomLazDockingManager</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomLazControlDocker">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLazControlDocker.FControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLazControlDocker.FDockerName">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLazControlDocker.FExtendPopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLazControlDocker.FLocalizedName">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLazControlDocker.FManager">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLazControlDocker.FPopupMenuItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomLazControlDocker.SetControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLazControlDocker.SetControl.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomLazControlDocker.SetDockerName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLazControlDocker.SetDockerName.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomLazControlDocker.SetExtendPopupMenu">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLazControlDocker.SetExtendPopupMenu.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomLazControlDocker.SetLocalizedName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLazControlDocker.SetLocalizedName.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomLazControlDocker.SetManager">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLazControlDocker.SetManager.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomLazControlDocker.PopupMenuItemClick">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLazControlDocker.PopupMenuItemClick.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLazControlDocker.UpdatePopupMenu">
        <short>
          <var>UpdatePopupMenu</var> - alters the popup menu to reflect changes</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLazControlDocker.Loaded">
        <short>
          <var>Loaded</var> - calls inherited method then calls <var>UpdatePopupMenu</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Loaded">TComponent.Loaded</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLazControlDocker.ShowDockingEditor">
        <short>
          <var>ShowDockingEditor</var> - makes a popup docking editor dialog appear</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomLazControlDocker.GetLocalizedName">
        <short>
          <var>GetLocalizedName</var> - returns a string with the localised name for the docker</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomLazControlDocker.GetLocalizedName.Result">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomLazControlDocker.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomLazControlDocker</var>: calls inherited <var>Create</var> then extends the popup menu</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLazControlDocker.Create.TheOwner">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLazControlDocker.Control">
        <short>The <var>Control</var> that is to be docked</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLazControlDocker.Manager">
        <short>The docking <var>Manager</var> that is to be used to dock the current control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLazControlDocker.ExtendPopupMenu">
        <short>
          <var>ExtendPopupMenu</var> -  True if the popup menuis to be extended</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLazControlDocker.PopupMenuItem">
        <short>
          <var>PopupMenuItem</var> - an item in the popup menu</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLazControlDocker.LocalizedName">
        <short>The <var>LocalizedName</var> of the current docker</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLazControlDocker.DockerName">
        <short>
          <var>DockerName</var> - the name of the current docker</short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TLazControlDocker">
        <short>
          <var>TLazControlDocker</var> - a component to connect a form to the <var>TLazDockingManager</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLazControlDocker.Control" link="#LCL.LDockCtrl.TCustomLazControlDocker.Control">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLazControlDocker.Manager" link="#LCL.LDockCtrl.TCustomLazControlDocker.Manager">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLazControlDocker.ExtendPopupMenu" link="#LCL.LDockCtrl.TCustomLazControlDocker.ExtendPopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLazControlDocker.DockerName" link="#LCL.LDockCtrl.TCustomLazControlDocker.DockerName">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="Register">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TLazDockConfigNode">
        <short>
          <var>TLazDockConfigNode</var> - a node to be configured in a docking control</short>
      </element>
      <element name="TLazDockConfigNode.Create">
        <short>
          <var>Create</var> - constructor for a new node given a parent node and an optional name for the new node</short>
      </element>
      <element name="TLazDockConfigNode.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TLazDocConfigNode</var>: frees parents and children, the calls inherited <var>Destroy</var>
        </short>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Destroy">TPersistent.Destroy</link>
        </seealso>
      </element>
      <element name="TLazDockConfigNode.Clear">
        <short>
          <var>Clear</var> - performs Free and Clear for all child nodes</short>
      </element>
      <element name="TLazDockConfigNode.Assign">
        <short>
          <var>Assign</var> - systematically copies sizes, anchors, titles and other details from <var>Source</var> to a new node.</short>
        <descr>
          <var>Assign</var> - systematically copies sizes, anchors, titles and other details from <var>Source</var> to a new node. If <var>Source</var> is of the wrong type, calls inherited <var>Assign</var>, which usually raises an exception</descr>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <element name="TLazDockConfigNode.FindByName">
        <short>
          <var>FindByName</var> - searches through a tree of nodes to find one that matches the given name</short>
      </element>
      <element name="TLazDockConfigNode.IndexOf">
        <short>
          <var>IndexOf</var> - returns the index value of the given string in the list of child nodes</short>
      </element>
      <element name="TLazDockConfigNode.GetScreenBounds">
        <short>
          <var>GetScreenBounds</var> - returns the bounds of the area occupied by the node, as screen coordinates</short>
      </element>
      <element name="TLazDockConfigNode.FindNeighbour">
        <short>
          <var>FindNeighbour</var> - returns the identity of the neighbouring node on the given side; optionally ignores splitters.</short>
      </element>
      <element name="TLazDockConfigNode.IsTheOnlyNeighbour">
        <short>
          <var>IsTheOnlyNeighbour</var> - returns True if the nominated node is the only neighbour on the specified side</short>
      </element>
      <element name="TLazDockConfigNode.SaveToConfig">
        <short>
          <var>SaveToConfig</var> - saves details of the configuration to a config file in the given Path</short>
      </element>
      <element name="TLazDockConfigNode.LoadFromConfig">
        <short>
          <var>LoadFromConfig</var> - loads configuration details from a file in the given path</short>
      </element>
      <element name="TLazDockConfigNode.GetPath">
        <short>
          <var>GetPath</var> - returns the path name for the configuration file relevant to the current node</short>
      </element>
      <element name="TLazDockConfigNode.WriteDebugReport">
        <short>
          <var>WriteDebugReport</var> - produces a formatted report with details of the node for which debugging is needed</short>
      </element>
      <element name="TLazDockConfigNode.DebugLayoutAsString">
        <short>
          <var>DebugLayoutAsString</var> - returns a string specifying the layout of the required debugging report</short>
      </element>
      <element name="TLazDockConfigNode.Bounds">
        <short>The <var>Bounds</var> of the current node</short>
      </element>
      <element name="TLazDockConfigNode.ClientBounds">
        <short>
          <var>ClientBounds</var> - the bounds of the node's clients</short>
      </element>
      <element name="TLazDockConfigNode.Parent">
        <short>The <var>Parent</var> of the current node</short>
      </element>
      <element name="TLazDockConfigNode.Sides">
        <short>The <var>Sides</var> of the node to which anchoring is to be performed</short>
      </element>
      <element name="TLazDockConfigNode.ChildCount">
        <short>
          <var>ChildCount</var> - the number of child nodes</short>
      </element>
      <element name="TLazDockConfigNode.Children">
        <short>
          <var>Children</var> - the child nodes in an indexed list</short>
      </element>
      <element name="TLazDockConfigNode.TheType">
        <short>
          <var>TheType</var> of node (see definition of <var>TLDConfigNodeType</var>)</short>
        <seealso>
          <link id="#LCL.LDockCtrl.TLDConfigNodeType">TLDConfigNodeType</link>
        </seealso>
      </element>
      <element name="TLazDockConfigNode.Name">
        <short>The <var>Name</var> of the node</short>
      </element>
      <element name="TLazDockConfigNode.WindowState">
        <short>
          <var>WindowState</var> - the state of the window in which the node is placed</short>
      </element>
      <element name="TAnchoredDockManager">
        <short>
          <var>TAnchoredDockManager</var> - a manager for anchored docking controls</short>
      </element>
      <element name="TAnchoredDockManager.DisableLayout">
        <short>
          <var>DisableLayout</var> - disables layout specifically for the given control; calls inherited method</short>
        <seealso>
          <link id="#LCL.LDockTree.TCustomAnchoredDockManager.DisableLayout">TCustomAnchoredDockManager.DisableLayout</link>
        </seealso>
      </element>
      <element name="TAnchoredDockManager.EnableLayout">
        <short>
          <var>EnableLayout</var> - enables layout specifically for the given control; calls inherited method</short>
        <seealso>
          <link id="#LCL.LDockTree.TCustomAnchoredDockManager.EnableLayout">TCustomAnchoredDockManager.EnableLayout</link>
        </seealso>
      </element>
      <element name="TAnchoredDockManager.Configs">
        <short>
          <var>Configs</var> - the configuration settings for the current control</short>
      </element>
      <element name="TLazDockerConfig">
        <short>
          <var>TLazDockerConfig</var> - a class containing a tree of nodes for configuring a named docker</short>
      </element>
      <element name="TLazDockerConfig.Create">
        <short>
          <var>Create</var> - constructor for <var>TLazDockerConfig</var>: sets up local variables to hold the docker name and a root node</short>
        <seealso>
          <link id="#rtl.System.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TLazDockerConfig.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TLazDockerConfig</var>: removes the root then calls inherited <var>Destroy</var>
        </short>
        <seealso>
          <link id="#rtl.System.TObject.Destroy">TObject.Destroy</link>
        </seealso>
      </element>
      <element name="TLazDockerConfig.WriteDebugReport">
        <short>
          <var>WriteDebugReport</var> - produces a nicely formatted debugging report</short>
      </element>
      <element name="TLazDockerConfig.DockerName">
        <short>
          <var>DockerName</var> - the name of the Docker to be configured</short>
      </element>
      <element name="TLazDockerConfig.Root">
        <short>The <var>Root</var> node of the configuration</short>
      </element>
      <element name="TCustomLazDockingManager.FindControlByDockerName">
        <short>
          <var>FindControlByDockerName</var> - returns the identity of a control given its docker name</short>
      </element>
      <element name="TCustomLazDockingManager.FindDockerByControl">
        <short>
          <var>FindDockerByControl</var> - returns the identity of a Control Docker given its control identity</short>
      </element>
      <element name="TCustomLazDockingManager.GetControlConfigName">
        <short>
          <var>GetControlConfigName</var> - returns a config name for the nominated control</short>
      </element>
      <element name="TCustomLazDockingManager.DisableLayout">
        <short>
          <var>DisableLayout</var> - finds whether the docker control exists then disables its layout</short>
      </element>
      <element name="TCustomLazDockingManager.EnableLayout">
        <short>
          <var>EnableLayout</var> - finds whether the docker control exists then enables its layout</short>
      </element>
      <element name="TCustomLazDockingManager.SaveToConfig">
        <short>
          <var>SaveToConfig</var> - saves details to a config storage file</short>
      </element>
      <element name="TCustomLazDockingManager.LoadFromConfig">
        <short>
          <var>LoadFromConfig</var> - loads details from a config storage file</short>
      </element>
      <element name="TCustomLazDockingManager.AddOrReplaceConfig">
        <short>
          <var>AddOrReplaceConfig</var> adds a new docker config, or replace if it already exists</short>
      </element>
      <element name="TCustomLazDockingManager.ClearConfigs">
        <short>
          <var>ClearConfigs</var> - free all the docking configurations</short>
      </element>
      <element name="TCustomLazDockingManager.GetConfigWithDockerName">
        <short>
          <var>GetConfigWithDockerName</var> - returns the configuration detail for the named docker</short>
      </element>
      <element name="TCustomLazDockingManager.CreateLayout">
        <short>
          <var>CreateLayout</var> - returns a layout configuration node for the named docker</short>
      </element>
      <element name="TCustomLazDockingManager.ConfigIsCompatible">
        <short>
          <var>ConfigIsCompatible</var> - checks that the nominated root node has a compatible configuration</short>
      </element>
      <element name="TCustomLazDockingManager.WriteDebugReport">
        <short>
          <var>WriteDebugReport</var> - produces a formatted report of status for debugging</short>
      </element>
      <element name="TCustomLazDockingManager.ConfigCount">
        <short>
          <var>ConfigCount</var> - the number of configuration nodes</short>
      </element>
      <element name="TCustomLazDockingManager.Configs">
        <short>
          <var>Configs</var> - the indexed list of config nodes</short>
      </element>
      <element name="TLCDMenuItem">
        <short>
          <var>TLCDMenuItem</var> - an item in a Control Docker Menu</short>
      </element>
      <element name="TLCDMenuItem.Menu">
        <short>
          <var>Menu</var> - a popup menu for this item</short>
      </element>
      <element name="TLCDMenuItem.Item">
        <short>
          <var>Item</var> - the actual contents of this menu item</short>
      </element>
      <element name="TCustomLazControlDocker.ControlVisibleChanging">
        <short>
          <var>ControlVisibleChanging</var> - debugging method to indicate if <var>Visible</var> state of the control is changing</short>
      </element>
      <element name="TCustomLazControlDocker.CreateFormAndDockWithSplitter">
        <short>
          <var>CreateFormAndDockWithSplitter</var> - add a splitter to Side and dock to it. Returns True if successful</short>
        <descr>
          <p>Add a splitter to Side and dock to it. For example:</p>
          <pre>Side=akLeft
      --------+      -------------+
          ---+|      ---+#+------+|
           A ||       A |#|      ||
          ---+|      ---+#|      ||
          ====|  -&gt;  ====#| Self ||
          ---+|      ---+#|      ||
           B ||       B |#|      ||
          ---+|      ---+#+------+|
      --------+      -------------+</pre>
          <p>If A has no parent, a TLazDockForm is created.</p>
          <p>To get space for Self, either A,B are shrunk
  and/or the parent of A,B is enlarged (including the grand parents of A,B)</p>
        </descr>
      </element>
      <element name="TCustomLazControlDocker.DockAsPage">
        <short>
          <var>DockAsPage</var> - dock as a page as specified in <var>Layout</var>. Returns True if successful</short>
        <descr>
          <p>
            <var>DockAsPage</var> - dock as a page as specified in <var>Layout</var>.</p>
          <p>Requirements: Parent in Layout is a <var>ldcntPage</var> and a parent control exists.</p>
        </descr>
      </element>
      <element name="TCustomLazControlDocker.FixControlBounds">
        <short>
          <var>FixControlBounds</var> - fix bounds after inserting AddedControl</short>
      </element>
      <element name="TCustomLazControlDocker.ShrinkNeighbourhood">
        <short>
          <var>ShrinkNeighbourhood</var> - shrink neighbour controls according to Layout</short>
      </element>
      <element name="TCustomLazControlDocker.FindPageNeighbours">
        <short>
          <var>FindPageNeighbours</var> - returns a list of the neighbour controls for the docker</short>
      </element>
      <element name="TCustomLazControlDocker.Notification">
        <short>
          <var>Notification</var> - calls inherited method, then performs specified operation depending on type of component, usually involving removal</short>
        <seealso>
          <link id="#rtl.Classes.TComponent.Notification">TComponent.Notification</link>
        </seealso>
      </element>
      <element name="TCustomLazControlDocker.FindLCDMenuItem">
        <short>
          <var>FindLCDMenuItem</var> - returns an item from the specified menu</short>
      </element>
      <element name="TCustomLazControlDocker.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TCustomLazControlDocker</var>: calls inherited <var>Destroy </var>and removes all associated controls</short>
        <seealso>
          <link id="#rtl.Classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>
      <element name="TCustomLazControlDocker.GetLayoutFromControl">
        <short>
          <var>GetLayoutFromControl</var> - returns a dock config node containing the control's layout</short>
      </element>
      <element name="TCustomLazControlDocker.SaveLayout">
        <short>
          <var>SaveLayout</var> - stores the layout, usually just before hiding a control or closing a form</short>
      </element>
      <element name="TCustomLazControlDocker.RestoreLayout">
        <short>
          <var>RestoreLayout</var> from its stored location, when the control is unhidden or the form is re-loaded</short>
      </element>
      <element name="TCustomLazControlDocker.DisableLayout">
        <short>
          <var>DisableLayout</var> and increment the count of locked layouts</short>
      </element>
      <element name="TCustomLazControlDocker.EnableLayout">
        <short>
          <var>EnableLayout</var> and decrement the count of locked layouts</short>
      </element>
      <element name="TCustomLazControlDocker.ControlIsDocked">
        <short>
          <var>ControlIsDocked</var>  - checks that the control and its parent actually exist and at least one of them is a dock form or a dock page</short>
      </element>
      <element name="TCustomLazControlDocker.GetControlName">
        <short>
          <var>GetControlName</var> - returns the string name of the specified control</short>
      </element>
      <element name="TCustomLazControlDocker.AddPopupMenu">
        <short>
          <var>AddPopupMenu</var> - if the menu does not yet exist, creates the structure and menu items for a popup menu</short>
      </element>
      <element name="TCustomLazControlDocker.RemovePopupMenu">
        <short>
          <var>RemovePopupMenu</var> - removes menu, usually during the process of removing the docking control</short>
      </element>
      <element name="TCustomLazControlDocker.Enabled">
        <short>
          <var>Enabled</var> - true if layout is to be automatically restored on show</short>
      </element>
      <element name="TCustomLazControlDocker.LayoutLock">
        <short>
          <var>LayoutLock</var> - the number of layouts that are locked</short>
      </element>
      <element name="TLazControlDocker.Enabled" link="#LCL.LDockCtrl.TCustomLazControlDocker.Enabled"/>
    </module>
    <!-- LDockCtrl -->
  </package>
</fpdoc-descriptions>
