<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
<package name="lcl">
<!--
  ====================================================================
    LCLPlatformDef
  ====================================================================
-->
<module name="LCLPlatformDef">
<short>Contains the non-GUI dependent parts of LCL Platform definition.</short>
<descr>
<file>lclplatformdef.pas</file> contains types, constants, variables and
routines used in non-GUI dependent parts of LCL Platform definition.
This file is part of the Lazarus Component Library (<b>LCL</b>).
</descr>

<element name="TLCLPlatform">
<short>Represents the platforms supported in the LCL.</short>
<descr>
</descr>
<seealso>
<link id="LCLPlatformDirNames"/>
<link id="TLCLPlatforms"/>
</seealso>
</element>
<element name="TLCLPlatform.lpGtk">
<short>GIMP ToolKit.</short>
</element>
<element name="TLCLPlatform.lpGtk2">
<short>GTK version 2.</short>
</element>
<element name="TLCLPlatform.lpGtk3">
<short>GTK version 3.</short>
</element>
<element name="TLCLPlatform.lpWin32">
<short>Windows API (formerly called Win32 API).</short>
</element>
<element name="TLCLPlatform.lpWinCE">
<short>Windows CE.</short>
</element>
<element name="TLCLPlatform.lpCarbon">
<short>MacOS Carbon API.</short>
</element>
<element name="TLCLPlatform.lpQT">
<short>QT version 4.</short>
</element>
<element name="TLCLPlatform.lpQt5">
<short>QT version 5.</short>
</element>
<element name="TLCLPlatform.lpfpGUI">
<short>FreePascal GUI.</short>
</element>
<element name="TLCLPlatform.lpNoGUI">
<short>No GUI.</short>
</element>
<element name="TLCLPlatform.lpCocoa">
<short>MacOS Cocoa API.</short>
</element>
<element name="TLCLPlatform.lpCustomDrawn">
<short>Custom-drawn.</short>
</element>
<element name="TLCLPlatform.lpMUI">
<short>Magic User Interface (MUI) for AmigaOS, AROS.</short>
</element>

<element name="TLCLPlatforms">
<short>Set type used to store TLCLPlatform value(s).</short>
<descr>
</descr>
<seealso>
<link id="TLCLPlatform"/>
</seealso>
</element>

<element name="DirNameToLCLPlatform">
<short>Gets the platform enumeration value for the specified directory name.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>
<element name="DirNameToLCLPlatform.Result">
<short>TLCLPlatform enumeration value for the given directory name.</short>
</element>
<element name="DirNameToLCLPlatform.ADirName">
<short>Directory name to convert to a TLCLPlatform enumeration value.</short>
</element>

<element name="GetBuildLCLWidgetType">
<short>Gets the value in the BuildLCLWidgetType variable.</short>
<descr>
<p>
Used in the <var>lazbuild</var> utility to get the target widgetset using the
platform defines.
</p>
</descr>
<seealso>
<link id="BuildLCLWidgetType"/>
</seealso>
</element>
<element name="GetBuildLCLWidgetType.Result">
<short>TLCLPlatform enumeration value for the platform.</short>
</element>

<element name="LCLPlatformDirNames">
<short>Array constant with the directory names for supported LCL platforms.</short>
<descr>
<p>
LCLPlatformDirNames is a array of Strings with directory names for the supported
LCL platforms. The directory names are relative to the './lcl/interfaces/' base path.
Values in the array are indexed by TLCLPlatform enumeration values. For example:
</p>
<code>
// var SDir, SName: String;

// SDir contains 'win32'
SDir := LCLPlatformDirNames[lpWin32];

// SName contains 'win32/win64'
SName := LCLPlatformDisplayNames[lpWin32];
</code>
<p>
Use LCLPlatformDisplayNames to get the display name for a given TLCLPlatform
enumeration value.
</p>
</descr>
<seealso>
<link id="LCLPlatformDisplayNames"/>
</seealso>
</element>

<element name="LCLPlatformDisplayNames">
<short>Array constant with the display names for supported LCL platforms.</short>
<descr>
  <p>
  LCLPlatformDisplayNames is a array of Strings with display names for the supported
  LCL platforms. Values in the array are indexed by TLCLPlatform enumeration values.
  For example:
  </p>
  <code>
  // var SDir, SName: String;

  // SDir contains 'win32'
  SDir := LCLPlatformDirNames[lpWin32];

  // SName contains 'win32/win64'
  SName := LCLPlatformDisplayNames[lpWin32];
  </code>
  <p>
  Use LCLPlatformDirNames to get the directory name for a given TLCLPlatform
  enumeration value.
  </p>
</descr>
<seealso>
  <link id="LCLPlatformDirNames"/>
</seealso>
</element>

<element name="BuildLCLWidgetType">
<short>Gets the TLCLPlatform enumeration value for the current platform.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

</module>
<!-- LCLPlatformDef -->
</package>
</fpdoc-descriptions>
