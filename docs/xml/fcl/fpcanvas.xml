<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="fcl">
    <!--
  ====================================================================
    FPCanvas
  ====================================================================
-->
    <module name="FPCanvas">
      <short/>
      <descr/>
      <!-- constant Visibility: default -->
      <element name="PatternBitCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- class Visibility: default -->
      <element name="TFPCanvasException">
        <short>
          <var>TFPCanvasException</var> - exception handler for FreePascal base  Canvas class</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- class Visibility: default -->
      <element name="TFPPenException">
        <short>
          <var>TFPPenException</var> - exception handler for FreePascal base Pen class</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- class Visibility: default -->
      <element name="TFPBrushException">
        <short>
          <var>TFPBrushException</var> - exception handler for FreePascal base Brush class</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- class Visibility: default -->
      <element name="TFPFontException">
        <short>
          <var>TFPFontException</var> exception handler for FreePascal base Font class</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- class Visibility: default -->
      <element name="TFPCustomCanvas">
        <short>
          <var>TFPCustomCanvas</var> - FreePascal base class for Canvas</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- class Visibility: default -->
      <element name="TFPCanvasHelper">
        <short>
          <var>TFPCanvasHelper</var> - FreePascal base class providing utilities for drawing and painting canvases</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCanvasHelper.FDelayAllocate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCanvasHelper.FFPColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCanvasHelper.FAllocated">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCanvasHelper.FFixedCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCanvasHelper.FCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCanvasHelper.FFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCanvasHelper.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCanvasHelper.FOnChanging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFPCanvasHelper.NotifyCanvas">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPCanvasHelper.GetAllocated">
        <short>
          <var>GetAllocated</var> returns True if the canvas is allocated (assigned)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCanvasHelper.GetAllocated.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCanvasHelper.SetFlags">
        <short>
          <var>SetFlags</var> - stores specified boolean values in index-nominated flags</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCanvasHelper.SetFlags.index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCanvasHelper.SetFlags.AValue">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPCanvasHelper.GetFlags">
        <short>
          <var>GetFlags</var> - returns the boolean value of the specified flag</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCanvasHelper.GetFlags.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCanvasHelper.GetFlags.index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCanvasHelper.CheckAllocated">
        <short>
          <var>CheckAllocated</var> - check whether the canvas is allocated, and if <var>ValueNeeded</var> if True, raises an exception if not allocated</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCanvasHelper.CheckAllocated.ValueNeeded">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCanvasHelper.SetFixedCanvas">
        <short>
          <var>SetFixedCanvas</var> - specifies whether the canvas is to be fixed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCanvasHelper.SetFixedCanvas.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCanvasHelper.DoAllocateResources">
        <short>
          <var>DoAllocateResources</var> - procedure for allocating resources</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCanvasHelper.DoDeAllocateResources">
        <short>
          <var>DoDeAllocateResources</var> - procedure for deallocationg resources</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCanvasHelper.DoCopyProps">
        <short>
          <var>DoCopyProps</var> - copies properties from another Canvas Helper</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCanvasHelper.DoCopyProps.From">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCanvasHelper.SetFPColor">
        <short>
          <var>SetFPColor</var> - specify the colour using the FreePascal list</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCanvasHelper.SetFPColor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCanvasHelper.Changing">
        <short>
          <var>Changing</var> - software emulation of a call to the <var>OnChanging</var> event</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCanvasHelper.Changed">
        <short>
          <var>Changed</var> - software emulation of a call to the <var>OnChange</var> event</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCanvasHelper.Lock">
        <short>
          <var>Lock</var> the canvas so it can't be changed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCanvasHelper.UnLock">
        <short>
          <var>UnLock</var> a previously locked canvas</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TFPCanvasHelper.Create" link="#rtl.System.TObject.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TFPCanvasHelper.Destroy" link="#rtl.Classes.TPersistent.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCanvasHelper.AllocateResources">
        <short>
          <var>AllocateResources</var> - prepare helper for use</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCanvasHelper.AllocateResources.ACanvas">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCanvasHelper.AllocateResources.CanDelay">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCanvasHelper.DeallocateResources">
        <short>
          <var>DeallocateResources</var> - free all resources used by this helper</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCanvasHelper.Allocated">
        <short>If True, then helper has been <var>Allocated</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCanvasHelper.FixedCanvas">
        <short>
          <var>FixedCanvas</var> - properties cannot be changed when allocated</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCanvasHelper.Canvas">
        <short>
          <var>Canvas</var> for which the helper is allocated</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCanvasHelper.FPColor">
        <short>
          <var>FPColor</var> - colour of the helper</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCanvasHelper.OnChanging">
        <short>
          <var>OnChanging</var> - event handler while change is occurring</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCanvasHelper.OnChange">
        <short>
          <var>OnChange</var> - event handler when a change has occurred</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCanvasHelper.DelayAllocate">
        <short>
          <var>DelayAllocate</var> - if True, then allocation is to be delayed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- class Visibility: default -->
      <element name="TFPCustomFont">
        <short>
          <var>TFPCustomFont</var> - FreePascal base class for Fonts</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomFont.FName">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomFont.FSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomFont.DoCopyProps" link="#fcl.FPCanvas.TFPCanvasHelper.DoCopyProps">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomFont.DoCopyProps.From">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomFont.SetName">
        <short>
          <var>SetName</var> - specify the name of the Font</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomFont.SetName.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomFont.SetSize">
        <short>
          <var>SetSize</var> - specify the size for the Font</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomFont.SetSize.AValue">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TFPCustomFont.CopyFont">
        <short>
          <var>CopyFont</var> - returns a copy of the font with all properties the same, but not allocated</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomFont.CopyFont.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomFont.GetTextSize">
        <short>
          <var>GetTextSize</var> - finds the size (w: width, h: height) of the specified text in the current font</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomFont.GetTextSize.text">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomFont.GetTextSize.w">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomFont.GetTextSize.h">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TFPCustomFont.GetTextHeight">
        <short>
          <var>GetTextHeight</var> - returns the height of the specified text</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomFont.GetTextHeight.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomFont.GetTextHeight.text">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TFPCustomFont.GetTextWidth">
        <short>
          <var>GetTextWidth</var> - returns the width of the specified text</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomFont.GetTextWidth.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomFont.GetTextWidth.text">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomFont.Name">
        <short>The <var>Name</var> of the current Font</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomFont.Size">
        <short>The <var>Size</var> of the current Font</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomFont.Bold">
        <short>Is the Font <var>Bold</var>?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomFont.Italic">
        <short>Is the Font <var>Italic</var>?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomFont.Underline">
        <short>Is the Font <var>Underline</var>?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomFont.StrikeTrough">
        <short>Is the Font <var>StrikeTrough</var>?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TFPCustomFontClass">
        <short>
          <var>TFPCustomFontClass</var> - class of <var>TFPCustomFont</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TFPPenStyle">
        <short>
          <var>TFPPenStyle</var> - Solid, Dash, Dot, DashDot, DashDotDot, insideFrame, Pattern, Clear</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenStyle.psSolid">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenStyle.psDash">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenStyle.psDot">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenStyle.psDashDot">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenStyle.psDashDotDot">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenStyle.psinsideFrame">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenStyle.psPattern">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenStyle.psClear">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TFPPenStyleSet">
        <short>
          <var>TFPPenStyleSet</var> - set of <var>TFPPenStyle</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TFPPenMode">
        <short>
          <var>TFPPenMode</var> - Black, White, Nop, Not, Copy, NotCopy, MergePenNot, MaskPenNot, MergeNotPen, MaskNotPen, Merge, NotMerge, Mask, NotMask, Xor, NotXor</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenMode.pmBlack">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenMode.pmWhite">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenMode.pmNop">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenMode.pmNot">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenMode.pmCopy">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenMode.pmNotCopy">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenMode.pmMergePenNot">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenMode.pmMaskPenNot">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenMode.pmMergeNotPen">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenMode.pmMaskNotPen">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenMode.pmMerge">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenMode.pmNotMerge">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenMode.pmMask">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenMode.pmNotMask">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenMode.pmXor">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPPenMode.pmNotXor">
        <short/>
      </element>
      <!-- alias type Visibility: default -->
      <element name="TPenPattern">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- class Visibility: default -->
      <element name="TFPCustomPen">
        <short>
          <var>TFPCustomPen</var> - FreePascal base class for Pens</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomPen.FStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomPen.FWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomPen.FMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomPen.FPattern">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomPen.DoCopyProps" link="#fcl.FPCanvas.TFPCanvasHelper.DoCopyProps">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomPen.DoCopyProps.From">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomPen.SetMode">
        <short>
          <var>SetMode</var> specifies Pen Mode</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomPen.SetMode.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomPen.SetWidth">
        <short>
          <var>SetWidth</var> - specifies width of the Pen</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomPen.SetWidth.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomPen.SetStyle">
        <short>
          <var>SetStyle</var> - specifies style for the Pen</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomPen.SetStyle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomPen.SetPattern">
        <short>
          <var>SetPattern</var> - specifies the pattern for the Pen</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomPen.SetPattern.AValue">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TFPCustomPen.CopyPen">
        <short>
          <var>CopyPen</var> - returns a copy of the pen with all properties the same, but not allocated</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomPen.CopyPen.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomPen.Style">
        <short>The <var>Style</var> of the Pen</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomPen.Width">
        <short>The <var>Width</var> in pixels of the current <var>Pen</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomPen.Mode">
        <short>The <var>Mode</var> of the Pen</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomPen.Pattern">
        <short>The <var>Pattern</var> for the Pen</short>
        <descr/>
        <seealso/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TFPCustomPenClass">
        <short>
          <var>TFPCustomPenClass</var> - class of <var>TFPCustomPen</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TFPBrushStyle">
        <short>
          <var>TFPBrushStyle</var> - Solid, Clear, Horizontal, Vertical, FDiagonal, BDiagonal, Cross, DiagCross, Image, Pattern</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPBrushStyle.bsSolid">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPBrushStyle.bsClear">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPBrushStyle.bsHorizontal">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPBrushStyle.bsVertical">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPBrushStyle.bsFDiagonal">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPBrushStyle.bsBDiagonal">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPBrushStyle.bsCross">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPBrushStyle.bsDiagCross">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPBrushStyle.bsImage">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFPBrushStyle.bsPattern">
        <short/>
      </element>
      <!-- array type Visibility: default -->
      <element name="TBrushPattern">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- pointer type Visibility: default -->
      <element name="PBrushPattern">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- class Visibility: default -->
      <element name="TFPCustomBrush">
        <short>
          <var>TFPCustomBrush</var> - FreePascal base class for Brushes</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomBrush.FStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomBrush.FImage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomBrush.FPattern">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomBrush.SetStyle">
        <short>
          <var>SetStyle</var> - specifies the style for the Brush</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomBrush.SetStyle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomBrush.SetImage">
        <short>
          <var>SetImage</var> - specifies the Image for use with the Brush (eg if BrushStyle is <var>bsImage</var>)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomBrush.SetImage.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomBrush.DoCopyProps" link="#fcl.FPCanvas.TFPCanvasHelper.DoCopyProps">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomBrush.DoCopyProps.From">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TFPCustomBrush.CopyBrush">
        <short>
          <var>CopyBrush</var> - returns a copy of the brush with all properties the same, but not allocated</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomBrush.CopyBrush.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomBrush.Style">
        <short>The <var>Style</var> for the current Brush</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomBrush.Image">
        <short>The <var>Image</var> to be used in the Brush (if Style is <var>bsImage</var>)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomBrush.Pattern">
        <short>The <var>Pattern</var> to use for the Brush (if Style is <var>bsPattern</var>)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TFPCustomBrushClass">
        <short>
          <var>TFPCustomBrushClass</var> - class of <var>TFPCustomBrush</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- class Visibility: default -->
      <element name="TFPCustomInterpolation">
        <short>
          <var>TFPCustomInterpolation</var> - FreePascal base class for interpolations while drawing in unspecified regions between specified points</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomInterpolation.fcanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomInterpolation.fimage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomInterpolation.Initialize">
        <short>
          <var>Initialize</var> - the image ready to apply interpolation</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomInterpolation.Initialize.aimage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomInterpolation.Initialize.acanvas">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomInterpolation.Execute">
        <short>
          <var>Execute</var> the interpolation</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomInterpolation.Execute.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomInterpolation.Execute.y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomInterpolation.Execute.w">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomInterpolation.Execute.h">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomInterpolation.Canvas">
        <short>The <var>Canvas</var> on which the interpolation is to be applied</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomInterpolation.Image">
        <short>The <var>Image</var> to which the interpolation is to be applied</short>
        <descr/>
        <seealso/>
      </element>
      <!-- class Visibility: default -->
      <element name="TFPBaseInterpolation">
        <short>
          <var>TFPBaseInterpolation</var> - the default interpolation to be applied if no other is specified</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPBaseInterpolation.xfactor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPBaseInterpolation.yfactor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPBaseInterpolation.xsupport">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPBaseInterpolation.ysupport">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPBaseInterpolation.tempimage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFPBaseInterpolation.Horizontal">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPBaseInterpolation.Horizontal.width">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFPBaseInterpolation.vertical">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPBaseInterpolation.vertical.dx">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPBaseInterpolation.vertical.dy">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPBaseInterpolation.vertical.width">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPBaseInterpolation.vertical.height">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPBaseInterpolation.Execute" link="#fcl.FPCanvas.TFPCustomInterpolation.Execute">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPBaseInterpolation.Execute.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPBaseInterpolation.Execute.y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPBaseInterpolation.Execute.w">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPBaseInterpolation.Execute.h">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPBaseInterpolation.Filter">
        <short>
          <var>Filter</var> factor to be used in interpolating</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPBaseInterpolation.Filter.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPBaseInterpolation.Filter.x">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPBaseInterpolation.MaxSupport">
        <short>
          <var>MaxSupport</var> factor for interpolation</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPBaseInterpolation.MaxSupport.Result">
        <short/>
      </element>
      <!-- class Visibility: default -->
      <element name="TMitchelInterpolation">
        <short>
          <var>TMitchelInterpolation</var> - one possible algorithm for interpolation</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TMitchelInterpolation.Filter" link="#fcl.FPCanvas.TFPBaseInterpolation.Filter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMitchelInterpolation.Filter.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMitchelInterpolation.Filter.x">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TMitchelInterpolation.MaxSupport" link="#fcl.FPCanvas.TFPBaseInterpolation.MaxSupport">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMitchelInterpolation.MaxSupport.Result">
        <short/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomCanvas.FClipping">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomCanvas.FManageResources">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomCanvas.FRemovingHelpers">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomCanvas.FDefaultFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomCanvas.FFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomCanvas.FDefaultBrush">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomCanvas.FBrush">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomCanvas.FDefaultPen">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomCanvas.FPen">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomCanvas.FPenPos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomCanvas.FClipRect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomCanvas.FHelpers">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomCanvas.FLocks">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFPCustomCanvas.FInterpolation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TFPCustomCanvas.AllowFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.AllowFont.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.AllowFont.AFont">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TFPCustomCanvas.AllowBrush">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.AllowBrush.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.AllowBrush.ABrush">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TFPCustomCanvas.AllowPen">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.AllowPen.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.AllowPen.APen">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TFPCustomCanvas.CreateDefaultFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.CreateDefaultFont.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TFPCustomCanvas.CreateDefaultPen">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.CreateDefaultPen.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TFPCustomCanvas.CreateDefaultBrush">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.CreateDefaultBrush.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFPCustomCanvas.RemoveHelpers">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TFPCustomCanvas.GetFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.GetFont.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TFPCustomCanvas.GetBrush">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.GetBrush.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TFPCustomCanvas.GetPen">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.GetPen.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPCustomCanvas.DoCreateDefaultFont">
        <short>
          <var>DoCreateDefaultFont</var> - returns a newly created default Font</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.DoCreateDefaultFont.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPCustomCanvas.DoCreateDefaultPen">
        <short>
          <var>DoCreateDefaultPen</var> - returns a newly created default Pen</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.DoCreateDefaultPen.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPCustomCanvas.DoCreateDefaultBrush">
        <short>
          <var>DoCreateDefaultBrush</var> - returns a newly created default Brush</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.DoCreateDefaultBrush.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.SetFont">
        <short>
          <var>SetFont</var> - specifies the Font to use</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.SetFont.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.SetBrush">
        <short>
          <var>SetBrush</var> - specifies the Brush to use</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.SetBrush.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.SetPen">
        <short>
          <var>SetPen</var> - specifies the Pen to use</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.SetPen.AValue">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPCustomCanvas.DoAllowFont">
        <short>
          <var>DoAllowFont</var> - returns True if specified Font is valid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.DoAllowFont.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoAllowFont.AFont">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPCustomCanvas.DoAllowPen">
        <short>
          <var>DoAllowPen</var> - returns True if specified Pen is valid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.DoAllowPen.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoAllowPen.APen">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPCustomCanvas.DoAllowBrush">
        <short>
          <var>DoAllowBrush</var> - returns True if specified Brush is valid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.DoAllowBrush.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoAllowBrush.ABrush">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.SetColor">
        <short>
          <var>SetColor</var> - specifies colour at the given location</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.SetColor.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.SetColor.y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.SetColor.Value">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPCustomCanvas.GetColor">
        <short>
          <var>GetColor</var> - finds the colour at the given location</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.GetColor.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.GetColor.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.GetColor.y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.SetHeight">
        <short>
          <var>SetHeight</var> -sspecifies Canvas height</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.SetHeight.AValue">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPCustomCanvas.GetHeight">
        <short>
          <var>GetHeight</var> - returns the height of the Canvas</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.GetHeight.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.SetWidth">
        <short>
          <var>SetWidth</var> - specifies the width of the Canvas</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.SetWidth.AValue">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPCustomCanvas.GetWidth">
        <short>
          <var>GetWidth</var> - returns the Width</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.GetWidth.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPCustomCanvas.GetClipRect">
        <short>
          <var>GetClipRect</var> - returns the coordinates of the rectangle used for clipping</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.GetClipRect.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.SetClipRect">
        <short>
          <var>SetClipRect</var> - specifies the rectangle to use for clipping</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.SetClipRect.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.SetPenPos">
        <short>
          <var>SetPenPos</var> - specifies the position of the Pen</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.SetPenPos.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoLockCanvas">
        <short>
          <var>DoLockCanvas</var> - method for locking the Canvas, making it impossible to change</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoUnlockCanvas">
        <short>
          <var>DoUnlockCanvas</var> - method for unlocking a previously locked Canvas</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoTextOut">
        <short>
          <var>DoTextOut</var> - method for writing given text out at specified location</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoTextOut.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoTextOut.y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoTextOut.text">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoGetTextSize">
        <short>
          <var>DoGetTextSize</var> - method for finding the size (stored as w: width, h: height) of the given text </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoGetTextSize.text">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoGetTextSize.w">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoGetTextSize.h">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPCustomCanvas.DoGetTextHeight">
        <short>
          <var>DoGetTextHeight</var> - returns the height of the given text</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.DoGetTextHeight.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoGetTextHeight.text">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPCustomCanvas.DoGetTextWidth">
        <short>
          <var>DoGetTextWidth</var> - returns the width of the given text</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.DoGetTextWidth.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoGetTextWidth.text">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoRectangle">
        <short>
          <var>DoRectangle</var> - method for drawing a rectangle in the given position</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoRectangle.Bounds">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoRectangleFill">
        <short>
          <var>DoRectangleFill</var> - method for filling a rectagle in the given location</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoRectangleFill.Bounds">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoRectangleAndFill">
        <short>
          <var>DoRectangleAndFill</var> - method for drawing a rectangle and filling it at the given location</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoRectangleAndFill.Bounds">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoEllipseFill">
        <short>
          <var>DoEllipseFill</var> - method for filing an ellipse at the given location</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoEllipseFill.Bounds">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoEllipse">
        <short>
          <var>DoEllipse</var> - method for drawing an ellipse at the given location</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoEllipse.Bounds">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoEllipseAndFill">
        <short>
          <var>DoEllipseAndFill</var> - method for drawing an ellipse and filling it at the given location</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoEllipseAndFill.Bounds">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoPolygonFill">
        <short>
          <var>DoPolygonFill</var> - method for filling a polygon at the given location (using supplied array of points)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoPolygonFill.points">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoPolygon">
        <short>
          <var>DoPolygon</var> - method for drawing a polygon using the given array of points</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoPolygon.points">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoPolygonAndFill">
        <short>
          <var>DoPolygonAndFill</var> - method for drawing a polygon and filling it using the given array of points</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoPolygonAndFill.points">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoPolyline">
        <short>
          <var>DoPolyline</var> - method for drawing a  PolyLine uing the given array of points</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoPolyline.points">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoFloodFill">
        <short>
          <var>DoFloodFill</var> - method for Flood-Filling an area strarting at the given location</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoFloodFill.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoFloodFill.y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoMoveTo">
        <short>
          <var>DoMoveTo</var> - method to move the drawing cursor to the specified point</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoMoveTo.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoMoveTo.y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoLineTo">
        <short>
          <var>DoLineTo</var> - method for drawing a line between the current cursor position and the specified point</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoLineTo.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoLineTo.y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoLine">
        <short>
          <var>DoLine</var> - method for drawing a line between two specified points</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoLine.x1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoLine.y1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoLine.x2">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoLine.y2">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoCopyRect">
        <short>
          <var>DoCopyRect</var> - method to copy the source rectangle <var>SourceRect</var> to the specified position on another Canvas</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoCopyRect.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoCopyRect.y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoCopyRect.canvas">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoCopyRect.SourceRect">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.DoDraw">
        <short>
          <var>DoDraw</var> - method to draw the nominated Image at the specified location</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoDraw.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoDraw.y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.DoDraw.image">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.CheckHelper">
        <short>
          <var>CheckHelper</var> - method to ensure that a valid Helper has been called</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.CheckHelper.AHelper">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomCanvas.AddHelper">
        <short>
          <var>AddHelper</var> - method to add a helper to the list</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.AddHelper.AHelper">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TFPCustomCanvas.create" link="#rtl.System.TObject.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TFPCustomCanvas.destroy" link="#rtl.Classes.TPersistent.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.LockCanvas">
        <short>
          <var>LockCanvas</var>, ensuring no changes can be made</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.UnlockCanvas">
        <short>
          <var>UnlockCanvas</var> - frees a previously locked Canvas</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TFPCustomCanvas.Locked">
        <short>Returns True if Canvas is <var>Locked</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.Locked.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TFPCustomCanvas.CreateFont">
        <short>
          <var>CreateFont</var> - returns a Font that has been created</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.CreateFont.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TFPCustomCanvas.CreatePen">
        <short>
          <var>CreatePen</var> - returns a Pen that has been created</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.CreatePen.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TFPCustomCanvas.CreateBrush">
        <short>
          <var>CreateBrush</var> - returns a Brush that has been created</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.CreateBrush.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.TextOut">
        <short>Writes the <var>Text</var> string at the position <var>X, Y</var> on the canvas and leaves the pen at the end of the text</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.TextOut.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.TextOut.y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.TextOut.text">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.GetTextSize">
        <short>
          <var>GetTextSize</var> - finds the size (stored as w: width, h: height) of the specified text</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.GetTextSize.text">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.GetTextSize.w">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.GetTextSize.h">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TFPCustomCanvas.GetTextHeight">
        <short>
          <var>GetTextHeight</var> - returns height of the specified text</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.GetTextHeight.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.GetTextHeight.text">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TFPCustomCanvas.GetTextWidth">
        <short>
          <var>GetTextWidth</var> - returns width of the specified text</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomCanvas.GetTextWidth.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.GetTextWidth.text">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.Ellipse">
        <short>
          <var>Ellipse</var> - method to draw an ellipse to fit the given rectangle</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Ellipse.Bounds">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Ellipse.left">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Ellipse.top">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Ellipse.right">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Ellipse.bottom">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.EllipseC">
        <short>
          <var>EllipseC</var> - method to draw an ellipse given starting coordinates and radii for x- and y- directions</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.EllipseC.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.EllipseC.y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.EllipseC.rx">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.EllipseC.ry">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.Polygon">
        <short>Method to draw a <var>Polygon</var>, ie a closed figure with the last point joined to the first</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Polygon.points">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.Polyline">
        <short>Method to draw a <var>Polyline</var>, ie a figure connecting the points in sequence, but not necessarily producing a closed figure</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Polyline.points">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.Rectangle">
        <short>Method to draw a <var>Rectangle</var> within the specified bounds, or given the limiting coordinates</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Rectangle.Bounds">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Rectangle.left">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Rectangle.top">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Rectangle.right">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Rectangle.bottom">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.FloodFill">
        <short>Method to <var>FloodFill</var> an area with colour, starting at the given point</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.FloodFill.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.FloodFill.y">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.Clear">
        <short>Method to <var>Clear</var> the Canvas</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.MoveTo" link="FPCanvas.TFPCustomCanvas.MoveTo">
        <short>Moves cursor to new position <var>X1, Y1</var> without drawing anything</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.MoveTo.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.MoveTo.y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.MoveTo.p">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.LineTo">
        <short>
          <var>LineTo</var> - draw a line between the current Pen position and the specified point</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.LineTo.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.LineTo.y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.LineTo.p">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.Line">
        <short>Draw a <var>Line</var> between the first and second points</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Line.x1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Line.y1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Line.x2">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Line.y2">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Line.p1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Line.p2">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Line.points">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.CopyRect">
        <short>
          <var>CopyRect</var> - copies a rectangle from <var>SourceRect</var> to the specified position on a nominated Canvas</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.CopyRect.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.CopyRect.y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.CopyRect.canvas">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.CopyRect.SourceRect">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.Draw">
        <short>
          <var>Draw</var> the nominated Image at the specified location</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Draw.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Draw.y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Draw.image">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.StretchDraw">
        <short>
          <var>StretchDraw</var> - steretch out the image being drawn to fit the supplied location and size</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.StretchDraw.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.StretchDraw.y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.StretchDraw.w">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.StretchDraw.h">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.StretchDraw.source">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomCanvas.Erase">
        <short>
          <var>Erase</var> - clear away the drawing</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomCanvas.Font">
        <short>The <var>Font</var> to be used for text in this Canvas</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomCanvas.Pen">
        <short>The <var>Pen</var> to be used for writing in this Canvas</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomCanvas.Brush">
        <short>The <var>Brush</var> for the current Canvas</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomCanvas.Interpolation">
        <short>The <var>Interpolation</var> algorithm to be used for connecting the indeterminate areas between specified points in an Image</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomCanvas.Colors">
        <short>The <var>Colors</var> to be used for this Canvas</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Colors.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomCanvas.Colors.y">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomCanvas.ClipRect">
        <short>
          <var>ClipRect</var> - the rectangle to be used for clipping</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomCanvas.Clipping">
        <short>If True, then <var>Clipping</var>is being applied to images on this Canvas</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomCanvas.PenPos">
        <short>
          <var>PenPos</var> - the current position of the Pen</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomCanvas.Height">
        <short>The <var>Height</var> of the Canvas</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomCanvas.Width">
        <short>The <var>Width</var> of the Canvas</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFPCustomCanvas.ManageResources">
        <short>
          <var>ManageResources</var> - if True, then resource management is being used</short>
        <descr/>
        <seealso/>
      </element>
      <!-- class Visibility: default -->
      <element name="TFPCustomDrawFont">
        <short>
          <var>TFPCustomDrawFont</var> - base class for drawing fonts</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFPCustomDrawFont.DrawText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawFont.DrawText.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawFont.DrawText.y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawFont.DrawText.text">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFPCustomDrawFont.GetTextSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawFont.GetTextSize.text">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawFont.GetTextSize.w">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawFont.GetTextSize.h">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TFPCustomDrawFont.GetTextHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomDrawFont.GetTextHeight.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawFont.GetTextHeight.text">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TFPCustomDrawFont.GetTextWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomDrawFont.GetTextWidth.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawFont.GetTextWidth.text">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomDrawFont.DoDrawText">
        <short>
          <var>DoDrawText</var> - method for drawing text</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawFont.DoDrawText.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawFont.DoDrawText.y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawFont.DoDrawText.text">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomDrawFont.DoGetTextSize">
        <short>
          <var>DoGetTextSize</var> - method for finding size of text</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawFont.DoGetTextSize.text">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawFont.DoGetTextSize.w">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawFont.DoGetTextSize.h">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPCustomDrawFont.DoGetTextHeight">
        <short>
          <var>DoGetTextHeight</var> - returns height of text</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomDrawFont.DoGetTextHeight.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawFont.DoGetTextHeight.text">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFPCustomDrawFont.DoGetTextWidth">
        <short>
          <var>DoGetTextWidth</var> - returns width of text</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPCustomDrawFont.DoGetTextWidth.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawFont.DoGetTextWidth.text">
        <short/>
      </element>
      <!-- class Visibility: default -->
      <element name="TFPEmptyFont">
        <short>
          <var>TFPEmptyFont</var> - dummy class for empty font</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- class Visibility: default -->
      <element name="TFPCustomDrawPen">
        <short>
          <var>TFPCustomDrawPen</var> - base class for pen used for drawing figures</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFPCustomDrawPen.DrawLine">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DrawLine.x1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DrawLine.y1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DrawLine.x2">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DrawLine.y2">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFPCustomDrawPen.Polyline">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.Polyline.points">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.Polyline.close">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFPCustomDrawPen.Ellipse">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.Ellipse.left">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.Ellipse.top">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.Ellipse.right">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.Ellipse.bottom">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFPCustomDrawPen.Rectangle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.Rectangle.left">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.Rectangle.top">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.Rectangle.right">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.Rectangle.bottom">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomDrawPen.DoDrawLine">
        <short>
          <var>DoDrawLine</var> - draw a line from first to second point</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DoDrawLine.x1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DoDrawLine.y1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DoDrawLine.x2">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DoDrawLine.y2">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomDrawPen.DoPolyline">
        <short>
          <var>DoPolyline</var> -  draw a Polyline connecting points of the array in sequence, and closing the figure if <var>Close</var> is True</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DoPolyline.points">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DoPolyline.close">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomDrawPen.DoEllipse">
        <short>
          <var>DoEllipse</var> - draws an ellipse within the specified space</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DoEllipse.left">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DoEllipse.top">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DoEllipse.right">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DoEllipse.bottom">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFPCustomDrawPen.DoRectangle">
        <short>
          <var>DoRectangle</var> - draws a rectangle with the given coordinates</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DoRectangle.left">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DoRectangle.top">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DoRectangle.right">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawPen.DoRectangle.bottom">
        <short/>
      </element>
      <!-- class Visibility: default -->
      <element name="TFPEmptyPen">
        <short>
          <var>TFPEmptyPen</var> - dummy class for empty pen</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- class Visibility: default -->
      <element name="TFPCustomDrawBrush">
        <short>
          <var>TFPCustomDrawBrush</var> - base class for brush used for drawing</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFPCustomDrawBrush.Rectangle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.Rectangle.left">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.Rectangle.top">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.Rectangle.right">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.Rectangle.bottom">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFPCustomDrawBrush.FloodFill">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.FloodFill.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.FloodFill.y">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFPCustomDrawBrush.Ellipse">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.Ellipse.left">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.Ellipse.top">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.Ellipse.right">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.Ellipse.bottom">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFPCustomDrawBrush.Polygon">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.Polygon.points">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomDrawBrush.DoRectangle">
        <short>
          <var>DoRectangle</var> - draws a rectangle within the given bounds</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.DoRectangle.left">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.DoRectangle.top">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.DoRectangle.right">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.DoRectangle.bottom">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomDrawBrush.DoEllipse">
        <short>
          <var>DoEllipse</var> - draws an elipse to fit the given bounds</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.DoEllipse.left">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.DoEllipse.top">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.DoEllipse.right">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.DoEllipse.bottom">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomDrawBrush.DoFloodFill">
        <short>
          <var>DoFloodFill</var> - Fllod-Fill an area with colour, starting at the given point</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.DoFloodFill.x">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.DoFloodFill.y">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFPCustomDrawBrush.DoPolygon">
        <short>
          <var>DoPolygon</var> - produce a closed Polygon using the given array of points</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPCustomDrawBrush.DoPolygon.points">
        <short/>
      </element>
      <!-- class Visibility: default -->
      <element name="TFPEmptyBrush">
        <short>
          <var>TFPEmptyBrush</var> - dummy class for empty brush</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="DecRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DecRect.rect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DecRect.delta">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="IncRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="IncRect.rect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="IncRect.delta">
        <short/>
      </element>
    </module>
    <!-- FPCanvas -->
  </package>
</fpdoc-descriptions>
